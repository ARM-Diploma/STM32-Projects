
Deployment_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000371c  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a0  080073a0  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080073a0  080073a0  000173a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073a8  080073a8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080073b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce4  20000084  08007434  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d68  08007434  00020d68  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b67  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001728  00000000  00000000  00028c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0002a340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002103e  00000000  00000000  0002b108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d3c  00000000  00000000  0004c146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c83ab  00000000  00000000  00055e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e22d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021d4  00000000  00000000  0011e280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000084 	.word	0x20000084
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003c6c 	.word	0x08003c6c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000088 	.word	0x20000088
 8000204:	08003c6c 	.word	0x08003c6c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__gedf2>:
 8000580:	f04f 3cff 	mov.w	ip, #4294967295
 8000584:	e006      	b.n	8000594 <__cmpdf2+0x4>
 8000586:	bf00      	nop

08000588 <__ledf2>:
 8000588:	f04f 0c01 	mov.w	ip, #1
 800058c:	e002      	b.n	8000594 <__cmpdf2+0x4>
 800058e:	bf00      	nop

08000590 <__cmpdf2>:
 8000590:	f04f 0c01 	mov.w	ip, #1
 8000594:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000598:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800059c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005a4:	bf18      	it	ne
 80005a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005aa:	d01b      	beq.n	80005e4 <__cmpdf2+0x54>
 80005ac:	b001      	add	sp, #4
 80005ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005b2:	bf0c      	ite	eq
 80005b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005b8:	ea91 0f03 	teqne	r1, r3
 80005bc:	bf02      	ittt	eq
 80005be:	ea90 0f02 	teqeq	r0, r2
 80005c2:	2000      	moveq	r0, #0
 80005c4:	4770      	bxeq	lr
 80005c6:	f110 0f00 	cmn.w	r0, #0
 80005ca:	ea91 0f03 	teq	r1, r3
 80005ce:	bf58      	it	pl
 80005d0:	4299      	cmppl	r1, r3
 80005d2:	bf08      	it	eq
 80005d4:	4290      	cmpeq	r0, r2
 80005d6:	bf2c      	ite	cs
 80005d8:	17d8      	asrcs	r0, r3, #31
 80005da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005de:	f040 0001 	orr.w	r0, r0, #1
 80005e2:	4770      	bx	lr
 80005e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ec:	d102      	bne.n	80005f4 <__cmpdf2+0x64>
 80005ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005f2:	d107      	bne.n	8000604 <__cmpdf2+0x74>
 80005f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d1d6      	bne.n	80005ac <__cmpdf2+0x1c>
 80005fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000602:	d0d3      	beq.n	80005ac <__cmpdf2+0x1c>
 8000604:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <__aeabi_cdrcmple>:
 800060c:	4684      	mov	ip, r0
 800060e:	4610      	mov	r0, r2
 8000610:	4662      	mov	r2, ip
 8000612:	468c      	mov	ip, r1
 8000614:	4619      	mov	r1, r3
 8000616:	4663      	mov	r3, ip
 8000618:	e000      	b.n	800061c <__aeabi_cdcmpeq>
 800061a:	bf00      	nop

0800061c <__aeabi_cdcmpeq>:
 800061c:	b501      	push	{r0, lr}
 800061e:	f7ff ffb7 	bl	8000590 <__cmpdf2>
 8000622:	2800      	cmp	r0, #0
 8000624:	bf48      	it	mi
 8000626:	f110 0f00 	cmnmi.w	r0, #0
 800062a:	bd01      	pop	{r0, pc}

0800062c <__aeabi_dcmpeq>:
 800062c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000630:	f7ff fff4 	bl	800061c <__aeabi_cdcmpeq>
 8000634:	bf0c      	ite	eq
 8000636:	2001      	moveq	r0, #1
 8000638:	2000      	movne	r0, #0
 800063a:	f85d fb08 	ldr.w	pc, [sp], #8
 800063e:	bf00      	nop

08000640 <__aeabi_dcmplt>:
 8000640:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000644:	f7ff ffea 	bl	800061c <__aeabi_cdcmpeq>
 8000648:	bf34      	ite	cc
 800064a:	2001      	movcc	r0, #1
 800064c:	2000      	movcs	r0, #0
 800064e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000652:	bf00      	nop

08000654 <__aeabi_dcmple>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff ffe0 	bl	800061c <__aeabi_cdcmpeq>
 800065c:	bf94      	ite	ls
 800065e:	2001      	movls	r0, #1
 8000660:	2000      	movhi	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmpge>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffce 	bl	800060c <__aeabi_cdrcmple>
 8000670:	bf94      	ite	ls
 8000672:	2001      	movls	r0, #1
 8000674:	2000      	movhi	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmpgt>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffc4 	bl	800060c <__aeabi_cdrcmple>
 8000684:	bf34      	ite	cc
 8000686:	2001      	movcc	r0, #1
 8000688:	2000      	movcs	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_frsub>:
 8000690:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000694:	e002      	b.n	800069c <__addsf3>
 8000696:	bf00      	nop

08000698 <__aeabi_fsub>:
 8000698:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800069c <__addsf3>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	bf1f      	itttt	ne
 80006a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006a4:	ea92 0f03 	teqne	r2, r3
 80006a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006b0:	d06a      	beq.n	8000788 <__addsf3+0xec>
 80006b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006ba:	bfc1      	itttt	gt
 80006bc:	18d2      	addgt	r2, r2, r3
 80006be:	4041      	eorgt	r1, r0
 80006c0:	4048      	eorgt	r0, r1
 80006c2:	4041      	eorgt	r1, r0
 80006c4:	bfb8      	it	lt
 80006c6:	425b      	neglt	r3, r3
 80006c8:	2b19      	cmp	r3, #25
 80006ca:	bf88      	it	hi
 80006cc:	4770      	bxhi	lr
 80006ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006da:	bf18      	it	ne
 80006dc:	4240      	negne	r0, r0
 80006de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ea:	bf18      	it	ne
 80006ec:	4249      	negne	r1, r1
 80006ee:	ea92 0f03 	teq	r2, r3
 80006f2:	d03f      	beq.n	8000774 <__addsf3+0xd8>
 80006f4:	f1a2 0201 	sub.w	r2, r2, #1
 80006f8:	fa41 fc03 	asr.w	ip, r1, r3
 80006fc:	eb10 000c 	adds.w	r0, r0, ip
 8000700:	f1c3 0320 	rsb	r3, r3, #32
 8000704:	fa01 f103 	lsl.w	r1, r1, r3
 8000708:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800070c:	d502      	bpl.n	8000714 <__addsf3+0x78>
 800070e:	4249      	negs	r1, r1
 8000710:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000714:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000718:	d313      	bcc.n	8000742 <__addsf3+0xa6>
 800071a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800071e:	d306      	bcc.n	800072e <__addsf3+0x92>
 8000720:	0840      	lsrs	r0, r0, #1
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	f102 0201 	add.w	r2, r2, #1
 800072a:	2afe      	cmp	r2, #254	; 0xfe
 800072c:	d251      	bcs.n	80007d2 <__addsf3+0x136>
 800072e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000732:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000736:	bf08      	it	eq
 8000738:	f020 0001 	biceq.w	r0, r0, #1
 800073c:	ea40 0003 	orr.w	r0, r0, r3
 8000740:	4770      	bx	lr
 8000742:	0049      	lsls	r1, r1, #1
 8000744:	eb40 0000 	adc.w	r0, r0, r0
 8000748:	3a01      	subs	r2, #1
 800074a:	bf28      	it	cs
 800074c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000750:	d2ed      	bcs.n	800072e <__addsf3+0x92>
 8000752:	fab0 fc80 	clz	ip, r0
 8000756:	f1ac 0c08 	sub.w	ip, ip, #8
 800075a:	ebb2 020c 	subs.w	r2, r2, ip
 800075e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000762:	bfaa      	itet	ge
 8000764:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000768:	4252      	neglt	r2, r2
 800076a:	4318      	orrge	r0, r3
 800076c:	bfbc      	itt	lt
 800076e:	40d0      	lsrlt	r0, r2
 8000770:	4318      	orrlt	r0, r3
 8000772:	4770      	bx	lr
 8000774:	f092 0f00 	teq	r2, #0
 8000778:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800077c:	bf06      	itte	eq
 800077e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000782:	3201      	addeq	r2, #1
 8000784:	3b01      	subne	r3, #1
 8000786:	e7b5      	b.n	80006f4 <__addsf3+0x58>
 8000788:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800078c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000790:	bf18      	it	ne
 8000792:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000796:	d021      	beq.n	80007dc <__addsf3+0x140>
 8000798:	ea92 0f03 	teq	r2, r3
 800079c:	d004      	beq.n	80007a8 <__addsf3+0x10c>
 800079e:	f092 0f00 	teq	r2, #0
 80007a2:	bf08      	it	eq
 80007a4:	4608      	moveq	r0, r1
 80007a6:	4770      	bx	lr
 80007a8:	ea90 0f01 	teq	r0, r1
 80007ac:	bf1c      	itt	ne
 80007ae:	2000      	movne	r0, #0
 80007b0:	4770      	bxne	lr
 80007b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007b6:	d104      	bne.n	80007c2 <__addsf3+0x126>
 80007b8:	0040      	lsls	r0, r0, #1
 80007ba:	bf28      	it	cs
 80007bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	4770      	bx	lr
 80007c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007c6:	bf3c      	itt	cc
 80007c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007cc:	4770      	bxcc	lr
 80007ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007da:	4770      	bx	lr
 80007dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007e0:	bf16      	itet	ne
 80007e2:	4608      	movne	r0, r1
 80007e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007e8:	4601      	movne	r1, r0
 80007ea:	0242      	lsls	r2, r0, #9
 80007ec:	bf06      	itte	eq
 80007ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007f2:	ea90 0f01 	teqeq	r0, r1
 80007f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007fa:	4770      	bx	lr

080007fc <__aeabi_ui2f>:
 80007fc:	f04f 0300 	mov.w	r3, #0
 8000800:	e004      	b.n	800080c <__aeabi_i2f+0x8>
 8000802:	bf00      	nop

08000804 <__aeabi_i2f>:
 8000804:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000808:	bf48      	it	mi
 800080a:	4240      	negmi	r0, r0
 800080c:	ea5f 0c00 	movs.w	ip, r0
 8000810:	bf08      	it	eq
 8000812:	4770      	bxeq	lr
 8000814:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000818:	4601      	mov	r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	e01c      	b.n	800085a <__aeabi_l2f+0x2a>

08000820 <__aeabi_ul2f>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	f04f 0300 	mov.w	r3, #0
 800082c:	e00a      	b.n	8000844 <__aeabi_l2f+0x14>
 800082e:	bf00      	nop

08000830 <__aeabi_l2f>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800083c:	d502      	bpl.n	8000844 <__aeabi_l2f+0x14>
 800083e:	4240      	negs	r0, r0
 8000840:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000844:	ea5f 0c01 	movs.w	ip, r1
 8000848:	bf02      	ittt	eq
 800084a:	4684      	moveq	ip, r0
 800084c:	4601      	moveq	r1, r0
 800084e:	2000      	moveq	r0, #0
 8000850:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000854:	bf08      	it	eq
 8000856:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800085a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800085e:	fabc f28c 	clz	r2, ip
 8000862:	3a08      	subs	r2, #8
 8000864:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000868:	db10      	blt.n	800088c <__aeabi_l2f+0x5c>
 800086a:	fa01 fc02 	lsl.w	ip, r1, r2
 800086e:	4463      	add	r3, ip
 8000870:	fa00 fc02 	lsl.w	ip, r0, r2
 8000874:	f1c2 0220 	rsb	r2, r2, #32
 8000878:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800087c:	fa20 f202 	lsr.w	r2, r0, r2
 8000880:	eb43 0002 	adc.w	r0, r3, r2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f102 0220 	add.w	r2, r2, #32
 8000890:	fa01 fc02 	lsl.w	ip, r1, r2
 8000894:	f1c2 0220 	rsb	r2, r2, #32
 8000898:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800089c:	fa21 f202 	lsr.w	r2, r1, r2
 80008a0:	eb43 0002 	adc.w	r0, r3, r2
 80008a4:	bf08      	it	eq
 80008a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008aa:	4770      	bx	lr

080008ac <__aeabi_fmul>:
 80008ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008b4:	bf1e      	ittt	ne
 80008b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008ba:	ea92 0f0c 	teqne	r2, ip
 80008be:	ea93 0f0c 	teqne	r3, ip
 80008c2:	d06f      	beq.n	80009a4 <__aeabi_fmul+0xf8>
 80008c4:	441a      	add	r2, r3
 80008c6:	ea80 0c01 	eor.w	ip, r0, r1
 80008ca:	0240      	lsls	r0, r0, #9
 80008cc:	bf18      	it	ne
 80008ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008d2:	d01e      	beq.n	8000912 <__aeabi_fmul+0x66>
 80008d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008e0:	fba0 3101 	umull	r3, r1, r0, r1
 80008e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008ec:	bf3e      	ittt	cc
 80008ee:	0049      	lslcc	r1, r1, #1
 80008f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008f4:	005b      	lslcc	r3, r3, #1
 80008f6:	ea40 0001 	orr.w	r0, r0, r1
 80008fa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008fe:	2afd      	cmp	r2, #253	; 0xfd
 8000900:	d81d      	bhi.n	800093e <__aeabi_fmul+0x92>
 8000902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000906:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800090a:	bf08      	it	eq
 800090c:	f020 0001 	biceq.w	r0, r0, #1
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800091a:	bf08      	it	eq
 800091c:	0249      	lsleq	r1, r1, #9
 800091e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000922:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000926:	3a7f      	subs	r2, #127	; 0x7f
 8000928:	bfc2      	ittt	gt
 800092a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800092e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000932:	4770      	bxgt	lr
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	3a01      	subs	r2, #1
 800093e:	dc5d      	bgt.n	80009fc <__aeabi_fmul+0x150>
 8000940:	f112 0f19 	cmn.w	r2, #25
 8000944:	bfdc      	itt	le
 8000946:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800094a:	4770      	bxle	lr
 800094c:	f1c2 0200 	rsb	r2, r2, #0
 8000950:	0041      	lsls	r1, r0, #1
 8000952:	fa21 f102 	lsr.w	r1, r1, r2
 8000956:	f1c2 0220 	rsb	r2, r2, #32
 800095a:	fa00 fc02 	lsl.w	ip, r0, r2
 800095e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000962:	f140 0000 	adc.w	r0, r0, #0
 8000966:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800096a:	bf08      	it	eq
 800096c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000970:	4770      	bx	lr
 8000972:	f092 0f00 	teq	r2, #0
 8000976:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800097a:	bf02      	ittt	eq
 800097c:	0040      	lsleq	r0, r0, #1
 800097e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000982:	3a01      	subeq	r2, #1
 8000984:	d0f9      	beq.n	800097a <__aeabi_fmul+0xce>
 8000986:	ea40 000c 	orr.w	r0, r0, ip
 800098a:	f093 0f00 	teq	r3, #0
 800098e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000992:	bf02      	ittt	eq
 8000994:	0049      	lsleq	r1, r1, #1
 8000996:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800099a:	3b01      	subeq	r3, #1
 800099c:	d0f9      	beq.n	8000992 <__aeabi_fmul+0xe6>
 800099e:	ea41 010c 	orr.w	r1, r1, ip
 80009a2:	e78f      	b.n	80008c4 <__aeabi_fmul+0x18>
 80009a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009a8:	ea92 0f0c 	teq	r2, ip
 80009ac:	bf18      	it	ne
 80009ae:	ea93 0f0c 	teqne	r3, ip
 80009b2:	d00a      	beq.n	80009ca <__aeabi_fmul+0x11e>
 80009b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009b8:	bf18      	it	ne
 80009ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009be:	d1d8      	bne.n	8000972 <__aeabi_fmul+0xc6>
 80009c0:	ea80 0001 	eor.w	r0, r0, r1
 80009c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009c8:	4770      	bx	lr
 80009ca:	f090 0f00 	teq	r0, #0
 80009ce:	bf17      	itett	ne
 80009d0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009d4:	4608      	moveq	r0, r1
 80009d6:	f091 0f00 	teqne	r1, #0
 80009da:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009de:	d014      	beq.n	8000a0a <__aeabi_fmul+0x15e>
 80009e0:	ea92 0f0c 	teq	r2, ip
 80009e4:	d101      	bne.n	80009ea <__aeabi_fmul+0x13e>
 80009e6:	0242      	lsls	r2, r0, #9
 80009e8:	d10f      	bne.n	8000a0a <__aeabi_fmul+0x15e>
 80009ea:	ea93 0f0c 	teq	r3, ip
 80009ee:	d103      	bne.n	80009f8 <__aeabi_fmul+0x14c>
 80009f0:	024b      	lsls	r3, r1, #9
 80009f2:	bf18      	it	ne
 80009f4:	4608      	movne	r0, r1
 80009f6:	d108      	bne.n	8000a0a <__aeabi_fmul+0x15e>
 80009f8:	ea80 0001 	eor.w	r0, r0, r1
 80009fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000a12:	4770      	bx	lr

08000a14 <__aeabi_fdiv>:
 8000a14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a22:	ea92 0f0c 	teqne	r2, ip
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d069      	beq.n	8000b00 <__aeabi_fdiv+0xec>
 8000a2c:	eba2 0203 	sub.w	r2, r2, r3
 8000a30:	ea80 0c01 	eor.w	ip, r0, r1
 8000a34:	0249      	lsls	r1, r1, #9
 8000a36:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a3a:	d037      	beq.n	8000aac <__aeabi_fdiv+0x98>
 8000a3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a40:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a44:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	bf38      	it	cc
 8000a50:	005b      	lslcc	r3, r3, #1
 8000a52:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a56:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	bf24      	itt	cs
 8000a5e:	1a5b      	subcs	r3, r3, r1
 8000a60:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a64:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a68:	bf24      	itt	cs
 8000a6a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a6e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a72:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a76:	bf24      	itt	cs
 8000a78:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a80:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a84:	bf24      	itt	cs
 8000a86:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a8a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a8e:	011b      	lsls	r3, r3, #4
 8000a90:	bf18      	it	ne
 8000a92:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a96:	d1e0      	bne.n	8000a5a <__aeabi_fdiv+0x46>
 8000a98:	2afd      	cmp	r2, #253	; 0xfd
 8000a9a:	f63f af50 	bhi.w	800093e <__aeabi_fmul+0x92>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ab0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ab4:	327f      	adds	r2, #127	; 0x7f
 8000ab6:	bfc2      	ittt	gt
 8000ab8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000abc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ac0:	4770      	bxgt	lr
 8000ac2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac6:	f04f 0300 	mov.w	r3, #0
 8000aca:	3a01      	subs	r2, #1
 8000acc:	e737      	b.n	800093e <__aeabi_fmul+0x92>
 8000ace:	f092 0f00 	teq	r2, #0
 8000ad2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ad6:	bf02      	ittt	eq
 8000ad8:	0040      	lsleq	r0, r0, #1
 8000ada:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ade:	3a01      	subeq	r2, #1
 8000ae0:	d0f9      	beq.n	8000ad6 <__aeabi_fdiv+0xc2>
 8000ae2:	ea40 000c 	orr.w	r0, r0, ip
 8000ae6:	f093 0f00 	teq	r3, #0
 8000aea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aee:	bf02      	ittt	eq
 8000af0:	0049      	lsleq	r1, r1, #1
 8000af2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000af6:	3b01      	subeq	r3, #1
 8000af8:	d0f9      	beq.n	8000aee <__aeabi_fdiv+0xda>
 8000afa:	ea41 010c 	orr.w	r1, r1, ip
 8000afe:	e795      	b.n	8000a2c <__aeabi_fdiv+0x18>
 8000b00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b04:	ea92 0f0c 	teq	r2, ip
 8000b08:	d108      	bne.n	8000b1c <__aeabi_fdiv+0x108>
 8000b0a:	0242      	lsls	r2, r0, #9
 8000b0c:	f47f af7d 	bne.w	8000a0a <__aeabi_fmul+0x15e>
 8000b10:	ea93 0f0c 	teq	r3, ip
 8000b14:	f47f af70 	bne.w	80009f8 <__aeabi_fmul+0x14c>
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e776      	b.n	8000a0a <__aeabi_fmul+0x15e>
 8000b1c:	ea93 0f0c 	teq	r3, ip
 8000b20:	d104      	bne.n	8000b2c <__aeabi_fdiv+0x118>
 8000b22:	024b      	lsls	r3, r1, #9
 8000b24:	f43f af4c 	beq.w	80009c0 <__aeabi_fmul+0x114>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	e76e      	b.n	8000a0a <__aeabi_fmul+0x15e>
 8000b2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b30:	bf18      	it	ne
 8000b32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b36:	d1ca      	bne.n	8000ace <__aeabi_fdiv+0xba>
 8000b38:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b3c:	f47f af5c 	bne.w	80009f8 <__aeabi_fmul+0x14c>
 8000b40:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b44:	f47f af3c 	bne.w	80009c0 <__aeabi_fmul+0x114>
 8000b48:	e75f      	b.n	8000a0a <__aeabi_fmul+0x15e>
 8000b4a:	bf00      	nop

08000b4c <__gesf2>:
 8000b4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b50:	e006      	b.n	8000b60 <__cmpsf2+0x4>
 8000b52:	bf00      	nop

08000b54 <__lesf2>:
 8000b54:	f04f 0c01 	mov.w	ip, #1
 8000b58:	e002      	b.n	8000b60 <__cmpsf2+0x4>
 8000b5a:	bf00      	nop

08000b5c <__cmpsf2>:
 8000b5c:	f04f 0c01 	mov.w	ip, #1
 8000b60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b68:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b70:	bf18      	it	ne
 8000b72:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b76:	d011      	beq.n	8000b9c <__cmpsf2+0x40>
 8000b78:	b001      	add	sp, #4
 8000b7a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b7e:	bf18      	it	ne
 8000b80:	ea90 0f01 	teqne	r0, r1
 8000b84:	bf58      	it	pl
 8000b86:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b8a:	bf88      	it	hi
 8000b8c:	17c8      	asrhi	r0, r1, #31
 8000b8e:	bf38      	it	cc
 8000b90:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b94:	bf18      	it	ne
 8000b96:	f040 0001 	orrne.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	d102      	bne.n	8000ba8 <__cmpsf2+0x4c>
 8000ba2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ba6:	d105      	bne.n	8000bb4 <__cmpsf2+0x58>
 8000ba8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bac:	d1e4      	bne.n	8000b78 <__cmpsf2+0x1c>
 8000bae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bb2:	d0e1      	beq.n	8000b78 <__cmpsf2+0x1c>
 8000bb4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_cfrcmple>:
 8000bbc:	4684      	mov	ip, r0
 8000bbe:	4608      	mov	r0, r1
 8000bc0:	4661      	mov	r1, ip
 8000bc2:	e7ff      	b.n	8000bc4 <__aeabi_cfcmpeq>

08000bc4 <__aeabi_cfcmpeq>:
 8000bc4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bc6:	f7ff ffc9 	bl	8000b5c <__cmpsf2>
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	bf48      	it	mi
 8000bce:	f110 0f00 	cmnmi.w	r0, #0
 8000bd2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bd4 <__aeabi_fcmpeq>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff fff4 	bl	8000bc4 <__aeabi_cfcmpeq>
 8000bdc:	bf0c      	ite	eq
 8000bde:	2001      	moveq	r0, #1
 8000be0:	2000      	movne	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_fcmplt>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffea 	bl	8000bc4 <__aeabi_cfcmpeq>
 8000bf0:	bf34      	ite	cc
 8000bf2:	2001      	movcc	r0, #1
 8000bf4:	2000      	movcs	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fcmple>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffe0 	bl	8000bc4 <__aeabi_cfcmpeq>
 8000c04:	bf94      	ite	ls
 8000c06:	2001      	movls	r0, #1
 8000c08:	2000      	movhi	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_fcmpge>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffd2 	bl	8000bbc <__aeabi_cfrcmple>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_fcmpgt>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffc8 	bl	8000bbc <__aeabi_cfrcmple>
 8000c2c:	bf34      	ite	cc
 8000c2e:	2001      	movcc	r0, #1
 8000c30:	2000      	movcs	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_fcmpun>:
 8000c38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c44:	d102      	bne.n	8000c4c <__aeabi_fcmpun+0x14>
 8000c46:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c4a:	d108      	bne.n	8000c5e <__aeabi_fcmpun+0x26>
 8000c4c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c50:	d102      	bne.n	8000c58 <__aeabi_fcmpun+0x20>
 8000c52:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c56:	d102      	bne.n	8000c5e <__aeabi_fcmpun+0x26>
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	f04f 0001 	mov.w	r0, #1
 8000c62:	4770      	bx	lr

08000c64 <__aeabi_f2iz>:
 8000c64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c6c:	d30f      	bcc.n	8000c8e <__aeabi_f2iz+0x2a>
 8000c6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c76:	d90d      	bls.n	8000c94 <__aeabi_f2iz+0x30>
 8000c78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c80:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c84:	fa23 f002 	lsr.w	r0, r3, r2
 8000c88:	bf18      	it	ne
 8000c8a:	4240      	negne	r0, r0
 8000c8c:	4770      	bx	lr
 8000c8e:	f04f 0000 	mov.w	r0, #0
 8000c92:	4770      	bx	lr
 8000c94:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c98:	d101      	bne.n	8000c9e <__aeabi_f2iz+0x3a>
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	d105      	bne.n	8000caa <__aeabi_f2iz+0x46>
 8000c9e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ca2:	bf08      	it	eq
 8000ca4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ca8:	4770      	bx	lr
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b974 	b.w	8000fb0 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	9e08      	ldr	r6, [sp, #32]
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	4688      	mov	r8, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14d      	bne.n	8000d8c <__udivmoddi4+0xac>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4694      	mov	ip, r2
 8000cf4:	d968      	bls.n	8000dc8 <__udivmoddi4+0xe8>
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	b152      	cbz	r2, 8000d12 <__udivmoddi4+0x32>
 8000cfc:	fa01 f302 	lsl.w	r3, r1, r2
 8000d00:	f1c2 0120 	rsb	r1, r2, #32
 8000d04:	fa20 f101 	lsr.w	r1, r0, r1
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	ea41 0803 	orr.w	r8, r1, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000d16:	0c21      	lsrs	r1, r4, #16
 8000d18:	fbb8 fef5 	udiv	lr, r8, r5
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fb05 831e 	mls	r3, r5, lr, r8
 8000d24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d28:	fb0e f107 	mul.w	r1, lr, r7
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	d90b      	bls.n	8000d48 <__udivmoddi4+0x68>
 8000d30:	eb1c 0303 	adds.w	r3, ip, r3
 8000d34:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000d38:	f080 811e 	bcs.w	8000f78 <__udivmoddi4+0x298>
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	f240 811b 	bls.w	8000f78 <__udivmoddi4+0x298>
 8000d42:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000d50:	fb05 3310 	mls	r3, r5, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 f707 	mul.w	r7, r0, r7
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x96>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d68:	f080 8108 	bcs.w	8000f7c <__udivmoddi4+0x29c>
 8000d6c:	42a7      	cmp	r7, r4
 8000d6e:	f240 8105 	bls.w	8000f7c <__udivmoddi4+0x29c>
 8000d72:	4464      	add	r4, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	1be4      	subs	r4, r4, r7
 8000d78:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa8>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0xc2>
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	f000 80ee 	beq.w	8000f72 <__udivmoddi4+0x292>
 8000d96:	2100      	movs	r1, #0
 8000d98:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d14a      	bne.n	8000e40 <__udivmoddi4+0x160>
 8000daa:	42ab      	cmp	r3, r5
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xd4>
 8000dae:	4282      	cmp	r2, r0
 8000db0:	f200 80f9 	bhi.w	8000fa6 <__udivmoddi4+0x2c6>
 8000db4:	1a84      	subs	r4, r0, r2
 8000db6:	eb65 0303 	sbc.w	r3, r5, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	4698      	mov	r8, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d0e2      	beq.n	8000d88 <__udivmoddi4+0xa8>
 8000dc2:	e9c6 4800 	strd	r4, r8, [r6]
 8000dc6:	e7df      	b.n	8000d88 <__udivmoddi4+0xa8>
 8000dc8:	b902      	cbnz	r2, 8000dcc <__udivmoddi4+0xec>
 8000dca:	deff      	udf	#255	; 0xff
 8000dcc:	fab2 f282 	clz	r2, r2
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	f040 8091 	bne.w	8000ef8 <__udivmoddi4+0x218>
 8000dd6:	eba1 050c 	sub.w	r5, r1, ip
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb5 f3f7 	udiv	r3, r5, r7
 8000de8:	fb07 5013 	mls	r0, r7, r3, r5
 8000dec:	0c25      	lsrs	r5, r4, #16
 8000dee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000df2:	fb0e f003 	mul.w	r0, lr, r3
 8000df6:	42a8      	cmp	r0, r5
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x12c>
 8000dfa:	eb1c 0505 	adds.w	r5, ip, r5
 8000dfe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x12a>
 8000e04:	42a8      	cmp	r0, r5
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2c0>
 8000e0a:	4643      	mov	r3, r8
 8000e0c:	1a2d      	subs	r5, r5, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb5 f0f7 	udiv	r0, r5, r7
 8000e14:	fb07 5510 	mls	r5, r7, r0, r5
 8000e18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x156>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x154>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2ca>
 8000e34:	4628      	mov	r0, r5
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e3e:	e79e      	b.n	8000d7e <__udivmoddi4+0x9e>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa20 f407 	lsr.w	r4, r0, r7
 8000e52:	fa05 f301 	lsl.w	r3, r5, r1
 8000e56:	431c      	orrs	r4, r3
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5e:	fa00 f301 	lsl.w	r3, r0, r1
 8000e62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e66:	0c20      	lsrs	r0, r4, #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fb09 5518 	mls	r5, r9, r8, r5
 8000e70:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000e74:	fb08 f00e 	mul.w	r0, r8, lr
 8000e78:	42a8      	cmp	r0, r5
 8000e7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b8>
 8000e80:	eb1c 0505 	adds.w	r5, ip, r5
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2bc>
 8000e8c:	42a8      	cmp	r0, r5
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2bc>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4465      	add	r5, ip
 8000e98:	1a2d      	subs	r5, r5, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000ea0:	fb09 5510 	mls	r5, r9, r0, r5
 8000ea4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ea8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eac:	45ae      	cmp	lr, r5
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1e2>
 8000eb0:	eb1c 0505 	adds.w	r5, ip, r5
 8000eb4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2b4>
 8000eba:	45ae      	cmp	lr, r5
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2b4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4465      	add	r5, ip
 8000ec2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ec6:	fba0 9402 	umull	r9, r4, r0, r2
 8000eca:	eba5 050e 	sub.w	r5, r5, lr
 8000ece:	42a5      	cmp	r5, r4
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46a6      	mov	lr, r4
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x2a4>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x2a0>
 8000ed8:	b15e      	cbz	r6, 8000ef2 <__udivmoddi4+0x212>
 8000eda:	ebb3 0208 	subs.w	r2, r3, r8
 8000ede:	eb65 050e 	sbc.w	r5, r5, lr
 8000ee2:	fa05 f707 	lsl.w	r7, r5, r7
 8000ee6:	fa22 f301 	lsr.w	r3, r2, r1
 8000eea:	40cd      	lsrs	r5, r1
 8000eec:	431f      	orrs	r7, r3
 8000eee:	e9c6 7500 	strd	r7, r5, [r6]
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f103 	lsr.w	r1, r0, r3
 8000f00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f04:	fa25 f303 	lsr.w	r3, r5, r3
 8000f08:	4095      	lsls	r5, r2
 8000f0a:	430d      	orrs	r5, r1
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb3 f1f7 	udiv	r1, r3, r7
 8000f18:	fb07 3011 	mls	r0, r7, r1, r3
 8000f1c:	0c2b      	lsrs	r3, r5, #16
 8000f1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000f22:	fb01 f00e 	mul.w	r0, r1, lr
 8000f26:	4298      	cmp	r0, r3
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x260>
 8000f2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b8>
 8000f38:	4298      	cmp	r0, r3
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b8>
 8000f3c:	3902      	subs	r1, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	1a1b      	subs	r3, r3, r0
 8000f42:	b2ad      	uxth	r5, r5
 8000f44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f48:	fb07 3310 	mls	r3, r7, r0, r3
 8000f4c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000f50:	fb00 f30e 	mul.w	r3, r0, lr
 8000f54:	42ab      	cmp	r3, r5
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x28a>
 8000f58:	eb1c 0505 	adds.w	r5, ip, r5
 8000f5c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2b0>
 8000f62:	42ab      	cmp	r3, r5
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2b0>
 8000f66:	3802      	subs	r0, #2
 8000f68:	4465      	add	r5, ip
 8000f6a:	1aed      	subs	r5, r5, r3
 8000f6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0x104>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e707      	b.n	8000d88 <__udivmoddi4+0xa8>
 8000f78:	4686      	mov	lr, r0
 8000f7a:	e6e5      	b.n	8000d48 <__udivmoddi4+0x68>
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	e6fa      	b.n	8000d76 <__udivmoddi4+0x96>
 8000f80:	454b      	cmp	r3, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f8>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f8c:	3801      	subs	r0, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f8>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x28a>
 8000f94:	4620      	mov	r0, r4
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1e2>
 8000f98:	4641      	mov	r1, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x260>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b8>
 8000fa0:	3b02      	subs	r3, #2
 8000fa2:	4465      	add	r5, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x12c>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e709      	b.n	8000dbe <__udivmoddi4+0xde>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x156>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <MX_GPIO_Init+0xd0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a2c      	ldr	r2, [pc, #176]	; (8001084 <MX_GPIO_Init+0xd0>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_GPIO_Init+0xd0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <MX_GPIO_Init+0xd0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a25      	ldr	r2, [pc, #148]	; (8001084 <MX_GPIO_Init+0xd0>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <MX_GPIO_Init+0xd0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <MX_GPIO_Init+0xd0>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_GPIO_Init+0xd0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a17      	ldr	r2, [pc, #92]	; (8001084 <MX_GPIO_Init+0xd0>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2120      	movs	r1, #32
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <MX_GPIO_Init+0xd4>)
 8001040:	f001 f8b6 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800104a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	480c      	ldr	r0, [pc, #48]	; (800108c <MX_GPIO_Init+0xd8>)
 800105c:	f000 ff16 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001060:	2320      	movs	r3, #32
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4804      	ldr	r0, [pc, #16]	; (8001088 <MX_GPIO_Init+0xd4>)
 8001078:	f000 ff08 	bl	8001e8c <HAL_GPIO_Init>

}
 800107c:	bf00      	nop
 800107e:	3728      	adds	r7, #40	; 0x28
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020800 	.word	0x40020800

08001090 <eml_net_relu>:
    int32_t activations_length;
} EmlNet;


static float
eml_net_relu(float in) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    return (in <= 0.0f) ? 0.0f : in; 
 8001098:	f04f 0100 	mov.w	r1, #0
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fdad 	bl	8000bfc <__aeabi_fcmple>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <eml_net_relu+0x1e>
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e000      	b.n	80010b0 <eml_net_relu+0x20>
 80010ae:	687b      	ldr	r3, [r7, #4]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <eml_net_expit>:

static float
eml_net_expit(float in) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    return 1.0f / (1.0f + expf(-in));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010c6:	4618      	mov	r0, r3
 80010c8:	f002 f9de 	bl	8003488 <expf>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fae2 	bl	800069c <__addsf3>
 80010d8:	4603      	mov	r3, r0
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80010e0:	f7ff fc98 	bl	8000a14 <__aeabi_fdiv>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <eml_net_tanh>:

static float
eml_net_tanh(float in) {
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
    return tanhf(in); 
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f002 f96c 	bl	80033d4 <tanhf>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <eml_net_softmax>:

static EmlError
eml_net_softmax(float *input, size_t input_length)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
    EML_PRECONDITION(input, EmlUninitialized);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <eml_net_softmax+0x14>
 8001118:	2303      	movs	r3, #3
 800111a:	e067      	b.n	80011ec <eml_net_softmax+0xe4>

    float input_max = -INFINITY;
 800111c:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <eml_net_softmax+0xec>)
 800111e:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < input_length; i++) {
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	e014      	b.n	8001150 <eml_net_softmax+0x48>
        if (input[i] > input_max) {
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	69f8      	ldr	r0, [r7, #28]
 8001134:	f7ff fd58 	bl	8000be8 <__aeabi_fcmplt>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <eml_net_softmax+0x42>
            input_max = input[i];
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < input_length; i++) {
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	3301      	adds	r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3e6      	bcc.n	8001126 <eml_net_softmax+0x1e>
        }
    }

    float sum = 0.0f;
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_length; i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	e016      	b.n	8001192 <eml_net_softmax+0x8a>
        sum += expf(input[i] - input_max);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	69f9      	ldr	r1, [r7, #28]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa91 	bl	8000698 <__aeabi_fsub>
 8001176:	4603      	mov	r3, r0
 8001178:	4618      	mov	r0, r3
 800117a:	f002 f985 	bl	8003488 <expf>
 800117e:	4603      	mov	r3, r0
 8001180:	4619      	mov	r1, r3
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff fa8a 	bl	800069c <__addsf3>
 8001188:	4603      	mov	r3, r0
 800118a:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < input_length; i++) {
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	3301      	adds	r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d3e4      	bcc.n	8001164 <eml_net_softmax+0x5c>
    }

    const float offset = input_max + logf(sum);
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f002 f99a 	bl	80034d4 <logf>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	69f8      	ldr	r0, [r7, #28]
 80011a6:	f7ff fa79 	bl	800069c <__addsf3>
 80011aa:	4603      	mov	r3, r0
 80011ac:	60bb      	str	r3, [r7, #8]
    for (size_t i = 0; i < input_length; i++) {
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	e016      	b.n	80011e2 <eml_net_softmax+0xda>
        input[i] = expf(input[i] - offset);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fa69 	bl	8000698 <__aeabi_fsub>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4619      	mov	r1, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	18d4      	adds	r4, r2, r3
 80011d2:	4608      	mov	r0, r1
 80011d4:	f002 f958 	bl	8003488 <expf>
 80011d8:	4603      	mov	r3, r0
 80011da:	6023      	str	r3, [r4, #0]
    for (size_t i = 0; i < input_length; i++) {
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d3e4      	bcc.n	80011b4 <eml_net_softmax+0xac>
    }

    return EmlOk;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3724      	adds	r7, #36	; 0x24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	ff800000 	.word	0xff800000

080011f8 <eml_net_argmax>:

int32_t
eml_net_argmax(const float *values, int32_t values_length) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]

    float vmax = -INFINITY;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <eml_net_argmax+0x5c>)
 8001204:	617b      	str	r3, [r7, #20]
    int32_t argmax = -1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	613b      	str	r3, [r7, #16]
    for (int i=0; i<values_length; i++) {
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e016      	b.n	8001240 <eml_net_argmax+0x48>
        if (values[i] > vmax) {
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff fce2 	bl	8000be8 <__aeabi_fcmplt>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <eml_net_argmax+0x42>
            vmax = values[i];
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	617b      	str	r3, [r7, #20]
            argmax = i;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	613b      	str	r3, [r7, #16]
    for (int i=0; i<values_length; i++) {
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbe4      	blt.n	8001212 <eml_net_argmax+0x1a>
        }
    }
    return argmax;
 8001248:	693b      	ldr	r3, [r7, #16]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	ff800000 	.word	0xff800000

08001258 <eml_net_valid>:


static bool
eml_net_valid(EmlNet *model) {
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    bool not_null = model->layers && model->activations1 && model->activations2;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d009      	beq.n	800127c <eml_net_valid+0x24>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <eml_net_valid+0x24>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <eml_net_valid+0x24>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <eml_net_valid+0x26>
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
    return not_null;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <eml_net_outputs>:

static inline int32_t
eml_net_outputs(EmlNet *model) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    return model->layers[model->n_layers-1].n_outputs;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	460b      	mov	r3, r1
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	3b14      	subs	r3, #20
 80012b0:	4413      	add	r3, r2
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <eml_net_outputs_proba>:

// For binary problem, one output, we need to report [ prob(class_0), prob(class_1)]
static inline int32_t
eml_net_outputs_proba(EmlNet *model) {
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
    int32_t n_outputs = eml_net_outputs(model);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffe4 	bl	8001294 <eml_net_outputs>
 80012cc:	60f8      	str	r0, [r7, #12]
    if (n_outputs == 1) {
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <eml_net_outputs_proba+0x1a>
        n_outputs = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	60fb      	str	r3, [r7, #12]
    }
    return n_outputs;
 80012d8:	68fb      	ldr	r3, [r7, #12]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <eml_net_find_largest_layer>:

// Calculate size of activation value arrays
static int32_t
eml_net_find_largest_layer(EmlNet *model) {
 80012e2:	b480      	push	{r7}
 80012e4:	b085      	sub	sp, #20
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
    int32_t largest = -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<model->n_layers; i++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	e02e      	b.n	8001354 <eml_net_find_largest_layer+0x72>
        if (model->layers[i].n_inputs > largest) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6859      	ldr	r1, [r3, #4]
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	429a      	cmp	r2, r3
 800130c:	da09      	bge.n	8001322 <eml_net_find_largest_layer+0x40>
            largest = model->layers[i].n_inputs;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6859      	ldr	r1, [r3, #4]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	60fb      	str	r3, [r7, #12]
        }
        if (model->layers[i].n_outputs > largest) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6859      	ldr	r1, [r3, #4]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	da09      	bge.n	800134e <eml_net_find_largest_layer+0x6c>
            largest = model->layers[i].n_outputs;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6859      	ldr	r1, [r3, #4]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
    for (int i=0; i<model->n_layers; i++) {
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	3301      	adds	r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	429a      	cmp	r2, r3
 800135c:	dbcb      	blt.n	80012f6 <eml_net_find_largest_layer+0x14>
        }
    }
    return largest;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <eml_net_layer_forward>:

EmlError
eml_net_layer_forward(const EmlNetLayer *layer,
                    const float *in, int32_t in_length,
                    float *out, int32_t out_length)
{
 800136a:	b590      	push	{r4, r7, lr}
 800136c:	b08d      	sub	sp, #52	; 0x34
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	603b      	str	r3, [r7, #0]
    EML_PRECONDITION(in_length >= layer->n_inputs, EmlSizeMismatch);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	da01      	bge.n	8001386 <eml_net_layer_forward+0x1c>
 8001382:	2301      	movs	r3, #1
 8001384:	e0c5      	b.n	8001512 <eml_net_layer_forward+0x1a8>
    EML_PRECONDITION(out_length >= layer->n_outputs, EmlSizeMismatch);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800138c:	429a      	cmp	r2, r3
 800138e:	da01      	bge.n	8001394 <eml_net_layer_forward+0x2a>
 8001390:	2301      	movs	r3, #1
 8001392:	e0be      	b.n	8001512 <eml_net_layer_forward+0x1a8>
    EML_PRECONDITION(layer->weights, EmlUninitialized);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <eml_net_layer_forward+0x36>
 800139c:	2303      	movs	r3, #3
 800139e:	e0b8      	b.n	8001512 <eml_net_layer_forward+0x1a8>
    EML_PRECONDITION(layer->biases, EmlUninitialized);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <eml_net_layer_forward+0x42>
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0b2      	b.n	8001512 <eml_net_layer_forward+0x1a8>
    //printf("weights "); print_array(layer->weights, layer->n_inputs*layer->n_outputs);
    //printf("biases "); print_array(layer->biases, layer->n_outputs);

    // TODO: matrix multiplication should be done in blocks. Ex 2x4*4x2 = 2x2
    // multiply inputs by weights
    for (int o=0; o<layer->n_outputs; o++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b0:	e03e      	b.n	8001430 <eml_net_layer_forward+0xc6>
        float sum = 0.0f;
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int i=0; i<layer->n_inputs; i++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
 80013bc:	e021      	b.n	8001402 <eml_net_layer_forward+0x98>
            const int w_idx = o+(i*layer->n_outputs); // not stored continious
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c4:	fb02 f303 	mul.w	r3, r2, r3
 80013c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ca:	4413      	add	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]
            const float w = layer->weights[w_idx];
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
            sum += w * in[i];
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6939      	ldr	r1, [r7, #16]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fa5f 	bl	80008ac <__aeabi_fmul>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4619      	mov	r1, r3
 80013f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013f4:	f7ff f952 	bl	800069c <__addsf3>
 80013f8:	4603      	mov	r3, r0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int i=0; i<layer->n_inputs; i++) {
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	3301      	adds	r3, #1
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001408:	429a      	cmp	r2, r3
 800140a:	dbd8      	blt.n	80013be <eml_net_layer_forward+0x54>
        }

        out[o] = sum + layer->biases[o];
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	18d4      	adds	r4, r2, r3
 8001420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001422:	f7ff f93b 	bl	800069c <__addsf3>
 8001426:	4603      	mov	r3, r0
 8001428:	6023      	str	r3, [r4, #0]
    for (int o=0; o<layer->n_outputs; o++) {
 800142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142c:	3301      	adds	r3, #1
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001436:	429a      	cmp	r2, r3
 8001438:	dbbb      	blt.n	80013b2 <eml_net_layer_forward+0x48>

    }

    // apply activation function
    if (layer->activation == EmlNetActivationIdentity) {
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	7c1b      	ldrb	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d066      	beq.n	8001510 <eml_net_layer_forward+0x1a6>
        // no-op
    } else if (layer->activation == EmlNetActivationRelu) {
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	7c1b      	ldrb	r3, [r3, #16]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d119      	bne.n	800147e <eml_net_layer_forward+0x114>
        for (int i=0; i<layer->n_outputs; i++) {
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
 800144e:	e010      	b.n	8001472 <eml_net_layer_forward+0x108>
            out[i] = eml_net_relu(out[i]);
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	4413      	add	r3, r2
 8001458:	6819      	ldr	r1, [r3, #0]
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	18d4      	adds	r4, r2, r3
 8001462:	4608      	mov	r0, r1
 8001464:	f7ff fe14 	bl	8001090 <eml_net_relu>
 8001468:	4603      	mov	r3, r0
 800146a:	6023      	str	r3, [r4, #0]
        for (int i=0; i<layer->n_outputs; i++) {
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	3301      	adds	r3, #1
 8001470:	623b      	str	r3, [r7, #32]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6a3a      	ldr	r2, [r7, #32]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbe9      	blt.n	8001450 <eml_net_layer_forward+0xe6>
 800147c:	e048      	b.n	8001510 <eml_net_layer_forward+0x1a6>
        }
    } else if (layer->activation == EmlNetActivationLogistic) {
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	7c1b      	ldrb	r3, [r3, #16]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d119      	bne.n	80014ba <eml_net_layer_forward+0x150>
        for (int i=0; i<layer->n_outputs; i++) {
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e010      	b.n	80014ae <eml_net_layer_forward+0x144>
            out[i] = eml_net_expit(out[i]);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	4413      	add	r3, r2
 8001494:	6819      	ldr	r1, [r3, #0]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	18d4      	adds	r4, r2, r3
 800149e:	4608      	mov	r0, r1
 80014a0:	f7ff fe0a 	bl	80010b8 <eml_net_expit>
 80014a4:	4603      	mov	r3, r0
 80014a6:	6023      	str	r3, [r4, #0]
        for (int i=0; i<layer->n_outputs; i++) {
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	3301      	adds	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dbe9      	blt.n	800148c <eml_net_layer_forward+0x122>
 80014b8:	e02a      	b.n	8001510 <eml_net_layer_forward+0x1a6>
        }
    } else if (layer->activation == EmlNetActivationTanh) {
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	7c1b      	ldrb	r3, [r3, #16]
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d119      	bne.n	80014f6 <eml_net_layer_forward+0x18c>
        for (int i=0; i<layer->n_outputs; i++) {
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
 80014c6:	e010      	b.n	80014ea <eml_net_layer_forward+0x180>
            out[i] = eml_net_tanh(out[i]);
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	6819      	ldr	r1, [r3, #0]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	18d4      	adds	r4, r2, r3
 80014da:	4608      	mov	r0, r1
 80014dc:	f7ff fe07 	bl	80010ee <eml_net_tanh>
 80014e0:	4603      	mov	r3, r0
 80014e2:	6023      	str	r3, [r4, #0]
        for (int i=0; i<layer->n_outputs; i++) {
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	3301      	adds	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbe9      	blt.n	80014c8 <eml_net_layer_forward+0x15e>
 80014f4:	e00c      	b.n	8001510 <eml_net_layer_forward+0x1a6>
        }
    } else if (layer->activation == EmlNetActivationSoftmax) {
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	7c1b      	ldrb	r3, [r3, #16]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d106      	bne.n	800150c <eml_net_layer_forward+0x1a2>
        eml_net_softmax(out, layer->n_outputs);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f7ff fdff 	bl	8001108 <eml_net_softmax>
 800150a:	e001      	b.n	8001510 <eml_net_layer_forward+0x1a6>
    } else {
        return EmlUnsupported;
 800150c:	2302      	movs	r3, #2
 800150e:	e000      	b.n	8001512 <eml_net_layer_forward+0x1a8>
    }

    //printf("activations "); print_array(out, layer->n_outputs);

    return EmlOk;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3734      	adds	r7, #52	; 0x34
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <eml_net_infer>:


// Run inferences. Leaves results in activations2
EmlError
eml_net_infer(EmlNet *model, const float *features, int32_t features_length)
{
 800151a:	b590      	push	{r4, r7, lr}
 800151c:	b08f      	sub	sp, #60	; 0x3c
 800151e:	af02      	add	r7, sp, #8
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
    EML_PRECONDITION(eml_net_valid(model), EmlUninitialized);
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff fe96 	bl	8001258 <eml_net_valid>
 800152c:	4603      	mov	r3, r0
 800152e:	f083 0301 	eor.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <eml_net_infer+0x22>
 8001538:	2303      	movs	r3, #3
 800153a:	e082      	b.n	8001642 <eml_net_infer+0x128>
    EML_PRECONDITION(model->n_layers >= 2, EmlUnsupported);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	dc01      	bgt.n	8001548 <eml_net_infer+0x2e>
 8001544:	2302      	movs	r3, #2
 8001546:	e07c      	b.n	8001642 <eml_net_infer+0x128>
    EML_PRECONDITION(features_length == model->layers[0].n_inputs, EmlSizeMismatch);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <eml_net_infer+0x3e>
 8001554:	2301      	movs	r3, #1
 8001556:	e074      	b.n	8001642 <eml_net_infer+0x128>
    EML_PRECONDITION(model->activations_length >= eml_net_find_largest_layer(model), EmlSizeMismatch);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	691c      	ldr	r4, [r3, #16]
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff fec0 	bl	80012e2 <eml_net_find_largest_layer>
 8001562:	4603      	mov	r3, r0
 8001564:	429c      	cmp	r4, r3
 8001566:	da01      	bge.n	800156c <eml_net_infer+0x52>
 8001568:	2301      	movs	r3, #1
 800156a:	e06a      	b.n	8001642 <eml_net_infer+0x128>

    const int32_t buffer_length = model->activations_length; 
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    float *buffer1 = model->activations1;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	623b      	str	r3, [r7, #32]
    float *buffer2 = model->activations2;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61fb      	str	r3, [r7, #28]

    // Input layer
    EML_CHECK_ERROR(eml_net_layer_forward(&model->layers[0], features,
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6858      	ldr	r0, [r3, #4]
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	f7ff feed 	bl	800136a <eml_net_layer_forward>
 8001590:	4603      	mov	r3, r0
 8001592:	76fb      	strb	r3, [r7, #27]
 8001594:	7efb      	ldrb	r3, [r7, #27]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <eml_net_infer+0x84>
 800159a:	7efb      	ldrb	r3, [r7, #27]
 800159c:	e051      	b.n	8001642 <eml_net_infer+0x128>
                        features_length, buffer1, buffer_length));

    // Hidden layers
    for (int l=1; l<model->n_layers-1; l++) {
 800159e:	2301      	movs	r3, #1
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a2:	e02e      	b.n	8001602 <eml_net_infer+0xe8>
        const EmlNetLayer *layer = &model->layers[l];
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	617b      	str	r3, [r7, #20]
        // PERF: avoid copying, swap buffers instead
        EML_CHECK_ERROR(eml_net_layer_forward(layer, buffer1, buffer_length, buffer2, buffer_length));
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015be:	6a39      	ldr	r1, [r7, #32]
 80015c0:	6978      	ldr	r0, [r7, #20]
 80015c2:	f7ff fed2 	bl	800136a <eml_net_layer_forward>
 80015c6:	4603      	mov	r3, r0
 80015c8:	74fb      	strb	r3, [r7, #19]
 80015ca:	7cfb      	ldrb	r3, [r7, #19]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <eml_net_infer+0xba>
 80015d0:	7cfb      	ldrb	r3, [r7, #19]
 80015d2:	e036      	b.n	8001642 <eml_net_infer+0x128>
        for (int i=0; i<buffer_length; i++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d8:	e00c      	b.n	80015f4 <eml_net_infer+0xda>
            buffer1[i] = buffer2[i];
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	441a      	add	r2, r3
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	6a39      	ldr	r1, [r7, #32]
 80015e8:	440b      	add	r3, r1
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	601a      	str	r2, [r3, #0]
        for (int i=0; i<buffer_length; i++) {
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	3301      	adds	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	429a      	cmp	r2, r3
 80015fa:	dbee      	blt.n	80015da <eml_net_infer+0xc0>
    for (int l=1; l<model->n_layers-1; l++) {
 80015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fe:	3301      	adds	r3, #1
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160a:	429a      	cmp	r2, r3
 800160c:	dbca      	blt.n	80015a4 <eml_net_infer+0x8a>
        }
    }

    // Output layer
    EML_CHECK_ERROR(eml_net_layer_forward(&model->layers[model->n_layers-1],
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	460b      	mov	r3, r1
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	3b14      	subs	r3, #20
 8001622:	18d0      	adds	r0, r2, r3
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162c:	6a39      	ldr	r1, [r7, #32]
 800162e:	f7ff fe9c 	bl	800136a <eml_net_layer_forward>
 8001632:	4603      	mov	r3, r0
 8001634:	76bb      	strb	r3, [r7, #26]
 8001636:	7ebb      	ldrb	r3, [r7, #26]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <eml_net_infer+0x126>
 800163c:	7ebb      	ldrb	r3, [r7, #26]
 800163e:	e000      	b.n	8001642 <eml_net_infer+0x128>
                        buffer1, buffer_length, buffer2, buffer_length));

    return EmlOk;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3734      	adds	r7, #52	; 0x34
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	0000      	movs	r0, r0
 800164c:	0000      	movs	r0, r0
	...

08001650 <eml_net_predict_proba>:

EmlError
eml_net_predict_proba(EmlNet *model, const float *features, int32_t features_length,
                                  float *out, int32_t out_length)
{
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	b08b      	sub	sp, #44	; 0x2c
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
    EML_PRECONDITION(eml_net_valid(model), EmlUninitialized);
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff fdfa 	bl	8001258 <eml_net_valid>
 8001664:	4603      	mov	r3, r0
 8001666:	f083 0301 	eor.w	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <eml_net_predict_proba+0x24>
 8001670:	2303      	movs	r3, #3
 8001672:	e084      	b.n	800177e <eml_net_predict_proba+0x12e>
    EML_PRECONDITION(features, EmlUninitialized);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <eml_net_predict_proba+0x2e>
 800167a:	2303      	movs	r3, #3
 800167c:	e07f      	b.n	800177e <eml_net_predict_proba+0x12e>
    EML_PRECONDITION(out, EmlUninitialized);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <eml_net_predict_proba+0x38>
 8001684:	2303      	movs	r3, #3
 8001686:	e07a      	b.n	800177e <eml_net_predict_proba+0x12e>
    const int32_t n_outputs = eml_net_outputs_proba(model);
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff fe18 	bl	80012be <eml_net_outputs_proba>
 800168e:	61f8      	str	r0, [r7, #28]
    EML_PRECONDITION(out_length == n_outputs, EmlSizeMismatch);
 8001690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <eml_net_predict_proba+0x4c>
 8001698:	2301      	movs	r3, #1
 800169a:	e070      	b.n	800177e <eml_net_predict_proba+0x12e>

    EML_CHECK_ERROR(eml_net_infer(model, features, features_length));
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	68b9      	ldr	r1, [r7, #8]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f7ff ff3a 	bl	800151a <eml_net_infer>
 80016a6:	4603      	mov	r3, r0
 80016a8:	76fb      	strb	r3, [r7, #27]
 80016aa:	7efb      	ldrb	r3, [r7, #27]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <eml_net_predict_proba+0x64>
 80016b0:	7efb      	ldrb	r3, [r7, #27]
 80016b2:	e064      	b.n	800177e <eml_net_predict_proba+0x12e>

    float proba_sum = 0;
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24

    if (n_outputs == 2) {
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d11d      	bne.n	80016fc <eml_net_predict_proba+0xac>
        out[1] = model->activations2[0];
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3304      	adds	r3, #4
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	601a      	str	r2, [r3, #0]
        out[0] = 1.0f - out[1];
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	3304      	adds	r3, #4
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80016d8:	f7fe ffde 	bl	8000698 <__aeabi_fsub>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	601a      	str	r2, [r3, #0]
        proba_sum = out[0] + out[1];
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	3304      	adds	r3, #4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4619      	mov	r1, r3
 80016f0:	4610      	mov	r0, r2
 80016f2:	f7fe ffd3 	bl	800069c <__addsf3>
 80016f6:	4603      	mov	r3, r0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	e01c      	b.n	8001736 <eml_net_predict_proba+0xe6>
    } else {
        for (int i=0; i<n_outputs; i++) {
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
 8001700:	e015      	b.n	800172e <eml_net_predict_proba+0xde>
            const float p = model->activations2[i];
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	617b      	str	r3, [r7, #20]
            out[i] = p;
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	4413      	add	r3, r2
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	601a      	str	r2, [r3, #0]
            proba_sum += p; 
 800171c:	6979      	ldr	r1, [r7, #20]
 800171e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001720:	f7fe ffbc 	bl	800069c <__addsf3>
 8001724:	4603      	mov	r3, r0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
        for (int i=0; i<n_outputs; i++) {
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	3301      	adds	r3, #1
 800172c:	623b      	str	r3, [r7, #32]
 800172e:	6a3a      	ldr	r2, [r7, #32]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbe5      	blt.n	8001702 <eml_net_predict_proba+0xb2>
        }
    }

    EML_POSTCONDITION(fabs(proba_sum - 1.0) < 0.001, EmlPostconditionFailed);
 8001736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001738:	f7fe feca 	bl	80004d0 <__aeabi_f2d>
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <eml_net_predict_proba+0x140>)
 8001742:	f7fe fd65 	bl	8000210 <__aeabi_dsub>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4614      	mov	r4, r2
 800174c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001750:	2301      	movs	r3, #1
 8001752:	461e      	mov	r6, r3
 8001754:	a30c      	add	r3, pc, #48	; (adr r3, 8001788 <eml_net_predict_proba+0x138>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7fe ff6f 	bl	8000640 <__aeabi_dcmplt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <eml_net_predict_proba+0x11c>
 8001768:	2300      	movs	r3, #0
 800176a:	461e      	mov	r6, r3
 800176c:	b2f3      	uxtb	r3, r6
 800176e:	f083 0301 	eor.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <eml_net_predict_proba+0x12c>
 8001778:	2304      	movs	r3, #4
 800177a:	e000      	b.n	800177e <eml_net_predict_proba+0x12e>

    return EmlOk;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	372c      	adds	r7, #44	; 0x2c
 8001782:	46bd      	mov	sp, r7
 8001784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001786:	bf00      	nop
 8001788:	d2f1a9fc 	.word	0xd2f1a9fc
 800178c:	3f50624d 	.word	0x3f50624d
 8001790:	3ff00000 	.word	0x3ff00000

08001794 <eml_net_predict>:


// Return the class, or -EmlError on failure
int32_t
eml_net_predict(EmlNet *model, const float *features, int32_t features_length) {
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]

    const EmlError error = eml_net_infer(model, features, features_length);
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7ff feb8 	bl	800151a <eml_net_infer>
 80017aa:	4603      	mov	r3, r0
 80017ac:	76fb      	strb	r3, [r7, #27]
    if (error != EmlOk) {
 80017ae:	7efb      	ldrb	r3, [r7, #27]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <eml_net_predict+0x26>
        return -error;
 80017b4:	7efb      	ldrb	r3, [r7, #27]
 80017b6:	425b      	negs	r3, r3
 80017b8:	e026      	b.n	8001808 <eml_net_predict+0x74>
    }

    const int32_t n_outputs = eml_net_outputs(model);
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f7ff fd6a 	bl	8001294 <eml_net_outputs>
 80017c0:	6178      	str	r0, [r7, #20]

    int32_t _class = -EmlUnknownError;
 80017c2:	f06f 0304 	mvn.w	r3, #4
 80017c6:	61fb      	str	r3, [r7, #28]
    if (n_outputs == 1) {
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d111      	bne.n	80017f2 <eml_net_predict+0x5e>
        _class = (model->activations2[0] > 0.5f) ? 1 : 0;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4614      	mov	r4, r2
 80017d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fa21 	bl	8000c24 <__aeabi_fcmpgt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <eml_net_predict+0x58>
 80017e8:	2300      	movs	r3, #0
 80017ea:	461c      	mov	r4, r3
 80017ec:	b2e3      	uxtb	r3, r4
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	e009      	b.n	8001806 <eml_net_predict+0x72>
    } else if (n_outputs > 1) {
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	dd06      	ble.n	8001806 <eml_net_predict+0x72>
        _class = eml_net_argmax(model->activations2, n_outputs);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	6979      	ldr	r1, [r7, #20]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fcfa 	bl	80011f8 <eml_net_argmax>
 8001804:	61f8      	str	r0, [r7, #28]
    }

    return _class;
 8001806:	69fb      	ldr	r3, [r7, #28]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3724      	adds	r7, #36	; 0x24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd90      	pop	{r4, r7, pc}

08001810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8001816:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001818:	f000 f9e6 	bl	8001be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181c:	f000 f87e 	bl	800191c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001820:	f7ff fbc8 	bl	8000fb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001824:	f000 f944 	bl	8001ab0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int32_t Data[250] = {0   , 0  , 0  , 0  , 96 , 94 , 0  , 3  , 5   , 20  ,
 8001828:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800182c:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001830:	4a35      	ldr	r2, [pc, #212]	; (8001908 <main+0xf8>)
 8001832:	4618      	mov	r0, r3
 8001834:	4611      	mov	r1, r2
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	461a      	mov	r2, r3
 800183c:	f001 fdb4 	bl	80033a8 <memcpy>
  							0   , 606, 197, 76 , 0  , 104, 0  , 232, 24  , 0   ,
  							1023, 132, 0  , 0  , 0  , 0  , 0  , 0  , 0   , 14  ,
  							0   , 0  , 0  , 0  , 89 , 7  , 0  , 32 , 0   , 72  ,
  							227 , 12 , 0  , 0  , 0  , 9  , 640, 58 , 0   , 0   };

  int mevements = 2;
 8001840:	2302      	movs	r3, #2
 8001842:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
  int move_pred[2] = {100,100};
 8001846:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800184a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800184e:	4a2f      	ldr	r2, [pc, #188]	; (800190c <main+0xfc>)
 8001850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001854:	e883 0003 	stmia.w	r3, {r0, r1}

  float feat1[6] = {166.765579,	27810.758297,	49.856	,124,	83	,22272};
 8001858:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800185c:	f2a3 431c 	subw	r3, r3, #1052	; 0x41c
 8001860:	4a2b      	ldr	r2, [pc, #172]	; (8001910 <main+0x100>)
 8001862:	461c      	mov	r4, r3
 8001864:	4615      	mov	r5, r2
 8001866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800186e:	e884 0003 	stmia.w	r4, {r0, r1}
  float feat2[6] = {135.014401	,18228.888498	,47.916	,131	,90,	15828};
 8001872:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001876:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 800187a:	4a26      	ldr	r2, [pc, #152]	; (8001914 <main+0x104>)
 800187c:	461c      	mov	r4, r3
 800187e:	4615      	mov	r5, r2
 8001880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001884:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001888:	e884 0003 	stmia.w	r4, {r0, r1}

  float error1 = eml_net_predict_proba(&model_2,&feat1[0],6,&move_pred[0],2);
 800188c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001890:	f107 011c 	add.w	r1, r7, #28
 8001894:	2202      	movs	r2, #2
 8001896:	9200      	str	r2, [sp, #0]
 8001898:	2206      	movs	r2, #6
 800189a:	481f      	ldr	r0, [pc, #124]	; (8001918 <main+0x108>)
 800189c:	f7ff fed8 	bl	8001650 <eml_net_predict_proba>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe ffaa 	bl	80007fc <__aeabi_ui2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430

  float class1 = eml_net_predict(&model_2,&feat1[0],6);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	2206      	movs	r2, #6
 80018b4:	4619      	mov	r1, r3
 80018b6:	4818      	ldr	r0, [pc, #96]	; (8001918 <main+0x108>)
 80018b8:	f7ff ff6c 	bl	8001794 <eml_net_predict>
 80018bc:	4603      	mov	r3, r0
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe ffa0 	bl	8000804 <__aeabi_i2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c


  float error2 = eml_net_predict_proba(&model_2,&feat2[0],6,&move_pred[0],2);
 80018ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ce:	1d39      	adds	r1, r7, #4
 80018d0:	2202      	movs	r2, #2
 80018d2:	9200      	str	r2, [sp, #0]
 80018d4:	2206      	movs	r2, #6
 80018d6:	4810      	ldr	r0, [pc, #64]	; (8001918 <main+0x108>)
 80018d8:	f7ff feba 	bl	8001650 <eml_net_predict_proba>
 80018dc:	4603      	mov	r3, r0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe ff8c 	bl	80007fc <__aeabi_ui2f>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428

  float class2 = eml_net_predict(&model_2,&feat2[0],6);
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2206      	movs	r2, #6
 80018ee:	4619      	mov	r1, r3
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <main+0x108>)
 80018f2:	f7ff ff4f 	bl	8001794 <eml_net_predict>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe ff83 	bl	8000804 <__aeabi_i2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424

  while (1)
 8001904:	e7fe      	b.n	8001904 <main+0xf4>
 8001906:	bf00      	nop
 8001908:	08003d20 	.word	0x08003d20
 800190c:	08004108 	.word	0x08004108
 8001910:	08004110 	.word	0x08004110
 8001914:	08004128 	.word	0x08004128
 8001918:	20000000 	.word	0x20000000

0800191c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b094      	sub	sp, #80	; 0x50
 8001920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	2234      	movs	r2, #52	; 0x34
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f001 fd4a 	bl	80033c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <SystemClock_Config+0xd4>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <SystemClock_Config+0xd4>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <SystemClock_Config+0xd4>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800195c:	2300      	movs	r3, #0
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <SystemClock_Config+0xd8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001968:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <SystemClock_Config+0xd8>)
 800196a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <SystemClock_Config+0xd8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800197c:	2302      	movs	r3, #2
 800197e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001980:	2301      	movs	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001984:	2310      	movs	r3, #16
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001988:	2302      	movs	r3, #2
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800198c:	2300      	movs	r3, #0
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001990:	2310      	movs	r3, #16
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001994:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001998:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800199a:	2304      	movs	r3, #4
 800199c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800199e:	2302      	movs	r3, #2
 80019a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019a2:	2302      	movs	r3, #2
 80019a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 ff6a 	bl	8002884 <HAL_RCC_OscConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80019b6:	f000 f81f 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ba:	230f      	movs	r3, #15
 80019bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019be:	2302      	movs	r3, #2
 80019c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	2102      	movs	r1, #2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 fc02 	bl	80021e0 <HAL_RCC_ClockConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80019e2:	f000 f809 	bl	80019f8 <Error_Handler>
  }
}
 80019e6:	bf00      	nop
 80019e8:	3750      	adds	r7, #80	; 0x50
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <Error_Handler+0x8>
	...

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	; 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a42:	2007      	movs	r0, #7
 8001a44:	f000 f9ee 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9a:	f000 f8f7 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
	...

08001ab0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <MX_USART2_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_USART2_UART_Init+0x4c>)
 8001ae8:	f001 f96a 	bl	8002dc0 <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f7ff ff81 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000d20 	.word	0x20000d20
 8001b00:	40004400 	.word	0x40004400

08001b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_UART_MspInit+0x84>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d12b      	bne.n	8001b7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a10      	ldr	r2, [pc, #64]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_UART_MspInit+0x88>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b5e:	230c      	movs	r3, #12
 8001b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <HAL_UART_MspInit+0x8c>)
 8001b7a:	f000 f987 	bl	8001e8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40004400 	.word	0x40004400
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020000 	.word	0x40020000

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9a:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b9c:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb0:	4c0b      	ldr	r4, [pc, #44]	; (8001be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bbe:	f7ff ff70 	bl	8001aa2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f001 fbcd 	bl	8003360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff fe23 	bl	8001810 <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001bd8:	080073b0 	.word	0x080073b0
  ldr r2, =_sbss
 8001bdc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001be0:	20000d68 	.word	0x20000d68

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>
	...

08001be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_Init+0x40>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_Init+0x40>)
 8001bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_Init+0x40>)
 8001bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_Init+0x40>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f907 	bl	8001e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fef2 	bl	8001a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f911 	bl	8001e72 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 f8e7 	bl	8001e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000014 	.word	0x20000014
 8001c84:	2000001c 	.word	0x2000001c
 8001c88:	20000018 	.word	0x20000018

08001c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_IncTick+0x1c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_IncTick+0x20>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a03      	ldr	r2, [pc, #12]	; (8001cac <HAL_IncTick+0x20>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	2000001c 	.word	0x2000001c
 8001cac:	20000d64 	.word	0x20000d64

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_GetTick+0x10>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000d64 	.word	0x20000d64

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df0:	d301      	bcc.n	8001df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <SysTick_Config+0x40>)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfe:	210f      	movs	r1, #15
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f7ff ff90 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <SysTick_Config+0x40>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <SysTick_Config+0x40>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	e000e010 	.word	0xe000e010

08001e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ff49 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4c:	f7ff ff5e 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	6978      	ldr	r0, [r7, #20]
 8001e58:	f7ff ff90 	bl	8001d7c <NVIC_EncodePriority>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff5f 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffb0 	bl	8001de0 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	e165      	b.n	8002174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f040 8154 	bne.w	800216e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d005      	beq.n	8001ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d130      	bne.n	8001f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f14:	2201      	movs	r2, #1
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 0201 	and.w	r2, r3, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d017      	beq.n	8001f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	2203      	movs	r2, #3
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d123      	bne.n	8001fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	08da      	lsrs	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3208      	adds	r2, #8
 8001f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	08da      	lsrs	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3208      	adds	r2, #8
 8001fca:	69b9      	ldr	r1, [r7, #24]
 8001fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0203 	and.w	r2, r3, #3
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80ae 	beq.w	800216e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b5c      	ldr	r3, [pc, #368]	; (8002188 <HAL_GPIO_Init+0x2fc>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a5b      	ldr	r2, [pc, #364]	; (8002188 <HAL_GPIO_Init+0x2fc>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_GPIO_Init+0x2fc>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800202e:	4a57      	ldr	r2, [pc, #348]	; (800218c <HAL_GPIO_Init+0x300>)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	220f      	movs	r2, #15
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4e      	ldr	r2, [pc, #312]	; (8002190 <HAL_GPIO_Init+0x304>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d025      	beq.n	80020a6 <HAL_GPIO_Init+0x21a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4d      	ldr	r2, [pc, #308]	; (8002194 <HAL_GPIO_Init+0x308>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d01f      	beq.n	80020a2 <HAL_GPIO_Init+0x216>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4c      	ldr	r2, [pc, #304]	; (8002198 <HAL_GPIO_Init+0x30c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x212>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4b      	ldr	r2, [pc, #300]	; (800219c <HAL_GPIO_Init+0x310>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x20e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4a      	ldr	r2, [pc, #296]	; (80021a0 <HAL_GPIO_Init+0x314>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x20a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a49      	ldr	r2, [pc, #292]	; (80021a4 <HAL_GPIO_Init+0x318>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x206>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a48      	ldr	r2, [pc, #288]	; (80021a8 <HAL_GPIO_Init+0x31c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x202>
 800208a:	2306      	movs	r3, #6
 800208c:	e00c      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 800208e:	2307      	movs	r3, #7
 8002090:	e00a      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 8002092:	2305      	movs	r3, #5
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 8002096:	2304      	movs	r3, #4
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x21c>
 80020a6:	2300      	movs	r3, #0
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b8:	4934      	ldr	r1, [pc, #208]	; (800218c <HAL_GPIO_Init+0x300>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b39      	ldr	r3, [pc, #228]	; (80021ac <HAL_GPIO_Init+0x320>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a30      	ldr	r2, [pc, #192]	; (80021ac <HAL_GPIO_Init+0x320>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_GPIO_Init+0x320>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a25      	ldr	r2, [pc, #148]	; (80021ac <HAL_GPIO_Init+0x320>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_GPIO_Init+0x320>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213e:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <HAL_GPIO_Init+0x320>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_GPIO_Init+0x320>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002168:	4a10      	ldr	r2, [pc, #64]	; (80021ac <HAL_GPIO_Init+0x320>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	f67f ae96 	bls.w	8001ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3724      	adds	r7, #36	; 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40023800 	.word	0x40023800
 800218c:	40013800 	.word	0x40013800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	40020800 	.word	0x40020800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40021400 	.word	0x40021400
 80021a8:	40021800 	.word	0x40021800
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021cc:	e003      	b.n	80021d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	619a      	str	r2, [r3, #24]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0cc      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d90c      	bls.n	800221c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0b8      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002234:	4b59      	ldr	r3, [pc, #356]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a58      	ldr	r2, [pc, #352]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800223e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800224c:	4b53      	ldr	r3, [pc, #332]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a52      	ldr	r2, [pc, #328]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	494d      	ldr	r1, [pc, #308]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d044      	beq.n	8002300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d119      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e07f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d003      	beq.n	800229e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	2b03      	cmp	r3, #3
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	4b3f      	ldr	r3, [pc, #252]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ae:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e067      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022be:	4b37      	ldr	r3, [pc, #220]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f023 0203 	bic.w	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4934      	ldr	r1, [pc, #208]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d0:	f7ff fcee 	bl	8001cb0 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d8:	f7ff fcea 	bl	8001cb0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e04f      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 020c 	and.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1eb      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002300:	4b25      	ldr	r3, [pc, #148]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d20c      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e032      	b.n	800238e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4916      	ldr	r1, [pc, #88]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	490e      	ldr	r1, [pc, #56]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002366:	f000 f853 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 800236a:	4602      	mov	r2, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	490a      	ldr	r1, [pc, #40]	; (80023a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	5ccb      	ldrb	r3, [r1, r3]
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fc50 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023c00 	.word	0x40023c00
 800239c:	40023800 	.word	0x40023800
 80023a0:	0800736c 	.word	0x0800736c
 80023a4:	20000014 	.word	0x20000014
 80023a8:	20000018 	.word	0x20000018

080023ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b02      	ldr	r3, [pc, #8]	; (80023bc <HAL_RCC_GetHCLKFreq+0x10>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	20000014 	.word	0x20000014

080023c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023c4:	f7ff fff2 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	0a9b      	lsrs	r3, r3, #10
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4903      	ldr	r1, [pc, #12]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	0800737c 	.word	0x0800737c

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023ec:	f7ff ffde 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	0b5b      	lsrs	r3, r3, #13
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4903      	ldr	r1, [pc, #12]	; (800240c <HAL_RCC_GetPCLK2Freq+0x24>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	0800737c 	.word	0x0800737c

08002410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002414:	b0ae      	sub	sp, #184	; 0xb8
 8002416:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002436:	4bcf      	ldr	r3, [pc, #828]	; (8002774 <HAL_RCC_GetSysClockFreq+0x364>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b0c      	cmp	r3, #12
 8002440:	f200 8211 	bhi.w	8002866 <HAL_RCC_GetSysClockFreq+0x456>
 8002444:	a201      	add	r2, pc, #4	; (adr r2, 800244c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	08002481 	.word	0x08002481
 8002450:	08002867 	.word	0x08002867
 8002454:	08002867 	.word	0x08002867
 8002458:	08002867 	.word	0x08002867
 800245c:	08002489 	.word	0x08002489
 8002460:	08002867 	.word	0x08002867
 8002464:	08002867 	.word	0x08002867
 8002468:	08002867 	.word	0x08002867
 800246c:	08002491 	.word	0x08002491
 8002470:	08002867 	.word	0x08002867
 8002474:	08002867 	.word	0x08002867
 8002478:	08002867 	.word	0x08002867
 800247c:	0800268d 	.word	0x0800268d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002480:	4bbd      	ldr	r3, [pc, #756]	; (8002778 <HAL_RCC_GetSysClockFreq+0x368>)
 8002482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002486:	e1f2      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002488:	4bbc      	ldr	r3, [pc, #752]	; (800277c <HAL_RCC_GetSysClockFreq+0x36c>)
 800248a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800248e:	e1ee      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002490:	4bb8      	ldr	r3, [pc, #736]	; (8002774 <HAL_RCC_GetSysClockFreq+0x364>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800249c:	4bb5      	ldr	r3, [pc, #724]	; (8002774 <HAL_RCC_GetSysClockFreq+0x364>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d075      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x184>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a8:	4bb2      	ldr	r3, [pc, #712]	; (8002774 <HAL_RCC_GetSysClockFreq+0x364>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	2200      	movs	r2, #0
 80024b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80024b4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80024b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80024ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80024ce:	4622      	mov	r2, r4
 80024d0:	462b      	mov	r3, r5
 80024d2:	f04f 0000 	mov.w	r0, #0
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	0159      	lsls	r1, r3, #5
 80024dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e0:	0150      	lsls	r0, r2, #5
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4621      	mov	r1, r4
 80024e8:	1a51      	subs	r1, r2, r1
 80024ea:	6439      	str	r1, [r7, #64]	; 0x40
 80024ec:	4629      	mov	r1, r5
 80024ee:	eb63 0301 	sbc.w	r3, r3, r1
 80024f2:	647b      	str	r3, [r7, #68]	; 0x44
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002500:	4649      	mov	r1, r9
 8002502:	018b      	lsls	r3, r1, #6
 8002504:	4641      	mov	r1, r8
 8002506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800250a:	4641      	mov	r1, r8
 800250c:	018a      	lsls	r2, r1, #6
 800250e:	46c4      	mov	ip, r8
 8002510:	ebb2 0c0c 	subs.w	ip, r2, ip
 8002514:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 8002518:	4649      	mov	r1, r9
 800251a:	eb63 0301 	sbc.w	r3, r3, r1
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800252c:	4649      	mov	r1, r9
 800252e:	00cb      	lsls	r3, r1, #3
 8002530:	46c4      	mov	ip, r8
 8002532:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8002536:	4641      	mov	r1, r8
 8002538:	00ca      	lsls	r2, r1, #3
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	4603      	mov	r3, r0
 8002540:	4622      	mov	r2, r4
 8002542:	189b      	adds	r3, r3, r2
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
 8002546:	462b      	mov	r3, r5
 8002548:	460a      	mov	r2, r1
 800254a:	eb42 0303 	adc.w	r3, r2, r3
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800255c:	4629      	mov	r1, r5
 800255e:	024b      	lsls	r3, r1, #9
 8002560:	4620      	mov	r0, r4
 8002562:	4629      	mov	r1, r5
 8002564:	4604      	mov	r4, r0
 8002566:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800256a:	4601      	mov	r1, r0
 800256c:	024a      	lsls	r2, r1, #9
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002576:	2200      	movs	r2, #0
 8002578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800257c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002580:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002584:	f7fe fb94 	bl	8000cb0 <__aeabi_uldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4613      	mov	r3, r2
 800258e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002592:	e069      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x258>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002594:	4b77      	ldr	r3, [pc, #476]	; (8002774 <HAL_RCC_GetSysClockFreq+0x364>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	2200      	movs	r2, #0
 800259c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80025a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ae:	2300      	movs	r3, #0
 80025b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4621      	mov	r1, r4
 80025d0:	1a51      	subs	r1, r2, r1
 80025d2:	62b9      	str	r1, [r7, #40]	; 0x28
 80025d4:	4629      	mov	r1, r5
 80025d6:	eb63 0301 	sbc.w	r3, r3, r1
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80025e8:	4649      	mov	r1, r9
 80025ea:	018b      	lsls	r3, r1, #6
 80025ec:	4641      	mov	r1, r8
 80025ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f2:	4641      	mov	r1, r8
 80025f4:	018a      	lsls	r2, r1, #6
 80025f6:	46c4      	mov	ip, r8
 80025f8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80025fc:	4649      	mov	r1, r9
 80025fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800260e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002612:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002616:	4692      	mov	sl, r2
 8002618:	469b      	mov	fp, r3
 800261a:	4623      	mov	r3, r4
 800261c:	eb1a 0303 	adds.w	r3, sl, r3
 8002620:	623b      	str	r3, [r7, #32]
 8002622:	462b      	mov	r3, r5
 8002624:	eb4b 0303 	adc.w	r3, fp, r3
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002636:	4629      	mov	r1, r5
 8002638:	028b      	lsls	r3, r1, #10
 800263a:	4620      	mov	r0, r4
 800263c:	4629      	mov	r1, r5
 800263e:	4604      	mov	r4, r0
 8002640:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002644:	4601      	mov	r1, r0
 8002646:	028a      	lsls	r2, r1, #10
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002650:	2200      	movs	r2, #0
 8002652:	673b      	str	r3, [r7, #112]	; 0x70
 8002654:	677a      	str	r2, [r7, #116]	; 0x74
 8002656:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800265a:	f7fe fb29 	bl	8000cb0 <__aeabi_uldivmod>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4613      	mov	r3, r2
 8002664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002668:	4b42      	ldr	r3, [pc, #264]	; (8002774 <HAL_RCC_GetSysClockFreq+0x364>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	3301      	adds	r3, #1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800267a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800267e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002682:	fbb2 f3f3 	udiv	r3, r2, r3
 8002686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800268a:	e0f0      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800268c:	4b39      	ldr	r3, [pc, #228]	; (8002774 <HAL_RCC_GetSysClockFreq+0x364>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002698:	4b36      	ldr	r3, [pc, #216]	; (8002774 <HAL_RCC_GetSysClockFreq+0x364>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x370>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_RCC_GetSysClockFreq+0x364>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	2200      	movs	r2, #0
 80026ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80026ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b6:	663b      	str	r3, [r7, #96]	; 0x60
 80026b8:	2300      	movs	r3, #0
 80026ba:	667b      	str	r3, [r7, #100]	; 0x64
 80026bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80026c0:	4622      	mov	r2, r4
 80026c2:	462b      	mov	r3, r5
 80026c4:	f04f 0000 	mov.w	r0, #0
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	0159      	lsls	r1, r3, #5
 80026ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d2:	0150      	lsls	r0, r2, #5
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4621      	mov	r1, r4
 80026da:	1a51      	subs	r1, r2, r1
 80026dc:	61b9      	str	r1, [r7, #24]
 80026de:	4629      	mov	r1, r5
 80026e0:	eb63 0301 	sbc.w	r3, r3, r1
 80026e4:	61fb      	str	r3, [r7, #28]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026f2:	4659      	mov	r1, fp
 80026f4:	018b      	lsls	r3, r1, #6
 80026f6:	4651      	mov	r1, sl
 80026f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fc:	4651      	mov	r1, sl
 80026fe:	018a      	lsls	r2, r1, #6
 8002700:	46d4      	mov	ip, sl
 8002702:	ebb2 080c 	subs.w	r8, r2, ip
 8002706:	4659      	mov	r1, fp
 8002708:	eb63 0901 	sbc.w	r9, r3, r1
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002718:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002720:	4690      	mov	r8, r2
 8002722:	4699      	mov	r9, r3
 8002724:	4623      	mov	r3, r4
 8002726:	eb18 0303 	adds.w	r3, r8, r3
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	462b      	mov	r3, r5
 800272e:	eb49 0303 	adc.w	r3, r9, r3
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002740:	4629      	mov	r1, r5
 8002742:	024b      	lsls	r3, r1, #9
 8002744:	4620      	mov	r0, r4
 8002746:	4629      	mov	r1, r5
 8002748:	4604      	mov	r4, r0
 800274a:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800274e:	4601      	mov	r1, r0
 8002750:	024a      	lsls	r2, r1, #9
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800275a:	2200      	movs	r2, #0
 800275c:	65bb      	str	r3, [r7, #88]	; 0x58
 800275e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002760:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002764:	f7fe faa4 	bl	8000cb0 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4613      	mov	r3, r2
 800276e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002772:	e068      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x436>
 8002774:	40023800 	.word	0x40023800
 8002778:	00f42400 	.word	0x00f42400
 800277c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4b3e      	ldr	r3, [pc, #248]	; (800287c <HAL_RCC_GetSysClockFreq+0x46c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2200      	movs	r2, #0
 8002788:	4618      	mov	r0, r3
 800278a:	4611      	mov	r1, r2
 800278c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002790:	653b      	str	r3, [r7, #80]	; 0x50
 8002792:	2300      	movs	r3, #0
 8002794:	657b      	str	r3, [r7, #84]	; 0x54
 8002796:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800279a:	4642      	mov	r2, r8
 800279c:	464b      	mov	r3, r9
 800279e:	f04f 0000 	mov.w	r0, #0
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	0159      	lsls	r1, r3, #5
 80027a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ac:	0150      	lsls	r0, r2, #5
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4641      	mov	r1, r8
 80027b4:	1a51      	subs	r1, r2, r1
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	4649      	mov	r1, r9
 80027ba:	eb63 0301 	sbc.w	r3, r3, r1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80027cc:	4659      	mov	r1, fp
 80027ce:	018b      	lsls	r3, r1, #6
 80027d0:	4651      	mov	r1, sl
 80027d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d6:	4651      	mov	r1, sl
 80027d8:	018a      	lsls	r2, r1, #6
 80027da:	46d4      	mov	ip, sl
 80027dc:	ebb2 040c 	subs.w	r4, r2, ip
 80027e0:	4659      	mov	r1, fp
 80027e2:	eb63 0501 	sbc.w	r5, r3, r1
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	00eb      	lsls	r3, r5, #3
 80027f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027f4:	00e2      	lsls	r2, r4, #3
 80027f6:	4614      	mov	r4, r2
 80027f8:	461d      	mov	r5, r3
 80027fa:	4643      	mov	r3, r8
 80027fc:	18e3      	adds	r3, r4, r3
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	464b      	mov	r3, r9
 8002802:	eb45 0303 	adc.w	r3, r5, r3
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002814:	4629      	mov	r1, r5
 8002816:	028b      	lsls	r3, r1, #10
 8002818:	4620      	mov	r0, r4
 800281a:	4629      	mov	r1, r5
 800281c:	4604      	mov	r4, r0
 800281e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002822:	4601      	mov	r1, r0
 8002824:	028a      	lsls	r2, r1, #10
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800282e:	2200      	movs	r2, #0
 8002830:	64bb      	str	r3, [r7, #72]	; 0x48
 8002832:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002834:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002838:	f7fe fa3a 	bl	8000cb0 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_RCC_GetSysClockFreq+0x46c>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0f1b      	lsrs	r3, r3, #28
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002854:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002858:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002864:	e003      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x45e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_GetSysClockFreq+0x470>)
 8002868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800286c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002872:	4618      	mov	r0, r3
 8002874:	37b8      	adds	r7, #184	; 0xb8
 8002876:	46bd      	mov	sp, r7
 8002878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	00f42400 	.word	0x00f42400

08002884 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e28d      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8083 	beq.w	80029aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028a4:	4b94      	ldr	r3, [pc, #592]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d019      	beq.n	80028e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028b0:	4b91      	ldr	r3, [pc, #580]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028bc:	4b8e      	ldr	r3, [pc, #568]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c8:	d00c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ca:	4b8b      	ldr	r3, [pc, #556]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d112      	bne.n	80028fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d6:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e2:	d10b      	bne.n	80028fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	4b84      	ldr	r3, [pc, #528]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d05b      	beq.n	80029a8 <HAL_RCC_OscConfig+0x124>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d157      	bne.n	80029a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e25a      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002904:	d106      	bne.n	8002914 <HAL_RCC_OscConfig+0x90>
 8002906:	4b7c      	ldr	r3, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a7b      	ldr	r2, [pc, #492]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e01d      	b.n	8002950 <HAL_RCC_OscConfig+0xcc>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0xb4>
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a72      	ldr	r2, [pc, #456]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0xcc>
 8002938:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a6e      	ldr	r2, [pc, #440]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 800293e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b6c      	ldr	r3, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6b      	ldr	r2, [pc, #428]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 800294a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7ff f9aa 	bl	8001cb0 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002960:	f7ff f9a6 	bl	8001cb0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e21f      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0xdc>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7ff f996 	bl	8001cb0 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002988:	f7ff f992 	bl	8001cb0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e20b      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x104>
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d06f      	beq.n	8002a96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029b6:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d017      	beq.n	80029f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029c2:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d105      	bne.n	80029da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d11c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029e6:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_RCC_OscConfig+0x186>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e1d3      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4937      	ldr	r1, [pc, #220]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1e:	e03a      	b.n	8002a96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d020      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a28:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_RCC_OscConfig+0x278>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2e:	f7ff f93f 	bl	8001cb0 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a36:	f7ff f93b 	bl	8001cb0 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e1b4      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4925      	ldr	r1, [pc, #148]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
 8002a68:	e015      	b.n	8002a96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <HAL_RCC_OscConfig+0x278>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7ff f91e 	bl	8001cb0 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a78:	f7ff f91a 	bl	8001cb0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e193      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8a:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d036      	beq.n	8002b10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_RCC_OscConfig+0x27c>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7ff f8fe 	bl	8001cb0 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7ff f8fa 	bl	8001cb0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e173      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x234>
 8002ad6:	e01b      	b.n	8002b10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_OscConfig+0x27c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7ff f8e7 	bl	8001cb0 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	e00e      	b.n	8002b04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7ff f8e3 	bl	8001cb0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d907      	bls.n	8002b04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e15c      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
 8002af8:	40023800 	.word	0x40023800
 8002afc:	42470000 	.word	0x42470000
 8002b00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b04:	4b8a      	ldr	r3, [pc, #552]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ea      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8097 	beq.w	8002c4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b22:	4b83      	ldr	r3, [pc, #524]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10f      	bne.n	8002b4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	4b7f      	ldr	r3, [pc, #508]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	4a7e      	ldr	r2, [pc, #504]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3e:	4b7c      	ldr	r3, [pc, #496]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	4b79      	ldr	r3, [pc, #484]	; (8002d34 <HAL_RCC_OscConfig+0x4b0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d118      	bne.n	8002b8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5a:	4b76      	ldr	r3, [pc, #472]	; (8002d34 <HAL_RCC_OscConfig+0x4b0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a75      	ldr	r2, [pc, #468]	; (8002d34 <HAL_RCC_OscConfig+0x4b0>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b66:	f7ff f8a3 	bl	8001cb0 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7ff f89f 	bl	8001cb0 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e118      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	4b6c      	ldr	r3, [pc, #432]	; (8002d34 <HAL_RCC_OscConfig+0x4b0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x31e>
 8002b94:	4b66      	ldr	r3, [pc, #408]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a65      	ldr	r2, [pc, #404]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCC_OscConfig+0x358>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x340>
 8002baa:	4b61      	ldr	r3, [pc, #388]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a60      	ldr	r2, [pc, #384]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	4b5e      	ldr	r3, [pc, #376]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a5d      	ldr	r2, [pc, #372]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0x358>
 8002bc4:	4b5a      	ldr	r3, [pc, #360]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a59      	ldr	r2, [pc, #356]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd0:	4b57      	ldr	r3, [pc, #348]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	4a56      	ldr	r2, [pc, #344]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002bd6:	f023 0304 	bic.w	r3, r3, #4
 8002bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7ff f864 	bl	8001cb0 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7ff f860 	bl	8001cb0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0d7      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c02:	4b4b      	ldr	r3, [pc, #300]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ee      	beq.n	8002bec <HAL_RCC_OscConfig+0x368>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7ff f84e 	bl	8001cb0 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7ff f84a 	bl	8001cb0 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0c1      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2e:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ee      	bne.n	8002c18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c40:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	4a3a      	ldr	r2, [pc, #232]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80ad 	beq.w	8002db0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c56:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d060      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d145      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <HAL_RCC_OscConfig+0x4b4>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7ff f81e 	bl	8001cb0 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c78:	f7ff f81a 	bl	8001cb0 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e093      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69da      	ldr	r2, [r3, #28]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	019b      	lsls	r3, r3, #6
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	085b      	lsrs	r3, r3, #1
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	071b      	lsls	r3, r3, #28
 8002cc2:	491b      	ldr	r1, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x4b4>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cce:	f7fe ffef 	bl	8001cb0 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7fe ffeb 	bl	8001cb0 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e064      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce8:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x452>
 8002cf4:	e05c      	b.n	8002db0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_RCC_OscConfig+0x4b4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe ffd8 	bl	8001cb0 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe ffd4 	bl	8001cb0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e04d      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x480>
 8002d22:	e045      	b.n	8002db0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e040      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40007000 	.word	0x40007000
 8002d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_RCC_OscConfig+0x538>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d030      	beq.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d129      	bne.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d122      	bne.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d119      	bne.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	3b01      	subs	r3, #1
 8002d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d10f      	bne.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e03f      	b.n	8002e52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fe8c 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	; 0x24
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f829 	bl	8002e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e60:	b0c0      	sub	sp, #256	; 0x100
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	68d9      	ldr	r1, [r3, #12]
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	ea40 0301 	orr.w	r3, r0, r1
 8002e84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002eb4:	f021 010c 	bic.w	r1, r1, #12
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	6999      	ldr	r1, [r3, #24]
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	ea40 0301 	orr.w	r3, r0, r1
 8002ee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b91      	ldr	r3, [pc, #580]	; (8003130 <UART_SetConfig+0x2d4>)
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d005      	beq.n	8002efc <UART_SetConfig+0xa0>
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4b8f      	ldr	r3, [pc, #572]	; (8003134 <UART_SetConfig+0x2d8>)
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d104      	bne.n	8002f06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002efc:	f7ff fa74 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8002f00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f04:	e003      	b.n	8002f0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f06:	f7ff fa5b 	bl	80023c0 <HAL_RCC_GetPCLK1Freq>
 8002f0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f18:	f040 8110 	bne.w	800313c <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f2e:	4622      	mov	r2, r4
 8002f30:	462b      	mov	r3, r5
 8002f32:	1891      	adds	r1, r2, r2
 8002f34:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f36:	415b      	adcs	r3, r3
 8002f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f3e:	4620      	mov	r0, r4
 8002f40:	4629      	mov	r1, r5
 8002f42:	4604      	mov	r4, r0
 8002f44:	eb12 0804 	adds.w	r8, r2, r4
 8002f48:	460c      	mov	r4, r1
 8002f4a:	eb43 0904 	adc.w	r9, r3, r4
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f62:	4690      	mov	r8, r2
 8002f64:	4699      	mov	r9, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	eb18 0303 	adds.w	r3, r8, r3
 8002f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f70:	460b      	mov	r3, r1
 8002f72:	eb49 0303 	adc.w	r3, r9, r3
 8002f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f8e:	460b      	mov	r3, r1
 8002f90:	18db      	adds	r3, r3, r3
 8002f92:	653b      	str	r3, [r7, #80]	; 0x50
 8002f94:	4613      	mov	r3, r2
 8002f96:	eb42 0303 	adc.w	r3, r2, r3
 8002f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fa4:	f7fd fe84 	bl	8000cb0 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4b62      	ldr	r3, [pc, #392]	; (8003138 <UART_SetConfig+0x2dc>)
 8002fae:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	011c      	lsls	r4, r3, #4
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fc0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fd8:	4645      	mov	r5, r8
 8002fda:	eb12 0a05 	adds.w	sl, r2, r5
 8002fde:	4640      	mov	r0, r8
 8002fe0:	4649      	mov	r1, r9
 8002fe2:	460d      	mov	r5, r1
 8002fe4:	eb43 0b05 	adc.w	fp, r3, r5
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ffc:	4692      	mov	sl, r2
 8002ffe:	469b      	mov	fp, r3
 8003000:	4603      	mov	r3, r0
 8003002:	eb1a 0303 	adds.w	r3, sl, r3
 8003006:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800300a:	460b      	mov	r3, r1
 800300c:	eb4b 0303 	adc.w	r3, fp, r3
 8003010:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003020:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003028:	460b      	mov	r3, r1
 800302a:	18db      	adds	r3, r3, r3
 800302c:	643b      	str	r3, [r7, #64]	; 0x40
 800302e:	4613      	mov	r3, r2
 8003030:	eb42 0303 	adc.w	r3, r2, r3
 8003034:	647b      	str	r3, [r7, #68]	; 0x44
 8003036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800303a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800303e:	f7fd fe37 	bl	8000cb0 <__aeabi_uldivmod>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4611      	mov	r1, r2
 8003048:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <UART_SetConfig+0x2dc>)
 800304a:	fba3 2301 	umull	r2, r3, r3, r1
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2264      	movs	r2, #100	; 0x64
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	1acb      	subs	r3, r1, r3
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <UART_SetConfig+0x2dc>)
 8003060:	fba3 2302 	umull	r2, r3, r3, r2
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800306c:	441c      	add	r4, r3
 800306e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003072:	2200      	movs	r2, #0
 8003074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003078:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800307c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003080:	4642      	mov	r2, r8
 8003082:	464b      	mov	r3, r9
 8003084:	1891      	adds	r1, r2, r2
 8003086:	63b9      	str	r1, [r7, #56]	; 0x38
 8003088:	415b      	adcs	r3, r3
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003090:	4641      	mov	r1, r8
 8003092:	1851      	adds	r1, r2, r1
 8003094:	6339      	str	r1, [r7, #48]	; 0x30
 8003096:	4649      	mov	r1, r9
 8003098:	414b      	adcs	r3, r1
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030a8:	4659      	mov	r1, fp
 80030aa:	00cb      	lsls	r3, r1, #3
 80030ac:	4655      	mov	r5, sl
 80030ae:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80030b2:	4651      	mov	r1, sl
 80030b4:	00ca      	lsls	r2, r1, #3
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	4642      	mov	r2, r8
 80030be:	189b      	adds	r3, r3, r2
 80030c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030c4:	464b      	mov	r3, r9
 80030c6:	460a      	mov	r2, r1
 80030c8:	eb42 0303 	adc.w	r3, r2, r3
 80030cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030e4:	460b      	mov	r3, r1
 80030e6:	18db      	adds	r3, r3, r3
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ea:	4613      	mov	r3, r2
 80030ec:	eb42 0303 	adc.w	r3, r2, r3
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030fa:	f7fd fdd9 	bl	8000cb0 <__aeabi_uldivmod>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <UART_SetConfig+0x2dc>)
 8003104:	fba3 1302 	umull	r1, r3, r3, r2
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	2164      	movs	r1, #100	; 0x64
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	3332      	adds	r3, #50	; 0x32
 8003116:	4a08      	ldr	r2, [pc, #32]	; (8003138 <UART_SetConfig+0x2dc>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	095b      	lsrs	r3, r3, #5
 800311e:	f003 0207 	and.w	r2, r3, #7
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4422      	add	r2, r4
 800312a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800312c:	e109      	b.n	8003342 <UART_SetConfig+0x4e6>
 800312e:	bf00      	nop
 8003130:	40011000 	.word	0x40011000
 8003134:	40011400 	.word	0x40011400
 8003138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800313c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003140:	2200      	movs	r2, #0
 8003142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003146:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800314a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800314e:	4642      	mov	r2, r8
 8003150:	464b      	mov	r3, r9
 8003152:	1891      	adds	r1, r2, r2
 8003154:	6239      	str	r1, [r7, #32]
 8003156:	415b      	adcs	r3, r3
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
 800315a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800315e:	4641      	mov	r1, r8
 8003160:	1854      	adds	r4, r2, r1
 8003162:	46cc      	mov	ip, r9
 8003164:	eb43 050c 	adc.w	r5, r3, ip
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	00eb      	lsls	r3, r5, #3
 8003172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003176:	00e2      	lsls	r2, r4, #3
 8003178:	4614      	mov	r4, r2
 800317a:	461d      	mov	r5, r3
 800317c:	4640      	mov	r0, r8
 800317e:	4649      	mov	r1, r9
 8003180:	4603      	mov	r3, r0
 8003182:	18e3      	adds	r3, r4, r3
 8003184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003188:	460b      	mov	r3, r1
 800318a:	eb45 0303 	adc.w	r3, r5, r3
 800318e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800319e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031ae:	4629      	mov	r1, r5
 80031b0:	008b      	lsls	r3, r1, #2
 80031b2:	4620      	mov	r0, r4
 80031b4:	4629      	mov	r1, r5
 80031b6:	4604      	mov	r4, r0
 80031b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80031bc:	4601      	mov	r1, r0
 80031be:	008a      	lsls	r2, r1, #2
 80031c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031c4:	f7fd fd74 	bl	8000cb0 <__aeabi_uldivmod>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4b60      	ldr	r3, [pc, #384]	; (8003350 <UART_SetConfig+0x4f4>)
 80031ce:	fba3 2302 	umull	r2, r3, r3, r2
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	011c      	lsls	r4, r3, #4
 80031d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031e8:	4642      	mov	r2, r8
 80031ea:	464b      	mov	r3, r9
 80031ec:	1891      	adds	r1, r2, r2
 80031ee:	61b9      	str	r1, [r7, #24]
 80031f0:	415b      	adcs	r3, r3
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f8:	4641      	mov	r1, r8
 80031fa:	1851      	adds	r1, r2, r1
 80031fc:	6139      	str	r1, [r7, #16]
 80031fe:	4649      	mov	r1, r9
 8003200:	414b      	adcs	r3, r1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003210:	4659      	mov	r1, fp
 8003212:	00cb      	lsls	r3, r1, #3
 8003214:	4655      	mov	r5, sl
 8003216:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800321a:	4651      	mov	r1, sl
 800321c:	00ca      	lsls	r2, r1, #3
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	4603      	mov	r3, r0
 8003224:	4642      	mov	r2, r8
 8003226:	189b      	adds	r3, r3, r2
 8003228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800322c:	464b      	mov	r3, r9
 800322e:	460a      	mov	r2, r1
 8003230:	eb42 0303 	adc.w	r3, r2, r3
 8003234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	67bb      	str	r3, [r7, #120]	; 0x78
 8003242:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003250:	4649      	mov	r1, r9
 8003252:	008b      	lsls	r3, r1, #2
 8003254:	4645      	mov	r5, r8
 8003256:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800325a:	4641      	mov	r1, r8
 800325c:	008a      	lsls	r2, r1, #2
 800325e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003262:	f7fd fd25 	bl	8000cb0 <__aeabi_uldivmod>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <UART_SetConfig+0x4f4>)
 800326c:	fba3 1302 	umull	r1, r3, r3, r2
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	2164      	movs	r1, #100	; 0x64
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	3332      	adds	r3, #50	; 0x32
 800327e:	4a34      	ldr	r2, [pc, #208]	; (8003350 <UART_SetConfig+0x4f4>)
 8003280:	fba2 2303 	umull	r2, r3, r2, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800328a:	441c      	add	r4, r3
 800328c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003290:	2200      	movs	r2, #0
 8003292:	673b      	str	r3, [r7, #112]	; 0x70
 8003294:	677a      	str	r2, [r7, #116]	; 0x74
 8003296:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800329a:	4642      	mov	r2, r8
 800329c:	464b      	mov	r3, r9
 800329e:	1891      	adds	r1, r2, r2
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	415b      	adcs	r3, r3
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032aa:	4641      	mov	r1, r8
 80032ac:	1851      	adds	r1, r2, r1
 80032ae:	6039      	str	r1, [r7, #0]
 80032b0:	4649      	mov	r1, r9
 80032b2:	414b      	adcs	r3, r1
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032c2:	4659      	mov	r1, fp
 80032c4:	00cb      	lsls	r3, r1, #3
 80032c6:	4655      	mov	r5, sl
 80032c8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80032cc:	4651      	mov	r1, sl
 80032ce:	00ca      	lsls	r2, r1, #3
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	4603      	mov	r3, r0
 80032d6:	4642      	mov	r2, r8
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	66bb      	str	r3, [r7, #104]	; 0x68
 80032dc:	464b      	mov	r3, r9
 80032de:	460a      	mov	r2, r1
 80032e0:	eb42 0303 	adc.w	r3, r2, r3
 80032e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	663b      	str	r3, [r7, #96]	; 0x60
 80032f0:	667a      	str	r2, [r7, #100]	; 0x64
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032fe:	4649      	mov	r1, r9
 8003300:	008b      	lsls	r3, r1, #2
 8003302:	4645      	mov	r5, r8
 8003304:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003308:	4641      	mov	r1, r8
 800330a:	008a      	lsls	r2, r1, #2
 800330c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003310:	f7fd fcce 	bl	8000cb0 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <UART_SetConfig+0x4f4>)
 800331a:	fba3 1302 	umull	r1, r3, r3, r2
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	2164      	movs	r1, #100	; 0x64
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	3332      	adds	r3, #50	; 0x32
 800332c:	4a08      	ldr	r2, [pc, #32]	; (8003350 <UART_SetConfig+0x4f4>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	f003 020f 	and.w	r2, r3, #15
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4422      	add	r2, r4
 8003340:	609a      	str	r2, [r3, #8]
}
 8003342:	bf00      	nop
 8003344:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003348:	46bd      	mov	sp, r7
 800334a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334e:	bf00      	nop
 8003350:	51eb851f 	.word	0x51eb851f

08003354 <__errno>:
 8003354:	4b01      	ldr	r3, [pc, #4]	; (800335c <__errno+0x8>)
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000020 	.word	0x20000020

08003360 <__libc_init_array>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	4d0d      	ldr	r5, [pc, #52]	; (8003398 <__libc_init_array+0x38>)
 8003364:	4c0d      	ldr	r4, [pc, #52]	; (800339c <__libc_init_array+0x3c>)
 8003366:	1b64      	subs	r4, r4, r5
 8003368:	10a4      	asrs	r4, r4, #2
 800336a:	2600      	movs	r6, #0
 800336c:	42a6      	cmp	r6, r4
 800336e:	d109      	bne.n	8003384 <__libc_init_array+0x24>
 8003370:	4d0b      	ldr	r5, [pc, #44]	; (80033a0 <__libc_init_array+0x40>)
 8003372:	4c0c      	ldr	r4, [pc, #48]	; (80033a4 <__libc_init_array+0x44>)
 8003374:	f000 fc7a 	bl	8003c6c <_init>
 8003378:	1b64      	subs	r4, r4, r5
 800337a:	10a4      	asrs	r4, r4, #2
 800337c:	2600      	movs	r6, #0
 800337e:	42a6      	cmp	r6, r4
 8003380:	d105      	bne.n	800338e <__libc_init_array+0x2e>
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	f855 3b04 	ldr.w	r3, [r5], #4
 8003388:	4798      	blx	r3
 800338a:	3601      	adds	r6, #1
 800338c:	e7ee      	b.n	800336c <__libc_init_array+0xc>
 800338e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003392:	4798      	blx	r3
 8003394:	3601      	adds	r6, #1
 8003396:	e7f2      	b.n	800337e <__libc_init_array+0x1e>
 8003398:	080073a8 	.word	0x080073a8
 800339c:	080073a8 	.word	0x080073a8
 80033a0:	080073a8 	.word	0x080073a8
 80033a4:	080073ac 	.word	0x080073ac

080033a8 <memcpy>:
 80033a8:	440a      	add	r2, r1
 80033aa:	4291      	cmp	r1, r2
 80033ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80033b0:	d100      	bne.n	80033b4 <memcpy+0xc>
 80033b2:	4770      	bx	lr
 80033b4:	b510      	push	{r4, lr}
 80033b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033be:	4291      	cmp	r1, r2
 80033c0:	d1f9      	bne.n	80033b6 <memcpy+0xe>
 80033c2:	bd10      	pop	{r4, pc}

080033c4 <memset>:
 80033c4:	4402      	add	r2, r0
 80033c6:	4603      	mov	r3, r0
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d100      	bne.n	80033ce <memset+0xa>
 80033cc:	4770      	bx	lr
 80033ce:	f803 1b01 	strb.w	r1, [r3], #1
 80033d2:	e7f9      	b.n	80033c8 <memset+0x4>

080033d4 <tanhf>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80033da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80033de:	4604      	mov	r4, r0
 80033e0:	4605      	mov	r5, r0
 80033e2:	db0e      	blt.n	8003402 <tanhf+0x2e>
 80033e4:	4601      	mov	r1, r0
 80033e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80033ea:	f7fd fb13 	bl	8000a14 <__aeabi_fdiv>
 80033ee:	2c00      	cmp	r4, #0
 80033f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80033f4:	db02      	blt.n	80033fc <tanhf+0x28>
 80033f6:	f7fd f951 	bl	800069c <__addsf3>
 80033fa:	bd38      	pop	{r3, r4, r5, pc}
 80033fc:	f7fd f94c 	bl	8000698 <__aeabi_fsub>
 8003400:	e7fb      	b.n	80033fa <tanhf+0x26>
 8003402:	4a20      	ldr	r2, [pc, #128]	; (8003484 <tanhf+0xb0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	dc3a      	bgt.n	800347e <tanhf+0xaa>
 8003408:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800340c:	da07      	bge.n	800341e <tanhf+0x4a>
 800340e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003412:	f7fd f943 	bl	800069c <__addsf3>
 8003416:	4621      	mov	r1, r4
 8003418:	f7fd fa48 	bl	80008ac <__aeabi_fmul>
 800341c:	e7ed      	b.n	80033fa <tanhf+0x26>
 800341e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8003422:	db19      	blt.n	8003458 <tanhf+0x84>
 8003424:	f000 fc12 	bl	8003c4c <fabsf>
 8003428:	4601      	mov	r1, r0
 800342a:	f7fd f937 	bl	800069c <__addsf3>
 800342e:	f000 fab1 	bl	8003994 <expm1f>
 8003432:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003436:	f7fd f931 	bl	800069c <__addsf3>
 800343a:	4601      	mov	r1, r0
 800343c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003440:	f7fd fae8 	bl	8000a14 <__aeabi_fdiv>
 8003444:	4601      	mov	r1, r0
 8003446:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800344a:	f7fd f925 	bl	8000698 <__aeabi_fsub>
 800344e:	2d00      	cmp	r5, #0
 8003450:	bfb8      	it	lt
 8003452:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
 8003456:	e7d0      	b.n	80033fa <tanhf+0x26>
 8003458:	f000 fbf8 	bl	8003c4c <fabsf>
 800345c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003460:	f7fd fa24 	bl	80008ac <__aeabi_fmul>
 8003464:	f000 fa96 	bl	8003994 <expm1f>
 8003468:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800346c:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8003470:	f7fd f914 	bl	800069c <__addsf3>
 8003474:	4601      	mov	r1, r0
 8003476:	4620      	mov	r0, r4
 8003478:	f7fd facc 	bl	8000a14 <__aeabi_fdiv>
 800347c:	e7e7      	b.n	800344e <tanhf+0x7a>
 800347e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003482:	e7e4      	b.n	800344e <tanhf+0x7a>
 8003484:	41afffff 	.word	0x41afffff

08003488 <expf>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4605      	mov	r5, r0
 800348c:	f000 f84a 	bl	8003524 <__ieee754_expf>
 8003490:	4604      	mov	r4, r0
 8003492:	4628      	mov	r0, r5
 8003494:	f000 fbdd 	bl	8003c52 <finitef>
 8003498:	b150      	cbz	r0, 80034b0 <expf+0x28>
 800349a:	490c      	ldr	r1, [pc, #48]	; (80034cc <expf+0x44>)
 800349c:	4628      	mov	r0, r5
 800349e:	f7fd fbc1 	bl	8000c24 <__aeabi_fcmpgt>
 80034a2:	b138      	cbz	r0, 80034b4 <expf+0x2c>
 80034a4:	f7ff ff56 	bl	8003354 <__errno>
 80034a8:	2322      	movs	r3, #34	; 0x22
 80034aa:	6003      	str	r3, [r0, #0]
 80034ac:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 80034b0:	4620      	mov	r0, r4
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	4906      	ldr	r1, [pc, #24]	; (80034d0 <expf+0x48>)
 80034b6:	4628      	mov	r0, r5
 80034b8:	f7fd fb96 	bl	8000be8 <__aeabi_fcmplt>
 80034bc:	2800      	cmp	r0, #0
 80034be:	d0f7      	beq.n	80034b0 <expf+0x28>
 80034c0:	f7ff ff48 	bl	8003354 <__errno>
 80034c4:	2322      	movs	r3, #34	; 0x22
 80034c6:	6003      	str	r3, [r0, #0]
 80034c8:	2400      	movs	r4, #0
 80034ca:	e7f1      	b.n	80034b0 <expf+0x28>
 80034cc:	42b17180 	.word	0x42b17180
 80034d0:	c2cff1b5 	.word	0xc2cff1b5

080034d4 <logf>:
 80034d4:	b538      	push	{r3, r4, r5, lr}
 80034d6:	4604      	mov	r4, r0
 80034d8:	f000 f91a 	bl	8003710 <__ieee754_logf>
 80034dc:	4621      	mov	r1, r4
 80034de:	4605      	mov	r5, r0
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7fd fba9 	bl	8000c38 <__aeabi_fcmpun>
 80034e6:	b970      	cbnz	r0, 8003506 <logf+0x32>
 80034e8:	2100      	movs	r1, #0
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7fd fb9a 	bl	8000c24 <__aeabi_fcmpgt>
 80034f0:	b948      	cbnz	r0, 8003506 <logf+0x32>
 80034f2:	2100      	movs	r1, #0
 80034f4:	4620      	mov	r0, r4
 80034f6:	f7fd fb6d 	bl	8000bd4 <__aeabi_fcmpeq>
 80034fa:	b130      	cbz	r0, 800350a <logf+0x36>
 80034fc:	f7ff ff2a 	bl	8003354 <__errno>
 8003500:	4d06      	ldr	r5, [pc, #24]	; (800351c <logf+0x48>)
 8003502:	2322      	movs	r3, #34	; 0x22
 8003504:	6003      	str	r3, [r0, #0]
 8003506:	4628      	mov	r0, r5
 8003508:	bd38      	pop	{r3, r4, r5, pc}
 800350a:	f7ff ff23 	bl	8003354 <__errno>
 800350e:	2321      	movs	r3, #33	; 0x21
 8003510:	6003      	str	r3, [r0, #0]
 8003512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003516:	4802      	ldr	r0, [pc, #8]	; (8003520 <logf+0x4c>)
 8003518:	f000 bba4 	b.w	8003c64 <nanf>
 800351c:	ff800000 	.word	0xff800000
 8003520:	08007384 	.word	0x08007384

08003524 <__ieee754_expf>:
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003528:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800352c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003530:	4604      	mov	r4, r0
 8003532:	d904      	bls.n	800353e <__ieee754_expf+0x1a>
 8003534:	4601      	mov	r1, r0
 8003536:	f7fd f8b1 	bl	800069c <__addsf3>
 800353a:	4604      	mov	r4, r0
 800353c:	e004      	b.n	8003548 <__ieee754_expf+0x24>
 800353e:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 8003542:	d104      	bne.n	800354e <__ieee754_expf+0x2a>
 8003544:	b106      	cbz	r6, 8003548 <__ieee754_expf+0x24>
 8003546:	2400      	movs	r4, #0
 8003548:	4620      	mov	r0, r4
 800354a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800354e:	4960      	ldr	r1, [pc, #384]	; (80036d0 <__ieee754_expf+0x1ac>)
 8003550:	4288      	cmp	r0, r1
 8003552:	dd04      	ble.n	800355e <__ieee754_expf+0x3a>
 8003554:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003558:	2000      	movs	r0, #0
 800355a:	f000 ba16 	b.w	800398a <__math_oflowf>
 800355e:	2800      	cmp	r0, #0
 8003560:	da07      	bge.n	8003572 <__ieee754_expf+0x4e>
 8003562:	4a5c      	ldr	r2, [pc, #368]	; (80036d4 <__ieee754_expf+0x1b0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d904      	bls.n	8003572 <__ieee754_expf+0x4e>
 8003568:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800356c:	2000      	movs	r0, #0
 800356e:	f000 ba08 	b.w	8003982 <__math_uflowf>
 8003572:	4a59      	ldr	r2, [pc, #356]	; (80036d8 <__ieee754_expf+0x1b4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d971      	bls.n	800365c <__ieee754_expf+0x138>
 8003578:	4a58      	ldr	r2, [pc, #352]	; (80036dc <__ieee754_expf+0x1b8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d851      	bhi.n	8003622 <__ieee754_expf+0xfe>
 800357e:	4b58      	ldr	r3, [pc, #352]	; (80036e0 <__ieee754_expf+0x1bc>)
 8003580:	4620      	mov	r0, r4
 8003582:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8003586:	f7fd f887 	bl	8000698 <__aeabi_fsub>
 800358a:	4b56      	ldr	r3, [pc, #344]	; (80036e4 <__ieee754_expf+0x1c0>)
 800358c:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8003590:	f1c6 0301 	rsb	r3, r6, #1
 8003594:	4605      	mov	r5, r0
 8003596:	eba3 0906 	sub.w	r9, r3, r6
 800359a:	4639      	mov	r1, r7
 800359c:	4628      	mov	r0, r5
 800359e:	f7fd f87b 	bl	8000698 <__aeabi_fsub>
 80035a2:	4604      	mov	r4, r0
 80035a4:	4621      	mov	r1, r4
 80035a6:	4620      	mov	r0, r4
 80035a8:	f7fd f980 	bl	80008ac <__aeabi_fmul>
 80035ac:	494e      	ldr	r1, [pc, #312]	; (80036e8 <__ieee754_expf+0x1c4>)
 80035ae:	4606      	mov	r6, r0
 80035b0:	f7fd f97c 	bl	80008ac <__aeabi_fmul>
 80035b4:	494d      	ldr	r1, [pc, #308]	; (80036ec <__ieee754_expf+0x1c8>)
 80035b6:	f7fd f86f 	bl	8000698 <__aeabi_fsub>
 80035ba:	4631      	mov	r1, r6
 80035bc:	f7fd f976 	bl	80008ac <__aeabi_fmul>
 80035c0:	494b      	ldr	r1, [pc, #300]	; (80036f0 <__ieee754_expf+0x1cc>)
 80035c2:	f7fd f86b 	bl	800069c <__addsf3>
 80035c6:	4631      	mov	r1, r6
 80035c8:	f7fd f970 	bl	80008ac <__aeabi_fmul>
 80035cc:	4949      	ldr	r1, [pc, #292]	; (80036f4 <__ieee754_expf+0x1d0>)
 80035ce:	f7fd f863 	bl	8000698 <__aeabi_fsub>
 80035d2:	4631      	mov	r1, r6
 80035d4:	f7fd f96a 	bl	80008ac <__aeabi_fmul>
 80035d8:	4947      	ldr	r1, [pc, #284]	; (80036f8 <__ieee754_expf+0x1d4>)
 80035da:	f7fd f85f 	bl	800069c <__addsf3>
 80035de:	4631      	mov	r1, r6
 80035e0:	f7fd f964 	bl	80008ac <__aeabi_fmul>
 80035e4:	4601      	mov	r1, r0
 80035e6:	4620      	mov	r0, r4
 80035e8:	f7fd f856 	bl	8000698 <__aeabi_fsub>
 80035ec:	4601      	mov	r1, r0
 80035ee:	4680      	mov	r8, r0
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7fd f95b 	bl	80008ac <__aeabi_fmul>
 80035f6:	4606      	mov	r6, r0
 80035f8:	f1b9 0f00 	cmp.w	r9, #0
 80035fc:	d143      	bne.n	8003686 <__ieee754_expf+0x162>
 80035fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003602:	4640      	mov	r0, r8
 8003604:	f7fd f848 	bl	8000698 <__aeabi_fsub>
 8003608:	4601      	mov	r1, r0
 800360a:	4630      	mov	r0, r6
 800360c:	f7fd fa02 	bl	8000a14 <__aeabi_fdiv>
 8003610:	4621      	mov	r1, r4
 8003612:	f7fd f841 	bl	8000698 <__aeabi_fsub>
 8003616:	4601      	mov	r1, r0
 8003618:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800361c:	f7fd f83c 	bl	8000698 <__aeabi_fsub>
 8003620:	e78b      	b.n	800353a <__ieee754_expf+0x16>
 8003622:	4936      	ldr	r1, [pc, #216]	; (80036fc <__ieee754_expf+0x1d8>)
 8003624:	4620      	mov	r0, r4
 8003626:	f7fd f941 	bl	80008ac <__aeabi_fmul>
 800362a:	4b35      	ldr	r3, [pc, #212]	; (8003700 <__ieee754_expf+0x1dc>)
 800362c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8003630:	f7fd f834 	bl	800069c <__addsf3>
 8003634:	f7fd fb16 	bl	8000c64 <__aeabi_f2iz>
 8003638:	4681      	mov	r9, r0
 800363a:	f7fd f8e3 	bl	8000804 <__aeabi_i2f>
 800363e:	4931      	ldr	r1, [pc, #196]	; (8003704 <__ieee754_expf+0x1e0>)
 8003640:	4606      	mov	r6, r0
 8003642:	f7fd f933 	bl	80008ac <__aeabi_fmul>
 8003646:	4601      	mov	r1, r0
 8003648:	4620      	mov	r0, r4
 800364a:	f7fd f825 	bl	8000698 <__aeabi_fsub>
 800364e:	492e      	ldr	r1, [pc, #184]	; (8003708 <__ieee754_expf+0x1e4>)
 8003650:	4605      	mov	r5, r0
 8003652:	4630      	mov	r0, r6
 8003654:	f7fd f92a 	bl	80008ac <__aeabi_fmul>
 8003658:	4607      	mov	r7, r0
 800365a:	e79e      	b.n	800359a <__ieee754_expf+0x76>
 800365c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8003660:	d20c      	bcs.n	800367c <__ieee754_expf+0x158>
 8003662:	492a      	ldr	r1, [pc, #168]	; (800370c <__ieee754_expf+0x1e8>)
 8003664:	4620      	mov	r0, r4
 8003666:	f7fd f819 	bl	800069c <__addsf3>
 800366a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800366e:	f7fd fad9 	bl	8000c24 <__aeabi_fcmpgt>
 8003672:	b130      	cbz	r0, 8003682 <__ieee754_expf+0x15e>
 8003674:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003678:	4620      	mov	r0, r4
 800367a:	e75c      	b.n	8003536 <__ieee754_expf+0x12>
 800367c:	f04f 0900 	mov.w	r9, #0
 8003680:	e790      	b.n	80035a4 <__ieee754_expf+0x80>
 8003682:	4681      	mov	r9, r0
 8003684:	e78e      	b.n	80035a4 <__ieee754_expf+0x80>
 8003686:	4641      	mov	r1, r8
 8003688:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800368c:	f7fd f804 	bl	8000698 <__aeabi_fsub>
 8003690:	4601      	mov	r1, r0
 8003692:	4630      	mov	r0, r6
 8003694:	f7fd f9be 	bl	8000a14 <__aeabi_fdiv>
 8003698:	4601      	mov	r1, r0
 800369a:	4638      	mov	r0, r7
 800369c:	f7fc fffc 	bl	8000698 <__aeabi_fsub>
 80036a0:	4629      	mov	r1, r5
 80036a2:	f7fc fff9 	bl	8000698 <__aeabi_fsub>
 80036a6:	4601      	mov	r1, r0
 80036a8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80036ac:	f7fc fff4 	bl	8000698 <__aeabi_fsub>
 80036b0:	f119 0f7d 	cmn.w	r9, #125	; 0x7d
 80036b4:	db02      	blt.n	80036bc <__ieee754_expf+0x198>
 80036b6:	eb00 54c9 	add.w	r4, r0, r9, lsl #23
 80036ba:	e745      	b.n	8003548 <__ieee754_expf+0x24>
 80036bc:	f109 0964 	add.w	r9, r9, #100	; 0x64
 80036c0:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
 80036c4:	eb00 50c9 	add.w	r0, r0, r9, lsl #23
 80036c8:	f7fd f8f0 	bl	80008ac <__aeabi_fmul>
 80036cc:	e735      	b.n	800353a <__ieee754_expf+0x16>
 80036ce:	bf00      	nop
 80036d0:	42b17217 	.word	0x42b17217
 80036d4:	42cff1b5 	.word	0x42cff1b5
 80036d8:	3eb17218 	.word	0x3eb17218
 80036dc:	3f851591 	.word	0x3f851591
 80036e0:	08007390 	.word	0x08007390
 80036e4:	08007398 	.word	0x08007398
 80036e8:	3331bb4c 	.word	0x3331bb4c
 80036ec:	35ddea0e 	.word	0x35ddea0e
 80036f0:	388ab355 	.word	0x388ab355
 80036f4:	3b360b61 	.word	0x3b360b61
 80036f8:	3e2aaaab 	.word	0x3e2aaaab
 80036fc:	3fb8aa3b 	.word	0x3fb8aa3b
 8003700:	08007388 	.word	0x08007388
 8003704:	3f317180 	.word	0x3f317180
 8003708:	3717f7d1 	.word	0x3717f7d1
 800370c:	7149f2ca 	.word	0x7149f2ca

08003710 <__ieee754_logf>:
 8003710:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8003714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003718:	4601      	mov	r1, r0
 800371a:	4603      	mov	r3, r0
 800371c:	d106      	bne.n	800372c <__ieee754_logf+0x1c>
 800371e:	2100      	movs	r1, #0
 8003720:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 8003724:	f7fd f976 	bl	8000a14 <__aeabi_fdiv>
 8003728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800372c:	2800      	cmp	r0, #0
 800372e:	da03      	bge.n	8003738 <__ieee754_logf+0x28>
 8003730:	f7fc ffb2 	bl	8000698 <__aeabi_fsub>
 8003734:	2100      	movs	r1, #0
 8003736:	e7f5      	b.n	8003724 <__ieee754_logf+0x14>
 8003738:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800373c:	db02      	blt.n	8003744 <__ieee754_logf+0x34>
 800373e:	f7fc ffad 	bl	800069c <__addsf3>
 8003742:	e7f1      	b.n	8003728 <__ieee754_logf+0x18>
 8003744:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8003748:	da35      	bge.n	80037b6 <__ieee754_logf+0xa6>
 800374a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800374e:	f7fd f8ad 	bl	80008ac <__aeabi_fmul>
 8003752:	f06f 0218 	mvn.w	r2, #24
 8003756:	4603      	mov	r3, r0
 8003758:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800375c:	15de      	asrs	r6, r3, #23
 800375e:	4b71      	ldr	r3, [pc, #452]	; (8003924 <__ieee754_logf+0x214>)
 8003760:	4423      	add	r3, r4
 8003762:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 8003766:	3e7f      	subs	r6, #127	; 0x7f
 8003768:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 800376c:	4416      	add	r6, r2
 800376e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003772:	4320      	orrs	r0, r4
 8003774:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 8003778:	f7fc ff8e 	bl	8000698 <__aeabi_fsub>
 800377c:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <__ieee754_logf+0x218>)
 800377e:	f104 020f 	add.w	r2, r4, #15
 8003782:	4013      	ands	r3, r2
 8003784:	4605      	mov	r5, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d13a      	bne.n	8003800 <__ieee754_logf+0xf0>
 800378a:	2100      	movs	r1, #0
 800378c:	f7fd fa22 	bl	8000bd4 <__aeabi_fcmpeq>
 8003790:	b198      	cbz	r0, 80037ba <__ieee754_logf+0xaa>
 8003792:	2e00      	cmp	r6, #0
 8003794:	f000 80c4 	beq.w	8003920 <__ieee754_logf+0x210>
 8003798:	4630      	mov	r0, r6
 800379a:	f7fd f833 	bl	8000804 <__aeabi_i2f>
 800379e:	4963      	ldr	r1, [pc, #396]	; (800392c <__ieee754_logf+0x21c>)
 80037a0:	4605      	mov	r5, r0
 80037a2:	f7fd f883 	bl	80008ac <__aeabi_fmul>
 80037a6:	4962      	ldr	r1, [pc, #392]	; (8003930 <__ieee754_logf+0x220>)
 80037a8:	4604      	mov	r4, r0
 80037aa:	4628      	mov	r0, r5
 80037ac:	f7fd f87e 	bl	80008ac <__aeabi_fmul>
 80037b0:	4601      	mov	r1, r0
 80037b2:	4620      	mov	r0, r4
 80037b4:	e7c3      	b.n	800373e <__ieee754_logf+0x2e>
 80037b6:	2200      	movs	r2, #0
 80037b8:	e7ce      	b.n	8003758 <__ieee754_logf+0x48>
 80037ba:	495e      	ldr	r1, [pc, #376]	; (8003934 <__ieee754_logf+0x224>)
 80037bc:	4628      	mov	r0, r5
 80037be:	f7fd f875 	bl	80008ac <__aeabi_fmul>
 80037c2:	4601      	mov	r1, r0
 80037c4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80037c8:	f7fc ff66 	bl	8000698 <__aeabi_fsub>
 80037cc:	4629      	mov	r1, r5
 80037ce:	4604      	mov	r4, r0
 80037d0:	4628      	mov	r0, r5
 80037d2:	f7fd f86b 	bl	80008ac <__aeabi_fmul>
 80037d6:	4601      	mov	r1, r0
 80037d8:	4620      	mov	r0, r4
 80037da:	f7fd f867 	bl	80008ac <__aeabi_fmul>
 80037de:	4604      	mov	r4, r0
 80037e0:	b90e      	cbnz	r6, 80037e6 <__ieee754_logf+0xd6>
 80037e2:	4621      	mov	r1, r4
 80037e4:	e06f      	b.n	80038c6 <__ieee754_logf+0x1b6>
 80037e6:	4630      	mov	r0, r6
 80037e8:	f7fd f80c 	bl	8000804 <__aeabi_i2f>
 80037ec:	494f      	ldr	r1, [pc, #316]	; (800392c <__ieee754_logf+0x21c>)
 80037ee:	4607      	mov	r7, r0
 80037f0:	f7fd f85c 	bl	80008ac <__aeabi_fmul>
 80037f4:	494e      	ldr	r1, [pc, #312]	; (8003930 <__ieee754_logf+0x220>)
 80037f6:	4606      	mov	r6, r0
 80037f8:	4638      	mov	r0, r7
 80037fa:	f7fd f857 	bl	80008ac <__aeabi_fmul>
 80037fe:	e072      	b.n	80038e6 <__ieee754_logf+0x1d6>
 8003800:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003804:	f7fc ff4a 	bl	800069c <__addsf3>
 8003808:	4601      	mov	r1, r0
 800380a:	4628      	mov	r0, r5
 800380c:	f7fd f902 	bl	8000a14 <__aeabi_fdiv>
 8003810:	4681      	mov	r9, r0
 8003812:	4630      	mov	r0, r6
 8003814:	f7fc fff6 	bl	8000804 <__aeabi_i2f>
 8003818:	4649      	mov	r1, r9
 800381a:	4680      	mov	r8, r0
 800381c:	4648      	mov	r0, r9
 800381e:	f7fd f845 	bl	80008ac <__aeabi_fmul>
 8003822:	4601      	mov	r1, r0
 8003824:	4683      	mov	fp, r0
 8003826:	f7fd f841 	bl	80008ac <__aeabi_fmul>
 800382a:	4943      	ldr	r1, [pc, #268]	; (8003938 <__ieee754_logf+0x228>)
 800382c:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800393c <__ieee754_logf+0x22c>
 8003830:	4607      	mov	r7, r0
 8003832:	f7fd f83b 	bl	80008ac <__aeabi_fmul>
 8003836:	4942      	ldr	r1, [pc, #264]	; (8003940 <__ieee754_logf+0x230>)
 8003838:	f7fc ff30 	bl	800069c <__addsf3>
 800383c:	4639      	mov	r1, r7
 800383e:	f7fd f835 	bl	80008ac <__aeabi_fmul>
 8003842:	4940      	ldr	r1, [pc, #256]	; (8003944 <__ieee754_logf+0x234>)
 8003844:	f7fc ff2a 	bl	800069c <__addsf3>
 8003848:	4639      	mov	r1, r7
 800384a:	f7fd f82f 	bl	80008ac <__aeabi_fmul>
 800384e:	493e      	ldr	r1, [pc, #248]	; (8003948 <__ieee754_logf+0x238>)
 8003850:	f7fc ff24 	bl	800069c <__addsf3>
 8003854:	4659      	mov	r1, fp
 8003856:	f7fd f829 	bl	80008ac <__aeabi_fmul>
 800385a:	493c      	ldr	r1, [pc, #240]	; (800394c <__ieee754_logf+0x23c>)
 800385c:	4683      	mov	fp, r0
 800385e:	4638      	mov	r0, r7
 8003860:	f7fd f824 	bl	80008ac <__aeabi_fmul>
 8003864:	493a      	ldr	r1, [pc, #232]	; (8003950 <__ieee754_logf+0x240>)
 8003866:	f7fc ff19 	bl	800069c <__addsf3>
 800386a:	4639      	mov	r1, r7
 800386c:	f7fd f81e 	bl	80008ac <__aeabi_fmul>
 8003870:	4938      	ldr	r1, [pc, #224]	; (8003954 <__ieee754_logf+0x244>)
 8003872:	f7fc ff13 	bl	800069c <__addsf3>
 8003876:	4639      	mov	r1, r7
 8003878:	f7fd f818 	bl	80008ac <__aeabi_fmul>
 800387c:	4601      	mov	r1, r0
 800387e:	4658      	mov	r0, fp
 8003880:	f7fc ff0c 	bl	800069c <__addsf3>
 8003884:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 8003888:	44a2      	add	sl, r4
 800388a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800388e:	ea43 030a 	orr.w	r3, r3, sl
 8003892:	2b00      	cmp	r3, #0
 8003894:	4607      	mov	r7, r0
 8003896:	dd30      	ble.n	80038fa <__ieee754_logf+0x1ea>
 8003898:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800389c:	4628      	mov	r0, r5
 800389e:	f7fd f805 	bl	80008ac <__aeabi_fmul>
 80038a2:	4629      	mov	r1, r5
 80038a4:	f7fd f802 	bl	80008ac <__aeabi_fmul>
 80038a8:	4601      	mov	r1, r0
 80038aa:	4604      	mov	r4, r0
 80038ac:	4638      	mov	r0, r7
 80038ae:	f7fc fef5 	bl	800069c <__addsf3>
 80038b2:	4649      	mov	r1, r9
 80038b4:	f7fc fffa 	bl	80008ac <__aeabi_fmul>
 80038b8:	4607      	mov	r7, r0
 80038ba:	b946      	cbnz	r6, 80038ce <__ieee754_logf+0x1be>
 80038bc:	4601      	mov	r1, r0
 80038be:	4620      	mov	r0, r4
 80038c0:	f7fc feea 	bl	8000698 <__aeabi_fsub>
 80038c4:	4601      	mov	r1, r0
 80038c6:	4628      	mov	r0, r5
 80038c8:	f7fc fee6 	bl	8000698 <__aeabi_fsub>
 80038cc:	e72c      	b.n	8003728 <__ieee754_logf+0x18>
 80038ce:	4917      	ldr	r1, [pc, #92]	; (800392c <__ieee754_logf+0x21c>)
 80038d0:	4640      	mov	r0, r8
 80038d2:	f7fc ffeb 	bl	80008ac <__aeabi_fmul>
 80038d6:	4916      	ldr	r1, [pc, #88]	; (8003930 <__ieee754_logf+0x220>)
 80038d8:	4606      	mov	r6, r0
 80038da:	4640      	mov	r0, r8
 80038dc:	f7fc ffe6 	bl	80008ac <__aeabi_fmul>
 80038e0:	4639      	mov	r1, r7
 80038e2:	f7fc fedb 	bl	800069c <__addsf3>
 80038e6:	4601      	mov	r1, r0
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7fc fed5 	bl	8000698 <__aeabi_fsub>
 80038ee:	4629      	mov	r1, r5
 80038f0:	f7fc fed2 	bl	8000698 <__aeabi_fsub>
 80038f4:	4601      	mov	r1, r0
 80038f6:	4630      	mov	r0, r6
 80038f8:	e7e6      	b.n	80038c8 <__ieee754_logf+0x1b8>
 80038fa:	4601      	mov	r1, r0
 80038fc:	4628      	mov	r0, r5
 80038fe:	f7fc fecb 	bl	8000698 <__aeabi_fsub>
 8003902:	4649      	mov	r1, r9
 8003904:	f7fc ffd2 	bl	80008ac <__aeabi_fmul>
 8003908:	4604      	mov	r4, r0
 800390a:	2e00      	cmp	r6, #0
 800390c:	f43f af69 	beq.w	80037e2 <__ieee754_logf+0xd2>
 8003910:	4906      	ldr	r1, [pc, #24]	; (800392c <__ieee754_logf+0x21c>)
 8003912:	4640      	mov	r0, r8
 8003914:	f7fc ffca 	bl	80008ac <__aeabi_fmul>
 8003918:	4905      	ldr	r1, [pc, #20]	; (8003930 <__ieee754_logf+0x220>)
 800391a:	4606      	mov	r6, r0
 800391c:	4640      	mov	r0, r8
 800391e:	e76c      	b.n	80037fa <__ieee754_logf+0xea>
 8003920:	2000      	movs	r0, #0
 8003922:	e701      	b.n	8003728 <__ieee754_logf+0x18>
 8003924:	004afb20 	.word	0x004afb20
 8003928:	007ffff0 	.word	0x007ffff0
 800392c:	3f317180 	.word	0x3f317180
 8003930:	3717f7d1 	.word	0x3717f7d1
 8003934:	3eaaaaab 	.word	0x3eaaaaab
 8003938:	3e178897 	.word	0x3e178897
 800393c:	ffcf5c30 	.word	0xffcf5c30
 8003940:	3e3a3325 	.word	0x3e3a3325
 8003944:	3e924925 	.word	0x3e924925
 8003948:	3f2aaaab 	.word	0x3f2aaaab
 800394c:	3e1cd04f 	.word	0x3e1cd04f
 8003950:	3e638e29 	.word	0x3e638e29
 8003954:	3ecccccd 	.word	0x3ecccccd

08003958 <with_errnof>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4604      	mov	r4, r0
 800395c:	460d      	mov	r5, r1
 800395e:	f7ff fcf9 	bl	8003354 <__errno>
 8003962:	6005      	str	r5, [r0, #0]
 8003964:	4620      	mov	r0, r4
 8003966:	bd38      	pop	{r3, r4, r5, pc}

08003968 <xflowf>:
 8003968:	b508      	push	{r3, lr}
 800396a:	b140      	cbz	r0, 800397e <xflowf+0x16>
 800396c:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8003970:	f7fc ff9c 	bl	80008ac <__aeabi_fmul>
 8003974:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003978:	2122      	movs	r1, #34	; 0x22
 800397a:	f7ff bfed 	b.w	8003958 <with_errnof>
 800397e:	4608      	mov	r0, r1
 8003980:	e7f6      	b.n	8003970 <xflowf+0x8>

08003982 <__math_uflowf>:
 8003982:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8003986:	f7ff bfef 	b.w	8003968 <xflowf>

0800398a <__math_oflowf>:
 800398a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 800398e:	f7ff bfeb 	b.w	8003968 <xflowf>
	...

08003994 <expm1f>:
 8003994:	4a9a      	ldr	r2, [pc, #616]	; (8003c00 <expm1f+0x26c>)
 8003996:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800399a:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800399e:	4293      	cmp	r3, r2
 80039a0:	4604      	mov	r4, r0
 80039a2:	4605      	mov	r5, r0
 80039a4:	d93e      	bls.n	8003a24 <expm1f+0x90>
 80039a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80039aa:	d903      	bls.n	80039b4 <expm1f+0x20>
 80039ac:	4601      	mov	r1, r0
 80039ae:	f7fc fe75 	bl	800069c <__addsf3>
 80039b2:	e0e6      	b.n	8003b82 <expm1f+0x1ee>
 80039b4:	d104      	bne.n	80039c0 <expm1f+0x2c>
 80039b6:	2800      	cmp	r0, #0
 80039b8:	f280 80e4 	bge.w	8003b84 <expm1f+0x1f0>
 80039bc:	4c91      	ldr	r4, [pc, #580]	; (8003c04 <expm1f+0x270>)
 80039be:	e0e1      	b.n	8003b84 <expm1f+0x1f0>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	db07      	blt.n	80039d4 <expm1f+0x40>
 80039c4:	4a90      	ldr	r2, [pc, #576]	; (8003c08 <expm1f+0x274>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d90c      	bls.n	80039e4 <expm1f+0x50>
 80039ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7ff bfdb 	b.w	800398a <__math_oflowf>
 80039d4:	498d      	ldr	r1, [pc, #564]	; (8003c0c <expm1f+0x278>)
 80039d6:	f7fc fe61 	bl	800069c <__addsf3>
 80039da:	2100      	movs	r1, #0
 80039dc:	f7fd f904 	bl	8000be8 <__aeabi_fcmplt>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d1eb      	bne.n	80039bc <expm1f+0x28>
 80039e4:	498a      	ldr	r1, [pc, #552]	; (8003c10 <expm1f+0x27c>)
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7fc ff60 	bl	80008ac <__aeabi_fmul>
 80039ec:	2d00      	cmp	r5, #0
 80039ee:	bfb4      	ite	lt
 80039f0:	f04f 413f 	movlt.w	r1, #3204448256	; 0xbf000000
 80039f4:	f04f 517c 	movge.w	r1, #1056964608	; 0x3f000000
 80039f8:	f7fc fe50 	bl	800069c <__addsf3>
 80039fc:	f7fd f932 	bl	8000c64 <__aeabi_f2iz>
 8003a00:	4605      	mov	r5, r0
 8003a02:	f7fc feff 	bl	8000804 <__aeabi_i2f>
 8003a06:	4983      	ldr	r1, [pc, #524]	; (8003c14 <expm1f+0x280>)
 8003a08:	4607      	mov	r7, r0
 8003a0a:	f7fc ff4f 	bl	80008ac <__aeabi_fmul>
 8003a0e:	4601      	mov	r1, r0
 8003a10:	4620      	mov	r0, r4
 8003a12:	f7fc fe41 	bl	8000698 <__aeabi_fsub>
 8003a16:	4980      	ldr	r1, [pc, #512]	; (8003c18 <expm1f+0x284>)
 8003a18:	4606      	mov	r6, r0
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	f7fc ff46 	bl	80008ac <__aeabi_fmul>
 8003a20:	4607      	mov	r7, r0
 8003a22:	e00d      	b.n	8003a40 <expm1f+0xac>
 8003a24:	4a7d      	ldr	r2, [pc, #500]	; (8003c1c <expm1f+0x288>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d96d      	bls.n	8003b06 <expm1f+0x172>
 8003a2a:	4a7d      	ldr	r2, [pc, #500]	; (8003c20 <expm1f+0x28c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d8d9      	bhi.n	80039e4 <expm1f+0x50>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	4978      	ldr	r1, [pc, #480]	; (8003c14 <expm1f+0x280>)
 8003a34:	db60      	blt.n	8003af8 <expm1f+0x164>
 8003a36:	f7fc fe2f 	bl	8000698 <__aeabi_fsub>
 8003a3a:	4f77      	ldr	r7, [pc, #476]	; (8003c18 <expm1f+0x284>)
 8003a3c:	4606      	mov	r6, r0
 8003a3e:	2501      	movs	r5, #1
 8003a40:	4639      	mov	r1, r7
 8003a42:	4630      	mov	r0, r6
 8003a44:	f7fc fe28 	bl	8000698 <__aeabi_fsub>
 8003a48:	4601      	mov	r1, r0
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f7fc fe23 	bl	8000698 <__aeabi_fsub>
 8003a52:	4639      	mov	r1, r7
 8003a54:	f7fc fe20 	bl	8000698 <__aeabi_fsub>
 8003a58:	4607      	mov	r7, r0
 8003a5a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f7fc ff24 	bl	80008ac <__aeabi_fmul>
 8003a64:	4680      	mov	r8, r0
 8003a66:	4601      	mov	r1, r0
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f7fc ff1f 	bl	80008ac <__aeabi_fmul>
 8003a6e:	496d      	ldr	r1, [pc, #436]	; (8003c24 <expm1f+0x290>)
 8003a70:	4606      	mov	r6, r0
 8003a72:	f7fc ff1b 	bl	80008ac <__aeabi_fmul>
 8003a76:	496c      	ldr	r1, [pc, #432]	; (8003c28 <expm1f+0x294>)
 8003a78:	f7fc fe10 	bl	800069c <__addsf3>
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	f7fc ff15 	bl	80008ac <__aeabi_fmul>
 8003a82:	496a      	ldr	r1, [pc, #424]	; (8003c2c <expm1f+0x298>)
 8003a84:	f7fc fe08 	bl	8000698 <__aeabi_fsub>
 8003a88:	4631      	mov	r1, r6
 8003a8a:	f7fc ff0f 	bl	80008ac <__aeabi_fmul>
 8003a8e:	4968      	ldr	r1, [pc, #416]	; (8003c30 <expm1f+0x29c>)
 8003a90:	f7fc fe04 	bl	800069c <__addsf3>
 8003a94:	4631      	mov	r1, r6
 8003a96:	f7fc ff09 	bl	80008ac <__aeabi_fmul>
 8003a9a:	4966      	ldr	r1, [pc, #408]	; (8003c34 <expm1f+0x2a0>)
 8003a9c:	f7fc fdfc 	bl	8000698 <__aeabi_fsub>
 8003aa0:	4631      	mov	r1, r6
 8003aa2:	f7fc ff03 	bl	80008ac <__aeabi_fmul>
 8003aa6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003aaa:	f7fc fdf7 	bl	800069c <__addsf3>
 8003aae:	4681      	mov	r9, r0
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	f7fc fefa 	bl	80008ac <__aeabi_fmul>
 8003ab8:	4601      	mov	r1, r0
 8003aba:	485f      	ldr	r0, [pc, #380]	; (8003c38 <expm1f+0x2a4>)
 8003abc:	f7fc fdec 	bl	8000698 <__aeabi_fsub>
 8003ac0:	4601      	mov	r1, r0
 8003ac2:	4680      	mov	r8, r0
 8003ac4:	4648      	mov	r0, r9
 8003ac6:	f7fc fde7 	bl	8000698 <__aeabi_fsub>
 8003aca:	4641      	mov	r1, r8
 8003acc:	4681      	mov	r9, r0
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f7fc feec 	bl	80008ac <__aeabi_fmul>
 8003ad4:	4601      	mov	r1, r0
 8003ad6:	4859      	ldr	r0, [pc, #356]	; (8003c3c <expm1f+0x2a8>)
 8003ad8:	f7fc fdde 	bl	8000698 <__aeabi_fsub>
 8003adc:	4601      	mov	r1, r0
 8003ade:	4648      	mov	r0, r9
 8003ae0:	f7fc ff98 	bl	8000a14 <__aeabi_fdiv>
 8003ae4:	4631      	mov	r1, r6
 8003ae6:	f7fc fee1 	bl	80008ac <__aeabi_fmul>
 8003aea:	4601      	mov	r1, r0
 8003aec:	b9dd      	cbnz	r5, 8003b26 <expm1f+0x192>
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7fc fedc 	bl	80008ac <__aeabi_fmul>
 8003af4:	4631      	mov	r1, r6
 8003af6:	e00d      	b.n	8003b14 <expm1f+0x180>
 8003af8:	f7fc fdd0 	bl	800069c <__addsf3>
 8003afc:	4f50      	ldr	r7, [pc, #320]	; (8003c40 <expm1f+0x2ac>)
 8003afe:	4606      	mov	r6, r0
 8003b00:	f04f 35ff 	mov.w	r5, #4294967295
 8003b04:	e79c      	b.n	8003a40 <expm1f+0xac>
 8003b06:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8003b0a:	d20a      	bcs.n	8003b22 <expm1f+0x18e>
 8003b0c:	494d      	ldr	r1, [pc, #308]	; (8003c44 <expm1f+0x2b0>)
 8003b0e:	f7fc fdc5 	bl	800069c <__addsf3>
 8003b12:	4601      	mov	r1, r0
 8003b14:	f7fc fdc0 	bl	8000698 <__aeabi_fsub>
 8003b18:	4601      	mov	r1, r0
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f7fc fdbc 	bl	8000698 <__aeabi_fsub>
 8003b20:	e02f      	b.n	8003b82 <expm1f+0x1ee>
 8003b22:	2500      	movs	r5, #0
 8003b24:	e799      	b.n	8003a5a <expm1f+0xc6>
 8003b26:	4639      	mov	r1, r7
 8003b28:	f7fc fdb6 	bl	8000698 <__aeabi_fsub>
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	f7fc febd 	bl	80008ac <__aeabi_fmul>
 8003b32:	4639      	mov	r1, r7
 8003b34:	f7fc fdb0 	bl	8000698 <__aeabi_fsub>
 8003b38:	4631      	mov	r1, r6
 8003b3a:	f7fc fdad 	bl	8000698 <__aeabi_fsub>
 8003b3e:	1c6b      	adds	r3, r5, #1
 8003b40:	4606      	mov	r6, r0
 8003b42:	d10a      	bne.n	8003b5a <expm1f+0x1c6>
 8003b44:	4601      	mov	r1, r0
 8003b46:	4620      	mov	r0, r4
 8003b48:	f7fc fda6 	bl	8000698 <__aeabi_fsub>
 8003b4c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b50:	f7fc feac 	bl	80008ac <__aeabi_fmul>
 8003b54:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b58:	e7e0      	b.n	8003b1c <expm1f+0x188>
 8003b5a:	2d01      	cmp	r5, #1
 8003b5c:	d11f      	bne.n	8003b9e <expm1f+0x20a>
 8003b5e:	493a      	ldr	r1, [pc, #232]	; (8003c48 <expm1f+0x2b4>)
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7fd f841 	bl	8000be8 <__aeabi_fcmplt>
 8003b66:	b180      	cbz	r0, 8003b8a <expm1f+0x1f6>
 8003b68:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f7fc fd95 	bl	800069c <__addsf3>
 8003b72:	4601      	mov	r1, r0
 8003b74:	4630      	mov	r0, r6
 8003b76:	f7fc fd8f 	bl	8000698 <__aeabi_fsub>
 8003b7a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8003b7e:	f7fc fe95 	bl	80008ac <__aeabi_fmul>
 8003b82:	4604      	mov	r4, r0
 8003b84:	4620      	mov	r0, r4
 8003b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7fc fd83 	bl	8000698 <__aeabi_fsub>
 8003b92:	4601      	mov	r1, r0
 8003b94:	f7fc fd82 	bl	800069c <__addsf3>
 8003b98:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b9c:	e707      	b.n	80039ae <expm1f+0x1a>
 8003b9e:	1c6b      	adds	r3, r5, #1
 8003ba0:	2b39      	cmp	r3, #57	; 0x39
 8003ba2:	ea4f 56c5 	mov.w	r6, r5, lsl #23
 8003ba6:	d90b      	bls.n	8003bc0 <expm1f+0x22c>
 8003ba8:	4621      	mov	r1, r4
 8003baa:	f7fc fd75 	bl	8000698 <__aeabi_fsub>
 8003bae:	4601      	mov	r1, r0
 8003bb0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003bb4:	f7fc fd70 	bl	8000698 <__aeabi_fsub>
 8003bb8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003bbc:	4430      	add	r0, r6
 8003bbe:	e7ad      	b.n	8003b1c <expm1f+0x188>
 8003bc0:	2d16      	cmp	r5, #22
 8003bc2:	dc0e      	bgt.n	8003be2 <expm1f+0x24e>
 8003bc4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8003bc8:	fa41 f505 	asr.w	r5, r1, r5
 8003bcc:	4621      	mov	r1, r4
 8003bce:	f7fc fd63 	bl	8000698 <__aeabi_fsub>
 8003bd2:	f1c5 557e 	rsb	r5, r5, #1065353216	; 0x3f800000
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	4628      	mov	r0, r5
 8003bda:	f7fc fd5d 	bl	8000698 <__aeabi_fsub>
 8003bde:	1834      	adds	r4, r6, r0
 8003be0:	e7d0      	b.n	8003b84 <expm1f+0x1f0>
 8003be2:	f1c5 017f 	rsb	r1, r5, #127	; 0x7f
 8003be6:	05c9      	lsls	r1, r1, #23
 8003be8:	f7fc fd58 	bl	800069c <__addsf3>
 8003bec:	4601      	mov	r1, r0
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f7fc fd52 	bl	8000698 <__aeabi_fsub>
 8003bf4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003bf8:	f7fc fd50 	bl	800069c <__addsf3>
 8003bfc:	e7ef      	b.n	8003bde <expm1f+0x24a>
 8003bfe:	bf00      	nop
 8003c00:	4195b843 	.word	0x4195b843
 8003c04:	bf800000 	.word	0xbf800000
 8003c08:	42b17217 	.word	0x42b17217
 8003c0c:	0da24260 	.word	0x0da24260
 8003c10:	3fb8aa3b 	.word	0x3fb8aa3b
 8003c14:	3f317180 	.word	0x3f317180
 8003c18:	3717f7d1 	.word	0x3717f7d1
 8003c1c:	3eb17218 	.word	0x3eb17218
 8003c20:	3f851591 	.word	0x3f851591
 8003c24:	b457edbb 	.word	0xb457edbb
 8003c28:	36867e54 	.word	0x36867e54
 8003c2c:	38a670cd 	.word	0x38a670cd
 8003c30:	3ad00d01 	.word	0x3ad00d01
 8003c34:	3d088889 	.word	0x3d088889
 8003c38:	40400000 	.word	0x40400000
 8003c3c:	40c00000 	.word	0x40c00000
 8003c40:	b717f7d1 	.word	0xb717f7d1
 8003c44:	7149f2ca 	.word	0x7149f2ca
 8003c48:	be800000 	.word	0xbe800000

08003c4c <fabsf>:
 8003c4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c50:	4770      	bx	lr

08003c52 <finitef>:
 8003c52:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c56:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8003c5a:	bfac      	ite	ge
 8003c5c:	2000      	movge	r0, #0
 8003c5e:	2001      	movlt	r0, #1
 8003c60:	4770      	bx	lr
	...

08003c64 <nanf>:
 8003c64:	4800      	ldr	r0, [pc, #0]	; (8003c68 <nanf+0x4>)
 8003c66:	4770      	bx	lr
 8003c68:	7fc00000 	.word	0x7fc00000

08003c6c <_init>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr

08003c78 <_fini>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr
