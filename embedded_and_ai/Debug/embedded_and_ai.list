
embedded_and_ai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f24  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800514c  0800514c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005154  08005154  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800515c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000070  080051cc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080051cc  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011534  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a2  00000000  00000000  000315d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00033e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00034ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245ad  00000000  00000000  00035a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001351e  00000000  00000000  00059fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddb76  00000000  00000000  0006d4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b061  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e54  00000000  00000000  0014b0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080050dc 	.word	0x080050dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080050dc 	.word	0x080050dc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Mapping>:

#include <stdint.h>
#include "MAPPING.h"

int32_t Mapping(int32_t Copy_int32_InputMin,int32_t Copy_int32_InputMax,int32_t Copy_int32_OutputMin,int32_t Copy_int32_OutputMax,int32_t Copy_int32BiasValue,int32_t Copy_int32_InputValue)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
	int32_t Local_int32_MappedValue;
	Local_int32_MappedValue = (((Copy_int32_InputValue - Copy_int32_InputMin)*(Copy_int32_OutputMax - Copy_int32_OutputMin))/(Copy_int32_InputMax - Copy_int32_InputMin)) + Copy_int32_InputMin + Copy_int32BiasValue;
 80005d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	6839      	ldr	r1, [r7, #0]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	1a8a      	subs	r2, r1, r2
 80005de:	fb03 f202 	mul.w	r2, r3, r2
 80005e2:	68b9      	ldr	r1, [r7, #8]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	1acb      	subs	r3, r1, r3
 80005e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	6a3a      	ldr	r2, [r7, #32]
 80005f2:	4413      	add	r3, r2
 80005f4:	617b      	str	r3, [r7, #20]

	return Local_int32_MappedValue;
 80005f6:	697b      	ldr	r3, [r7, #20]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <PWM_int32SetPWMValue>:
#include <stdint.h>
#include "PWM.h"


int8_t PWM_int32SetPWMValue(TIM_TypeDef *htim,int32_t Copy_int32Channel,int32_t Copy_int32Value)
{
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
	int8_t Local_int8ErrorState = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	75fb      	strb	r3, [r7, #23]

	if (htim == TIM2)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800061a:	d136      	bne.n	800068a <PWM_int32SetPWMValue+0x86>
	{
		switch(Copy_int32Channel)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b0c      	cmp	r3, #12
 8000620:	d830      	bhi.n	8000684 <PWM_int32SetPWMValue+0x80>
 8000622:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <PWM_int32SetPWMValue+0x24>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	0800065d 	.word	0x0800065d
 800062c:	08000685 	.word	0x08000685
 8000630:	08000685 	.word	0x08000685
 8000634:	08000685 	.word	0x08000685
 8000638:	08000667 	.word	0x08000667
 800063c:	08000685 	.word	0x08000685
 8000640:	08000685 	.word	0x08000685
 8000644:	08000685 	.word	0x08000685
 8000648:	08000671 	.word	0x08000671
 800064c:	08000685 	.word	0x08000685
 8000650:	08000685 	.word	0x08000685
 8000654:	08000685 	.word	0x08000685
 8000658:	0800067b 	.word	0x0800067b
		{
		case TIM_CHANNEL_1 : TIM2->CCR1 = Copy_int32Value; break;
 800065c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6353      	str	r3, [r2, #52]	; 0x34
 8000664:	e028      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		case TIM_CHANNEL_2 : TIM2->CCR2 = Copy_int32Value; break;
 8000666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6393      	str	r3, [r2, #56]	; 0x38
 800066e:	e023      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		case TIM_CHANNEL_3 : TIM2->CCR3 = Copy_int32Value; break;
 8000670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000678:	e01e      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		case TIM_CHANNEL_4 : TIM2->CCR4 = Copy_int32Value; break;
 800067a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	e019      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		default : Local_int8ErrorState = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	75fb      	strb	r3, [r7, #23]
 8000688:	e016      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		}
	}

	else if (htim == TIM12)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <PWM_int32SetPWMValue+0xc4>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d111      	bne.n	80006b6 <PWM_int32SetPWMValue+0xb2>
	{
		switch(Copy_int32Channel)
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d003      	beq.n	80006a0 <PWM_int32SetPWMValue+0x9c>
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	2b04      	cmp	r3, #4
 800069c:	d004      	beq.n	80006a8 <PWM_int32SetPWMValue+0xa4>
 800069e:	e007      	b.n	80006b0 <PWM_int32SetPWMValue+0xac>
		{
		case TIM_CHANNEL_1 : TIM12->CCR1 = Copy_int32Value; break;
 80006a0:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <PWM_int32SetPWMValue+0xc4>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6353      	str	r3, [r2, #52]	; 0x34
 80006a6:	e007      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		case TIM_CHANNEL_2 : TIM12->CCR2 = Copy_int32Value; break;
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <PWM_int32SetPWMValue+0xc4>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6393      	str	r3, [r2, #56]	; 0x38
 80006ae:	e003      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		default : Local_int8ErrorState = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	75fb      	strb	r3, [r7, #23]
 80006b4:	e000      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		}
	}
 80006b6:	bf00      	nop

	return Local_int8ErrorState;
 80006b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	371c      	adds	r7, #28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40001800 	.word	0x40001800

080006cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_ADC1_Init+0x98>)
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <MX_ADC1_Init+0x9c>)
 80006e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_ADC1_Init+0x98>)
 80006e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC1_Init+0x98>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_ADC1_Init+0x98>)
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <MX_ADC1_Init+0xa0>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ADC1_Init+0x98>)
 8000728:	2201      	movs	r2, #1
 800072a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_ADC1_Init+0x98>)
 800072e:	f001 f819 	bl	8001764 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000738:	f000 fae0 	bl	8000cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_ADC1_Init+0x98>)
 800074e:	f001 f9b7 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000758:	f000 fad0 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000008c 	.word	0x2000008c
 8000768:	40012000 	.word	0x40012000
 800076c:	0f000001 	.word	0x0f000001

08000770 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_ADC2_Init+0x98>)
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <MX_ADC2_Init+0x9c>)
 8000786:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_ADC2_Init+0x98>)
 800078a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800078e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_ADC2_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_ADC2_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_ADC2_Init+0x98>)
 800079e:	2201      	movs	r2, #1
 80007a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_ADC2_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_ADC2_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_ADC2_Init+0x98>)
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_ADC2_Init+0xa0>)
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_ADC2_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_ADC2_Init+0x98>)
 80007be:	2201      	movs	r2, #1
 80007c0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_ADC2_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_ADC2_Init+0x98>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_ADC2_Init+0x98>)
 80007d2:	f000 ffc7 	bl	8001764 <HAL_ADC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 fa8e 	bl	8000cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_ADC2_Init+0x98>)
 80007f2:	f001 f965 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80007fc:	f000 fa7e 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000d4 	.word	0x200000d4
 800080c:	40012100 	.word	0x40012100
 8000810:	0f000001 	.word	0x0f000001

08000814 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_ADC3_Init+0x98>)
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <MX_ADC3_Init+0x9c>)
 800082a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_ADC3_Init+0x98>)
 800082e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000832:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_ADC3_Init+0x98>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_ADC3_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_ADC3_Init+0x98>)
 8000842:	2201      	movs	r2, #1
 8000844:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_ADC3_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_ADC3_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_ADC3_Init+0x98>)
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_ADC3_Init+0xa0>)
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_ADC3_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_ADC3_Init+0x98>)
 8000862:	2201      	movs	r2, #1
 8000864:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_ADC3_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_ADC3_Init+0x98>)
 8000870:	2201      	movs	r2, #1
 8000872:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_ADC3_Init+0x98>)
 8000876:	f000 ff75 	bl	8001764 <HAL_ADC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 fa3c 	bl	8000cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000884:	230a      	movs	r3, #10
 8000886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_ADC3_Init+0x98>)
 8000896:	f001 f913 	bl	8001ac0 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80008a0:	f000 fa2c 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000011c 	.word	0x2000011c
 80008b0:	40012200 	.word	0x40012200
 80008b4:	0f000001 	.word	0x0f000001

080008b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a45      	ldr	r2, [pc, #276]	; (80009ec <HAL_ADC_MspInit+0x134>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d128      	bne.n	800092c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
 80008de:	4b44      	ldr	r3, [pc, #272]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a43      	ldr	r2, [pc, #268]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 80008e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b41      	ldr	r3, [pc, #260]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f2:	623b      	str	r3, [r7, #32]
 80008f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
 80008fa:	4b3d      	ldr	r3, [pc, #244]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a3c      	ldr	r2, [pc, #240]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000912:	2301      	movs	r3, #1
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000916:	2303      	movs	r3, #3
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	4833      	ldr	r0, [pc, #204]	; (80009f4 <HAL_ADC_MspInit+0x13c>)
 8000926:	f001 fc17 	bl	8002158 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800092a:	e05a      	b.n	80009e2 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a31      	ldr	r2, [pc, #196]	; (80009f8 <HAL_ADC_MspInit+0x140>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d128      	bne.n	8000988 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a2c      	ldr	r2, [pc, #176]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 8000940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800096e:	2302      	movs	r3, #2
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000972:	2303      	movs	r3, #3
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	481c      	ldr	r0, [pc, #112]	; (80009f4 <HAL_ADC_MspInit+0x13c>)
 8000982:	f001 fbe9 	bl	8002158 <HAL_GPIO_Init>
}
 8000986:	e02c      	b.n	80009e2 <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <HAL_ADC_MspInit+0x144>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d127      	bne.n	80009e2 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 800099c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_ADC_MspInit+0x138>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ca:	2301      	movs	r3, #1
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <HAL_ADC_MspInit+0x148>)
 80009de:	f001 fbbb 	bl	8002158 <HAL_GPIO_Init>
}
 80009e2:	bf00      	nop
 80009e4:	3738      	adds	r7, #56	; 0x38
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40012000 	.word	0x40012000
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40012100 	.word	0x40012100
 80009fc:	40012200 	.word	0x40012200
 8000a00:	40020800 	.word	0x40020800

08000a04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a2c      	ldr	r2, [pc, #176]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a90:	f001 fcf6 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <MX_GPIO_Init+0xd8>)
 8000aac:	f001 fb54 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab0:	2320      	movs	r3, #32
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_GPIO_Init+0xd4>)
 8000ac8:	f001 fb46 	bl	8002158 <HAL_GPIO_Init>

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020800 	.word	0x40020800

08000ae0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae2:	b0f1      	sub	sp, #452	; 0x1c4
 8000ae4:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ae6:	f000 fda7 	bl	8001638 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000aea:	f000 f89b 	bl	8000c24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000aee:	f7ff ff89 	bl	8000a04 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000af2:	f7ff fdeb 	bl	80006cc <MX_ADC1_Init>
	MX_ADC2_Init();
 8000af6:	f7ff fe3b 	bl	8000770 <MX_ADC2_Init>
	MX_ADC3_Init();
 8000afa:	f7ff fe8b 	bl	8000814 <MX_ADC3_Init>
	MX_TIM2_Init();
 8000afe:	f000 fa4b 	bl	8000f98 <MX_TIM2_Init>
	MX_TIM10_Init();
 8000b02:	f000 fae1 	bl	80010c8 <MX_TIM10_Init>
	MX_TIM11_Init();
 8000b06:	f000 fb03 	bl	8001110 <MX_TIM11_Init>
	MX_TIM12_Init();
 8000b0a:	f000 fb25 	bl	8001158 <MX_TIM12_Init>
	MX_TIM13_Init();
 8000b0e:	f000 fb69 	bl	80011e4 <MX_TIM13_Init>
	MX_TIM14_Init();
 8000b12:	f000 fb8b 	bl	800122c <MX_TIM14_Init>
	MX_USART2_UART_Init();
 8000b16:	f000 fcf3 	bl	8001500 <MX_USART2_UART_Init>


	/* Initialize PWM Timers*/
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	483d      	ldr	r0, [pc, #244]	; (8000c14 <main+0x134>)
 8000b1e:	f002 fb4f 	bl	80031c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000b22:	2104      	movs	r1, #4
 8000b24:	483b      	ldr	r0, [pc, #236]	; (8000c14 <main+0x134>)
 8000b26:	f002 fb4b 	bl	80031c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b2a:	2108      	movs	r1, #8
 8000b2c:	4839      	ldr	r0, [pc, #228]	; (8000c14 <main+0x134>)
 8000b2e:	f002 fb47 	bl	80031c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b32:	210c      	movs	r1, #12
 8000b34:	4837      	ldr	r0, [pc, #220]	; (8000c14 <main+0x134>)
 8000b36:	f002 fb43 	bl	80031c0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4836      	ldr	r0, [pc, #216]	; (8000c18 <main+0x138>)
 8000b3e:	f002 fb3f 	bl	80031c0 <HAL_TIM_PWM_Start>

	/* USER CODE BEGIN 2 */
	SERVO_t Servo1;
	Servo1.htim = htim2;
 8000b42:	4a34      	ldr	r2, [pc, #208]	; (8000c14 <main+0x134>)
 8000b44:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000b48:	4611      	mov	r1, r2
 8000b4a:	2248      	movs	r2, #72	; 0x48
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 fe4f 	bl	80047f0 <memcpy>
	Servo1.Copy_int32Channel = TIM_CHANNEL_4;
 8000b52:	230c      	movs	r3, #12
 8000b54:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

	SERVO_t Servo2;
	Servo2.htim = htim2;
 8000b58:	4a2e      	ldr	r2, [pc, #184]	; (8000c14 <main+0x134>)
 8000b5a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000b5e:	4611      	mov	r1, r2
 8000b60:	2248      	movs	r2, #72	; 0x48
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 fe44 	bl	80047f0 <memcpy>
	Servo2.Copy_int32Channel = TIM_CHANNEL_3;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130


	SERVO_t Servo3;
	Servo3.htim = htim2;
 8000b6e:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <main+0x134>)
 8000b70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b74:	4611      	mov	r1, r2
 8000b76:	2248      	movs	r2, #72	; 0x48
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fe39 	bl	80047f0 <memcpy>
	Servo3.Copy_int32Channel = TIM_CHANNEL_2;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	SERVO_t Servo4;
	Servo4.htim = htim2;
 8000b84:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000b8c:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <main+0x134>)
 8000b8e:	4618      	mov	r0, r3
 8000b90:	4611      	mov	r1, r2
 8000b92:	2348      	movs	r3, #72	; 0x48
 8000b94:	461a      	mov	r2, r3
 8000b96:	f003 fe2b 	bl	80047f0 <memcpy>
	Servo4.Copy_int32Channel = TIM_CHANNEL_1;
 8000b9a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	649a      	str	r2, [r3, #72]	; 0x48

	SERVO_t Servo5;
	Servo5.htim = htim12;
 8000ba6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000baa:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000bae:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <main+0x138>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	2348      	movs	r3, #72	; 0x48
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	f003 fe1a 	bl	80047f0 <memcpy>
	Servo5.Copy_int32Channel = TIM_CHANNEL_1;
 8000bbc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000bc0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	649a      	str	r2, [r3, #72]	; 0x48
	Servo_void_SetAngle(Servo5, fest_angle);
 8000bc8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000bcc:	f5a3 76be 	sub.w	r6, r3, #380	; 0x17c
 8000bd0:	238c      	movs	r3, #140	; 0x8c
 8000bd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8000bd4:	466d      	mov	r5, sp
 8000bd6:	f106 0410 	add.w	r4, r6, #16
 8000bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000bea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000bee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bf2:	f000 f8db 	bl	8000dac <Servo_void_SetAngle>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//		sensor1 = analogRead(&hadc1);
		//		sensor2 = analogRead(&hadc1);
		sensor3 = analogRead(&hadc1);
 8000bf6:	4809      	ldr	r0, [pc, #36]	; (8000c1c <main+0x13c>)
 8000bf8:	f000 f886 	bl	8000d08 <analogRead>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <main+0x140>)
 8000c00:	6013      	str	r3, [r2, #0]
		//		serial_print(sensor1);
		//		serial_print_str(",");
		//		serial_print(sensor2);
		//		serial_print_str(",");
		serial_println(sensor3);
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <main+0x140>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f8ae 	bl	8000d68 <serial_println>
		HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fd85 	bl	800171c <HAL_Delay>
		sensor3 = analogRead(&hadc1);
 8000c12:	e7f0      	b.n	8000bf6 <main+0x116>
 8000c14:	20000170 	.word	0x20000170
 8000c18:	20000248 	.word	0x20000248
 8000c1c:	2000008c 	.word	0x2000008c
 8000c20:	20000164 	.word	0x20000164

08000c24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	; 0x50
 8000c28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	2234      	movs	r2, #52	; 0x34
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fdea 	bl	800480c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <SystemClock_Config+0xd0>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	4a28      	ldr	r2, [pc, #160]	; (8000cf4 <SystemClock_Config+0xd0>)
 8000c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c56:	6413      	str	r3, [r2, #64]	; 0x40
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <SystemClock_Config+0xd0>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c64:	2300      	movs	r3, #0
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <SystemClock_Config+0xd4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c70:	4a21      	ldr	r2, [pc, #132]	; (8000cf8 <SystemClock_Config+0xd4>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <SystemClock_Config+0xd4>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c90:	2302      	movs	r3, #2
 8000c92:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c94:	2300      	movs	r3, #0
 8000c96:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 90;
 8000c9c:	235a      	movs	r3, #90	; 0x5a
 8000c9e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 ff49 	bl	8002b48 <HAL_RCC_OscConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000cbc:	f000 f81e 	bl	8000cfc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ccc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2102      	movs	r1, #2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fbe9 	bl	80024b4 <HAL_RCC_ClockConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8000ce8:	f000 f808 	bl	8000cfc <Error_Handler>
	}
}
 8000cec:	bf00      	nop
 8000cee:	3750      	adds	r7, #80	; 0x50
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40007000 	.word	0x40007000

08000cfc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <analogRead>:
 */

#include "sensor_readings.h"
ADC_HandleTypeDef* hadc_g; // hold the address from the argument of the function
uint32_t analogRead(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	// Get ADC value
	hadc_g = hadc;
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <analogRead+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
	uint32_t raw;

	if(HAL_ADC_Start(hadc_g) != HAL_OK)
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <analogRead+0x5c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fd66 	bl	80017ec <HAL_ADC_Start>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <analogRead+0x22>
		Error_Handler();
 8000d26:	f7ff ffe9 	bl	8000cfc <Error_Handler>

	HAL_ADC_PollForConversion(hadc_g, HAL_MAX_DELAY);
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <analogRead+0x5c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 fe2c 	bl	8001990 <HAL_ADC_PollForConversion>

	if((HAL_ADC_GetState(hadc_g) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <analogRead+0x5c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fff1 	bl	8001d24 <HAL_ADC_GetState>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d4c:	d105      	bne.n	8000d5a <analogRead+0x52>
		raw = HAL_ADC_GetValue(hadc_g);
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <analogRead+0x5c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 fea7 	bl	8001aa6 <HAL_ADC_GetValue>
 8000d58:	60f8      	str	r0, [r7, #12]

	return raw;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000168 	.word	0x20000168

08000d68 <serial_println>:


void serial_println(uint32_t raw_data)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	char msg[10];
	// Convert to string and print
	sprintf(msg, "%lu\r\n", raw_data);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	490b      	ldr	r1, [pc, #44]	; (8000da4 <serial_println+0x3c>)
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fd4f 	bl	800481c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fa44 	bl	8000210 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	f107 010c 	add.w	r1, r7, #12
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <serial_println+0x40>)
 8000d96:	f003 f98c 	bl	80040b2 <HAL_UART_Transmit>

}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	080050f4 	.word	0x080050f4
 8000da8:	20000320 	.word	0x20000320

08000dac <Servo_void_SetAngle>:
#include "servo.h"
#include "MAPPING.h"


void Servo_void_SetAngle(SERVO_t Copy_ServoMotor,int32_t Copy_int32_Angle)
{
 8000dac:	b084      	sub	sp, #16
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b084      	sub	sp, #16
 8000db2:	af02      	add	r7, sp, #8
 8000db4:	f107 0c10 	add.w	ip, r7, #16
 8000db8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t Local_int32_MappedValue;

	Local_int32_MappedValue = Mapping(SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_INPUT, SERVO_MAX_INPUT, SERVO_MIN_INPUT,Copy_int32_Angle);
 8000dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	2319      	movs	r3, #25
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	237d      	movs	r3, #125	; 0x7d
 8000dc6:	2219      	movs	r2, #25
 8000dc8:	21b4      	movs	r1, #180	; 0xb4
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff fbfa 	bl	80005c4 <Mapping>
 8000dd0:	6078      	str	r0, [r7, #4]

	PWM_int32SetPWMValue(Copy_ServoMotor.htim.Instance, Copy_ServoMotor.Copy_int32Channel, Local_int32_MappedValue);
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fc13 	bl	8000604 <PWM_int32SetPWMValue>

}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000de8:	b004      	add	sp, #16
 8000dea:	4770      	bx	lr

08000dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <HAL_MspInit+0x4c>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e2a:	2007      	movs	r0, #7
 8000e2c:	f001 f952 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 fc28 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e96:	f002 fa5b 	bl	8003350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001b8 	.word	0x200001b8

08000ea4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000eaa:	f002 fa51 	bl	8003350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000200 	.word	0x20000200

08000eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <TIM2_IRQHandler+0x10>)
 8000ebe:	f002 fa47 	bl	8003350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000170 	.word	0x20000170

08000ecc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8000ed0:	4802      	ldr	r0, [pc, #8]	; (8000edc <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8000ed2:	f002 fa3d 	bl	8003350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000248 	.word	0x20000248

08000ee0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000ee6:	f002 fa33 	bl	8003350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000290 	.word	0x20000290

08000ef4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000efa:	f002 fa29 	bl	8003350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200002d8 	.word	0x200002d8

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f003 fc30 	bl	800479c <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20020000 	.word	0x20020000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	2000016c 	.word	0x2000016c
 8000f70:	20000378 	.word	0x20000378

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc8:	4b3e      	ldr	r3, [pc, #248]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8000fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8000fd0:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8000fd2:	f240 3283 	movw	r2, #899	; 0x383
 8000fd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8000fe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fe4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe6:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fec:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff2:	4834      	ldr	r0, [pc, #208]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8000ff4:	f002 f846 	bl	8003084 <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ffe:	f7ff fe7d 	bl	8000cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100c:	4619      	mov	r1, r3
 800100e:	482d      	ldr	r0, [pc, #180]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8001010:	f002 fb68 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800101a:	f7ff fe6f 	bl	8000cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800101e:	4829      	ldr	r0, [pc, #164]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8001020:	f002 f87f 	bl	8003122 <HAL_TIM_PWM_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800102a:	f7ff fe67 	bl	8000cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	4619      	mov	r1, r3
 800103c:	4821      	ldr	r0, [pc, #132]	; (80010c4 <MX_TIM2_Init+0x12c>)
 800103e:	f002 ff5b 	bl	8003ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001048:	f7ff fe58 	bl	8000cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800104c:	2360      	movs	r3, #96	; 0x60
 800104e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	4818      	ldr	r0, [pc, #96]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8001064:	f002 fa7c 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800106e:	f7ff fe45 	bl	8000cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2204      	movs	r2, #4
 8001076:	4619      	mov	r1, r3
 8001078:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MX_TIM2_Init+0x12c>)
 800107a:	f002 fa71 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001084:	f7ff fe3a 	bl	8000cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2208      	movs	r2, #8
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_TIM2_Init+0x12c>)
 8001090:	f002 fa66 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800109a:	f7ff fe2f 	bl	8000cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	220c      	movs	r2, #12
 80010a2:	4619      	mov	r1, r3
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <MX_TIM2_Init+0x12c>)
 80010a6:	f002 fa5b 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80010b0:	f7ff fe24 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <MX_TIM2_Init+0x12c>)
 80010b6:	f000 f9a3 	bl	8001400 <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3738      	adds	r7, #56	; 0x38
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000170 	.word	0x20000170

080010c8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_TIM10_Init+0x40>)
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <MX_TIM10_Init+0x44>)
 80010d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <MX_TIM10_Init+0x40>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_TIM10_Init+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_TIM10_Init+0x40>)
 80010e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_TIM10_Init+0x40>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_TIM10_Init+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_TIM10_Init+0x40>)
 80010f4:	f001 ffc6 	bl	8003084 <HAL_TIM_Base_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80010fe:	f7ff fdfd 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200001b8 	.word	0x200001b8
 800110c:	40014400 	.word	0x40014400

08001110 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_TIM11_Init+0x40>)
 8001116:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <MX_TIM11_Init+0x44>)
 8001118:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <MX_TIM11_Init+0x40>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_TIM11_Init+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_TIM11_Init+0x40>)
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_TIM11_Init+0x40>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_TIM11_Init+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_TIM11_Init+0x40>)
 800113c:	f001 ffa2 	bl	8003084 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001146:	f7ff fdd9 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000200 	.word	0x20000200
 8001154:	40014800 	.word	0x40014800

08001158 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_TIM12_Init+0x84>)
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <MX_TIM12_Init+0x88>)
 8001174:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 900-1;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_TIM12_Init+0x84>)
 8001178:	f240 3283 	movw	r2, #899	; 0x383
 800117c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_TIM12_Init+0x84>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_TIM12_Init+0x84>)
 8001186:	f240 32e7 	movw	r2, #999	; 0x3e7
 800118a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_TIM12_Init+0x84>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_TIM12_Init+0x84>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <MX_TIM12_Init+0x84>)
 800119a:	f001 ffc2 	bl	8003122 <HAL_TIM_PWM_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM12_Init+0x50>
  {
    Error_Handler();
 80011a4:	f7ff fdaa 	bl	8000cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a8:	2360      	movs	r3, #96	; 0x60
 80011aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <MX_TIM12_Init+0x84>)
 80011c0:	f002 f9ce 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 80011ca:	f7ff fd97 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <MX_TIM12_Init+0x84>)
 80011d0:	f000 f916 	bl	8001400 <HAL_TIM_MspPostInit>

}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000248 	.word	0x20000248
 80011e0:	40001800 	.word	0x40001800

080011e4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_TIM13_Init+0x40>)
 80011ea:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <MX_TIM13_Init+0x44>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_TIM13_Init+0x40>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_TIM13_Init+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_TIM13_Init+0x40>)
 80011fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001200:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_TIM13_Init+0x40>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_TIM13_Init+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_TIM13_Init+0x40>)
 8001210:	f001 ff38 	bl	8003084 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800121a:	f7ff fd6f 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000290 	.word	0x20000290
 8001228:	40001c00 	.word	0x40001c00

0800122c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_TIM14_Init+0x40>)
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <MX_TIM14_Init+0x44>)
 8001234:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_TIM14_Init+0x40>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_TIM14_Init+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_TIM14_Init+0x40>)
 8001244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001248:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_TIM14_Init+0x40>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_TIM14_Init+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_TIM14_Init+0x40>)
 8001258:	f001 ff14 	bl	8003084 <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001262:	f7ff fd4b 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200002d8 	.word	0x200002d8
 8001270:	40002000 	.word	0x40002000

08001274 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001284:	d116      	bne.n	80012b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
 800128a:	4b44      	ldr	r3, [pc, #272]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a43      	ldr	r2, [pc, #268]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	201c      	movs	r0, #28
 80012a8:	f000 ff1f 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ac:	201c      	movs	r0, #28
 80012ae:	f000 ff38 	bl	8002122 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80012b2:	e06e      	b.n	8001392 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM10)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a39      	ldr	r2, [pc, #228]	; (80013a0 <HAL_TIM_Base_MspInit+0x12c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d116      	bne.n	80012ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a35      	ldr	r2, [pc, #212]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2019      	movs	r0, #25
 80012e0:	f000 ff03 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012e4:	2019      	movs	r0, #25
 80012e6:	f000 ff1c 	bl	8002122 <HAL_NVIC_EnableIRQ>
}
 80012ea:	e052      	b.n	8001392 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a2c      	ldr	r2, [pc, #176]	; (80013a4 <HAL_TIM_Base_MspInit+0x130>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d116      	bne.n	8001324 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a27      	ldr	r2, [pc, #156]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 8001300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	201a      	movs	r0, #26
 8001318:	f000 fee7 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800131c:	201a      	movs	r0, #26
 800131e:	f000 ff00 	bl	8002122 <HAL_NVIC_EnableIRQ>
}
 8001322:	e036      	b.n	8001392 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <HAL_TIM_Base_MspInit+0x134>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d116      	bne.n	800135c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 8001338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	202c      	movs	r0, #44	; 0x2c
 8001350:	f000 fecb 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001354:	202c      	movs	r0, #44	; 0x2c
 8001356:	f000 fee4 	bl	8002122 <HAL_NVIC_EnableIRQ>
}
 800135a:	e01a      	b.n	8001392 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_TIM_Base_MspInit+0x138>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d115      	bne.n	8001392 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a0b      	ldr	r2, [pc, #44]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_TIM_Base_MspInit+0x128>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	202d      	movs	r0, #45	; 0x2d
 8001388:	f000 feaf 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800138c:	202d      	movs	r0, #45	; 0x2d
 800138e:	f000 fec8 	bl	8002122 <HAL_NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40014400 	.word	0x40014400
 80013a4:	40014800 	.word	0x40014800
 80013a8:	40001c00 	.word	0x40001c00
 80013ac:	40002000 	.word	0x40002000

080013b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_TIM_PWM_MspInit+0x48>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d115      	bne.n	80013ee <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_TIM_PWM_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_TIM_PWM_MspInit+0x4c>)
 80013cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_TIM_PWM_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	202b      	movs	r0, #43	; 0x2b
 80013e4:	f000 fe81 	bl	80020ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80013e8:	202b      	movs	r0, #43	; 0x2b
 80013ea:	f000 fe9a 	bl	8002122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40001800 	.word	0x40001800
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001420:	d13e      	bne.n	80014a0 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a31      	ldr	r2, [pc, #196]	; (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_9;
 800145a:	f240 6304 	movw	r3, #1540	; 0x604
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800146c:	2301      	movs	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	481f      	ldr	r0, [pc, #124]	; (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 8001478:	f000 fe6e 	bl	8002158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800147c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800148e:	2301      	movs	r3, #1
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4817      	ldr	r0, [pc, #92]	; (80014f8 <HAL_TIM_MspPostInit+0xf8>)
 800149a:	f000 fe5d 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800149e:	e023      	b.n	80014e8 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM12)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a15      	ldr	r2, [pc, #84]	; (80014fc <HAL_TIM_MspPostInit+0xfc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d11e      	bne.n	80014e8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_TIM_MspPostInit+0xf0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80014d8:	2309      	movs	r3, #9
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4804      	ldr	r0, [pc, #16]	; (80014f4 <HAL_TIM_MspPostInit+0xf4>)
 80014e4:	f000 fe38 	bl	8002158 <HAL_GPIO_Init>
}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40001800 	.word	0x40001800

08001500 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <MX_USART2_UART_Init+0x50>)
 8001508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001538:	f002 fd6e 	bl	8004018 <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001542:	f7ff fbdb 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000320 	.word	0x20000320
 8001550:	40004400 	.word	0x40004400

08001554 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_UART_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12b      	bne.n	80015ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_UART_MspInit+0x88>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_UART_MspInit+0x88>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_UART_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ae:	230c      	movs	r3, #12
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015be:	2307      	movs	r3, #7
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <HAL_UART_MspInit+0x8c>)
 80015ca:	f000 fdc5 	bl	8002158 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40004400 	.word	0x40004400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020000 	.word	0x40020000

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001600:	4c0b      	ldr	r4, [pc, #44]	; (8001630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800160e:	f7ff fcb1 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f003 f8c9 	bl	80047a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff fa63 	bl	8000ae0 <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001628:	0800515c 	.word	0x0800515c
  ldr r2, =_sbss
 800162c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001630:	20000378 	.word	0x20000378

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_Init+0x40>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_Init+0x40>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x40>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 fd37 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fbbe 	bl	8000dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fd4f 	bl	800213e <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 fd17 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000364 	.word	0x20000364

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000364 	.word	0x20000364

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008

08001764 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e033      	b.n	80017e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff f898 	bl	80008b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d118      	bne.n	80017d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017aa:	f023 0302 	bic.w	r3, r3, #2
 80017ae:	f043 0202 	orr.w	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fac0 	bl	8001d3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f023 0303 	bic.w	r3, r3, #3
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
 80017d2:	e001      	b.n	80017d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Start+0x1a>
 8001802:	2302      	movs	r3, #2
 8001804:	e0b2      	b.n	800196c <HAL_ADC_Start+0x180>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d018      	beq.n	800184e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800182c:	4b52      	ldr	r3, [pc, #328]	; (8001978 <HAL_ADC_Start+0x18c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a52      	ldr	r2, [pc, #328]	; (800197c <HAL_ADC_Start+0x190>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	0c9a      	lsrs	r2, r3, #18
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001840:	e002      	b.n	8001848 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3b01      	subs	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f9      	bne.n	8001842 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	d17a      	bne.n	8001952 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001886:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800189a:	d106      	bne.n	80018aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	f023 0206 	bic.w	r2, r3, #6
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	645a      	str	r2, [r3, #68]	; 0x44
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_ADC_Start+0x194>)
 80018ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d12a      	bne.n	8001928 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a2b      	ldr	r2, [pc, #172]	; (8001984 <HAL_ADC_Start+0x198>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d015      	beq.n	8001908 <HAL_ADC_Start+0x11c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a29      	ldr	r2, [pc, #164]	; (8001988 <HAL_ADC_Start+0x19c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d105      	bne.n	80018f2 <HAL_ADC_Start+0x106>
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_ADC_Start+0x194>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00a      	beq.n	8001908 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a25      	ldr	r2, [pc, #148]	; (800198c <HAL_ADC_Start+0x1a0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d136      	bne.n	800196a <HAL_ADC_Start+0x17e>
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_ADC_Start+0x194>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b00      	cmp	r3, #0
 8001906:	d130      	bne.n	800196a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d129      	bne.n	800196a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	e020      	b.n	800196a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a15      	ldr	r2, [pc, #84]	; (8001984 <HAL_ADC_Start+0x198>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d11b      	bne.n	800196a <HAL_ADC_Start+0x17e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d114      	bne.n	800196a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	e00b      	b.n	800196a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f043 0210 	orr.w	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f043 0201 	orr.w	r2, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	20000000 	.word	0x20000000
 800197c:	431bde83 	.word	0x431bde83
 8001980:	40012300 	.word	0x40012300
 8001984:	40012000 	.word	0x40012000
 8001988:	40012100 	.word	0x40012100
 800198c:	40012200 	.word	0x40012200

08001990 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ac:	d113      	bne.n	80019d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019bc:	d10b      	bne.n	80019d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f043 0220 	orr.w	r2, r3, #32
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e063      	b.n	8001a9e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019d6:	f7ff fe95 	bl	8001704 <HAL_GetTick>
 80019da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019dc:	e021      	b.n	8001a22 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d01d      	beq.n	8001a22 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d007      	beq.n	80019fc <HAL_ADC_PollForConversion+0x6c>
 80019ec:	f7ff fe8a 	bl	8001704 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d212      	bcs.n	8001a22 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d00b      	beq.n	8001a22 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f043 0204 	orr.w	r2, r3, #4
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e03d      	b.n	8001a9e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d1d6      	bne.n	80019de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0212 	mvn.w	r2, #18
 8001a38:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d123      	bne.n	8001a9c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d11f      	bne.n	8001a9c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d111      	bne.n	8001a9c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f043 0201 	orr.w	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x1c>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e113      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x244>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	d925      	bls.n	8001b38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68d9      	ldr	r1, [r3, #12]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	3b1e      	subs	r3, #30
 8001b02:	2207      	movs	r2, #7
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	400a      	ands	r2, r1
 8001b10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68d9      	ldr	r1, [r3, #12]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4403      	add	r3, r0
 8001b2a:	3b1e      	subs	r3, #30
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	e022      	b.n	8001b7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6919      	ldr	r1, [r3, #16]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	400a      	ands	r2, r1
 8001b5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6919      	ldr	r1, [r3, #16]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4403      	add	r3, r0
 8001b74:	409a      	lsls	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d824      	bhi.n	8001bd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b05      	subs	r3, #5
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b05      	subs	r3, #5
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bce:	e04c      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d824      	bhi.n	8001c22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b23      	subs	r3, #35	; 0x23
 8001bea:	221f      	movs	r2, #31
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b23      	subs	r3, #35	; 0x23
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c20:	e023      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	3b41      	subs	r3, #65	; 0x41
 8001c34:	221f      	movs	r2, #31
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	400a      	ands	r2, r1
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b41      	subs	r3, #65	; 0x41
 8001c5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c6a:	4b29      	ldr	r3, [pc, #164]	; (8001d10 <HAL_ADC_ConfigChannel+0x250>)
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a28      	ldr	r2, [pc, #160]	; (8001d14 <HAL_ADC_ConfigChannel+0x254>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d10f      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1d8>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d10b      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_ADC_ConfigChannel+0x254>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d12b      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x23a>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_ADC_ConfigChannel+0x258>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d003      	beq.n	8001cb4 <HAL_ADC_ConfigChannel+0x1f4>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b11      	cmp	r3, #17
 8001cb2:	d122      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_ADC_ConfigChannel+0x258>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d111      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_ADC_ConfigChannel+0x25c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a11      	ldr	r2, [pc, #68]	; (8001d20 <HAL_ADC_ConfigChannel+0x260>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	0c9a      	lsrs	r2, r3, #18
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40012300 	.word	0x40012300
 8001d14:	40012000 	.word	0x40012000
 8001d18:	10000012 	.word	0x10000012
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d44:	4b79      	ldr	r3, [pc, #484]	; (8001f2c <ADC_Init+0x1f0>)
 8001d46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	021a      	lsls	r2, r3, #8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6899      	ldr	r1, [r3, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <ADC_Init+0x1f4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d022      	beq.n	8001e1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001de2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6899      	ldr	r1, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6899      	ldr	r1, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e00f      	b.n	8001e3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0202 	bic.w	r2, r2, #2
 8001e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6899      	ldr	r1, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7e1b      	ldrb	r3, [r3, #24]
 8001e54:	005a      	lsls	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d01b      	beq.n	8001ea0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6859      	ldr	r1, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	3b01      	subs	r3, #1
 8001e94:	035a      	lsls	r2, r3, #13
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	e007      	b.n	8001eb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	051a      	lsls	r2, r3, #20
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6899      	ldr	r1, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ef2:	025a      	lsls	r2, r3, #9
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6899      	ldr	r1, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	029a      	lsls	r2, r3, #10
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40012300 	.word	0x40012300
 8001f30:	0f000001 	.word	0x0f000001

08001f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f50:	4013      	ands	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <__NVIC_SetPriorityGrouping+0x44>)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	60d3      	str	r3, [r2, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <__NVIC_GetPriorityGrouping+0x18>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	f003 0307 	and.w	r3, r3, #7
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	db0b      	blt.n	8001fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4907      	ldr	r1, [pc, #28]	; (8001fd0 <__NVIC_EnableIRQ+0x38>)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2001      	movs	r0, #1
 8001fba:	fa00 f202 	lsl.w	r2, r0, r2
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff8e 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff29 	bl	8001f34 <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff3e 	bl	8001f7c <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff8e 	bl	8002028 <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5d 	bl	8001fd4 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff31 	bl	8001f98 <__NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffa2 	bl	8002090 <SysTick_Config>
 800214c:	4603      	mov	r3, r0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	e165      	b.n	8002440 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	429a      	cmp	r2, r3
 800218e:	f040 8154 	bne.w	800243a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d005      	beq.n	80021aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d130      	bne.n	800220c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 0201 	and.w	r2, r3, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b03      	cmp	r3, #3
 8002216:	d017      	beq.n	8002248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d123      	bne.n	800229c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	08da      	lsrs	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3208      	adds	r2, #8
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0203 	and.w	r2, r3, #3
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80ae 	beq.w	800243a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b5d      	ldr	r3, [pc, #372]	; (8002458 <HAL_GPIO_Init+0x300>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a5c      	ldr	r2, [pc, #368]	; (8002458 <HAL_GPIO_Init+0x300>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <HAL_GPIO_Init+0x300>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fa:	4a58      	ldr	r2, [pc, #352]	; (800245c <HAL_GPIO_Init+0x304>)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4f      	ldr	r2, [pc, #316]	; (8002460 <HAL_GPIO_Init+0x308>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d025      	beq.n	8002372 <HAL_GPIO_Init+0x21a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4e      	ldr	r2, [pc, #312]	; (8002464 <HAL_GPIO_Init+0x30c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01f      	beq.n	800236e <HAL_GPIO_Init+0x216>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4d      	ldr	r2, [pc, #308]	; (8002468 <HAL_GPIO_Init+0x310>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0x212>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4c      	ldr	r2, [pc, #304]	; (800246c <HAL_GPIO_Init+0x314>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x20e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4b      	ldr	r2, [pc, #300]	; (8002470 <HAL_GPIO_Init+0x318>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x20a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_GPIO_Init+0x31c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x206>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a49      	ldr	r2, [pc, #292]	; (8002478 <HAL_GPIO_Init+0x320>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x202>
 8002356:	2306      	movs	r3, #6
 8002358:	e00c      	b.n	8002374 <HAL_GPIO_Init+0x21c>
 800235a:	2307      	movs	r3, #7
 800235c:	e00a      	b.n	8002374 <HAL_GPIO_Init+0x21c>
 800235e:	2305      	movs	r3, #5
 8002360:	e008      	b.n	8002374 <HAL_GPIO_Init+0x21c>
 8002362:	2304      	movs	r3, #4
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x21c>
 8002366:	2303      	movs	r3, #3
 8002368:	e004      	b.n	8002374 <HAL_GPIO_Init+0x21c>
 800236a:	2302      	movs	r3, #2
 800236c:	e002      	b.n	8002374 <HAL_GPIO_Init+0x21c>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_GPIO_Init+0x21c>
 8002372:	2300      	movs	r3, #0
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	f002 0203 	and.w	r2, r2, #3
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	4093      	lsls	r3, r2
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002384:	4935      	ldr	r1, [pc, #212]	; (800245c <HAL_GPIO_Init+0x304>)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3302      	adds	r3, #2
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002392:	4b3a      	ldr	r3, [pc, #232]	; (800247c <HAL_GPIO_Init+0x324>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b6:	4a31      	ldr	r2, [pc, #196]	; (800247c <HAL_GPIO_Init+0x324>)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023bc:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_GPIO_Init+0x324>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e0:	4a26      	ldr	r2, [pc, #152]	; (800247c <HAL_GPIO_Init+0x324>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_GPIO_Init+0x324>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800240a:	4a1c      	ldr	r2, [pc, #112]	; (800247c <HAL_GPIO_Init+0x324>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_GPIO_Init+0x324>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002434:	4a11      	ldr	r2, [pc, #68]	; (800247c <HAL_GPIO_Init+0x324>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3301      	adds	r3, #1
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	f67f ae96 	bls.w	8002174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3724      	adds	r7, #36	; 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40013800 	.word	0x40013800
 8002460:	40020000 	.word	0x40020000
 8002464:	40020400 	.word	0x40020400
 8002468:	40020800 	.word	0x40020800
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40021000 	.word	0x40021000
 8002474:	40021400 	.word	0x40021400
 8002478:	40021800 	.word	0x40021800
 800247c:	40013c00 	.word	0x40013c00

08002480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
 800248c:	4613      	mov	r3, r2
 800248e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002490:	787b      	ldrb	r3, [r7, #1]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002496:	887a      	ldrh	r2, [r7, #2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800249c:	e003      	b.n	80024a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	041a      	lsls	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	619a      	str	r2, [r3, #24]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0cc      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b68      	ldr	r3, [pc, #416]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d90c      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b65      	ldr	r3, [pc, #404]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b63      	ldr	r3, [pc, #396]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b8      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002508:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a58      	ldr	r2, [pc, #352]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002520:	4b53      	ldr	r3, [pc, #332]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a52      	ldr	r2, [pc, #328]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800252a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b50      	ldr	r3, [pc, #320]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	494d      	ldr	r1, [pc, #308]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d044      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d119      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d003      	beq.n	8002572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256e:	2b03      	cmp	r3, #3
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e067      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b37      	ldr	r3, [pc, #220]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4934      	ldr	r1, [pc, #208]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7ff f8ae 	bl	8001704 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7ff f8aa 	bl	8001704 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e04f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d20c      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b22      	ldr	r3, [pc, #136]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4916      	ldr	r1, [pc, #88]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	490e      	ldr	r1, [pc, #56]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263a:	f000 f855 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800263e:	4602      	mov	r2, r0
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	490a      	ldr	r1, [pc, #40]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	5ccb      	ldrb	r3, [r1, r3]
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	4a09      	ldr	r2, [pc, #36]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff f80e 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00
 8002670:	40023800 	.word	0x40023800
 8002674:	08005100 	.word	0x08005100
 8002678:	20000000 	.word	0x20000000
 800267c:	20000004 	.word	0x20000004

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_GetHCLKFreq+0x14>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000

08002698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800269c:	f7ff fff0 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0a9b      	lsrs	r3, r3, #10
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4903      	ldr	r1, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08005110 	.word	0x08005110

080026c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026c4:	f7ff ffdc 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0b5b      	lsrs	r3, r3, #13
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4903      	ldr	r1, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08005110 	.word	0x08005110

080026e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ec:	b0ae      	sub	sp, #184	; 0xb8
 80026ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270e:	4bcb      	ldr	r3, [pc, #812]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b0c      	cmp	r3, #12
 8002718:	f200 8206 	bhi.w	8002b28 <HAL_RCC_GetSysClockFreq+0x440>
 800271c:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <HAL_RCC_GetSysClockFreq+0x3c>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002759 	.word	0x08002759
 8002728:	08002b29 	.word	0x08002b29
 800272c:	08002b29 	.word	0x08002b29
 8002730:	08002b29 	.word	0x08002b29
 8002734:	08002761 	.word	0x08002761
 8002738:	08002b29 	.word	0x08002b29
 800273c:	08002b29 	.word	0x08002b29
 8002740:	08002b29 	.word	0x08002b29
 8002744:	08002769 	.word	0x08002769
 8002748:	08002b29 	.word	0x08002b29
 800274c:	08002b29 	.word	0x08002b29
 8002750:	08002b29 	.word	0x08002b29
 8002754:	08002959 	.word	0x08002959
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4bb9      	ldr	r3, [pc, #740]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x358>)
 800275a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800275e:	e1e7      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002760:	4bb8      	ldr	r3, [pc, #736]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002766:	e1e3      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002768:	4bb4      	ldr	r3, [pc, #720]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002774:	4bb1      	ldr	r3, [pc, #708]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d071      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4bae      	ldr	r3, [pc, #696]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2200      	movs	r2, #0
 8002788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800278c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002798:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027a6:	4622      	mov	r2, r4
 80027a8:	462b      	mov	r3, r5
 80027aa:	f04f 0000 	mov.w	r0, #0
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	0159      	lsls	r1, r3, #5
 80027b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b8:	0150      	lsls	r0, r2, #5
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4621      	mov	r1, r4
 80027c0:	1a51      	subs	r1, r2, r1
 80027c2:	6439      	str	r1, [r7, #64]	; 0x40
 80027c4:	4629      	mov	r1, r5
 80027c6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ca:	647b      	str	r3, [r7, #68]	; 0x44
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80027d8:	4649      	mov	r1, r9
 80027da:	018b      	lsls	r3, r1, #6
 80027dc:	4641      	mov	r1, r8
 80027de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027e2:	4641      	mov	r1, r8
 80027e4:	018a      	lsls	r2, r1, #6
 80027e6:	4641      	mov	r1, r8
 80027e8:	1a51      	subs	r1, r2, r1
 80027ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80027ec:	4649      	mov	r1, r9
 80027ee:	eb63 0301 	sbc.w	r3, r3, r1
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002800:	4649      	mov	r1, r9
 8002802:	00cb      	lsls	r3, r1, #3
 8002804:	4641      	mov	r1, r8
 8002806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280a:	4641      	mov	r1, r8
 800280c:	00ca      	lsls	r2, r1, #3
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	4603      	mov	r3, r0
 8002814:	4622      	mov	r2, r4
 8002816:	189b      	adds	r3, r3, r2
 8002818:	633b      	str	r3, [r7, #48]	; 0x30
 800281a:	462b      	mov	r3, r5
 800281c:	460a      	mov	r2, r1
 800281e:	eb42 0303 	adc.w	r3, r2, r3
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002830:	4629      	mov	r1, r5
 8002832:	024b      	lsls	r3, r1, #9
 8002834:	4621      	mov	r1, r4
 8002836:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800283a:	4621      	mov	r1, r4
 800283c:	024a      	lsls	r2, r1, #9
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002846:	2200      	movs	r2, #0
 8002848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800284c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002850:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002854:	f7fd fd34 	bl	80002c0 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002862:	e067      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002864:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002870:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800287c:	67bb      	str	r3, [r7, #120]	; 0x78
 800287e:	2300      	movs	r3, #0
 8002880:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002882:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002886:	4622      	mov	r2, r4
 8002888:	462b      	mov	r3, r5
 800288a:	f04f 0000 	mov.w	r0, #0
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	0159      	lsls	r1, r3, #5
 8002894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002898:	0150      	lsls	r0, r2, #5
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4621      	mov	r1, r4
 80028a0:	1a51      	subs	r1, r2, r1
 80028a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80028a4:	4629      	mov	r1, r5
 80028a6:	eb63 0301 	sbc.w	r3, r3, r1
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80028b8:	4649      	mov	r1, r9
 80028ba:	018b      	lsls	r3, r1, #6
 80028bc:	4641      	mov	r1, r8
 80028be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028c2:	4641      	mov	r1, r8
 80028c4:	018a      	lsls	r2, r1, #6
 80028c6:	4641      	mov	r1, r8
 80028c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80028cc:	4649      	mov	r1, r9
 80028ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028e6:	4692      	mov	sl, r2
 80028e8:	469b      	mov	fp, r3
 80028ea:	4623      	mov	r3, r4
 80028ec:	eb1a 0303 	adds.w	r3, sl, r3
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	462b      	mov	r3, r5
 80028f4:	eb4b 0303 	adc.w	r3, fp, r3
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002906:	4629      	mov	r1, r5
 8002908:	028b      	lsls	r3, r1, #10
 800290a:	4621      	mov	r1, r4
 800290c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002910:	4621      	mov	r1, r4
 8002912:	028a      	lsls	r2, r1, #10
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800291c:	2200      	movs	r2, #0
 800291e:	673b      	str	r3, [r7, #112]	; 0x70
 8002920:	677a      	str	r2, [r7, #116]	; 0x74
 8002922:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002926:	f7fd fccb 	bl	80002c0 <__aeabi_uldivmod>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4613      	mov	r3, r2
 8002930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	0c1b      	lsrs	r3, r3, #16
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	3301      	adds	r3, #1
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800294a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002956:	e0eb      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002958:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002964:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d06b      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002970:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	2200      	movs	r2, #0
 8002978:	66bb      	str	r3, [r7, #104]	; 0x68
 800297a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800297c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800297e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002982:	663b      	str	r3, [r7, #96]	; 0x60
 8002984:	2300      	movs	r3, #0
 8002986:	667b      	str	r3, [r7, #100]	; 0x64
 8002988:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800298c:	4622      	mov	r2, r4
 800298e:	462b      	mov	r3, r5
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	0159      	lsls	r1, r3, #5
 800299a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299e:	0150      	lsls	r0, r2, #5
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4621      	mov	r1, r4
 80029a6:	1a51      	subs	r1, r2, r1
 80029a8:	61b9      	str	r1, [r7, #24]
 80029aa:	4629      	mov	r1, r5
 80029ac:	eb63 0301 	sbc.w	r3, r3, r1
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80029be:	4659      	mov	r1, fp
 80029c0:	018b      	lsls	r3, r1, #6
 80029c2:	4651      	mov	r1, sl
 80029c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029c8:	4651      	mov	r1, sl
 80029ca:	018a      	lsls	r2, r1, #6
 80029cc:	4651      	mov	r1, sl
 80029ce:	ebb2 0801 	subs.w	r8, r2, r1
 80029d2:	4659      	mov	r1, fp
 80029d4:	eb63 0901 	sbc.w	r9, r3, r1
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029ec:	4690      	mov	r8, r2
 80029ee:	4699      	mov	r9, r3
 80029f0:	4623      	mov	r3, r4
 80029f2:	eb18 0303 	adds.w	r3, r8, r3
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	462b      	mov	r3, r5
 80029fa:	eb49 0303 	adc.w	r3, r9, r3
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	024b      	lsls	r3, r1, #9
 8002a10:	4621      	mov	r1, r4
 8002a12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a16:	4621      	mov	r1, r4
 8002a18:	024a      	lsls	r2, r1, #9
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a22:	2200      	movs	r2, #0
 8002a24:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a2c:	f7fd fc48 	bl	80002c0 <__aeabi_uldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4613      	mov	r3, r2
 8002a36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a3a:	e065      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x420>
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a48:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	4611      	mov	r1, r2
 8002a54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a58:	653b      	str	r3, [r7, #80]	; 0x50
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	657b      	str	r3, [r7, #84]	; 0x54
 8002a5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a62:	4642      	mov	r2, r8
 8002a64:	464b      	mov	r3, r9
 8002a66:	f04f 0000 	mov.w	r0, #0
 8002a6a:	f04f 0100 	mov.w	r1, #0
 8002a6e:	0159      	lsls	r1, r3, #5
 8002a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a74:	0150      	lsls	r0, r2, #5
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4641      	mov	r1, r8
 8002a7c:	1a51      	subs	r1, r2, r1
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	4649      	mov	r1, r9
 8002a82:	eb63 0301 	sbc.w	r3, r3, r1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a94:	4659      	mov	r1, fp
 8002a96:	018b      	lsls	r3, r1, #6
 8002a98:	4651      	mov	r1, sl
 8002a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a9e:	4651      	mov	r1, sl
 8002aa0:	018a      	lsls	r2, r1, #6
 8002aa2:	4651      	mov	r1, sl
 8002aa4:	1a54      	subs	r4, r2, r1
 8002aa6:	4659      	mov	r1, fp
 8002aa8:	eb63 0501 	sbc.w	r5, r3, r1
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	00eb      	lsls	r3, r5, #3
 8002ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aba:	00e2      	lsls	r2, r4, #3
 8002abc:	4614      	mov	r4, r2
 8002abe:	461d      	mov	r5, r3
 8002ac0:	4643      	mov	r3, r8
 8002ac2:	18e3      	adds	r3, r4, r3
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	eb45 0303 	adc.w	r3, r5, r3
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ada:	4629      	mov	r1, r5
 8002adc:	028b      	lsls	r3, r1, #10
 8002ade:	4621      	mov	r1, r4
 8002ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	028a      	lsls	r2, r1, #10
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002af0:	2200      	movs	r2, #0
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002af4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002af6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002afa:	f7fd fbe1 	bl	80002c0 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4613      	mov	r3, r2
 8002b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	0f1b      	lsrs	r3, r3, #28
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b26:	e003      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	37b8      	adds	r7, #184	; 0xb8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	00f42400 	.word	0x00f42400

08002b48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e28d      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8083 	beq.w	8002c6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b68:	4b94      	ldr	r3, [pc, #592]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d019      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b74:	4b91      	ldr	r3, [pc, #580]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b80:	4b8e      	ldr	r3, [pc, #568]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b8b      	ldr	r3, [pc, #556]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d112      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba6:	d10b      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b84      	ldr	r3, [pc, #528]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d05b      	beq.n	8002c6c <HAL_RCC_OscConfig+0x124>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d157      	bne.n	8002c6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e25a      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x90>
 8002bca:	4b7c      	ldr	r3, [pc, #496]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a7b      	ldr	r2, [pc, #492]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e01d      	b.n	8002c14 <HAL_RCC_OscConfig+0xcc>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0xb4>
 8002be2:	4b76      	ldr	r3, [pc, #472]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a75      	ldr	r2, [pc, #468]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a72      	ldr	r2, [pc, #456]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0xcc>
 8002bfc:	4b6f      	ldr	r3, [pc, #444]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a6e      	ldr	r2, [pc, #440]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c06:	6013      	str	r3, [r2, #0]
 8002c08:	4b6c      	ldr	r3, [pc, #432]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6b      	ldr	r2, [pc, #428]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fd72 	bl	8001704 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fd6e 	bl	8001704 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e21f      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0xdc>
 8002c42:	e014      	b.n	8002c6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fd5e 	bl	8001704 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fd5a 	bl	8001704 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e20b      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b57      	ldr	r3, [pc, #348]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x104>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d06f      	beq.n	8002d5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c7a:	4b50      	ldr	r3, [pc, #320]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c86:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d105      	bne.n	8002c9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c92:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d11c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002caa:	4b44      	ldr	r3, [pc, #272]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d116      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb6:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x186>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e1d3      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cce:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4937      	ldr	r1, [pc, #220]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	e03a      	b.n	8002d5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cec:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <HAL_RCC_OscConfig+0x278>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe fd07 	bl	8001704 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7fe fd03 	bl	8001704 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e1b4      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4925      	ldr	r1, [pc, #148]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
 8002d2c:	e015      	b.n	8002d5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_RCC_OscConfig+0x278>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe fce6 	bl	8001704 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3c:	f7fe fce2 	bl	8001704 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e193      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d036      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d016      	beq.n	8002d9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe fcc6 	bl	8001704 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fcc2 	bl	8001704 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e173      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x274>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x234>
 8002d9a:	e01b      	b.n	8002dd4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fe fcaf 	bl	8001704 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	e00e      	b.n	8002dc8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002daa:	f7fe fcab 	bl	8001704 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d907      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e15c      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	42470000 	.word	0x42470000
 8002dc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc8:	4b8a      	ldr	r3, [pc, #552]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ea      	bne.n	8002daa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8097 	beq.w	8002f10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4b83      	ldr	r3, [pc, #524]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	4b7f      	ldr	r3, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a7e      	ldr	r2, [pc, #504]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b7c      	ldr	r3, [pc, #496]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b79      	ldr	r3, [pc, #484]	; (8002ff8 <HAL_RCC_OscConfig+0x4b0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	4b76      	ldr	r3, [pc, #472]	; (8002ff8 <HAL_RCC_OscConfig+0x4b0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a75      	ldr	r2, [pc, #468]	; (8002ff8 <HAL_RCC_OscConfig+0x4b0>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2a:	f7fe fc6b 	bl	8001704 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fe fc67 	bl	8001704 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e118      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <HAL_RCC_OscConfig+0x4b0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x31e>
 8002e58:	4b66      	ldr	r3, [pc, #408]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a65      	ldr	r2, [pc, #404]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	e01c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x358>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x340>
 8002e6e:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a60      	ldr	r2, [pc, #384]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	f043 0304 	orr.w	r3, r3, #4
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a5d      	ldr	r2, [pc, #372]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	e00b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x358>
 8002e88:	4b5a      	ldr	r3, [pc, #360]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a59      	ldr	r2, [pc, #356]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
 8002e94:	4b57      	ldr	r3, [pc, #348]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a56      	ldr	r2, [pc, #344]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002e9a:	f023 0304 	bic.w	r3, r3, #4
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d015      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fc2c 	bl	8001704 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fc28 	bl	8001704 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0d7      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	4b4b      	ldr	r3, [pc, #300]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0ee      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x368>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe fc16 	bl	8001704 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fe fc12 	bl	8001704 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0c1      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef2:	4b40      	ldr	r3, [pc, #256]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1ee      	bne.n	8002edc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f04:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	4a3a      	ldr	r2, [pc, #232]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80ad 	beq.w	8003074 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d060      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d145      	bne.n	8002fba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b33      	ldr	r3, [pc, #204]	; (8002ffc <HAL_RCC_OscConfig+0x4b4>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fbe6 	bl	8001704 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fbe2 	bl	8001704 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e093      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b29      	ldr	r3, [pc, #164]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	019b      	lsls	r3, r3, #6
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	3b01      	subs	r3, #1
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	491b      	ldr	r1, [pc, #108]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x4b4>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe fbb7 	bl	8001704 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe fbb3 	bl	8001704 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e064      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x452>
 8002fb8:	e05c      	b.n	8003074 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_RCC_OscConfig+0x4b4>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fba0 	bl	8001704 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe fb9c 	bl	8001704 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e04d      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCC_OscConfig+0x4ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x480>
 8002fe6:	e045      	b.n	8003074 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e040      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003000:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <HAL_RCC_OscConfig+0x538>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d030      	beq.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d129      	bne.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d122      	bne.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003038:	4293      	cmp	r3, r2
 800303a:	d119      	bne.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	3b01      	subs	r3, #1
 800304a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d10f      	bne.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e041      	b.n	800311a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fe f8e2 	bl	8001274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f000 fc08 	bl	80038d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e041      	b.n	80031b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fe f931 	bl	80013b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f000 fbb9 	bl	80038d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <HAL_TIM_PWM_Start+0x24>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e022      	b.n	800322a <HAL_TIM_PWM_Start+0x6a>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d109      	bne.n	80031fe <HAL_TIM_PWM_Start+0x3e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	bf14      	ite	ne
 80031f6:	2301      	movne	r3, #1
 80031f8:	2300      	moveq	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	e015      	b.n	800322a <HAL_TIM_PWM_Start+0x6a>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d109      	bne.n	8003218 <HAL_TIM_PWM_Start+0x58>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	bf14      	ite	ne
 8003210:	2301      	movne	r3, #1
 8003212:	2300      	moveq	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e008      	b.n	800322a <HAL_TIM_PWM_Start+0x6a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	bf14      	ite	ne
 8003224:	2301      	movne	r3, #1
 8003226:	2300      	moveq	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e07c      	b.n	800332c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d104      	bne.n	8003242 <HAL_TIM_PWM_Start+0x82>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003240:	e013      	b.n	800326a <HAL_TIM_PWM_Start+0xaa>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b04      	cmp	r3, #4
 8003246:	d104      	bne.n	8003252 <HAL_TIM_PWM_Start+0x92>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003250:	e00b      	b.n	800326a <HAL_TIM_PWM_Start+0xaa>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d104      	bne.n	8003262 <HAL_TIM_PWM_Start+0xa2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003260:	e003      	b.n	800326a <HAL_TIM_PWM_Start+0xaa>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2202      	movs	r2, #2
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	6839      	ldr	r1, [r7, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fe1a 	bl	8003eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <HAL_TIM_PWM_Start+0x174>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_TIM_PWM_Start+0xcc>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a2c      	ldr	r2, [pc, #176]	; (8003338 <HAL_TIM_PWM_Start+0x178>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_TIM_PWM_Start+0xd0>
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_TIM_PWM_Start+0xd2>
 8003290:	2300      	movs	r3, #0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a22      	ldr	r2, [pc, #136]	; (8003334 <HAL_TIM_PWM_Start+0x174>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <HAL_TIM_PWM_Start+0x136>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d01d      	beq.n	80032f6 <HAL_TIM_PWM_Start+0x136>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <HAL_TIM_PWM_Start+0x17c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d018      	beq.n	80032f6 <HAL_TIM_PWM_Start+0x136>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <HAL_TIM_PWM_Start+0x180>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_TIM_PWM_Start+0x136>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <HAL_TIM_PWM_Start+0x184>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_TIM_PWM_Start+0x136>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a16      	ldr	r2, [pc, #88]	; (8003338 <HAL_TIM_PWM_Start+0x178>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_TIM_PWM_Start+0x136>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <HAL_TIM_PWM_Start+0x188>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_TIM_PWM_Start+0x136>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a16      	ldr	r2, [pc, #88]	; (800334c <HAL_TIM_PWM_Start+0x18c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d111      	bne.n	800331a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b06      	cmp	r3, #6
 8003306:	d010      	beq.n	800332a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003318:	e007      	b.n	800332a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40010000 	.word	0x40010000
 8003338:	40010400 	.word	0x40010400
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40014000 	.word	0x40014000
 800334c:	40001800 	.word	0x40001800

08003350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0202 	mvn.w	r2, #2
 800337c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa81 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fa73 	bl	8003886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fa84 	bl	80038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d122      	bne.n	8003400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d11b      	bne.n	8003400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0204 	mvn.w	r2, #4
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa57 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fa49 	bl	8003886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fa5a 	bl	80038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b08      	cmp	r3, #8
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0208 	mvn.w	r2, #8
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2204      	movs	r2, #4
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa2d 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fa1f 	bl	8003886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fa30 	bl	80038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b10      	cmp	r3, #16
 8003460:	d122      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b10      	cmp	r3, #16
 800346e:	d11b      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0210 	mvn.w	r2, #16
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2208      	movs	r2, #8
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa03 	bl	800389a <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f9f5 	bl	8003886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fa06 	bl	80038ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10e      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0201 	mvn.w	r2, #1
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f9cf 	bl	8003872 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fd82 	bl	8004004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9cb 	bl	80038c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b20      	cmp	r3, #32
 8003538:	d10e      	bne.n	8003558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d107      	bne.n	8003558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0220 	mvn.w	r2, #32
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fd4c 	bl	8003ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800357a:	2302      	movs	r3, #2
 800357c:	e0ae      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b0c      	cmp	r3, #12
 800358a:	f200 809f 	bhi.w	80036cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800358e:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080036cd 	.word	0x080036cd
 800359c:	080036cd 	.word	0x080036cd
 80035a0:	080036cd 	.word	0x080036cd
 80035a4:	08003609 	.word	0x08003609
 80035a8:	080036cd 	.word	0x080036cd
 80035ac:	080036cd 	.word	0x080036cd
 80035b0:	080036cd 	.word	0x080036cd
 80035b4:	0800364b 	.word	0x0800364b
 80035b8:	080036cd 	.word	0x080036cd
 80035bc:	080036cd 	.word	0x080036cd
 80035c0:	080036cd 	.word	0x080036cd
 80035c4:	0800368b 	.word	0x0800368b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fa22 	bl	8003a18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0208 	orr.w	r2, r2, #8
 80035e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0204 	bic.w	r2, r2, #4
 80035f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6999      	ldr	r1, [r3, #24]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	619a      	str	r2, [r3, #24]
      break;
 8003606:	e064      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fa72 	bl	8003af8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6999      	ldr	r1, [r3, #24]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	021a      	lsls	r2, r3, #8
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	619a      	str	r2, [r3, #24]
      break;
 8003648:	e043      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fac7 	bl	8003be4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0208 	orr.w	r2, r2, #8
 8003664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0204 	bic.w	r2, r2, #4
 8003674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69d9      	ldr	r1, [r3, #28]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	61da      	str	r2, [r3, #28]
      break;
 8003688:	e023      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fb1b 	bl	8003ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69d9      	ldr	r1, [r3, #28]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	021a      	lsls	r2, r3, #8
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	61da      	str	r2, [r3, #28]
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
      break;
 80036d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036da:	7dfb      	ldrb	r3, [r7, #23]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIM_ConfigClockSource+0x1c>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e0b4      	b.n	800386a <HAL_TIM_ConfigClockSource+0x186>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800371e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d03e      	beq.n	80037b8 <HAL_TIM_ConfigClockSource+0xd4>
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373e:	f200 8087 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	f000 8086 	beq.w	8003856 <HAL_TIM_ConfigClockSource+0x172>
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d87f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b70      	cmp	r3, #112	; 0x70
 8003752:	d01a      	beq.n	800378a <HAL_TIM_ConfigClockSource+0xa6>
 8003754:	2b70      	cmp	r3, #112	; 0x70
 8003756:	d87b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d050      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x11a>
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d877      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b50      	cmp	r3, #80	; 0x50
 8003762:	d03c      	beq.n	80037de <HAL_TIM_ConfigClockSource+0xfa>
 8003764:	2b50      	cmp	r3, #80	; 0x50
 8003766:	d873      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d058      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x13a>
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d86f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003770:	2b30      	cmp	r3, #48	; 0x30
 8003772:	d064      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003774:	2b30      	cmp	r3, #48	; 0x30
 8003776:	d86b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d060      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d867      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05c      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003784:	2b10      	cmp	r3, #16
 8003786:	d05a      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003788:	e062      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f000 fb67 	bl	8003e6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	609a      	str	r2, [r3, #8]
      break;
 80037b6:	e04f      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6899      	ldr	r1, [r3, #8]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f000 fb50 	bl	8003e6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037da:	609a      	str	r2, [r3, #8]
      break;
 80037dc:	e03c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 fac4 	bl	8003d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2150      	movs	r1, #80	; 0x50
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fb1d 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 80037fc:	e02c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 fae3 	bl	8003dd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2160      	movs	r1, #96	; 0x60
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fb0d 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 800381c:	e01c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 faa4 	bl	8003d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2140      	movs	r1, #64	; 0x40
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fafd 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 800383c:	e00c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 faf4 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 800384e:	e003      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      break;
 8003854:	e000      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a40      	ldr	r2, [pc, #256]	; (80039ec <TIM_Base_SetConfig+0x114>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <TIM_Base_SetConfig+0x40>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f6:	d00f      	beq.n	8003918 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a3d      	ldr	r2, [pc, #244]	; (80039f0 <TIM_Base_SetConfig+0x118>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00b      	beq.n	8003918 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3c      	ldr	r2, [pc, #240]	; (80039f4 <TIM_Base_SetConfig+0x11c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d007      	beq.n	8003918 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3b      	ldr	r2, [pc, #236]	; (80039f8 <TIM_Base_SetConfig+0x120>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3a      	ldr	r2, [pc, #232]	; (80039fc <TIM_Base_SetConfig+0x124>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d108      	bne.n	800392a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2f      	ldr	r2, [pc, #188]	; (80039ec <TIM_Base_SetConfig+0x114>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d02b      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003938:	d027      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2c      	ldr	r2, [pc, #176]	; (80039f0 <TIM_Base_SetConfig+0x118>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d023      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <TIM_Base_SetConfig+0x11c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01f      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <TIM_Base_SetConfig+0x120>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01b      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a29      	ldr	r2, [pc, #164]	; (80039fc <TIM_Base_SetConfig+0x124>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d017      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a28      	ldr	r2, [pc, #160]	; (8003a00 <TIM_Base_SetConfig+0x128>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a27      	ldr	r2, [pc, #156]	; (8003a04 <TIM_Base_SetConfig+0x12c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00f      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a26      	ldr	r2, [pc, #152]	; (8003a08 <TIM_Base_SetConfig+0x130>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00b      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <TIM_Base_SetConfig+0x134>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d007      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <TIM_Base_SetConfig+0x138>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d003      	beq.n	800398a <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a23      	ldr	r2, [pc, #140]	; (8003a14 <TIM_Base_SetConfig+0x13c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d108      	bne.n	800399c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <TIM_Base_SetConfig+0x114>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_Base_SetConfig+0xf8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a0c      	ldr	r2, [pc, #48]	; (80039fc <TIM_Base_SetConfig+0x124>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d103      	bne.n	80039d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	615a      	str	r2, [r3, #20]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40000800 	.word	0x40000800
 80039f8:	40000c00 	.word	0x40000c00
 80039fc:	40010400 	.word	0x40010400
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800
 8003a0c:	40001800 	.word	0x40001800
 8003a10:	40001c00 	.word	0x40001c00
 8003a14:	40002000 	.word	0x40002000

08003a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f023 0201 	bic.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 0302 	bic.w	r3, r3, #2
 8003a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a20      	ldr	r2, [pc, #128]	; (8003af0 <TIM_OC1_SetConfig+0xd8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_OC1_SetConfig+0x64>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <TIM_OC1_SetConfig+0xdc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10c      	bne.n	8003a96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0308 	bic.w	r3, r3, #8
 8003a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 0304 	bic.w	r3, r3, #4
 8003a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a15      	ldr	r2, [pc, #84]	; (8003af0 <TIM_OC1_SetConfig+0xd8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <TIM_OC1_SetConfig+0x8e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <TIM_OC1_SetConfig+0xdc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d111      	bne.n	8003aca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40010400 	.word	0x40010400

08003af8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f023 0210 	bic.w	r2, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f023 0320 	bic.w	r3, r3, #32
 8003b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a22      	ldr	r2, [pc, #136]	; (8003bdc <TIM_OC2_SetConfig+0xe4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_OC2_SetConfig+0x68>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a21      	ldr	r2, [pc, #132]	; (8003be0 <TIM_OC2_SetConfig+0xe8>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d10d      	bne.n	8003b7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a17      	ldr	r2, [pc, #92]	; (8003bdc <TIM_OC2_SetConfig+0xe4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_OC2_SetConfig+0x94>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <TIM_OC2_SetConfig+0xe8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d113      	bne.n	8003bb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	40010000 	.word	0x40010000
 8003be0:	40010400 	.word	0x40010400

08003be4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0303 	bic.w	r3, r3, #3
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <TIM_OC3_SetConfig+0xe0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_OC3_SetConfig+0x66>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a20      	ldr	r2, [pc, #128]	; (8003cc8 <TIM_OC3_SetConfig+0xe4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10d      	bne.n	8003c66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <TIM_OC3_SetConfig+0xe0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_OC3_SetConfig+0x92>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <TIM_OC3_SetConfig+0xe4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d113      	bne.n	8003c9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40010400 	.word	0x40010400

08003ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	031b      	lsls	r3, r3, #12
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <TIM_OC4_SetConfig+0xa4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_OC4_SetConfig+0x68>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a11      	ldr	r2, [pc, #68]	; (8003d74 <TIM_OC4_SetConfig+0xa8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d109      	bne.n	8003d48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40010400 	.word	0x40010400

08003d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f023 0201 	bic.w	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 030a 	bic.w	r3, r3, #10
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f023 0210 	bic.w	r2, r3, #16
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	031b      	lsls	r3, r3, #12
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f043 0307 	orr.w	r3, r3, #7
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	021a      	lsls	r2, r3, #8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	609a      	str	r2, [r3, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1a      	ldr	r2, [r3, #32]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	401a      	ands	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e05a      	b.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d022      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5c:	d01d      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d018      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d013      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00e      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d009      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a15      	ldr	r2, [pc, #84]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10c      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40010400 	.word	0x40010400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40001800 	.word	0x40001800

08003ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e03f      	b.n	80040aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fd fa88 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2224      	movs	r2, #36	; 0x24
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800405a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f929 	bl	80042b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b08a      	sub	sp, #40	; 0x28
 80040b6:	af02      	add	r7, sp, #8
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d17c      	bne.n	80041cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_UART_Transmit+0x2c>
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e075      	b.n	80041ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_UART_Transmit+0x3e>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e06e      	b.n	80041ce <HAL_UART_Transmit+0x11c>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2221      	movs	r2, #33	; 0x21
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004106:	f7fd fafd 	bl	8001704 <HAL_GetTick>
 800410a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	88fa      	ldrh	r2, [r7, #6]
 8004110:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	88fa      	ldrh	r2, [r7, #6]
 8004116:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004120:	d108      	bne.n	8004134 <HAL_UART_Transmit+0x82>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	e003      	b.n	800413c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004138:	2300      	movs	r3, #0
 800413a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004144:	e02a      	b.n	800419c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	2180      	movs	r1, #128	; 0x80
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f840 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e036      	b.n	80041ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10b      	bne.n	800417e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004174:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	3302      	adds	r3, #2
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	e007      	b.n	800418e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	781a      	ldrb	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	3301      	adds	r3, #1
 800418c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1cf      	bne.n	8004146 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2140      	movs	r1, #64	; 0x40
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f810 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e006      	b.n	80041ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e000      	b.n	80041ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041cc:	2302      	movs	r3, #2
  }
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b090      	sub	sp, #64	; 0x40
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e6:	e050      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d04c      	beq.n	800428a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0x30>
 80041f6:	f7fd fa85 	bl	8001704 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004202:	429a      	cmp	r2, r3
 8004204:	d241      	bcs.n	800428a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800421c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	330c      	adds	r3, #12
 8004224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004226:	637a      	str	r2, [r7, #52]	; 0x34
 8004228:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800422c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e5      	bne.n	8004206 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3314      	adds	r3, #20
 8004240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	613b      	str	r3, [r7, #16]
   return(result);
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3314      	adds	r3, #20
 8004258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800425a:	623a      	str	r2, [r7, #32]
 800425c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	69f9      	ldr	r1, [r7, #28]
 8004260:	6a3a      	ldr	r2, [r7, #32]
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	61bb      	str	r3, [r7, #24]
   return(result);
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e5      	bne.n	800423a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e00f      	b.n	80042aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4013      	ands	r3, r2
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	429a      	cmp	r2, r3
 8004298:	bf0c      	ite	eq
 800429a:	2301      	moveq	r3, #1
 800429c:	2300      	movne	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d09f      	beq.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3740      	adds	r7, #64	; 0x40
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b0c0      	sub	sp, #256	; 0x100
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	68d9      	ldr	r1, [r3, #12]
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	ea40 0301 	orr.w	r3, r0, r1
 80042dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800430c:	f021 010c 	bic.w	r1, r1, #12
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800431a:	430b      	orrs	r3, r1
 800431c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432e:	6999      	ldr	r1, [r3, #24]
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	ea40 0301 	orr.w	r3, r0, r1
 800433a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4b8f      	ldr	r3, [pc, #572]	; (8004580 <UART_SetConfig+0x2cc>)
 8004344:	429a      	cmp	r2, r3
 8004346:	d005      	beq.n	8004354 <UART_SetConfig+0xa0>
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b8d      	ldr	r3, [pc, #564]	; (8004584 <UART_SetConfig+0x2d0>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d104      	bne.n	800435e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7fe f9b4 	bl	80026c0 <HAL_RCC_GetPCLK2Freq>
 8004358:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800435c:	e003      	b.n	8004366 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800435e:	f7fe f99b 	bl	8002698 <HAL_RCC_GetPCLK1Freq>
 8004362:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	f040 810c 	bne.w	800458c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800437e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004386:	4622      	mov	r2, r4
 8004388:	462b      	mov	r3, r5
 800438a:	1891      	adds	r1, r2, r2
 800438c:	65b9      	str	r1, [r7, #88]	; 0x58
 800438e:	415b      	adcs	r3, r3
 8004390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004396:	4621      	mov	r1, r4
 8004398:	eb12 0801 	adds.w	r8, r2, r1
 800439c:	4629      	mov	r1, r5
 800439e:	eb43 0901 	adc.w	r9, r3, r1
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b6:	4690      	mov	r8, r2
 80043b8:	4699      	mov	r9, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	eb18 0303 	adds.w	r3, r8, r3
 80043c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043c4:	462b      	mov	r3, r5
 80043c6:	eb49 0303 	adc.w	r3, r9, r3
 80043ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043e2:	460b      	mov	r3, r1
 80043e4:	18db      	adds	r3, r3, r3
 80043e6:	653b      	str	r3, [r7, #80]	; 0x50
 80043e8:	4613      	mov	r3, r2
 80043ea:	eb42 0303 	adc.w	r3, r2, r3
 80043ee:	657b      	str	r3, [r7, #84]	; 0x54
 80043f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043f8:	f7fb ff62 	bl	80002c0 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4b61      	ldr	r3, [pc, #388]	; (8004588 <UART_SetConfig+0x2d4>)
 8004402:	fba3 2302 	umull	r2, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	011c      	lsls	r4, r3, #4
 800440a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004414:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004418:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	1891      	adds	r1, r2, r2
 8004422:	64b9      	str	r1, [r7, #72]	; 0x48
 8004424:	415b      	adcs	r3, r3
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800442c:	4641      	mov	r1, r8
 800442e:	eb12 0a01 	adds.w	sl, r2, r1
 8004432:	4649      	mov	r1, r9
 8004434:	eb43 0b01 	adc.w	fp, r3, r1
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004444:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800444c:	4692      	mov	sl, r2
 800444e:	469b      	mov	fp, r3
 8004450:	4643      	mov	r3, r8
 8004452:	eb1a 0303 	adds.w	r3, sl, r3
 8004456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800445a:	464b      	mov	r3, r9
 800445c:	eb4b 0303 	adc.w	r3, fp, r3
 8004460:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004470:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004474:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004478:	460b      	mov	r3, r1
 800447a:	18db      	adds	r3, r3, r3
 800447c:	643b      	str	r3, [r7, #64]	; 0x40
 800447e:	4613      	mov	r3, r2
 8004480:	eb42 0303 	adc.w	r3, r2, r3
 8004484:	647b      	str	r3, [r7, #68]	; 0x44
 8004486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800448a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800448e:	f7fb ff17 	bl	80002c0 <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4611      	mov	r1, r2
 8004498:	4b3b      	ldr	r3, [pc, #236]	; (8004588 <UART_SetConfig+0x2d4>)
 800449a:	fba3 2301 	umull	r2, r3, r3, r1
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2264      	movs	r2, #100	; 0x64
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	1acb      	subs	r3, r1, r3
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044ae:	4b36      	ldr	r3, [pc, #216]	; (8004588 <UART_SetConfig+0x2d4>)
 80044b0:	fba3 2302 	umull	r2, r3, r3, r2
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044bc:	441c      	add	r4, r3
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044d8:	415b      	adcs	r3, r3
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044e0:	4641      	mov	r1, r8
 80044e2:	1851      	adds	r1, r2, r1
 80044e4:	6339      	str	r1, [r7, #48]	; 0x30
 80044e6:	4649      	mov	r1, r9
 80044e8:	414b      	adcs	r3, r1
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044f8:	4659      	mov	r1, fp
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004502:	4651      	mov	r1, sl
 8004504:	00ca      	lsls	r2, r1, #3
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	4603      	mov	r3, r0
 800450c:	4642      	mov	r2, r8
 800450e:	189b      	adds	r3, r3, r2
 8004510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004514:	464b      	mov	r3, r9
 8004516:	460a      	mov	r2, r1
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800452c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004534:	460b      	mov	r3, r1
 8004536:	18db      	adds	r3, r3, r3
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
 800453a:	4613      	mov	r3, r2
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004546:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800454a:	f7fb feb9 	bl	80002c0 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <UART_SetConfig+0x2d4>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	; 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	3332      	adds	r3, #50	; 0x32
 8004566:	4a08      	ldr	r2, [pc, #32]	; (8004588 <UART_SetConfig+0x2d4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 0207 	and.w	r2, r3, #7
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4422      	add	r2, r4
 800457a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800457c:	e105      	b.n	800478a <UART_SetConfig+0x4d6>
 800457e:	bf00      	nop
 8004580:	40011000 	.word	0x40011000
 8004584:	40011400 	.word	0x40011400
 8004588:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800458c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004590:	2200      	movs	r2, #0
 8004592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004596:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800459a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800459e:	4642      	mov	r2, r8
 80045a0:	464b      	mov	r3, r9
 80045a2:	1891      	adds	r1, r2, r2
 80045a4:	6239      	str	r1, [r7, #32]
 80045a6:	415b      	adcs	r3, r3
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ae:	4641      	mov	r1, r8
 80045b0:	1854      	adds	r4, r2, r1
 80045b2:	4649      	mov	r1, r9
 80045b4:	eb43 0501 	adc.w	r5, r3, r1
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	00eb      	lsls	r3, r5, #3
 80045c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045c6:	00e2      	lsls	r2, r4, #3
 80045c8:	4614      	mov	r4, r2
 80045ca:	461d      	mov	r5, r3
 80045cc:	4643      	mov	r3, r8
 80045ce:	18e3      	adds	r3, r4, r3
 80045d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045d4:	464b      	mov	r3, r9
 80045d6:	eb45 0303 	adc.w	r3, r5, r3
 80045da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045fa:	4629      	mov	r1, r5
 80045fc:	008b      	lsls	r3, r1, #2
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004604:	4621      	mov	r1, r4
 8004606:	008a      	lsls	r2, r1, #2
 8004608:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800460c:	f7fb fe58 	bl	80002c0 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4b60      	ldr	r3, [pc, #384]	; (8004798 <UART_SetConfig+0x4e4>)
 8004616:	fba3 2302 	umull	r2, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	011c      	lsls	r4, r3, #4
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004628:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800462c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	61b9      	str	r1, [r7, #24]
 8004638:	415b      	adcs	r3, r3
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004640:	4641      	mov	r1, r8
 8004642:	1851      	adds	r1, r2, r1
 8004644:	6139      	str	r1, [r7, #16]
 8004646:	4649      	mov	r1, r9
 8004648:	414b      	adcs	r3, r1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004658:	4659      	mov	r1, fp
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4651      	mov	r1, sl
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4651      	mov	r1, sl
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4642      	mov	r2, r8
 800466e:	189b      	adds	r3, r3, r2
 8004670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004674:	464b      	mov	r3, r9
 8004676:	460a      	mov	r2, r1
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	67bb      	str	r3, [r7, #120]	; 0x78
 800468a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004698:	4649      	mov	r1, r9
 800469a:	008b      	lsls	r3, r1, #2
 800469c:	4641      	mov	r1, r8
 800469e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a2:	4641      	mov	r1, r8
 80046a4:	008a      	lsls	r2, r1, #2
 80046a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046aa:	f7fb fe09 	bl	80002c0 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4b39      	ldr	r3, [pc, #228]	; (8004798 <UART_SetConfig+0x4e4>)
 80046b4:	fba3 1302 	umull	r1, r3, r3, r2
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	2164      	movs	r1, #100	; 0x64
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	3332      	adds	r3, #50	; 0x32
 80046c6:	4a34      	ldr	r2, [pc, #208]	; (8004798 <UART_SetConfig+0x4e4>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d2:	441c      	add	r4, r3
 80046d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d8:	2200      	movs	r2, #0
 80046da:	673b      	str	r3, [r7, #112]	; 0x70
 80046dc:	677a      	str	r2, [r7, #116]	; 0x74
 80046de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046e2:	4642      	mov	r2, r8
 80046e4:	464b      	mov	r3, r9
 80046e6:	1891      	adds	r1, r2, r2
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	415b      	adcs	r3, r3
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f2:	4641      	mov	r1, r8
 80046f4:	1851      	adds	r1, r2, r1
 80046f6:	6039      	str	r1, [r7, #0]
 80046f8:	4649      	mov	r1, r9
 80046fa:	414b      	adcs	r3, r1
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800470a:	4659      	mov	r1, fp
 800470c:	00cb      	lsls	r3, r1, #3
 800470e:	4651      	mov	r1, sl
 8004710:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004714:	4651      	mov	r1, sl
 8004716:	00ca      	lsls	r2, r1, #3
 8004718:	4610      	mov	r0, r2
 800471a:	4619      	mov	r1, r3
 800471c:	4603      	mov	r3, r0
 800471e:	4642      	mov	r2, r8
 8004720:	189b      	adds	r3, r3, r2
 8004722:	66bb      	str	r3, [r7, #104]	; 0x68
 8004724:	464b      	mov	r3, r9
 8004726:	460a      	mov	r2, r1
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	663b      	str	r3, [r7, #96]	; 0x60
 8004738:	667a      	str	r2, [r7, #100]	; 0x64
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004746:	4649      	mov	r1, r9
 8004748:	008b      	lsls	r3, r1, #2
 800474a:	4641      	mov	r1, r8
 800474c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004750:	4641      	mov	r1, r8
 8004752:	008a      	lsls	r2, r1, #2
 8004754:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004758:	f7fb fdb2 	bl	80002c0 <__aeabi_uldivmod>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <UART_SetConfig+0x4e4>)
 8004762:	fba3 1302 	umull	r1, r3, r3, r2
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2164      	movs	r1, #100	; 0x64
 800476a:	fb01 f303 	mul.w	r3, r1, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	3332      	adds	r3, #50	; 0x32
 8004774:	4a08      	ldr	r2, [pc, #32]	; (8004798 <UART_SetConfig+0x4e4>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	f003 020f 	and.w	r2, r3, #15
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4422      	add	r2, r4
 8004788:	609a      	str	r2, [r3, #8]
}
 800478a:	bf00      	nop
 800478c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004790:	46bd      	mov	sp, r7
 8004792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004796:	bf00      	nop
 8004798:	51eb851f 	.word	0x51eb851f

0800479c <__errno>:
 800479c:	4b01      	ldr	r3, [pc, #4]	; (80047a4 <__errno+0x8>)
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	2000000c 	.word	0x2000000c

080047a8 <__libc_init_array>:
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	4d0d      	ldr	r5, [pc, #52]	; (80047e0 <__libc_init_array+0x38>)
 80047ac:	4c0d      	ldr	r4, [pc, #52]	; (80047e4 <__libc_init_array+0x3c>)
 80047ae:	1b64      	subs	r4, r4, r5
 80047b0:	10a4      	asrs	r4, r4, #2
 80047b2:	2600      	movs	r6, #0
 80047b4:	42a6      	cmp	r6, r4
 80047b6:	d109      	bne.n	80047cc <__libc_init_array+0x24>
 80047b8:	4d0b      	ldr	r5, [pc, #44]	; (80047e8 <__libc_init_array+0x40>)
 80047ba:	4c0c      	ldr	r4, [pc, #48]	; (80047ec <__libc_init_array+0x44>)
 80047bc:	f000 fc8e 	bl	80050dc <_init>
 80047c0:	1b64      	subs	r4, r4, r5
 80047c2:	10a4      	asrs	r4, r4, #2
 80047c4:	2600      	movs	r6, #0
 80047c6:	42a6      	cmp	r6, r4
 80047c8:	d105      	bne.n	80047d6 <__libc_init_array+0x2e>
 80047ca:	bd70      	pop	{r4, r5, r6, pc}
 80047cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d0:	4798      	blx	r3
 80047d2:	3601      	adds	r6, #1
 80047d4:	e7ee      	b.n	80047b4 <__libc_init_array+0xc>
 80047d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047da:	4798      	blx	r3
 80047dc:	3601      	adds	r6, #1
 80047de:	e7f2      	b.n	80047c6 <__libc_init_array+0x1e>
 80047e0:	08005154 	.word	0x08005154
 80047e4:	08005154 	.word	0x08005154
 80047e8:	08005154 	.word	0x08005154
 80047ec:	08005158 	.word	0x08005158

080047f0 <memcpy>:
 80047f0:	440a      	add	r2, r1
 80047f2:	4291      	cmp	r1, r2
 80047f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80047f8:	d100      	bne.n	80047fc <memcpy+0xc>
 80047fa:	4770      	bx	lr
 80047fc:	b510      	push	{r4, lr}
 80047fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004806:	4291      	cmp	r1, r2
 8004808:	d1f9      	bne.n	80047fe <memcpy+0xe>
 800480a:	bd10      	pop	{r4, pc}

0800480c <memset>:
 800480c:	4402      	add	r2, r0
 800480e:	4603      	mov	r3, r0
 8004810:	4293      	cmp	r3, r2
 8004812:	d100      	bne.n	8004816 <memset+0xa>
 8004814:	4770      	bx	lr
 8004816:	f803 1b01 	strb.w	r1, [r3], #1
 800481a:	e7f9      	b.n	8004810 <memset+0x4>

0800481c <siprintf>:
 800481c:	b40e      	push	{r1, r2, r3}
 800481e:	b500      	push	{lr}
 8004820:	b09c      	sub	sp, #112	; 0x70
 8004822:	ab1d      	add	r3, sp, #116	; 0x74
 8004824:	9002      	str	r0, [sp, #8]
 8004826:	9006      	str	r0, [sp, #24]
 8004828:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800482c:	4809      	ldr	r0, [pc, #36]	; (8004854 <siprintf+0x38>)
 800482e:	9107      	str	r1, [sp, #28]
 8004830:	9104      	str	r1, [sp, #16]
 8004832:	4909      	ldr	r1, [pc, #36]	; (8004858 <siprintf+0x3c>)
 8004834:	f853 2b04 	ldr.w	r2, [r3], #4
 8004838:	9105      	str	r1, [sp, #20]
 800483a:	6800      	ldr	r0, [r0, #0]
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	a902      	add	r1, sp, #8
 8004840:	f000 f868 	bl	8004914 <_svfiprintf_r>
 8004844:	9b02      	ldr	r3, [sp, #8]
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	b01c      	add	sp, #112	; 0x70
 800484c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004850:	b003      	add	sp, #12
 8004852:	4770      	bx	lr
 8004854:	2000000c 	.word	0x2000000c
 8004858:	ffff0208 	.word	0xffff0208

0800485c <__ssputs_r>:
 800485c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004860:	688e      	ldr	r6, [r1, #8]
 8004862:	429e      	cmp	r6, r3
 8004864:	4682      	mov	sl, r0
 8004866:	460c      	mov	r4, r1
 8004868:	4690      	mov	r8, r2
 800486a:	461f      	mov	r7, r3
 800486c:	d838      	bhi.n	80048e0 <__ssputs_r+0x84>
 800486e:	898a      	ldrh	r2, [r1, #12]
 8004870:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004874:	d032      	beq.n	80048dc <__ssputs_r+0x80>
 8004876:	6825      	ldr	r5, [r4, #0]
 8004878:	6909      	ldr	r1, [r1, #16]
 800487a:	eba5 0901 	sub.w	r9, r5, r1
 800487e:	6965      	ldr	r5, [r4, #20]
 8004880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004888:	3301      	adds	r3, #1
 800488a:	444b      	add	r3, r9
 800488c:	106d      	asrs	r5, r5, #1
 800488e:	429d      	cmp	r5, r3
 8004890:	bf38      	it	cc
 8004892:	461d      	movcc	r5, r3
 8004894:	0553      	lsls	r3, r2, #21
 8004896:	d531      	bpl.n	80048fc <__ssputs_r+0xa0>
 8004898:	4629      	mov	r1, r5
 800489a:	f000 fb55 	bl	8004f48 <_malloc_r>
 800489e:	4606      	mov	r6, r0
 80048a0:	b950      	cbnz	r0, 80048b8 <__ssputs_r+0x5c>
 80048a2:	230c      	movs	r3, #12
 80048a4:	f8ca 3000 	str.w	r3, [sl]
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ae:	81a3      	strh	r3, [r4, #12]
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b8:	6921      	ldr	r1, [r4, #16]
 80048ba:	464a      	mov	r2, r9
 80048bc:	f7ff ff98 	bl	80047f0 <memcpy>
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ca:	81a3      	strh	r3, [r4, #12]
 80048cc:	6126      	str	r6, [r4, #16]
 80048ce:	6165      	str	r5, [r4, #20]
 80048d0:	444e      	add	r6, r9
 80048d2:	eba5 0509 	sub.w	r5, r5, r9
 80048d6:	6026      	str	r6, [r4, #0]
 80048d8:	60a5      	str	r5, [r4, #8]
 80048da:	463e      	mov	r6, r7
 80048dc:	42be      	cmp	r6, r7
 80048de:	d900      	bls.n	80048e2 <__ssputs_r+0x86>
 80048e0:	463e      	mov	r6, r7
 80048e2:	6820      	ldr	r0, [r4, #0]
 80048e4:	4632      	mov	r2, r6
 80048e6:	4641      	mov	r1, r8
 80048e8:	f000 faa8 	bl	8004e3c <memmove>
 80048ec:	68a3      	ldr	r3, [r4, #8]
 80048ee:	1b9b      	subs	r3, r3, r6
 80048f0:	60a3      	str	r3, [r4, #8]
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	4433      	add	r3, r6
 80048f6:	6023      	str	r3, [r4, #0]
 80048f8:	2000      	movs	r0, #0
 80048fa:	e7db      	b.n	80048b4 <__ssputs_r+0x58>
 80048fc:	462a      	mov	r2, r5
 80048fe:	f000 fb97 	bl	8005030 <_realloc_r>
 8004902:	4606      	mov	r6, r0
 8004904:	2800      	cmp	r0, #0
 8004906:	d1e1      	bne.n	80048cc <__ssputs_r+0x70>
 8004908:	6921      	ldr	r1, [r4, #16]
 800490a:	4650      	mov	r0, sl
 800490c:	f000 fab0 	bl	8004e70 <_free_r>
 8004910:	e7c7      	b.n	80048a2 <__ssputs_r+0x46>
	...

08004914 <_svfiprintf_r>:
 8004914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004918:	4698      	mov	r8, r3
 800491a:	898b      	ldrh	r3, [r1, #12]
 800491c:	061b      	lsls	r3, r3, #24
 800491e:	b09d      	sub	sp, #116	; 0x74
 8004920:	4607      	mov	r7, r0
 8004922:	460d      	mov	r5, r1
 8004924:	4614      	mov	r4, r2
 8004926:	d50e      	bpl.n	8004946 <_svfiprintf_r+0x32>
 8004928:	690b      	ldr	r3, [r1, #16]
 800492a:	b963      	cbnz	r3, 8004946 <_svfiprintf_r+0x32>
 800492c:	2140      	movs	r1, #64	; 0x40
 800492e:	f000 fb0b 	bl	8004f48 <_malloc_r>
 8004932:	6028      	str	r0, [r5, #0]
 8004934:	6128      	str	r0, [r5, #16]
 8004936:	b920      	cbnz	r0, 8004942 <_svfiprintf_r+0x2e>
 8004938:	230c      	movs	r3, #12
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	e0d1      	b.n	8004ae6 <_svfiprintf_r+0x1d2>
 8004942:	2340      	movs	r3, #64	; 0x40
 8004944:	616b      	str	r3, [r5, #20]
 8004946:	2300      	movs	r3, #0
 8004948:	9309      	str	r3, [sp, #36]	; 0x24
 800494a:	2320      	movs	r3, #32
 800494c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004950:	f8cd 800c 	str.w	r8, [sp, #12]
 8004954:	2330      	movs	r3, #48	; 0x30
 8004956:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b00 <_svfiprintf_r+0x1ec>
 800495a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800495e:	f04f 0901 	mov.w	r9, #1
 8004962:	4623      	mov	r3, r4
 8004964:	469a      	mov	sl, r3
 8004966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800496a:	b10a      	cbz	r2, 8004970 <_svfiprintf_r+0x5c>
 800496c:	2a25      	cmp	r2, #37	; 0x25
 800496e:	d1f9      	bne.n	8004964 <_svfiprintf_r+0x50>
 8004970:	ebba 0b04 	subs.w	fp, sl, r4
 8004974:	d00b      	beq.n	800498e <_svfiprintf_r+0x7a>
 8004976:	465b      	mov	r3, fp
 8004978:	4622      	mov	r2, r4
 800497a:	4629      	mov	r1, r5
 800497c:	4638      	mov	r0, r7
 800497e:	f7ff ff6d 	bl	800485c <__ssputs_r>
 8004982:	3001      	adds	r0, #1
 8004984:	f000 80aa 	beq.w	8004adc <_svfiprintf_r+0x1c8>
 8004988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800498a:	445a      	add	r2, fp
 800498c:	9209      	str	r2, [sp, #36]	; 0x24
 800498e:	f89a 3000 	ldrb.w	r3, [sl]
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80a2 	beq.w	8004adc <_svfiprintf_r+0x1c8>
 8004998:	2300      	movs	r3, #0
 800499a:	f04f 32ff 	mov.w	r2, #4294967295
 800499e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049a2:	f10a 0a01 	add.w	sl, sl, #1
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	9307      	str	r3, [sp, #28]
 80049aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049ae:	931a      	str	r3, [sp, #104]	; 0x68
 80049b0:	4654      	mov	r4, sl
 80049b2:	2205      	movs	r2, #5
 80049b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b8:	4851      	ldr	r0, [pc, #324]	; (8004b00 <_svfiprintf_r+0x1ec>)
 80049ba:	f7fb fc31 	bl	8000220 <memchr>
 80049be:	9a04      	ldr	r2, [sp, #16]
 80049c0:	b9d8      	cbnz	r0, 80049fa <_svfiprintf_r+0xe6>
 80049c2:	06d0      	lsls	r0, r2, #27
 80049c4:	bf44      	itt	mi
 80049c6:	2320      	movmi	r3, #32
 80049c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049cc:	0711      	lsls	r1, r2, #28
 80049ce:	bf44      	itt	mi
 80049d0:	232b      	movmi	r3, #43	; 0x2b
 80049d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049d6:	f89a 3000 	ldrb.w	r3, [sl]
 80049da:	2b2a      	cmp	r3, #42	; 0x2a
 80049dc:	d015      	beq.n	8004a0a <_svfiprintf_r+0xf6>
 80049de:	9a07      	ldr	r2, [sp, #28]
 80049e0:	4654      	mov	r4, sl
 80049e2:	2000      	movs	r0, #0
 80049e4:	f04f 0c0a 	mov.w	ip, #10
 80049e8:	4621      	mov	r1, r4
 80049ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049ee:	3b30      	subs	r3, #48	; 0x30
 80049f0:	2b09      	cmp	r3, #9
 80049f2:	d94e      	bls.n	8004a92 <_svfiprintf_r+0x17e>
 80049f4:	b1b0      	cbz	r0, 8004a24 <_svfiprintf_r+0x110>
 80049f6:	9207      	str	r2, [sp, #28]
 80049f8:	e014      	b.n	8004a24 <_svfiprintf_r+0x110>
 80049fa:	eba0 0308 	sub.w	r3, r0, r8
 80049fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004a02:	4313      	orrs	r3, r2
 8004a04:	9304      	str	r3, [sp, #16]
 8004a06:	46a2      	mov	sl, r4
 8004a08:	e7d2      	b.n	80049b0 <_svfiprintf_r+0x9c>
 8004a0a:	9b03      	ldr	r3, [sp, #12]
 8004a0c:	1d19      	adds	r1, r3, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	9103      	str	r1, [sp, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bfbb      	ittet	lt
 8004a16:	425b      	neglt	r3, r3
 8004a18:	f042 0202 	orrlt.w	r2, r2, #2
 8004a1c:	9307      	strge	r3, [sp, #28]
 8004a1e:	9307      	strlt	r3, [sp, #28]
 8004a20:	bfb8      	it	lt
 8004a22:	9204      	strlt	r2, [sp, #16]
 8004a24:	7823      	ldrb	r3, [r4, #0]
 8004a26:	2b2e      	cmp	r3, #46	; 0x2e
 8004a28:	d10c      	bne.n	8004a44 <_svfiprintf_r+0x130>
 8004a2a:	7863      	ldrb	r3, [r4, #1]
 8004a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a2e:	d135      	bne.n	8004a9c <_svfiprintf_r+0x188>
 8004a30:	9b03      	ldr	r3, [sp, #12]
 8004a32:	1d1a      	adds	r2, r3, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	9203      	str	r2, [sp, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bfb8      	it	lt
 8004a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a40:	3402      	adds	r4, #2
 8004a42:	9305      	str	r3, [sp, #20]
 8004a44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b10 <_svfiprintf_r+0x1fc>
 8004a48:	7821      	ldrb	r1, [r4, #0]
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	4650      	mov	r0, sl
 8004a4e:	f7fb fbe7 	bl	8000220 <memchr>
 8004a52:	b140      	cbz	r0, 8004a66 <_svfiprintf_r+0x152>
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	eba0 000a 	sub.w	r0, r0, sl
 8004a5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	4303      	orrs	r3, r0
 8004a62:	3401      	adds	r4, #1
 8004a64:	9304      	str	r3, [sp, #16]
 8004a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a6a:	4826      	ldr	r0, [pc, #152]	; (8004b04 <_svfiprintf_r+0x1f0>)
 8004a6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a70:	2206      	movs	r2, #6
 8004a72:	f7fb fbd5 	bl	8000220 <memchr>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d038      	beq.n	8004aec <_svfiprintf_r+0x1d8>
 8004a7a:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <_svfiprintf_r+0x1f4>)
 8004a7c:	bb1b      	cbnz	r3, 8004ac6 <_svfiprintf_r+0x1b2>
 8004a7e:	9b03      	ldr	r3, [sp, #12]
 8004a80:	3307      	adds	r3, #7
 8004a82:	f023 0307 	bic.w	r3, r3, #7
 8004a86:	3308      	adds	r3, #8
 8004a88:	9303      	str	r3, [sp, #12]
 8004a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a8c:	4433      	add	r3, r6
 8004a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a90:	e767      	b.n	8004962 <_svfiprintf_r+0x4e>
 8004a92:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a96:	460c      	mov	r4, r1
 8004a98:	2001      	movs	r0, #1
 8004a9a:	e7a5      	b.n	80049e8 <_svfiprintf_r+0xd4>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	3401      	adds	r4, #1
 8004aa0:	9305      	str	r3, [sp, #20]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f04f 0c0a 	mov.w	ip, #10
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aae:	3a30      	subs	r2, #48	; 0x30
 8004ab0:	2a09      	cmp	r2, #9
 8004ab2:	d903      	bls.n	8004abc <_svfiprintf_r+0x1a8>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0c5      	beq.n	8004a44 <_svfiprintf_r+0x130>
 8004ab8:	9105      	str	r1, [sp, #20]
 8004aba:	e7c3      	b.n	8004a44 <_svfiprintf_r+0x130>
 8004abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e7f0      	b.n	8004aa8 <_svfiprintf_r+0x194>
 8004ac6:	ab03      	add	r3, sp, #12
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	462a      	mov	r2, r5
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <_svfiprintf_r+0x1f8>)
 8004ace:	a904      	add	r1, sp, #16
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f3af 8000 	nop.w
 8004ad6:	1c42      	adds	r2, r0, #1
 8004ad8:	4606      	mov	r6, r0
 8004ada:	d1d6      	bne.n	8004a8a <_svfiprintf_r+0x176>
 8004adc:	89ab      	ldrh	r3, [r5, #12]
 8004ade:	065b      	lsls	r3, r3, #25
 8004ae0:	f53f af2c 	bmi.w	800493c <_svfiprintf_r+0x28>
 8004ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ae6:	b01d      	add	sp, #116	; 0x74
 8004ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aec:	ab03      	add	r3, sp, #12
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	462a      	mov	r2, r5
 8004af2:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <_svfiprintf_r+0x1f8>)
 8004af4:	a904      	add	r1, sp, #16
 8004af6:	4638      	mov	r0, r7
 8004af8:	f000 f87a 	bl	8004bf0 <_printf_i>
 8004afc:	e7eb      	b.n	8004ad6 <_svfiprintf_r+0x1c2>
 8004afe:	bf00      	nop
 8004b00:	08005118 	.word	0x08005118
 8004b04:	08005122 	.word	0x08005122
 8004b08:	00000000 	.word	0x00000000
 8004b0c:	0800485d 	.word	0x0800485d
 8004b10:	0800511e 	.word	0x0800511e

08004b14 <_printf_common>:
 8004b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	4616      	mov	r6, r2
 8004b1a:	4699      	mov	r9, r3
 8004b1c:	688a      	ldr	r2, [r1, #8]
 8004b1e:	690b      	ldr	r3, [r1, #16]
 8004b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bfb8      	it	lt
 8004b28:	4613      	movlt	r3, r2
 8004b2a:	6033      	str	r3, [r6, #0]
 8004b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b30:	4607      	mov	r7, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	b10a      	cbz	r2, 8004b3a <_printf_common+0x26>
 8004b36:	3301      	adds	r3, #1
 8004b38:	6033      	str	r3, [r6, #0]
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	0699      	lsls	r1, r3, #26
 8004b3e:	bf42      	ittt	mi
 8004b40:	6833      	ldrmi	r3, [r6, #0]
 8004b42:	3302      	addmi	r3, #2
 8004b44:	6033      	strmi	r3, [r6, #0]
 8004b46:	6825      	ldr	r5, [r4, #0]
 8004b48:	f015 0506 	ands.w	r5, r5, #6
 8004b4c:	d106      	bne.n	8004b5c <_printf_common+0x48>
 8004b4e:	f104 0a19 	add.w	sl, r4, #25
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	6832      	ldr	r2, [r6, #0]
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dc26      	bgt.n	8004baa <_printf_common+0x96>
 8004b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b60:	1e13      	subs	r3, r2, #0
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	bf18      	it	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	0692      	lsls	r2, r2, #26
 8004b6a:	d42b      	bmi.n	8004bc4 <_printf_common+0xb0>
 8004b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b70:	4649      	mov	r1, r9
 8004b72:	4638      	mov	r0, r7
 8004b74:	47c0      	blx	r8
 8004b76:	3001      	adds	r0, #1
 8004b78:	d01e      	beq.n	8004bb8 <_printf_common+0xa4>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	68e5      	ldr	r5, [r4, #12]
 8004b7e:	6832      	ldr	r2, [r6, #0]
 8004b80:	f003 0306 	and.w	r3, r3, #6
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	bf08      	it	eq
 8004b88:	1aad      	subeq	r5, r5, r2
 8004b8a:	68a3      	ldr	r3, [r4, #8]
 8004b8c:	6922      	ldr	r2, [r4, #16]
 8004b8e:	bf0c      	ite	eq
 8004b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b94:	2500      	movne	r5, #0
 8004b96:	4293      	cmp	r3, r2
 8004b98:	bfc4      	itt	gt
 8004b9a:	1a9b      	subgt	r3, r3, r2
 8004b9c:	18ed      	addgt	r5, r5, r3
 8004b9e:	2600      	movs	r6, #0
 8004ba0:	341a      	adds	r4, #26
 8004ba2:	42b5      	cmp	r5, r6
 8004ba4:	d11a      	bne.n	8004bdc <_printf_common+0xc8>
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	e008      	b.n	8004bbc <_printf_common+0xa8>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4652      	mov	r2, sl
 8004bae:	4649      	mov	r1, r9
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	47c0      	blx	r8
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d103      	bne.n	8004bc0 <_printf_common+0xac>
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	e7c6      	b.n	8004b52 <_printf_common+0x3e>
 8004bc4:	18e1      	adds	r1, r4, r3
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	2030      	movs	r0, #48	; 0x30
 8004bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bce:	4422      	add	r2, r4
 8004bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bd8:	3302      	adds	r3, #2
 8004bda:	e7c7      	b.n	8004b6c <_printf_common+0x58>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4622      	mov	r2, r4
 8004be0:	4649      	mov	r1, r9
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	3001      	adds	r0, #1
 8004be8:	d0e6      	beq.n	8004bb8 <_printf_common+0xa4>
 8004bea:	3601      	adds	r6, #1
 8004bec:	e7d9      	b.n	8004ba2 <_printf_common+0x8e>
	...

08004bf0 <_printf_i>:
 8004bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	7e0f      	ldrb	r7, [r1, #24]
 8004bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bf8:	2f78      	cmp	r7, #120	; 0x78
 8004bfa:	4691      	mov	r9, r2
 8004bfc:	4680      	mov	r8, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	469a      	mov	sl, r3
 8004c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c06:	d807      	bhi.n	8004c18 <_printf_i+0x28>
 8004c08:	2f62      	cmp	r7, #98	; 0x62
 8004c0a:	d80a      	bhi.n	8004c22 <_printf_i+0x32>
 8004c0c:	2f00      	cmp	r7, #0
 8004c0e:	f000 80d8 	beq.w	8004dc2 <_printf_i+0x1d2>
 8004c12:	2f58      	cmp	r7, #88	; 0x58
 8004c14:	f000 80a3 	beq.w	8004d5e <_printf_i+0x16e>
 8004c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c20:	e03a      	b.n	8004c98 <_printf_i+0xa8>
 8004c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c26:	2b15      	cmp	r3, #21
 8004c28:	d8f6      	bhi.n	8004c18 <_printf_i+0x28>
 8004c2a:	a101      	add	r1, pc, #4	; (adr r1, 8004c30 <_printf_i+0x40>)
 8004c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c9d 	.word	0x08004c9d
 8004c38:	08004c19 	.word	0x08004c19
 8004c3c:	08004c19 	.word	0x08004c19
 8004c40:	08004c19 	.word	0x08004c19
 8004c44:	08004c19 	.word	0x08004c19
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004c19 	.word	0x08004c19
 8004c50:	08004c19 	.word	0x08004c19
 8004c54:	08004c19 	.word	0x08004c19
 8004c58:	08004c19 	.word	0x08004c19
 8004c5c:	08004da9 	.word	0x08004da9
 8004c60:	08004ccd 	.word	0x08004ccd
 8004c64:	08004d8b 	.word	0x08004d8b
 8004c68:	08004c19 	.word	0x08004c19
 8004c6c:	08004c19 	.word	0x08004c19
 8004c70:	08004dcb 	.word	0x08004dcb
 8004c74:	08004c19 	.word	0x08004c19
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004c19 	.word	0x08004c19
 8004c80:	08004c19 	.word	0x08004c19
 8004c84:	08004d93 	.word	0x08004d93
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	1d1a      	adds	r2, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	602a      	str	r2, [r5, #0]
 8004c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0a3      	b.n	8004de4 <_printf_i+0x1f4>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	6829      	ldr	r1, [r5, #0]
 8004ca0:	0606      	lsls	r6, r0, #24
 8004ca2:	f101 0304 	add.w	r3, r1, #4
 8004ca6:	d50a      	bpl.n	8004cbe <_printf_i+0xce>
 8004ca8:	680e      	ldr	r6, [r1, #0]
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	2e00      	cmp	r6, #0
 8004cae:	da03      	bge.n	8004cb8 <_printf_i+0xc8>
 8004cb0:	232d      	movs	r3, #45	; 0x2d
 8004cb2:	4276      	negs	r6, r6
 8004cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb8:	485e      	ldr	r0, [pc, #376]	; (8004e34 <_printf_i+0x244>)
 8004cba:	230a      	movs	r3, #10
 8004cbc:	e019      	b.n	8004cf2 <_printf_i+0x102>
 8004cbe:	680e      	ldr	r6, [r1, #0]
 8004cc0:	602b      	str	r3, [r5, #0]
 8004cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cc6:	bf18      	it	ne
 8004cc8:	b236      	sxthne	r6, r6
 8004cca:	e7ef      	b.n	8004cac <_printf_i+0xbc>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	6820      	ldr	r0, [r4, #0]
 8004cd0:	1d19      	adds	r1, r3, #4
 8004cd2:	6029      	str	r1, [r5, #0]
 8004cd4:	0601      	lsls	r1, r0, #24
 8004cd6:	d501      	bpl.n	8004cdc <_printf_i+0xec>
 8004cd8:	681e      	ldr	r6, [r3, #0]
 8004cda:	e002      	b.n	8004ce2 <_printf_i+0xf2>
 8004cdc:	0646      	lsls	r6, r0, #25
 8004cde:	d5fb      	bpl.n	8004cd8 <_printf_i+0xe8>
 8004ce0:	881e      	ldrh	r6, [r3, #0]
 8004ce2:	4854      	ldr	r0, [pc, #336]	; (8004e34 <_printf_i+0x244>)
 8004ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2308      	moveq	r3, #8
 8004cea:	230a      	movne	r3, #10
 8004cec:	2100      	movs	r1, #0
 8004cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cf2:	6865      	ldr	r5, [r4, #4]
 8004cf4:	60a5      	str	r5, [r4, #8]
 8004cf6:	2d00      	cmp	r5, #0
 8004cf8:	bfa2      	ittt	ge
 8004cfa:	6821      	ldrge	r1, [r4, #0]
 8004cfc:	f021 0104 	bicge.w	r1, r1, #4
 8004d00:	6021      	strge	r1, [r4, #0]
 8004d02:	b90e      	cbnz	r6, 8004d08 <_printf_i+0x118>
 8004d04:	2d00      	cmp	r5, #0
 8004d06:	d04d      	beq.n	8004da4 <_printf_i+0x1b4>
 8004d08:	4615      	mov	r5, r2
 8004d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d12:	5dc7      	ldrb	r7, [r0, r7]
 8004d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d18:	4637      	mov	r7, r6
 8004d1a:	42bb      	cmp	r3, r7
 8004d1c:	460e      	mov	r6, r1
 8004d1e:	d9f4      	bls.n	8004d0a <_printf_i+0x11a>
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d10b      	bne.n	8004d3c <_printf_i+0x14c>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07de      	lsls	r6, r3, #31
 8004d28:	d508      	bpl.n	8004d3c <_printf_i+0x14c>
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	6861      	ldr	r1, [r4, #4]
 8004d2e:	4299      	cmp	r1, r3
 8004d30:	bfde      	ittt	le
 8004d32:	2330      	movle	r3, #48	; 0x30
 8004d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d3c:	1b52      	subs	r2, r2, r5
 8004d3e:	6122      	str	r2, [r4, #16]
 8004d40:	f8cd a000 	str.w	sl, [sp]
 8004d44:	464b      	mov	r3, r9
 8004d46:	aa03      	add	r2, sp, #12
 8004d48:	4621      	mov	r1, r4
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	f7ff fee2 	bl	8004b14 <_printf_common>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d14c      	bne.n	8004dee <_printf_i+0x1fe>
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295
 8004d58:	b004      	add	sp, #16
 8004d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5e:	4835      	ldr	r0, [pc, #212]	; (8004e34 <_printf_i+0x244>)
 8004d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d64:	6829      	ldr	r1, [r5, #0]
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d6c:	6029      	str	r1, [r5, #0]
 8004d6e:	061d      	lsls	r5, r3, #24
 8004d70:	d514      	bpl.n	8004d9c <_printf_i+0x1ac>
 8004d72:	07df      	lsls	r7, r3, #31
 8004d74:	bf44      	itt	mi
 8004d76:	f043 0320 	orrmi.w	r3, r3, #32
 8004d7a:	6023      	strmi	r3, [r4, #0]
 8004d7c:	b91e      	cbnz	r6, 8004d86 <_printf_i+0x196>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	f023 0320 	bic.w	r3, r3, #32
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	2310      	movs	r3, #16
 8004d88:	e7b0      	b.n	8004cec <_printf_i+0xfc>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f043 0320 	orr.w	r3, r3, #32
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	2378      	movs	r3, #120	; 0x78
 8004d94:	4828      	ldr	r0, [pc, #160]	; (8004e38 <_printf_i+0x248>)
 8004d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d9a:	e7e3      	b.n	8004d64 <_printf_i+0x174>
 8004d9c:	0659      	lsls	r1, r3, #25
 8004d9e:	bf48      	it	mi
 8004da0:	b2b6      	uxthmi	r6, r6
 8004da2:	e7e6      	b.n	8004d72 <_printf_i+0x182>
 8004da4:	4615      	mov	r5, r2
 8004da6:	e7bb      	b.n	8004d20 <_printf_i+0x130>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	6826      	ldr	r6, [r4, #0]
 8004dac:	6961      	ldr	r1, [r4, #20]
 8004dae:	1d18      	adds	r0, r3, #4
 8004db0:	6028      	str	r0, [r5, #0]
 8004db2:	0635      	lsls	r5, r6, #24
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	d501      	bpl.n	8004dbc <_printf_i+0x1cc>
 8004db8:	6019      	str	r1, [r3, #0]
 8004dba:	e002      	b.n	8004dc2 <_printf_i+0x1d2>
 8004dbc:	0670      	lsls	r0, r6, #25
 8004dbe:	d5fb      	bpl.n	8004db8 <_printf_i+0x1c8>
 8004dc0:	8019      	strh	r1, [r3, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	4615      	mov	r5, r2
 8004dc8:	e7ba      	b.n	8004d40 <_printf_i+0x150>
 8004dca:	682b      	ldr	r3, [r5, #0]
 8004dcc:	1d1a      	adds	r2, r3, #4
 8004dce:	602a      	str	r2, [r5, #0]
 8004dd0:	681d      	ldr	r5, [r3, #0]
 8004dd2:	6862      	ldr	r2, [r4, #4]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f7fb fa22 	bl	8000220 <memchr>
 8004ddc:	b108      	cbz	r0, 8004de2 <_printf_i+0x1f2>
 8004dde:	1b40      	subs	r0, r0, r5
 8004de0:	6060      	str	r0, [r4, #4]
 8004de2:	6863      	ldr	r3, [r4, #4]
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	2300      	movs	r3, #0
 8004de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dec:	e7a8      	b.n	8004d40 <_printf_i+0x150>
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	462a      	mov	r2, r5
 8004df2:	4649      	mov	r1, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	47d0      	blx	sl
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d0ab      	beq.n	8004d54 <_printf_i+0x164>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	079b      	lsls	r3, r3, #30
 8004e00:	d413      	bmi.n	8004e2a <_printf_i+0x23a>
 8004e02:	68e0      	ldr	r0, [r4, #12]
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	4298      	cmp	r0, r3
 8004e08:	bfb8      	it	lt
 8004e0a:	4618      	movlt	r0, r3
 8004e0c:	e7a4      	b.n	8004d58 <_printf_i+0x168>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4632      	mov	r2, r6
 8004e12:	4649      	mov	r1, r9
 8004e14:	4640      	mov	r0, r8
 8004e16:	47d0      	blx	sl
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d09b      	beq.n	8004d54 <_printf_i+0x164>
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	9903      	ldr	r1, [sp, #12]
 8004e22:	1a5b      	subs	r3, r3, r1
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dcf2      	bgt.n	8004e0e <_printf_i+0x21e>
 8004e28:	e7eb      	b.n	8004e02 <_printf_i+0x212>
 8004e2a:	2500      	movs	r5, #0
 8004e2c:	f104 0619 	add.w	r6, r4, #25
 8004e30:	e7f5      	b.n	8004e1e <_printf_i+0x22e>
 8004e32:	bf00      	nop
 8004e34:	08005129 	.word	0x08005129
 8004e38:	0800513a 	.word	0x0800513a

08004e3c <memmove>:
 8004e3c:	4288      	cmp	r0, r1
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	eb01 0402 	add.w	r4, r1, r2
 8004e44:	d902      	bls.n	8004e4c <memmove+0x10>
 8004e46:	4284      	cmp	r4, r0
 8004e48:	4623      	mov	r3, r4
 8004e4a:	d807      	bhi.n	8004e5c <memmove+0x20>
 8004e4c:	1e43      	subs	r3, r0, #1
 8004e4e:	42a1      	cmp	r1, r4
 8004e50:	d008      	beq.n	8004e64 <memmove+0x28>
 8004e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e5a:	e7f8      	b.n	8004e4e <memmove+0x12>
 8004e5c:	4402      	add	r2, r0
 8004e5e:	4601      	mov	r1, r0
 8004e60:	428a      	cmp	r2, r1
 8004e62:	d100      	bne.n	8004e66 <memmove+0x2a>
 8004e64:	bd10      	pop	{r4, pc}
 8004e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e6e:	e7f7      	b.n	8004e60 <memmove+0x24>

08004e70 <_free_r>:
 8004e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e72:	2900      	cmp	r1, #0
 8004e74:	d044      	beq.n	8004f00 <_free_r+0x90>
 8004e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7a:	9001      	str	r0, [sp, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e82:	bfb8      	it	lt
 8004e84:	18e4      	addlt	r4, r4, r3
 8004e86:	f000 f913 	bl	80050b0 <__malloc_lock>
 8004e8a:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <_free_r+0x94>)
 8004e8c:	9801      	ldr	r0, [sp, #4]
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	b933      	cbnz	r3, 8004ea0 <_free_r+0x30>
 8004e92:	6063      	str	r3, [r4, #4]
 8004e94:	6014      	str	r4, [r2, #0]
 8004e96:	b003      	add	sp, #12
 8004e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e9c:	f000 b90e 	b.w	80050bc <__malloc_unlock>
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	d908      	bls.n	8004eb6 <_free_r+0x46>
 8004ea4:	6825      	ldr	r5, [r4, #0]
 8004ea6:	1961      	adds	r1, r4, r5
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	bf01      	itttt	eq
 8004eac:	6819      	ldreq	r1, [r3, #0]
 8004eae:	685b      	ldreq	r3, [r3, #4]
 8004eb0:	1949      	addeq	r1, r1, r5
 8004eb2:	6021      	streq	r1, [r4, #0]
 8004eb4:	e7ed      	b.n	8004e92 <_free_r+0x22>
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	b10b      	cbz	r3, 8004ec0 <_free_r+0x50>
 8004ebc:	42a3      	cmp	r3, r4
 8004ebe:	d9fa      	bls.n	8004eb6 <_free_r+0x46>
 8004ec0:	6811      	ldr	r1, [r2, #0]
 8004ec2:	1855      	adds	r5, r2, r1
 8004ec4:	42a5      	cmp	r5, r4
 8004ec6:	d10b      	bne.n	8004ee0 <_free_r+0x70>
 8004ec8:	6824      	ldr	r4, [r4, #0]
 8004eca:	4421      	add	r1, r4
 8004ecc:	1854      	adds	r4, r2, r1
 8004ece:	42a3      	cmp	r3, r4
 8004ed0:	6011      	str	r1, [r2, #0]
 8004ed2:	d1e0      	bne.n	8004e96 <_free_r+0x26>
 8004ed4:	681c      	ldr	r4, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	6053      	str	r3, [r2, #4]
 8004eda:	4421      	add	r1, r4
 8004edc:	6011      	str	r1, [r2, #0]
 8004ede:	e7da      	b.n	8004e96 <_free_r+0x26>
 8004ee0:	d902      	bls.n	8004ee8 <_free_r+0x78>
 8004ee2:	230c      	movs	r3, #12
 8004ee4:	6003      	str	r3, [r0, #0]
 8004ee6:	e7d6      	b.n	8004e96 <_free_r+0x26>
 8004ee8:	6825      	ldr	r5, [r4, #0]
 8004eea:	1961      	adds	r1, r4, r5
 8004eec:	428b      	cmp	r3, r1
 8004eee:	bf04      	itt	eq
 8004ef0:	6819      	ldreq	r1, [r3, #0]
 8004ef2:	685b      	ldreq	r3, [r3, #4]
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	bf04      	itt	eq
 8004ef8:	1949      	addeq	r1, r1, r5
 8004efa:	6021      	streq	r1, [r4, #0]
 8004efc:	6054      	str	r4, [r2, #4]
 8004efe:	e7ca      	b.n	8004e96 <_free_r+0x26>
 8004f00:	b003      	add	sp, #12
 8004f02:	bd30      	pop	{r4, r5, pc}
 8004f04:	20000368 	.word	0x20000368

08004f08 <sbrk_aligned>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	4e0e      	ldr	r6, [pc, #56]	; (8004f44 <sbrk_aligned+0x3c>)
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	6831      	ldr	r1, [r6, #0]
 8004f10:	4605      	mov	r5, r0
 8004f12:	b911      	cbnz	r1, 8004f1a <sbrk_aligned+0x12>
 8004f14:	f000 f8bc 	bl	8005090 <_sbrk_r>
 8004f18:	6030      	str	r0, [r6, #0]
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 f8b7 	bl	8005090 <_sbrk_r>
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	d00a      	beq.n	8004f3c <sbrk_aligned+0x34>
 8004f26:	1cc4      	adds	r4, r0, #3
 8004f28:	f024 0403 	bic.w	r4, r4, #3
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d007      	beq.n	8004f40 <sbrk_aligned+0x38>
 8004f30:	1a21      	subs	r1, r4, r0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 f8ac 	bl	8005090 <_sbrk_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d101      	bne.n	8004f40 <sbrk_aligned+0x38>
 8004f3c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f40:	4620      	mov	r0, r4
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	2000036c 	.word	0x2000036c

08004f48 <_malloc_r>:
 8004f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4c:	1ccd      	adds	r5, r1, #3
 8004f4e:	f025 0503 	bic.w	r5, r5, #3
 8004f52:	3508      	adds	r5, #8
 8004f54:	2d0c      	cmp	r5, #12
 8004f56:	bf38      	it	cc
 8004f58:	250c      	movcc	r5, #12
 8004f5a:	2d00      	cmp	r5, #0
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	db01      	blt.n	8004f64 <_malloc_r+0x1c>
 8004f60:	42a9      	cmp	r1, r5
 8004f62:	d905      	bls.n	8004f70 <_malloc_r+0x28>
 8004f64:	230c      	movs	r3, #12
 8004f66:	603b      	str	r3, [r7, #0]
 8004f68:	2600      	movs	r6, #0
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f70:	4e2e      	ldr	r6, [pc, #184]	; (800502c <_malloc_r+0xe4>)
 8004f72:	f000 f89d 	bl	80050b0 <__malloc_lock>
 8004f76:	6833      	ldr	r3, [r6, #0]
 8004f78:	461c      	mov	r4, r3
 8004f7a:	bb34      	cbnz	r4, 8004fca <_malloc_r+0x82>
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	4638      	mov	r0, r7
 8004f80:	f7ff ffc2 	bl	8004f08 <sbrk_aligned>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	4604      	mov	r4, r0
 8004f88:	d14d      	bne.n	8005026 <_malloc_r+0xde>
 8004f8a:	6834      	ldr	r4, [r6, #0]
 8004f8c:	4626      	mov	r6, r4
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	d140      	bne.n	8005014 <_malloc_r+0xcc>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	4631      	mov	r1, r6
 8004f96:	4638      	mov	r0, r7
 8004f98:	eb04 0803 	add.w	r8, r4, r3
 8004f9c:	f000 f878 	bl	8005090 <_sbrk_r>
 8004fa0:	4580      	cmp	r8, r0
 8004fa2:	d13a      	bne.n	800501a <_malloc_r+0xd2>
 8004fa4:	6821      	ldr	r1, [r4, #0]
 8004fa6:	3503      	adds	r5, #3
 8004fa8:	1a6d      	subs	r5, r5, r1
 8004faa:	f025 0503 	bic.w	r5, r5, #3
 8004fae:	3508      	adds	r5, #8
 8004fb0:	2d0c      	cmp	r5, #12
 8004fb2:	bf38      	it	cc
 8004fb4:	250c      	movcc	r5, #12
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f7ff ffa5 	bl	8004f08 <sbrk_aligned>
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d02b      	beq.n	800501a <_malloc_r+0xd2>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	442b      	add	r3, r5
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	e00e      	b.n	8004fe8 <_malloc_r+0xa0>
 8004fca:	6822      	ldr	r2, [r4, #0]
 8004fcc:	1b52      	subs	r2, r2, r5
 8004fce:	d41e      	bmi.n	800500e <_malloc_r+0xc6>
 8004fd0:	2a0b      	cmp	r2, #11
 8004fd2:	d916      	bls.n	8005002 <_malloc_r+0xba>
 8004fd4:	1961      	adds	r1, r4, r5
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	6025      	str	r5, [r4, #0]
 8004fda:	bf18      	it	ne
 8004fdc:	6059      	strne	r1, [r3, #4]
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	bf08      	it	eq
 8004fe2:	6031      	streq	r1, [r6, #0]
 8004fe4:	5162      	str	r2, [r4, r5]
 8004fe6:	604b      	str	r3, [r1, #4]
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f104 060b 	add.w	r6, r4, #11
 8004fee:	f000 f865 	bl	80050bc <__malloc_unlock>
 8004ff2:	f026 0607 	bic.w	r6, r6, #7
 8004ff6:	1d23      	adds	r3, r4, #4
 8004ff8:	1af2      	subs	r2, r6, r3
 8004ffa:	d0b6      	beq.n	8004f6a <_malloc_r+0x22>
 8004ffc:	1b9b      	subs	r3, r3, r6
 8004ffe:	50a3      	str	r3, [r4, r2]
 8005000:	e7b3      	b.n	8004f6a <_malloc_r+0x22>
 8005002:	6862      	ldr	r2, [r4, #4]
 8005004:	42a3      	cmp	r3, r4
 8005006:	bf0c      	ite	eq
 8005008:	6032      	streq	r2, [r6, #0]
 800500a:	605a      	strne	r2, [r3, #4]
 800500c:	e7ec      	b.n	8004fe8 <_malloc_r+0xa0>
 800500e:	4623      	mov	r3, r4
 8005010:	6864      	ldr	r4, [r4, #4]
 8005012:	e7b2      	b.n	8004f7a <_malloc_r+0x32>
 8005014:	4634      	mov	r4, r6
 8005016:	6876      	ldr	r6, [r6, #4]
 8005018:	e7b9      	b.n	8004f8e <_malloc_r+0x46>
 800501a:	230c      	movs	r3, #12
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	4638      	mov	r0, r7
 8005020:	f000 f84c 	bl	80050bc <__malloc_unlock>
 8005024:	e7a1      	b.n	8004f6a <_malloc_r+0x22>
 8005026:	6025      	str	r5, [r4, #0]
 8005028:	e7de      	b.n	8004fe8 <_malloc_r+0xa0>
 800502a:	bf00      	nop
 800502c:	20000368 	.word	0x20000368

08005030 <_realloc_r>:
 8005030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005034:	4680      	mov	r8, r0
 8005036:	4614      	mov	r4, r2
 8005038:	460e      	mov	r6, r1
 800503a:	b921      	cbnz	r1, 8005046 <_realloc_r+0x16>
 800503c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005040:	4611      	mov	r1, r2
 8005042:	f7ff bf81 	b.w	8004f48 <_malloc_r>
 8005046:	b92a      	cbnz	r2, 8005054 <_realloc_r+0x24>
 8005048:	f7ff ff12 	bl	8004e70 <_free_r>
 800504c:	4625      	mov	r5, r4
 800504e:	4628      	mov	r0, r5
 8005050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005054:	f000 f838 	bl	80050c8 <_malloc_usable_size_r>
 8005058:	4284      	cmp	r4, r0
 800505a:	4607      	mov	r7, r0
 800505c:	d802      	bhi.n	8005064 <_realloc_r+0x34>
 800505e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005062:	d812      	bhi.n	800508a <_realloc_r+0x5a>
 8005064:	4621      	mov	r1, r4
 8005066:	4640      	mov	r0, r8
 8005068:	f7ff ff6e 	bl	8004f48 <_malloc_r>
 800506c:	4605      	mov	r5, r0
 800506e:	2800      	cmp	r0, #0
 8005070:	d0ed      	beq.n	800504e <_realloc_r+0x1e>
 8005072:	42bc      	cmp	r4, r7
 8005074:	4622      	mov	r2, r4
 8005076:	4631      	mov	r1, r6
 8005078:	bf28      	it	cs
 800507a:	463a      	movcs	r2, r7
 800507c:	f7ff fbb8 	bl	80047f0 <memcpy>
 8005080:	4631      	mov	r1, r6
 8005082:	4640      	mov	r0, r8
 8005084:	f7ff fef4 	bl	8004e70 <_free_r>
 8005088:	e7e1      	b.n	800504e <_realloc_r+0x1e>
 800508a:	4635      	mov	r5, r6
 800508c:	e7df      	b.n	800504e <_realloc_r+0x1e>
	...

08005090 <_sbrk_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d06      	ldr	r5, [pc, #24]	; (80050ac <_sbrk_r+0x1c>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fb ff34 	bl	8000f08 <_sbrk>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_sbrk_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_sbrk_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000370 	.word	0x20000370

080050b0 <__malloc_lock>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__malloc_lock+0x8>)
 80050b2:	f000 b811 	b.w	80050d8 <__retarget_lock_acquire_recursive>
 80050b6:	bf00      	nop
 80050b8:	20000374 	.word	0x20000374

080050bc <__malloc_unlock>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__malloc_unlock+0x8>)
 80050be:	f000 b80c 	b.w	80050da <__retarget_lock_release_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000374 	.word	0x20000374

080050c8 <_malloc_usable_size_r>:
 80050c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050cc:	1f18      	subs	r0, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bfbc      	itt	lt
 80050d2:	580b      	ldrlt	r3, [r1, r0]
 80050d4:	18c0      	addlt	r0, r0, r3
 80050d6:	4770      	bx	lr

080050d8 <__retarget_lock_acquire_recursive>:
 80050d8:	4770      	bx	lr

080050da <__retarget_lock_release_recursive>:
 80050da:	4770      	bx	lr

080050dc <_init>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr

080050e8 <_fini>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr
