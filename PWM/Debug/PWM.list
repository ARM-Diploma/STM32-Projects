
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000289c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a70  08002a70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a78  08002a78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002a8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002a8c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c91  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184c  00000000  00000000  00029ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002bf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000047eb  00000000  00000000  0002c848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b40d  00000000  00000000  00031033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca304  00000000  00000000  0003c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106744  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  00106794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002a48 	.word	0x08002a48

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002a48 	.word	0x08002a48

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b2c      	ldr	r3, [pc, #176]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a2b      	ldr	r2, [pc, #172]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a24      	ldr	r2, [pc, #144]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <MX_GPIO_Init+0xcc>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <MX_GPIO_Init+0xcc>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a1d      	ldr	r2, [pc, #116]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <MX_GPIO_Init+0xcc>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_GPIO_Init+0xcc>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000594:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	480c      	ldr	r0, [pc, #48]	; (80005d8 <MX_GPIO_Init+0xd0>)
 80005a6:	f000 fa0d 	bl	80009c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005aa:	230c      	movs	r3, #12
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005ba:	2307      	movs	r3, #7
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_GPIO_Init+0xd4>)
 80005c6:	f000 f9fd 	bl	80009c4 <HAL_GPIO_Init>

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40020000 	.word	0x40020000

080005e0 <main>:
	}

}

int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	HAL_Init();
 80005e4:	f000 f896 	bl	8000714 <HAL_Init>

	SystemClock_Config();
 80005e8:	f000 f820 	bl	800062c <SystemClock_Config>

	MX_GPIO_Init();
 80005ec:	f7ff ff8c 	bl	8000508 <MX_GPIO_Init>

	MX_TIM2_Init();
 80005f0:	f002 f81a 	bl	8002628 <MX_TIM2_Init>
	MX_TIM12_Init();
 80005f4:	f002 f8ae 	bl	8002754 <MX_TIM12_Init>


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005f8:	2100      	movs	r1, #0
 80005fa:	480a      	ldr	r0, [pc, #40]	; (8000624 <main+0x44>)
 80005fc:	f001 f9fa 	bl	80019f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000600:	2104      	movs	r1, #4
 8000602:	4808      	ldr	r0, [pc, #32]	; (8000624 <main+0x44>)
 8000604:	f001 f9f6 	bl	80019f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000608:	2108      	movs	r1, #8
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <main+0x44>)
 800060c:	f001 f9f2 	bl	80019f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000610:	210c      	movs	r1, #12
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <main+0x44>)
 8000614:	f001 f9ee 	bl	80019f4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000618:	2100      	movs	r1, #0
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <main+0x48>)
 800061c:	f001 f9ea 	bl	80019f4 <HAL_TIM_PWM_Start>

	while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x40>
 8000622:	bf00      	nop
 8000624:	2000002c 	.word	0x2000002c
 8000628:	20000074 	.word	0x20000074

0800062c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2234      	movs	r2, #52	; 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f9fc 	bl	8002a38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <SystemClock_Config+0xd4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a29      	ldr	r2, [pc, #164]	; (8000700 <SystemClock_Config+0xd4>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <SystemClock_Config+0xd4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	2300      	movs	r3, #0
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <SystemClock_Config+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000678:	4a22      	ldr	r2, [pc, #136]	; (8000704 <SystemClock_Config+0xd8>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <SystemClock_Config+0xd8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 80006a0:	2310      	movs	r3, #16
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 80006a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006a8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006aa:	2304      	movs	r3, #4
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fe54 	bl	8001368 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x9e>
	{
		Error_Handler();
 80006c6:	f000 f81f 	bl	8000708 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fb28 	bl	8000d3c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xca>
	{
		Error_Handler();
 80006f2:	f000 f809 	bl	8000708 <Error_Handler>
	}
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_Init+0x40>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <HAL_Init+0x40>)
 800071e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_Init+0x40>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <HAL_Init+0x40>)
 800072a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800072e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_Init+0x40>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_Init+0x40>)
 8000736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800073a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 f90d 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 f808 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000748:	f000 fad0 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023c00 	.word	0x40023c00

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_InitTick+0x54>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_InitTick+0x58>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f917 	bl	80009aa <HAL_SYSTICK_Config>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e00e      	b.n	80007a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d80a      	bhi.n	80007a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f000 f8ed 	bl	8000972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <HAL_InitTick+0x5c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800079e:	2300      	movs	r3, #0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000004 	.word	0x20000004
 80007b4:	20000000 	.word	0x20000000

080007b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_IncTick+0x20>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_IncTick+0x24>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_IncTick+0x24>)
 80007ca:	6013      	str	r3, [r2, #0]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	20000004 	.word	0x20000004
 80007dc:	20000028 	.word	0x20000028

080007e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return uwTick;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <HAL_GetTick+0x14>)
 80007e6:	681b      	ldr	r3, [r3, #0]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000028 	.word	0x20000028

080007f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800080e:	68ba      	ldr	r2, [r7, #8]
 8000810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000814:	4013      	ands	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082a:	4a04      	ldr	r2, [pc, #16]	; (800083c <__NVIC_SetPriorityGrouping+0x44>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	60d3      	str	r3, [r2, #12]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <__NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	2b00      	cmp	r3, #0
 800086e:	db0a      	blt.n	8000886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	b2da      	uxtb	r2, r3
 8000874:	490c      	ldr	r1, [pc, #48]	; (80008a8 <__NVIC_SetPriority+0x4c>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	0112      	lsls	r2, r2, #4
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	440b      	add	r3, r1
 8000880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000884:	e00a      	b.n	800089c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4908      	ldr	r1, [pc, #32]	; (80008ac <__NVIC_SetPriority+0x50>)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	3b04      	subs	r3, #4
 8000894:	0112      	lsls	r2, r2, #4
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	440b      	add	r3, r1
 800089a:	761a      	strb	r2, [r3, #24]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b089      	sub	sp, #36	; 0x24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f1c3 0307 	rsb	r3, r3, #7
 80008ca:	2b04      	cmp	r3, #4
 80008cc:	bf28      	it	cs
 80008ce:	2304      	movcs	r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3304      	adds	r3, #4
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d902      	bls.n	80008e0 <NVIC_EncodePriority+0x30>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3b03      	subs	r3, #3
 80008de:	e000      	b.n	80008e2 <NVIC_EncodePriority+0x32>
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43da      	mvns	r2, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	401a      	ands	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f8:	f04f 31ff 	mov.w	r1, #4294967295
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43d9      	mvns	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	4313      	orrs	r3, r2
         );
}
 800090a:	4618      	mov	r0, r3
 800090c:	3724      	adds	r7, #36	; 0x24
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000928:	d301      	bcc.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e00f      	b.n	800094e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <SysTick_Config+0x40>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	210f      	movs	r1, #15
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f7ff ff8e 	bl	800085c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <SysTick_Config+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <SysTick_Config+0x40>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff47 	bl	80007f8 <__NVIC_SetPriorityGrouping>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000984:	f7ff ff5c 	bl	8000840 <__NVIC_GetPriorityGrouping>
 8000988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f7ff ff8e 	bl	80008b0 <NVIC_EncodePriority>
 8000994:	4602      	mov	r2, r0
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff5d 	bl	800085c <__NVIC_SetPriority>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ffb0 	bl	8000918 <SysTick_Config>
 80009b8:	4603      	mov	r3, r0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	; 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
 80009de:	e165      	b.n	8000cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009e0:	2201      	movs	r2, #1
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f040 8154 	bne.w	8000ca6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d005      	beq.n	8000a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d130      	bne.n	8000a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	2203      	movs	r2, #3
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	68da      	ldr	r2, [r3, #12]
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	091b      	lsrs	r3, r3, #4
 8000a62:	f003 0201 	and.w	r2, r3, #1
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	2b03      	cmp	r3, #3
 8000a82:	d017      	beq.n	8000ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f003 0303 	and.w	r3, r3, #3
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d123      	bne.n	8000b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	08da      	lsrs	r2, r3, #3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3208      	adds	r2, #8
 8000ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	f003 0307 	and.w	r3, r3, #7
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	691a      	ldr	r2, [r3, #16]
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	08da      	lsrs	r2, r3, #3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3208      	adds	r2, #8
 8000b02:	69b9      	ldr	r1, [r7, #24]
 8000b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2203      	movs	r2, #3
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0203 	and.w	r2, r3, #3
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 80ae 	beq.w	8000ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b5d      	ldr	r3, [pc, #372]	; (8000cc4 <HAL_GPIO_Init+0x300>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a5c      	ldr	r2, [pc, #368]	; (8000cc4 <HAL_GPIO_Init+0x300>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b5a      	ldr	r3, [pc, #360]	; (8000cc4 <HAL_GPIO_Init+0x300>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b66:	4a58      	ldr	r2, [pc, #352]	; (8000cc8 <HAL_GPIO_Init+0x304>)
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4013      	ands	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a4f      	ldr	r2, [pc, #316]	; (8000ccc <HAL_GPIO_Init+0x308>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d025      	beq.n	8000bde <HAL_GPIO_Init+0x21a>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a4e      	ldr	r2, [pc, #312]	; (8000cd0 <HAL_GPIO_Init+0x30c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d01f      	beq.n	8000bda <HAL_GPIO_Init+0x216>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a4d      	ldr	r2, [pc, #308]	; (8000cd4 <HAL_GPIO_Init+0x310>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d019      	beq.n	8000bd6 <HAL_GPIO_Init+0x212>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a4c      	ldr	r2, [pc, #304]	; (8000cd8 <HAL_GPIO_Init+0x314>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d013      	beq.n	8000bd2 <HAL_GPIO_Init+0x20e>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a4b      	ldr	r2, [pc, #300]	; (8000cdc <HAL_GPIO_Init+0x318>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d00d      	beq.n	8000bce <HAL_GPIO_Init+0x20a>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a4a      	ldr	r2, [pc, #296]	; (8000ce0 <HAL_GPIO_Init+0x31c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d007      	beq.n	8000bca <HAL_GPIO_Init+0x206>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a49      	ldr	r2, [pc, #292]	; (8000ce4 <HAL_GPIO_Init+0x320>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d101      	bne.n	8000bc6 <HAL_GPIO_Init+0x202>
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	e00c      	b.n	8000be0 <HAL_GPIO_Init+0x21c>
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	e00a      	b.n	8000be0 <HAL_GPIO_Init+0x21c>
 8000bca:	2305      	movs	r3, #5
 8000bcc:	e008      	b.n	8000be0 <HAL_GPIO_Init+0x21c>
 8000bce:	2304      	movs	r3, #4
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x21c>
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e004      	b.n	8000be0 <HAL_GPIO_Init+0x21c>
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	e002      	b.n	8000be0 <HAL_GPIO_Init+0x21c>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e000      	b.n	8000be0 <HAL_GPIO_Init+0x21c>
 8000bde:	2300      	movs	r3, #0
 8000be0:	69fa      	ldr	r2, [r7, #28]
 8000be2:	f002 0203 	and.w	r2, r2, #3
 8000be6:	0092      	lsls	r2, r2, #2
 8000be8:	4093      	lsls	r3, r2
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bf0:	4935      	ldr	r1, [pc, #212]	; (8000cc8 <HAL_GPIO_Init+0x304>)
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <HAL_GPIO_Init+0x324>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c22:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <HAL_GPIO_Init+0x324>)
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_GPIO_Init+0x324>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <HAL_GPIO_Init+0x324>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <HAL_GPIO_Init+0x324>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <HAL_GPIO_Init+0x324>)
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <HAL_GPIO_Init+0x324>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ca0:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <HAL_GPIO_Init+0x324>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	61fb      	str	r3, [r7, #28]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	f67f ae96 	bls.w	80009e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40013800 	.word	0x40013800
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40020c00 	.word	0x40020c00
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40021400 	.word	0x40021400
 8000ce4:	40021800 	.word	0x40021800
 8000ce8:	40013c00 	.word	0x40013c00

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d2a:	2007      	movs	r0, #7
 8000d2c:	f7ff fe16 	bl	800095c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d101      	bne.n	8000d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e0cc      	b.n	8000eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d50:	4b68      	ldr	r3, [pc, #416]	; (8000ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d90c      	bls.n	8000d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d5e:	4b65      	ldr	r3, [pc, #404]	; (8000ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d66:	4b63      	ldr	r3, [pc, #396]	; (8000ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d001      	beq.n	8000d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e0b8      	b.n	8000eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d020      	beq.n	8000dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d90:	4b59      	ldr	r3, [pc, #356]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	4a58      	ldr	r2, [pc, #352]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d005      	beq.n	8000db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000da8:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	4a52      	ldr	r2, [pc, #328]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000db4:	4b50      	ldr	r3, [pc, #320]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	494d      	ldr	r1, [pc, #308]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d044      	beq.n	8000e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d107      	bne.n	8000dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d119      	bne.n	8000e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e07f      	b.n	8000eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d003      	beq.n	8000dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d107      	bne.n	8000e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dfa:	4b3f      	ldr	r3, [pc, #252]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d109      	bne.n	8000e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e06f      	b.n	8000eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0a:	4b3b      	ldr	r3, [pc, #236]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e067      	b.n	8000eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e1a:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f023 0203 	bic.w	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	4934      	ldr	r1, [pc, #208]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e2c:	f7ff fcd8 	bl	80007e0 <HAL_GetTick>
 8000e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e32:	e00a      	b.n	8000e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e34:	f7ff fcd4 	bl	80007e0 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e04f      	b.n	8000eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 020c 	and.w	r2, r3, #12
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d1eb      	bne.n	8000e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e5c:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 030f 	and.w	r3, r3, #15
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d20c      	bcs.n	8000e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d001      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e032      	b.n	8000eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d008      	beq.n	8000ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	4916      	ldr	r1, [pc, #88]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d009      	beq.n	8000ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ec2:	f000 f821 	bl	8000f08 <HAL_RCC_GetSysClockFreq>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	490a      	ldr	r1, [pc, #40]	; (8000efc <HAL_RCC_ClockConfig+0x1c0>)
 8000ed4:	5ccb      	ldrb	r3, [r1, r3]
 8000ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <HAL_RCC_ClockConfig+0x1c4>)
 8000edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_RCC_ClockConfig+0x1c8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc38 	bl	8000758 <HAL_InitTick>

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	08002a60 	.word	0x08002a60
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000000 	.word	0x20000000

08000f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f0c:	b0ae      	sub	sp, #184	; 0xb8
 8000f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f2e:	4bcb      	ldr	r3, [pc, #812]	; (800125c <HAL_RCC_GetSysClockFreq+0x354>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b0c      	cmp	r3, #12
 8000f38:	f200 8206 	bhi.w	8001348 <HAL_RCC_GetSysClockFreq+0x440>
 8000f3c:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <HAL_RCC_GetSysClockFreq+0x3c>)
 8000f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f42:	bf00      	nop
 8000f44:	08000f79 	.word	0x08000f79
 8000f48:	08001349 	.word	0x08001349
 8000f4c:	08001349 	.word	0x08001349
 8000f50:	08001349 	.word	0x08001349
 8000f54:	08000f81 	.word	0x08000f81
 8000f58:	08001349 	.word	0x08001349
 8000f5c:	08001349 	.word	0x08001349
 8000f60:	08001349 	.word	0x08001349
 8000f64:	08000f89 	.word	0x08000f89
 8000f68:	08001349 	.word	0x08001349
 8000f6c:	08001349 	.word	0x08001349
 8000f70:	08001349 	.word	0x08001349
 8000f74:	08001179 	.word	0x08001179
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f78:	4bb9      	ldr	r3, [pc, #740]	; (8001260 <HAL_RCC_GetSysClockFreq+0x358>)
 8000f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8000f7e:	e1e7      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000f80:	4bb8      	ldr	r3, [pc, #736]	; (8001264 <HAL_RCC_GetSysClockFreq+0x35c>)
 8000f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8000f86:	e1e3      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f88:	4bb4      	ldr	r3, [pc, #720]	; (800125c <HAL_RCC_GetSysClockFreq+0x354>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f94:	4bb1      	ldr	r3, [pc, #708]	; (800125c <HAL_RCC_GetSysClockFreq+0x354>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d071      	beq.n	8001084 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fa0:	4bae      	ldr	r3, [pc, #696]	; (800125c <HAL_RCC_GetSysClockFreq+0x354>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	099b      	lsrs	r3, r3, #6
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000fac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000fc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	462b      	mov	r3, r5
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	f04f 0100 	mov.w	r1, #0
 8000fd2:	0159      	lsls	r1, r3, #5
 8000fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000fd8:	0150      	lsls	r0, r2, #5
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4621      	mov	r1, r4
 8000fe0:	1a51      	subs	r1, r2, r1
 8000fe2:	6439      	str	r1, [r7, #64]	; 0x40
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8000fea:	647b      	str	r3, [r7, #68]	; 0x44
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	f04f 0300 	mov.w	r3, #0
 8000ff4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	018b      	lsls	r3, r1, #6
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001002:	4641      	mov	r1, r8
 8001004:	018a      	lsls	r2, r1, #6
 8001006:	4641      	mov	r1, r8
 8001008:	1a51      	subs	r1, r2, r1
 800100a:	63b9      	str	r1, [r7, #56]	; 0x38
 800100c:	4649      	mov	r1, r9
 800100e:	eb63 0301 	sbc.w	r3, r3, r1
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001020:	4649      	mov	r1, r9
 8001022:	00cb      	lsls	r3, r1, #3
 8001024:	4641      	mov	r1, r8
 8001026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800102a:	4641      	mov	r1, r8
 800102c:	00ca      	lsls	r2, r1, #3
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	4603      	mov	r3, r0
 8001034:	4622      	mov	r2, r4
 8001036:	189b      	adds	r3, r3, r2
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
 800103a:	462b      	mov	r3, r5
 800103c:	460a      	mov	r2, r1
 800103e:	eb42 0303 	adc.w	r3, r2, r3
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	f04f 0300 	mov.w	r3, #0
 800104c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001050:	4629      	mov	r1, r5
 8001052:	024b      	lsls	r3, r1, #9
 8001054:	4621      	mov	r1, r4
 8001056:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800105a:	4621      	mov	r1, r4
 800105c:	024a      	lsls	r2, r1, #9
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001066:	2200      	movs	r2, #0
 8001068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800106c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001070:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001074:	f7ff f8c6 	bl	8000204 <__aeabi_uldivmod>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4613      	mov	r3, r2
 800107e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001082:	e067      	b.n	8001154 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001084:	4b75      	ldr	r3, [pc, #468]	; (800125c <HAL_RCC_GetSysClockFreq+0x354>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	099b      	lsrs	r3, r3, #6
 800108a:	2200      	movs	r2, #0
 800108c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001090:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800109c:	67bb      	str	r3, [r7, #120]	; 0x78
 800109e:	2300      	movs	r3, #0
 80010a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80010a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80010a6:	4622      	mov	r2, r4
 80010a8:	462b      	mov	r3, r5
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	f04f 0100 	mov.w	r1, #0
 80010b2:	0159      	lsls	r1, r3, #5
 80010b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80010b8:	0150      	lsls	r0, r2, #5
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4621      	mov	r1, r4
 80010c0:	1a51      	subs	r1, r2, r1
 80010c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80010c4:	4629      	mov	r1, r5
 80010c6:	eb63 0301 	sbc.w	r3, r3, r1
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80010d8:	4649      	mov	r1, r9
 80010da:	018b      	lsls	r3, r1, #6
 80010dc:	4641      	mov	r1, r8
 80010de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80010e2:	4641      	mov	r1, r8
 80010e4:	018a      	lsls	r2, r1, #6
 80010e6:	4641      	mov	r1, r8
 80010e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80010ec:	4649      	mov	r1, r9
 80010ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80010fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001106:	4692      	mov	sl, r2
 8001108:	469b      	mov	fp, r3
 800110a:	4623      	mov	r3, r4
 800110c:	eb1a 0303 	adds.w	r3, sl, r3
 8001110:	623b      	str	r3, [r7, #32]
 8001112:	462b      	mov	r3, r5
 8001114:	eb4b 0303 	adc.w	r3, fp, r3
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001126:	4629      	mov	r1, r5
 8001128:	028b      	lsls	r3, r1, #10
 800112a:	4621      	mov	r1, r4
 800112c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001130:	4621      	mov	r1, r4
 8001132:	028a      	lsls	r2, r1, #10
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800113c:	2200      	movs	r2, #0
 800113e:	673b      	str	r3, [r7, #112]	; 0x70
 8001140:	677a      	str	r2, [r7, #116]	; 0x74
 8001142:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001146:	f7ff f85d 	bl	8000204 <__aeabi_uldivmod>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4613      	mov	r3, r2
 8001150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <HAL_RCC_GetSysClockFreq+0x354>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	3301      	adds	r3, #1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800116a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001176:	e0eb      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001178:	4b38      	ldr	r3, [pc, #224]	; (800125c <HAL_RCC_GetSysClockFreq+0x354>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <HAL_RCC_GetSysClockFreq+0x354>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d06b      	beq.n	8001268 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001190:	4b32      	ldr	r3, [pc, #200]	; (800125c <HAL_RCC_GetSysClockFreq+0x354>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	099b      	lsrs	r3, r3, #6
 8001196:	2200      	movs	r2, #0
 8001198:	66bb      	str	r3, [r7, #104]	; 0x68
 800119a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800119c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800119e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011a2:	663b      	str	r3, [r7, #96]	; 0x60
 80011a4:	2300      	movs	r3, #0
 80011a6:	667b      	str	r3, [r7, #100]	; 0x64
 80011a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80011ac:	4622      	mov	r2, r4
 80011ae:	462b      	mov	r3, r5
 80011b0:	f04f 0000 	mov.w	r0, #0
 80011b4:	f04f 0100 	mov.w	r1, #0
 80011b8:	0159      	lsls	r1, r3, #5
 80011ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011be:	0150      	lsls	r0, r2, #5
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4621      	mov	r1, r4
 80011c6:	1a51      	subs	r1, r2, r1
 80011c8:	61b9      	str	r1, [r7, #24]
 80011ca:	4629      	mov	r1, r5
 80011cc:	eb63 0301 	sbc.w	r3, r3, r1
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80011de:	4659      	mov	r1, fp
 80011e0:	018b      	lsls	r3, r1, #6
 80011e2:	4651      	mov	r1, sl
 80011e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011e8:	4651      	mov	r1, sl
 80011ea:	018a      	lsls	r2, r1, #6
 80011ec:	4651      	mov	r1, sl
 80011ee:	ebb2 0801 	subs.w	r8, r2, r1
 80011f2:	4659      	mov	r1, fp
 80011f4:	eb63 0901 	sbc.w	r9, r3, r1
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001204:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001208:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800120c:	4690      	mov	r8, r2
 800120e:	4699      	mov	r9, r3
 8001210:	4623      	mov	r3, r4
 8001212:	eb18 0303 	adds.w	r3, r8, r3
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	462b      	mov	r3, r5
 800121a:	eb49 0303 	adc.w	r3, r9, r3
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800122c:	4629      	mov	r1, r5
 800122e:	024b      	lsls	r3, r1, #9
 8001230:	4621      	mov	r1, r4
 8001232:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001236:	4621      	mov	r1, r4
 8001238:	024a      	lsls	r2, r1, #9
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001242:	2200      	movs	r2, #0
 8001244:	65bb      	str	r3, [r7, #88]	; 0x58
 8001246:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001248:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800124c:	f7fe ffda 	bl	8000204 <__aeabi_uldivmod>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4613      	mov	r3, r2
 8001256:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800125a:	e065      	b.n	8001328 <HAL_RCC_GetSysClockFreq+0x420>
 800125c:	40023800 	.word	0x40023800
 8001260:	00f42400 	.word	0x00f42400
 8001264:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001268:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_RCC_GetSysClockFreq+0x458>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	099b      	lsrs	r3, r3, #6
 800126e:	2200      	movs	r2, #0
 8001270:	4618      	mov	r0, r3
 8001272:	4611      	mov	r1, r2
 8001274:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001278:	653b      	str	r3, [r7, #80]	; 0x50
 800127a:	2300      	movs	r3, #0
 800127c:	657b      	str	r3, [r7, #84]	; 0x54
 800127e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001282:	4642      	mov	r2, r8
 8001284:	464b      	mov	r3, r9
 8001286:	f04f 0000 	mov.w	r0, #0
 800128a:	f04f 0100 	mov.w	r1, #0
 800128e:	0159      	lsls	r1, r3, #5
 8001290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001294:	0150      	lsls	r0, r2, #5
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4641      	mov	r1, r8
 800129c:	1a51      	subs	r1, r2, r1
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	4649      	mov	r1, r9
 80012a2:	eb63 0301 	sbc.w	r3, r3, r1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80012b4:	4659      	mov	r1, fp
 80012b6:	018b      	lsls	r3, r1, #6
 80012b8:	4651      	mov	r1, sl
 80012ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012be:	4651      	mov	r1, sl
 80012c0:	018a      	lsls	r2, r1, #6
 80012c2:	4651      	mov	r1, sl
 80012c4:	1a54      	subs	r4, r2, r1
 80012c6:	4659      	mov	r1, fp
 80012c8:	eb63 0501 	sbc.w	r5, r3, r1
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	00eb      	lsls	r3, r5, #3
 80012d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012da:	00e2      	lsls	r2, r4, #3
 80012dc:	4614      	mov	r4, r2
 80012de:	461d      	mov	r5, r3
 80012e0:	4643      	mov	r3, r8
 80012e2:	18e3      	adds	r3, r4, r3
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	464b      	mov	r3, r9
 80012e8:	eb45 0303 	adc.w	r3, r5, r3
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012fa:	4629      	mov	r1, r5
 80012fc:	028b      	lsls	r3, r1, #10
 80012fe:	4621      	mov	r1, r4
 8001300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001304:	4621      	mov	r1, r4
 8001306:	028a      	lsls	r2, r1, #10
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001310:	2200      	movs	r2, #0
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
 8001314:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001316:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800131a:	f7fe ff73 	bl	8000204 <__aeabi_uldivmod>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4613      	mov	r3, r2
 8001324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_RCC_GetSysClockFreq+0x458>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	0f1b      	lsrs	r3, r3, #28
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800133a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001346:	e003      	b.n	8001350 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_RCC_GetSysClockFreq+0x45c>)
 800134a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800134e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001350:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001354:	4618      	mov	r0, r3
 8001356:	37b8      	adds	r7, #184	; 0xb8
 8001358:	46bd      	mov	sp, r7
 800135a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	00f42400 	.word	0x00f42400

08001368 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e28d      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8083 	beq.w	800148e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001388:	4b94      	ldr	r3, [pc, #592]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b04      	cmp	r3, #4
 8001392:	d019      	beq.n	80013c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001394:	4b91      	ldr	r3, [pc, #580]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800139c:	2b08      	cmp	r3, #8
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80013a0:	4b8e      	ldr	r3, [pc, #568]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ac:	d00c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ae:	4b8b      	ldr	r3, [pc, #556]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d112      	bne.n	80013e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ba:	4b88      	ldr	r3, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013c6:	d10b      	bne.n	80013e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	4b84      	ldr	r3, [pc, #528]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d05b      	beq.n	800148c <HAL_RCC_OscConfig+0x124>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d157      	bne.n	800148c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e25a      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e8:	d106      	bne.n	80013f8 <HAL_RCC_OscConfig+0x90>
 80013ea:	4b7c      	ldr	r3, [pc, #496]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a7b      	ldr	r2, [pc, #492]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e01d      	b.n	8001434 <HAL_RCC_OscConfig+0xcc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0xb4>
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a75      	ldr	r2, [pc, #468]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	4b73      	ldr	r3, [pc, #460]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a72      	ldr	r2, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0xcc>
 800141c:	4b6f      	ldr	r3, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a6e      	ldr	r2, [pc, #440]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b6c      	ldr	r3, [pc, #432]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a6b      	ldr	r2, [pc, #428]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 800142e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d013      	beq.n	8001464 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff f9d0 	bl	80007e0 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff f9cc 	bl	80007e0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e21f      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	4b61      	ldr	r3, [pc, #388]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0xdc>
 8001462:	e014      	b.n	800148e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff f9bc 	bl	80007e0 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff f9b8 	bl	80007e0 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e20b      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	4b57      	ldr	r3, [pc, #348]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x104>
 800148a:	e000      	b.n	800148e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d06f      	beq.n	800157a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800149a:	4b50      	ldr	r3, [pc, #320]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d017      	beq.n	80014d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80014a6:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d105      	bne.n	80014be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80014b2:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80014c6:	2b0c      	cmp	r3, #12
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x186>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1d3      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b3b      	ldr	r3, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4937      	ldr	r1, [pc, #220]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e03a      	b.n	800157a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d020      	beq.n	800154e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <HAL_RCC_OscConfig+0x278>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff f965 	bl	80007e0 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151a:	f7ff f961 	bl	80007e0 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1b4      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4925      	ldr	r1, [pc, #148]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001548:	4313      	orrs	r3, r2
 800154a:	600b      	str	r3, [r1, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154e:	4b24      	ldr	r3, [pc, #144]	; (80015e0 <HAL_RCC_OscConfig+0x278>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff f944 	bl	80007e0 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff f940 	bl	80007e0 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e193      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	2b00      	cmp	r3, #0
 8001584:	d036      	beq.n	80015f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff f924 	bl	80007e0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff f920 	bl	80007e0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e173      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x234>
 80015ba:	e01b      	b.n	80015f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c2:	f7ff f90d 	bl	80007e0 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	e00e      	b.n	80015e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff f909 	bl	80007e0 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d907      	bls.n	80015e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e15c      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
 80015dc:	40023800 	.word	0x40023800
 80015e0:	42470000 	.word	0x42470000
 80015e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b8a      	ldr	r3, [pc, #552]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 80015ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ea      	bne.n	80015ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8097 	beq.w	8001730 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b83      	ldr	r3, [pc, #524]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10f      	bne.n	8001632 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b7f      	ldr	r3, [pc, #508]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a7e      	ldr	r2, [pc, #504]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b79      	ldr	r3, [pc, #484]	; (8001818 <HAL_RCC_OscConfig+0x4b0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b76      	ldr	r3, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x4b0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a75      	ldr	r2, [pc, #468]	; (8001818 <HAL_RCC_OscConfig+0x4b0>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff f8c9 	bl	80007e0 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff f8c5 	bl	80007e0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e118      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b6c      	ldr	r3, [pc, #432]	; (8001818 <HAL_RCC_OscConfig+0x4b0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x31e>
 8001678:	4b66      	ldr	r3, [pc, #408]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	4a65      	ldr	r2, [pc, #404]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6713      	str	r3, [r2, #112]	; 0x70
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x358>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x340>
 800168e:	4b61      	ldr	r3, [pc, #388]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a60      	ldr	r2, [pc, #384]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	4b5e      	ldr	r3, [pc, #376]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5d      	ldr	r2, [pc, #372]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0x358>
 80016a8:	4b5a      	ldr	r3, [pc, #360]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a59      	ldr	r2, [pc, #356]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	4b57      	ldr	r3, [pc, #348]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a56      	ldr	r2, [pc, #344]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 80016ba:	f023 0304 	bic.w	r3, r3, #4
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d015      	beq.n	80016f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff f88a 	bl	80007e0 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff f886 	bl	80007e0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e0d7      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	4b4b      	ldr	r3, [pc, #300]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ee      	beq.n	80016d0 <HAL_RCC_OscConfig+0x368>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f4:	f7ff f874 	bl	80007e0 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fc:	f7ff f870 	bl	80007e0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e0c1      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	4b40      	ldr	r3, [pc, #256]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ee      	bne.n	80016fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001724:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	4a3a      	ldr	r2, [pc, #232]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 800172a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80ad 	beq.w	8001894 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800173a:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d060      	beq.n	8001808 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d145      	bne.n	80017da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_RCC_OscConfig+0x4b4>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff f844 	bl	80007e0 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f840 	bl	80007e0 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e093      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176e:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	041b      	lsls	r3, r3, #16
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	071b      	lsls	r3, r3, #28
 80017a6:	491b      	ldr	r1, [pc, #108]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x4b4>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff f815 	bl	80007e0 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff f811 	bl	80007e0 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e064      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x452>
 80017d8:	e05c      	b.n	8001894 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_OscConfig+0x4b4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7fe fffe 	bl	80007e0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e8:	f7fe fffa 	bl	80007e0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e04d      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_RCC_OscConfig+0x4ac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x480>
 8001806:	e045      	b.n	8001894 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d107      	bne.n	8001820 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e040      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
 8001814:	40023800 	.word	0x40023800
 8001818:	40007000 	.word	0x40007000
 800181c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_RCC_OscConfig+0x538>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d030      	beq.n	8001890 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d129      	bne.n	8001890 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d122      	bne.n	8001890 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001850:	4013      	ands	r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001858:	4293      	cmp	r3, r2
 800185a:	d119      	bne.n	8001890 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	3b01      	subs	r3, #1
 800186a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d10f      	bne.n	8001890 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d107      	bne.n	8001890 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e041      	b.n	800193a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 ffb0 	bl	8002830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3304      	adds	r3, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4610      	mov	r0, r2
 80018e4:	f000 fad8 	bl	8001e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e041      	b.n	80019d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d106      	bne.n	800196e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f839 	bl	80019e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	4619      	mov	r1, r3
 8001980:	4610      	mov	r0, r2
 8001982:	f000 fa89 	bl	8001e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <HAL_TIM_PWM_Start+0x24>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	bf14      	ite	ne
 8001a10:	2301      	movne	r3, #1
 8001a12:	2300      	moveq	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	e022      	b.n	8001a5e <HAL_TIM_PWM_Start+0x6a>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d109      	bne.n	8001a32 <HAL_TIM_PWM_Start+0x3e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	bf14      	ite	ne
 8001a2a:	2301      	movne	r3, #1
 8001a2c:	2300      	moveq	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	e015      	b.n	8001a5e <HAL_TIM_PWM_Start+0x6a>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d109      	bne.n	8001a4c <HAL_TIM_PWM_Start+0x58>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	bf14      	ite	ne
 8001a44:	2301      	movne	r3, #1
 8001a46:	2300      	moveq	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	e008      	b.n	8001a5e <HAL_TIM_PWM_Start+0x6a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07c      	b.n	8001b60 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d104      	bne.n	8001a76 <HAL_TIM_PWM_Start+0x82>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a74:	e013      	b.n	8001a9e <HAL_TIM_PWM_Start+0xaa>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d104      	bne.n	8001a86 <HAL_TIM_PWM_Start+0x92>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a84:	e00b      	b.n	8001a9e <HAL_TIM_PWM_Start+0xaa>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d104      	bne.n	8001a96 <HAL_TIM_PWM_Start+0xa2>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a94:	e003      	b.n	8001a9e <HAL_TIM_PWM_Start+0xaa>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fce0 	bl	800246c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <HAL_TIM_PWM_Start+0x174>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d004      	beq.n	8001ac0 <HAL_TIM_PWM_Start+0xcc>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2c      	ldr	r2, [pc, #176]	; (8001b6c <HAL_TIM_PWM_Start+0x178>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_TIM_PWM_Start+0xd0>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_TIM_PWM_Start+0xd2>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <HAL_TIM_PWM_Start+0x174>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d022      	beq.n	8001b2a <HAL_TIM_PWM_Start+0x136>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d01d      	beq.n	8001b2a <HAL_TIM_PWM_Start+0x136>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <HAL_TIM_PWM_Start+0x17c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d018      	beq.n	8001b2a <HAL_TIM_PWM_Start+0x136>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <HAL_TIM_PWM_Start+0x180>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_TIM_PWM_Start+0x136>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_TIM_PWM_Start+0x184>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00e      	beq.n	8001b2a <HAL_TIM_PWM_Start+0x136>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a16      	ldr	r2, [pc, #88]	; (8001b6c <HAL_TIM_PWM_Start+0x178>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d009      	beq.n	8001b2a <HAL_TIM_PWM_Start+0x136>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_TIM_PWM_Start+0x188>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d004      	beq.n	8001b2a <HAL_TIM_PWM_Start+0x136>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <HAL_TIM_PWM_Start+0x18c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d111      	bne.n	8001b4e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d010      	beq.n	8001b5e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4c:	e007      	b.n	8001b5e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	40010400 	.word	0x40010400
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40000800 	.word	0x40000800
 8001b78:	40000c00 	.word	0x40000c00
 8001b7c:	40014000 	.word	0x40014000
 8001b80:	40001800 	.word	0x40001800

08001b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e0ae      	b.n	8001d00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	f200 809f 	bhi.w	8001cf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001bed 	.word	0x08001bed
 8001bbc:	08001cf1 	.word	0x08001cf1
 8001bc0:	08001cf1 	.word	0x08001cf1
 8001bc4:	08001cf1 	.word	0x08001cf1
 8001bc8:	08001c2d 	.word	0x08001c2d
 8001bcc:	08001cf1 	.word	0x08001cf1
 8001bd0:	08001cf1 	.word	0x08001cf1
 8001bd4:	08001cf1 	.word	0x08001cf1
 8001bd8:	08001c6f 	.word	0x08001c6f
 8001bdc:	08001cf1 	.word	0x08001cf1
 8001be0:	08001cf1 	.word	0x08001cf1
 8001be4:	08001cf1 	.word	0x08001cf1
 8001be8:	08001caf 	.word	0x08001caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f9f0 	bl	8001fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0208 	orr.w	r2, r2, #8
 8001c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0204 	bic.w	r2, r2, #4
 8001c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6999      	ldr	r1, [r3, #24]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	619a      	str	r2, [r3, #24]
      break;
 8001c2a:	e064      	b.n	8001cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fa40 	bl	80020b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6999      	ldr	r1, [r3, #24]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	021a      	lsls	r2, r3, #8
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	619a      	str	r2, [r3, #24]
      break;
 8001c6c:	e043      	b.n	8001cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fa95 	bl	80021a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69da      	ldr	r2, [r3, #28]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0208 	orr.w	r2, r2, #8
 8001c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	69da      	ldr	r2, [r3, #28]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0204 	bic.w	r2, r2, #4
 8001c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	69d9      	ldr	r1, [r3, #28]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	61da      	str	r2, [r3, #28]
      break;
 8001cac:	e023      	b.n	8001cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fae9 	bl	800228c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	69da      	ldr	r2, [r3, #28]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69da      	ldr	r2, [r3, #28]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	69d9      	ldr	r1, [r3, #28]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	021a      	lsls	r2, r3, #8
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	61da      	str	r2, [r3, #28]
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8001cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_TIM_ConfigClockSource+0x1c>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e0b4      	b.n	8001e8e <HAL_TIM_ConfigClockSource+0x186>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d5c:	d03e      	beq.n	8001ddc <HAL_TIM_ConfigClockSource+0xd4>
 8001d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d62:	f200 8087 	bhi.w	8001e74 <HAL_TIM_ConfigClockSource+0x16c>
 8001d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6a:	f000 8086 	beq.w	8001e7a <HAL_TIM_ConfigClockSource+0x172>
 8001d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d72:	d87f      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x16c>
 8001d74:	2b70      	cmp	r3, #112	; 0x70
 8001d76:	d01a      	beq.n	8001dae <HAL_TIM_ConfigClockSource+0xa6>
 8001d78:	2b70      	cmp	r3, #112	; 0x70
 8001d7a:	d87b      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x16c>
 8001d7c:	2b60      	cmp	r3, #96	; 0x60
 8001d7e:	d050      	beq.n	8001e22 <HAL_TIM_ConfigClockSource+0x11a>
 8001d80:	2b60      	cmp	r3, #96	; 0x60
 8001d82:	d877      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x16c>
 8001d84:	2b50      	cmp	r3, #80	; 0x50
 8001d86:	d03c      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0xfa>
 8001d88:	2b50      	cmp	r3, #80	; 0x50
 8001d8a:	d873      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x16c>
 8001d8c:	2b40      	cmp	r3, #64	; 0x40
 8001d8e:	d058      	beq.n	8001e42 <HAL_TIM_ConfigClockSource+0x13a>
 8001d90:	2b40      	cmp	r3, #64	; 0x40
 8001d92:	d86f      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x16c>
 8001d94:	2b30      	cmp	r3, #48	; 0x30
 8001d96:	d064      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0x15a>
 8001d98:	2b30      	cmp	r3, #48	; 0x30
 8001d9a:	d86b      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x16c>
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d060      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0x15a>
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d867      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x16c>
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d05c      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0x15a>
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d05a      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0x15a>
 8001dac:	e062      	b.n	8001e74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6899      	ldr	r1, [r3, #8]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f000 fb35 	bl	800242c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	609a      	str	r2, [r3, #8]
      break;
 8001dda:	e04f      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6899      	ldr	r1, [r3, #8]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f000 fb1e 	bl	800242c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dfe:	609a      	str	r2, [r3, #8]
      break;
 8001e00:	e03c      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f000 fa92 	bl	8002338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2150      	movs	r1, #80	; 0x50
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 faeb 	bl	80023f6 <TIM_ITRx_SetConfig>
      break;
 8001e20:	e02c      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6859      	ldr	r1, [r3, #4]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f000 fab1 	bl	8002396 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2160      	movs	r1, #96	; 0x60
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fadb 	bl	80023f6 <TIM_ITRx_SetConfig>
      break;
 8001e40:	e01c      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f000 fa72 	bl	8002338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2140      	movs	r1, #64	; 0x40
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 facb 	bl	80023f6 <TIM_ITRx_SetConfig>
      break;
 8001e60:	e00c      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	f000 fac2 	bl	80023f6 <TIM_ITRx_SetConfig>
      break;
 8001e72:	e003      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      break;
 8001e78:	e000      	b.n	8001e7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a40      	ldr	r2, [pc, #256]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d00f      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3d      	ldr	r2, [pc, #244]	; (8001fb0 <TIM_Base_SetConfig+0x118>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00b      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3c      	ldr	r2, [pc, #240]	; (8001fb4 <TIM_Base_SetConfig+0x11c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3b      	ldr	r2, [pc, #236]	; (8001fb8 <TIM_Base_SetConfig+0x120>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3a      	ldr	r2, [pc, #232]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d108      	bne.n	8001eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d02b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d027      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2c      	ldr	r2, [pc, #176]	; (8001fb0 <TIM_Base_SetConfig+0x118>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d023      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <TIM_Base_SetConfig+0x11c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01f      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <TIM_Base_SetConfig+0x120>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d017      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <TIM_Base_SetConfig+0x128>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <TIM_Base_SetConfig+0x12c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00f      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <TIM_Base_SetConfig+0x130>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <TIM_Base_SetConfig+0x134>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <TIM_Base_SetConfig+0x138>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d003      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <TIM_Base_SetConfig+0x13c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d108      	bne.n	8001f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d003      	beq.n	8001f90 <TIM_Base_SetConfig+0xf8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d103      	bne.n	8001f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	615a      	str	r2, [r3, #20]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40000800 	.word	0x40000800
 8001fb8:	40000c00 	.word	0x40000c00
 8001fbc:	40010400 	.word	0x40010400
 8001fc0:	40014000 	.word	0x40014000
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40014800 	.word	0x40014800
 8001fcc:	40001800 	.word	0x40001800
 8001fd0:	40001c00 	.word	0x40001c00
 8001fd4:	40002000 	.word	0x40002000

08001fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	f023 0201 	bic.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f023 0302 	bic.w	r3, r3, #2
 8002020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <TIM_OC1_SetConfig+0xd8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <TIM_OC1_SetConfig+0x64>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <TIM_OC1_SetConfig+0xdc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d10c      	bne.n	8002056 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f023 0308 	bic.w	r3, r3, #8
 8002042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <TIM_OC1_SetConfig+0xd8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d003      	beq.n	8002066 <TIM_OC1_SetConfig+0x8e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <TIM_OC1_SetConfig+0xdc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d111      	bne.n	800208a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800206c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	621a      	str	r2, [r3, #32]
}
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40010400 	.word	0x40010400

080020b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f023 0210 	bic.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f023 0320 	bic.w	r3, r3, #32
 8002102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a22      	ldr	r2, [pc, #136]	; (800219c <TIM_OC2_SetConfig+0xe4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <TIM_OC2_SetConfig+0x68>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <TIM_OC2_SetConfig+0xe8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d10d      	bne.n	800213c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800213a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a17      	ldr	r2, [pc, #92]	; (800219c <TIM_OC2_SetConfig+0xe4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d003      	beq.n	800214c <TIM_OC2_SetConfig+0x94>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <TIM_OC2_SetConfig+0xe8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d113      	bne.n	8002174 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800215a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	621a      	str	r2, [r3, #32]
}
 800218e:	bf00      	nop
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40010000 	.word	0x40010000
 80021a0:	40010400 	.word	0x40010400

080021a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0303 	bic.w	r3, r3, #3
 80021da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a21      	ldr	r2, [pc, #132]	; (8002284 <TIM_OC3_SetConfig+0xe0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <TIM_OC3_SetConfig+0x66>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <TIM_OC3_SetConfig+0xe4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10d      	bne.n	8002226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a16      	ldr	r2, [pc, #88]	; (8002284 <TIM_OC3_SetConfig+0xe0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d003      	beq.n	8002236 <TIM_OC3_SetConfig+0x92>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a15      	ldr	r2, [pc, #84]	; (8002288 <TIM_OC3_SetConfig+0xe4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d113      	bne.n	800225e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800223c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	621a      	str	r2, [r3, #32]
}
 8002278:	bf00      	nop
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40010000 	.word	0x40010000
 8002288:	40010400 	.word	0x40010400

0800228c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800228c:	b480      	push	{r7}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	031b      	lsls	r3, r3, #12
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a12      	ldr	r2, [pc, #72]	; (8002330 <TIM_OC4_SetConfig+0xa4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d003      	beq.n	80022f4 <TIM_OC4_SetConfig+0x68>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a11      	ldr	r2, [pc, #68]	; (8002334 <TIM_OC4_SetConfig+0xa8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d109      	bne.n	8002308 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	019b      	lsls	r3, r3, #6
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	621a      	str	r2, [r3, #32]
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40010000 	.word	0x40010000
 8002334:	40010400 	.word	0x40010400

08002338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	f023 0201 	bic.w	r2, r3, #1
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f023 030a 	bic.w	r3, r3, #10
 8002374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	621a      	str	r2, [r3, #32]
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002396:	b480      	push	{r7}
 8002398:	b087      	sub	sp, #28
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	f023 0210 	bic.w	r2, r3, #16
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	031b      	lsls	r3, r3, #12
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	621a      	str	r2, [r3, #32]
}
 80023ea:	bf00      	nop
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	f043 0307 	orr.w	r3, r3, #7
 8002418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	609a      	str	r2, [r3, #8]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	021a      	lsls	r2, r3, #8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	431a      	orrs	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	609a      	str	r2, [r3, #8]
}
 8002460:	bf00      	nop
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2201      	movs	r2, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1a      	ldr	r2, [r3, #32]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	43db      	mvns	r3, r3
 800248e:	401a      	ands	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	431a      	orrs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	621a      	str	r2, [r3, #32]
}
 80024aa:	bf00      	nop
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e05a      	b.n	8002586 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a21      	ldr	r2, [pc, #132]	; (8002594 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d022      	beq.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251c:	d01d      	beq.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d018      	beq.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1b      	ldr	r2, [pc, #108]	; (800259c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a1a      	ldr	r2, [pc, #104]	; (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d00e      	beq.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a18      	ldr	r2, [pc, #96]	; (80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d009      	beq.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d004      	beq.n	800255a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a15      	ldr	r2, [pc, #84]	; (80025ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10c      	bne.n	8002574 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4313      	orrs	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40010000 	.word	0x40010000
 8002598:	40000400 	.word	0x40000400
 800259c:	40000800 	.word	0x40000800
 80025a0:	40000c00 	.word	0x40000c00
 80025a4:	40010400 	.word	0x40010400
 80025a8:	40014000 	.word	0x40014000
 80025ac:	40001800 	.word	0x40001800

080025b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <NMI_Handler+0x4>

080025b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ba:	e7fe      	b.n	80025ba <HardFault_Handler+0x4>

080025bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <MemManage_Handler+0x4>

080025c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <BusFault_Handler+0x4>

080025c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <UsageFault_Handler+0x4>

080025ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025fc:	f7fe f8dc 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}

08002604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <SystemInit+0x20>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <SystemInit+0x20>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08e      	sub	sp, #56	; 0x38
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800262e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263c:	f107 0320 	add.w	r3, r7, #32
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
 8002654:	615a      	str	r2, [r3, #20]
 8002656:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002658:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <MX_TIM2_Init+0x128>)
 800265a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800265e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002660:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <MX_TIM2_Init+0x128>)
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <MX_TIM2_Init+0x128>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 800266c:	4b38      	ldr	r3, [pc, #224]	; (8002750 <MX_TIM2_Init+0x128>)
 800266e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002672:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <MX_TIM2_Init+0x128>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <MX_TIM2_Init+0x128>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002680:	4833      	ldr	r0, [pc, #204]	; (8002750 <MX_TIM2_Init+0x128>)
 8002682:	f7ff f90f 	bl	80018a4 <HAL_TIM_Base_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800268c:	f7fe f83c 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269a:	4619      	mov	r1, r3
 800269c:	482c      	ldr	r0, [pc, #176]	; (8002750 <MX_TIM2_Init+0x128>)
 800269e:	f7ff fb33 	bl	8001d08 <HAL_TIM_ConfigClockSource>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80026a8:	f7fe f82e 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026ac:	4828      	ldr	r0, [pc, #160]	; (8002750 <MX_TIM2_Init+0x128>)
 80026ae:	f7ff f948 	bl	8001942 <HAL_TIM_PWM_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80026b8:	f7fe f826 	bl	8000708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026c4:	f107 0320 	add.w	r3, r7, #32
 80026c8:	4619      	mov	r1, r3
 80026ca:	4821      	ldr	r0, [pc, #132]	; (8002750 <MX_TIM2_Init+0x128>)
 80026cc:	f7ff fef4 	bl	80024b8 <HAL_TIMEx_MasterConfigSynchronization>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80026d6:	f7fe f817 	bl	8000708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026da:	2360      	movs	r3, #96	; 0x60
 80026dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	4619      	mov	r1, r3
 80026f0:	4817      	ldr	r0, [pc, #92]	; (8002750 <MX_TIM2_Init+0x128>)
 80026f2:	f7ff fa47 	bl	8001b84 <HAL_TIM_PWM_ConfigChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80026fc:	f7fe f804 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2204      	movs	r2, #4
 8002704:	4619      	mov	r1, r3
 8002706:	4812      	ldr	r0, [pc, #72]	; (8002750 <MX_TIM2_Init+0x128>)
 8002708:	f7ff fa3c 	bl	8001b84 <HAL_TIM_PWM_ConfigChannel>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002712:	f7fd fff9 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2208      	movs	r2, #8
 800271a:	4619      	mov	r1, r3
 800271c:	480c      	ldr	r0, [pc, #48]	; (8002750 <MX_TIM2_Init+0x128>)
 800271e:	f7ff fa31 	bl	8001b84 <HAL_TIM_PWM_ConfigChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002728:	f7fd ffee 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	220c      	movs	r2, #12
 8002730:	4619      	mov	r1, r3
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <MX_TIM2_Init+0x128>)
 8002734:	f7ff fa26 	bl	8001b84 <HAL_TIM_PWM_ConfigChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800273e:	f7fd ffe3 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002742:	4803      	ldr	r0, [pc, #12]	; (8002750 <MX_TIM2_Init+0x128>)
 8002744:	f000 f8aa 	bl	800289c <HAL_TIM_MspPostInit>

}
 8002748:	bf00      	nop
 800274a:	3738      	adds	r7, #56	; 0x38
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	2000002c 	.word	0x2000002c

08002754 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	; 0x30
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275a:	f107 0320 	add.w	r3, r7, #32
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	615a      	str	r2, [r3, #20]
 8002778:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <MX_TIM12_Init+0xd4>)
 800277c:	4a2b      	ldr	r2, [pc, #172]	; (800282c <MX_TIM12_Init+0xd8>)
 800277e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <MX_TIM12_Init+0xd4>)
 8002782:	2200      	movs	r2, #0
 8002784:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002786:	4b28      	ldr	r3, [pc, #160]	; (8002828 <MX_TIM12_Init+0xd4>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65536-1;
 800278c:	4b26      	ldr	r3, [pc, #152]	; (8002828 <MX_TIM12_Init+0xd4>)
 800278e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002792:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002794:	4b24      	ldr	r3, [pc, #144]	; (8002828 <MX_TIM12_Init+0xd4>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279a:	4b23      	ldr	r3, [pc, #140]	; (8002828 <MX_TIM12_Init+0xd4>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80027a0:	4821      	ldr	r0, [pc, #132]	; (8002828 <MX_TIM12_Init+0xd4>)
 80027a2:	f7ff f87f 	bl	80018a4 <HAL_TIM_Base_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80027ac:	f7fd ffac 	bl	8000708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80027b6:	f107 0320 	add.w	r3, r7, #32
 80027ba:	4619      	mov	r1, r3
 80027bc:	481a      	ldr	r0, [pc, #104]	; (8002828 <MX_TIM12_Init+0xd4>)
 80027be:	f7ff faa3 	bl	8001d08 <HAL_TIM_ConfigClockSource>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80027c8:	f7fd ff9e 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80027cc:	4816      	ldr	r0, [pc, #88]	; (8002828 <MX_TIM12_Init+0xd4>)
 80027ce:	f7ff f8b8 	bl	8001942 <HAL_TIM_PWM_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80027d8:	f7fd ff96 	bl	8000708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027dc:	2360      	movs	r3, #96	; 0x60
 80027de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	2200      	movs	r2, #0
 80027f0:	4619      	mov	r1, r3
 80027f2:	480d      	ldr	r0, [pc, #52]	; (8002828 <MX_TIM12_Init+0xd4>)
 80027f4:	f7ff f9c6 	bl	8001b84 <HAL_TIM_PWM_ConfigChannel>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80027fe:	f7fd ff83 	bl	8000708 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	2204      	movs	r2, #4
 8002806:	4619      	mov	r1, r3
 8002808:	4807      	ldr	r0, [pc, #28]	; (8002828 <MX_TIM12_Init+0xd4>)
 800280a:	f7ff f9bb 	bl	8001b84 <HAL_TIM_PWM_ConfigChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM12_Init+0xc4>
  {
    Error_Handler();
 8002814:	f7fd ff78 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002818:	4803      	ldr	r0, [pc, #12]	; (8002828 <MX_TIM12_Init+0xd4>)
 800281a:	f000 f83f 	bl	800289c <HAL_TIM_MspPostInit>

}
 800281e:	bf00      	nop
 8002820:	3730      	adds	r7, #48	; 0x30
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000074 	.word	0x20000074
 800282c:	40001800 	.word	0x40001800

08002830 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <HAL_TIM_Base_MspInit+0x64>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_TIM_Base_MspInit+0x64>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_TIM_Base_MspInit+0x64>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800285e:	e012      	b.n	8002886 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM12)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <HAL_TIM_Base_MspInit+0x68>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10d      	bne.n	8002886 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_TIM_Base_MspInit+0x64>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_TIM_Base_MspInit+0x64>)
 8002874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_TIM_Base_MspInit+0x64>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	40001800 	.word	0x40001800

0800289c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d13d      	bne.n	800293a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_TIM_MspPostInit+0xf0>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a31      	ldr	r2, [pc, #196]	; (800298c <HAL_TIM_MspPostInit+0xf0>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_TIM_MspPostInit+0xf0>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_TIM_MspPostInit+0xf0>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a2a      	ldr	r2, [pc, #168]	; (800298c <HAL_TIM_MspPostInit+0xf0>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_TIM_MspPostInit+0xf0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80028f6:	2322      	movs	r3, #34	; 0x22
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002906:	2301      	movs	r3, #1
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	481f      	ldr	r0, [pc, #124]	; (8002990 <HAL_TIM_MspPostInit+0xf4>)
 8002912:	f7fe f857 	bl	80009c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8002916:	f240 4304 	movw	r3, #1028	; 0x404
 800291a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002928:	2301      	movs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4619      	mov	r1, r3
 8002932:	4818      	ldr	r0, [pc, #96]	; (8002994 <HAL_TIM_MspPostInit+0xf8>)
 8002934:	f7fe f846 	bl	80009c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002938:	e023      	b.n	8002982 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM12)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <HAL_TIM_MspPostInit+0xfc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d11e      	bne.n	8002982 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_TIM_MspPostInit+0xf0>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	4a0f      	ldr	r2, [pc, #60]	; (800298c <HAL_TIM_MspPostInit+0xf0>)
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	6313      	str	r3, [r2, #48]	; 0x30
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_TIM_MspPostInit+0xf0>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002960:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002972:	2309      	movs	r3, #9
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <HAL_TIM_MspPostInit+0xf8>)
 800297e:	f7fe f821 	bl	80009c4 <HAL_GPIO_Init>
}
 8002982:	bf00      	nop
 8002984:	3728      	adds	r7, #40	; 0x28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	40020000 	.word	0x40020000
 8002994:	40020400 	.word	0x40020400
 8002998:	40001800 	.word	0x40001800

0800299c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800299c:	480d      	ldr	r0, [pc, #52]	; (80029d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800299e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029a0:	f7ff fe30 	bl	8002604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80029a6:	490d      	ldr	r1, [pc, #52]	; (80029dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <LoopForever+0xe>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ac:	e002      	b.n	80029b4 <LoopCopyDataInit>

080029ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b2:	3304      	adds	r3, #4

080029b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b8:	d3f9      	bcc.n	80029ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029bc:	4c0a      	ldr	r4, [pc, #40]	; (80029e8 <LoopForever+0x16>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c0:	e001      	b.n	80029c6 <LoopFillZerobss>

080029c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c4:	3204      	adds	r2, #4

080029c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c8:	d3fb      	bcc.n	80029c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029ca:	f000 f811 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ce:	f7fd fe07 	bl	80005e0 <main>

080029d2 <LoopForever>:

LoopForever:
  b LoopForever
 80029d2:	e7fe      	b.n	80029d2 <LoopForever>
  ldr   r0, =_estack
 80029d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80029e0:	08002a80 	.word	0x08002a80
  ldr r2, =_sbss
 80029e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80029e8:	200000bc 	.word	0x200000bc

080029ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC_IRQHandler>
	...

080029f0 <__libc_init_array>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	4d0d      	ldr	r5, [pc, #52]	; (8002a28 <__libc_init_array+0x38>)
 80029f4:	4c0d      	ldr	r4, [pc, #52]	; (8002a2c <__libc_init_array+0x3c>)
 80029f6:	1b64      	subs	r4, r4, r5
 80029f8:	10a4      	asrs	r4, r4, #2
 80029fa:	2600      	movs	r6, #0
 80029fc:	42a6      	cmp	r6, r4
 80029fe:	d109      	bne.n	8002a14 <__libc_init_array+0x24>
 8002a00:	4d0b      	ldr	r5, [pc, #44]	; (8002a30 <__libc_init_array+0x40>)
 8002a02:	4c0c      	ldr	r4, [pc, #48]	; (8002a34 <__libc_init_array+0x44>)
 8002a04:	f000 f820 	bl	8002a48 <_init>
 8002a08:	1b64      	subs	r4, r4, r5
 8002a0a:	10a4      	asrs	r4, r4, #2
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	42a6      	cmp	r6, r4
 8002a10:	d105      	bne.n	8002a1e <__libc_init_array+0x2e>
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a18:	4798      	blx	r3
 8002a1a:	3601      	adds	r6, #1
 8002a1c:	e7ee      	b.n	80029fc <__libc_init_array+0xc>
 8002a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a22:	4798      	blx	r3
 8002a24:	3601      	adds	r6, #1
 8002a26:	e7f2      	b.n	8002a0e <__libc_init_array+0x1e>
 8002a28:	08002a78 	.word	0x08002a78
 8002a2c:	08002a78 	.word	0x08002a78
 8002a30:	08002a78 	.word	0x08002a78
 8002a34:	08002a7c 	.word	0x08002a7c

08002a38 <memset>:
 8002a38:	4402      	add	r2, r0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	f803 1b01 	strb.w	r1, [r3], #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <_init>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr

08002a54 <_fini>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr
