
Session9_f103_firstproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000310  08000318  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000310  08000310  00010318  2**0
                  CONTENTS
  4 .ARM          00000000  08000310  08000310  00010318  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000310  08000318  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000310  08000310  00010310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000318  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000318  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000370  00000000  00000000  00010341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001c5  00000000  00000000  000106b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  000108f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000010ce  00000000  00000000  00010940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000864  00000000  00000000  00011a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004042  00000000  00000000  00012272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000162b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e4  00000000  00000000  00016304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002f8 	.word	0x080002f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002f8 	.word	0x080002f8

08000170 <SysTick_u8ClkInit>:
 * @param[in]	Copy_u8ClkSource  : you can see @SysTick_ClkSrc_T
 * @param[in]	Copy_u8PreLoadVal : the preload value
 *	retval 		ErrorStatus
 * */
uint8_t SysTick_u8ClkInit(SysTick_ClkSrc_T Copy_u8ClkSource , uint32_t Copy_u8PreLoadVal)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	6039      	str	r1, [r7, #0]
 800017a:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = OK;
 800017c:	2301      	movs	r3, #1
 800017e:	73fb      	strb	r3, [r7, #15]

	/*1. Set Preload value*/
	SYSTICK->RVR &= ~(SYST_PRELOAD_MASK);
 8000180:	4b16      	ldr	r3, [pc, #88]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a15      	ldr	r2, [pc, #84]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 8000186:	0c1b      	lsrs	r3, r3, #16
 8000188:	041b      	lsls	r3, r3, #16
 800018a:	6053      	str	r3, [r2, #4]
	SYSTICK->RVR |= Copy_u8PreLoadVal;
 800018c:	4b13      	ldr	r3, [pc, #76]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 800018e:	685a      	ldr	r2, [r3, #4]
 8000190:	4912      	ldr	r1, [pc, #72]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 8000192:	683b      	ldr	r3, [r7, #0]
 8000194:	4313      	orrs	r3, r2
 8000196:	604b      	str	r3, [r1, #4]

	/*2. Set Clk Source*/
	SYSTICK->CSR &= ~(SYST_CLKSRC_MASK << SYST_CLKSRC_SHIFT);
 8000198:	4b10      	ldr	r3, [pc, #64]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a0f      	ldr	r2, [pc, #60]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 800019e:	f023 0304 	bic.w	r3, r3, #4
 80001a2:	6013      	str	r3, [r2, #0]
	SYSTICK->CSR |= ~(Copy_u8ClkSource << SYST_CLKSRC_SHIFT);
 80001a4:	4b0d      	ldr	r3, [pc, #52]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	79fa      	ldrb	r2, [r7, #7]
 80001aa:	0092      	lsls	r2, r2, #2
 80001ac:	43d2      	mvns	r2, r2
 80001ae:	4611      	mov	r1, r2
 80001b0:	4a0a      	ldr	r2, [pc, #40]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 80001b2:	430b      	orrs	r3, r1
 80001b4:	6013      	str	r3, [r2, #0]



	/*3. Enable Timer*/
	SYSTICK->CSR &= ~(SYST_ENABLE_MASK);
 80001b6:	4b09      	ldr	r3, [pc, #36]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a08      	ldr	r2, [pc, #32]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 80001bc:	f023 0301 	bic.w	r3, r3, #1
 80001c0:	6013      	str	r3, [r2, #0]
	SYSTICK->CSR |= ENABLE;
 80001c2:	4b06      	ldr	r3, [pc, #24]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a05      	ldr	r2, [pc, #20]	; (80001dc <SysTick_u8ClkInit+0x6c>)
 80001c8:	f043 0301 	orr.w	r3, r3, #1
 80001cc:	6013      	str	r3, [r2, #0]

	return Local_u8ErrorState;
 80001ce:	7bfb      	ldrb	r3, [r7, #15]

}
 80001d0:	4618      	mov	r0, r3
 80001d2:	3714      	adds	r7, #20
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	e000e010 	.word	0xe000e010

080001e0 <SysTick_u8ClkControl>:
/*	@brief		SysTick_u8ClkControl : control the timer by input configuration (Enable/Disable)
 * @param[in]	Copy_u8Control : you can see @SysTick_Control_T
 *	retval 		ErrorStatus
 * */
uint8_t SysTick_u8ClkControl(SysTick_Control_T Copy_u8Control)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = OK;
 80001ea:	2301      	movs	r3, #1
 80001ec:	73fb      	strb	r3, [r7, #15]

	SYSTICK->CSR &= ~(SYST_ENABLE_MASK);
 80001ee:	4b09      	ldr	r3, [pc, #36]	; (8000214 <SysTick_u8ClkControl+0x34>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a08      	ldr	r2, [pc, #32]	; (8000214 <SysTick_u8ClkControl+0x34>)
 80001f4:	f023 0301 	bic.w	r3, r3, #1
 80001f8:	6013      	str	r3, [r2, #0]
	SYSTICK->CSR |= Copy_u8Control;
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <SysTick_u8ClkControl+0x34>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	4904      	ldr	r1, [pc, #16]	; (8000214 <SysTick_u8ClkControl+0x34>)
 8000202:	4313      	orrs	r3, r2
 8000204:	600b      	str	r3, [r1, #0]

	return Local_u8ErrorState;
 8000206:	7bfb      	ldrb	r3, [r7, #15]

}
 8000208:	4618      	mov	r0, r3
 800020a:	3714      	adds	r7, #20
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <SysTick_u8ReadClkValue>:
/*	@brief		SysTick_u8ReadClkValue : control the timer by input configuration (Enable/Disable)
 * @param[out]	Copy_u32Val : the Timer value  will be assigned in the variable
 *	retval 		ErrorStatus
 * */
uint8_t SysTick_u8ReadClkValue(uint32_t *Copy_u32Val)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 8000220:	2301      	movs	r3, #1
 8000222:	73fb      	strb	r3, [r7, #15]

	*Copy_u32Val = SYSTICK->CVR;
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <SysTick_u8ReadClkValue+0x20>)
 8000226:	689a      	ldr	r2, [r3, #8]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]

	return Local_u8ErrorState;
 800022c:	7bfb      	ldrb	r3, [r7, #15]
}
 800022e:	4618      	mov	r0, r3
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	e000e010 	.word	0xe000e010

0800023c <main>:
#include <stdint.h>

#include "../Inc/SysTick_interface.h"

int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	uint32_t Val;

	SysTick_u8ClkInit(AHB_DIV_8M, 6500);
 8000242:	f641 1164 	movw	r1, #6500	; 0x1964
 8000246:	2000      	movs	r0, #0
 8000248:	f7ff ff92 	bl	8000170 <SysTick_u8ClkInit>

	SysTick_u8ReadClkValue(&Val);
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f7ff ffe2 	bl	8000218 <SysTick_u8ReadClkValue>

	SysTick_u8ClkControl(DISABLE);
 8000254:	2000      	movs	r0, #0
 8000256:	f7ff ffc3 	bl	80001e0 <SysTick_u8ClkControl>
    /* Loop forever */
	for(;;);
 800025a:	e7fe      	b.n	800025a <main+0x1e>

0800025c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000260:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <LoopForever+0x6>)
  ldr r1, =_edata
 8000266:	490d      	ldr	r1, [pc, #52]	; (800029c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000268:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <LoopForever+0xe>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800026c:	e002      	b.n	8000274 <LoopCopyDataInit>

0800026e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000272:	3304      	adds	r3, #4

08000274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000278:	d3f9      	bcc.n	800026e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027a:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800027c:	4c0a      	ldr	r4, [pc, #40]	; (80002a8 <LoopForever+0x16>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000280:	e001      	b.n	8000286 <LoopFillZerobss>

08000282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000284:	3204      	adds	r2, #4

08000286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000288:	d3fb      	bcc.n	8000282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028a:	f000 f811 	bl	80002b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028e:	f7ff ffd5 	bl	800023c <main>

08000292 <LoopForever>:

LoopForever:
  b LoopForever
 8000292:	e7fe      	b.n	8000292 <LoopForever>
  ldr   r0, =_estack
 8000294:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800029c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a0:	08000318 	.word	0x08000318
  ldr r2, =_sbss
 80002a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a8:	2000001c 	.word	0x2000001c

080002ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC1_2_IRQHandler>
	...

080002b0 <__libc_init_array>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	2600      	movs	r6, #0
 80002b4:	4d0c      	ldr	r5, [pc, #48]	; (80002e8 <__libc_init_array+0x38>)
 80002b6:	4c0d      	ldr	r4, [pc, #52]	; (80002ec <__libc_init_array+0x3c>)
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	10a4      	asrs	r4, r4, #2
 80002bc:	42a6      	cmp	r6, r4
 80002be:	d109      	bne.n	80002d4 <__libc_init_array+0x24>
 80002c0:	f000 f81a 	bl	80002f8 <_init>
 80002c4:	2600      	movs	r6, #0
 80002c6:	4d0a      	ldr	r5, [pc, #40]	; (80002f0 <__libc_init_array+0x40>)
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <__libc_init_array+0x44>)
 80002ca:	1b64      	subs	r4, r4, r5
 80002cc:	10a4      	asrs	r4, r4, #2
 80002ce:	42a6      	cmp	r6, r4
 80002d0:	d105      	bne.n	80002de <__libc_init_array+0x2e>
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d8:	4798      	blx	r3
 80002da:	3601      	adds	r6, #1
 80002dc:	e7ee      	b.n	80002bc <__libc_init_array+0xc>
 80002de:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e2:	4798      	blx	r3
 80002e4:	3601      	adds	r6, #1
 80002e6:	e7f2      	b.n	80002ce <__libc_init_array+0x1e>
 80002e8:	08000310 	.word	0x08000310
 80002ec:	08000310 	.word	0x08000310
 80002f0:	08000310 	.word	0x08000310
 80002f4:	08000314 	.word	0x08000314

080002f8 <_init>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr

08000304 <_fini>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr
