
embedded_and_ai2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007814  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003334  08007a00  08007a00  00017a00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad34  0800ad34  000205b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad34  0800ad34  0001ad34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad3c  0800ad3c  000205b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad3c  0800ad3c  0001ad3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad40  0800ad40  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  20000000  0800ad44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a44  200005c0  0800b2fc  000205c0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20001004  0800b2fc  00021004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bd9  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366f  00000000  00000000  000361c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00039830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  0003a8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b38  00000000  00000000  0003b810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191da  00000000  00000000  00062348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9f8f  00000000  00000000  0007b522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001654b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d4  00000000  00000000  00165504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000014d  00000000  00000000  00169dd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005c0 	.word	0x200005c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079cc 	.word	0x080079cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200005c4 	.word	0x200005c4
 800020c:	080079cc 	.word	0x080079cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Mapping>:

#include <stdint.h>
#include "MAPPING.h"

int32_t Mapping(int32_t Copy_int32_InputMin,int32_t Copy_int32_InputMax,int32_t Copy_int32_OutputMin,int32_t Copy_int32_OutputMax,int32_t Copy_int32BiasValue,int32_t Copy_int32_InputValue)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
	int32_t Local_int32_MappedValue;
	Local_int32_MappedValue = (((Copy_int32_InputValue - Copy_int32_InputMin)*(Copy_int32_OutputMax - Copy_int32_OutputMin))/(Copy_int32_InputMax - Copy_int32_InputMin)) + Copy_int32_InputMin + Copy_int32BiasValue;
 80005d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	6839      	ldr	r1, [r7, #0]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	1a8a      	subs	r2, r1, r2
 80005de:	fb03 f202 	mul.w	r2, r3, r2
 80005e2:	68b9      	ldr	r1, [r7, #8]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	1acb      	subs	r3, r1, r3
 80005e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	6a3a      	ldr	r2, [r7, #32]
 80005f2:	4413      	add	r3, r2
 80005f4:	617b      	str	r3, [r7, #20]

	return Local_int32_MappedValue;
 80005f6:	697b      	ldr	r3, [r7, #20]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <PWM_int32SetPWMValue>:
#include <stdint.h>
#include "PWM.h"


int8_t PWM_int32SetPWMValue(TIM_TypeDef *htim,int32_t Copy_int32Channel,int32_t Copy_int32Value)
{
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
	int8_t Local_int8ErrorState = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	75fb      	strb	r3, [r7, #23]

	if (htim == TIM2)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800061a:	d136      	bne.n	800068a <PWM_int32SetPWMValue+0x86>
	{
		switch(Copy_int32Channel)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b0c      	cmp	r3, #12
 8000620:	d830      	bhi.n	8000684 <PWM_int32SetPWMValue+0x80>
 8000622:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <PWM_int32SetPWMValue+0x24>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	0800065d 	.word	0x0800065d
 800062c:	08000685 	.word	0x08000685
 8000630:	08000685 	.word	0x08000685
 8000634:	08000685 	.word	0x08000685
 8000638:	08000667 	.word	0x08000667
 800063c:	08000685 	.word	0x08000685
 8000640:	08000685 	.word	0x08000685
 8000644:	08000685 	.word	0x08000685
 8000648:	08000671 	.word	0x08000671
 800064c:	08000685 	.word	0x08000685
 8000650:	08000685 	.word	0x08000685
 8000654:	08000685 	.word	0x08000685
 8000658:	0800067b 	.word	0x0800067b
		{
		case TIM_CHANNEL_1 : TIM2->CCR1 = Copy_int32Value; break;
 800065c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6353      	str	r3, [r2, #52]	; 0x34
 8000664:	e028      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		case TIM_CHANNEL_2 : TIM2->CCR2 = Copy_int32Value; break;
 8000666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6393      	str	r3, [r2, #56]	; 0x38
 800066e:	e023      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		case TIM_CHANNEL_3 : TIM2->CCR3 = Copy_int32Value; break;
 8000670:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000678:	e01e      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		case TIM_CHANNEL_4 : TIM2->CCR4 = Copy_int32Value; break;
 800067a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	e019      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		default : Local_int8ErrorState = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	75fb      	strb	r3, [r7, #23]
 8000688:	e016      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		}
	}

	else if (htim == TIM12)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <PWM_int32SetPWMValue+0xc4>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d111      	bne.n	80006b6 <PWM_int32SetPWMValue+0xb2>
	{
		switch(Copy_int32Channel)
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d003      	beq.n	80006a0 <PWM_int32SetPWMValue+0x9c>
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	2b04      	cmp	r3, #4
 800069c:	d004      	beq.n	80006a8 <PWM_int32SetPWMValue+0xa4>
 800069e:	e007      	b.n	80006b0 <PWM_int32SetPWMValue+0xac>
		{
		case TIM_CHANNEL_1 : TIM12->CCR1 = Copy_int32Value; break;
 80006a0:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <PWM_int32SetPWMValue+0xc4>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6353      	str	r3, [r2, #52]	; 0x34
 80006a6:	e007      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		case TIM_CHANNEL_2 : TIM12->CCR2 = Copy_int32Value; break;
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <PWM_int32SetPWMValue+0xc4>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6393      	str	r3, [r2, #56]	; 0x38
 80006ae:	e003      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		default : Local_int8ErrorState = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	75fb      	strb	r3, [r7, #23]
 80006b4:	e000      	b.n	80006b8 <PWM_int32SetPWMValue+0xb4>
		}
	}
 80006b6:	bf00      	nop

	return Local_int8ErrorState;
 80006b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	371c      	adds	r7, #28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40001800 	.word	0x40001800

080006cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006de:	4b21      	ldr	r3, [pc, #132]	; (8000764 <MX_ADC1_Init+0x98>)
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <MX_ADC1_Init+0x9c>)
 80006e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <MX_ADC1_Init+0x98>)
 80006e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_ADC1_Init+0x98>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_ADC1_Init+0x98>)
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <MX_ADC1_Init+0xa0>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_ADC1_Init+0x98>)
 8000728:	2201      	movs	r2, #1
 800072a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_ADC1_Init+0x98>)
 800072e:	f001 f903 	bl	8001938 <HAL_ADC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000738:	f000 fbb6 	bl	8000ea8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000740:	2301      	movs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_ADC1_Init+0x98>)
 800074e:	f001 fbcf 	bl	8001ef0 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000758:	f000 fba6 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200005dc 	.word	0x200005dc
 8000768:	40012000 	.word	0x40012000
 800076c:	0f000001 	.word	0x0f000001

08000770 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_ADC2_Init+0x98>)
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <MX_ADC2_Init+0x9c>)
 8000786:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <MX_ADC2_Init+0x98>)
 800078a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800078e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_ADC2_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_ADC2_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_ADC2_Init+0x98>)
 800079e:	2201      	movs	r2, #1
 80007a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_ADC2_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_ADC2_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_ADC2_Init+0x98>)
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <MX_ADC2_Init+0xa0>)
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_ADC2_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_ADC2_Init+0x98>)
 80007be:	2201      	movs	r2, #1
 80007c0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_ADC2_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_ADC2_Init+0x98>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_ADC2_Init+0x98>)
 80007d2:	f001 f8b1 	bl	8001938 <HAL_ADC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80007dc:	f000 fb64 	bl	8000ea8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_ADC2_Init+0x98>)
 80007f2:	f001 fb7d 	bl	8001ef0 <HAL_ADC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80007fc:	f000 fb54 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000624 	.word	0x20000624
 800080c:	40012100 	.word	0x40012100
 8000810:	0f000001 	.word	0x0f000001

08000814 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_ADC3_Init+0x98>)
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <MX_ADC3_Init+0x9c>)
 800082a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_ADC3_Init+0x98>)
 800082e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000832:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_ADC3_Init+0x98>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_ADC3_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_ADC3_Init+0x98>)
 8000842:	2201      	movs	r2, #1
 8000844:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_ADC3_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_ADC3_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_ADC3_Init+0x98>)
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_ADC3_Init+0xa0>)
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_ADC3_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_ADC3_Init+0x98>)
 8000862:	2201      	movs	r2, #1
 8000864:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_ADC3_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_ADC3_Init+0x98>)
 8000870:	2201      	movs	r2, #1
 8000872:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_ADC3_Init+0x98>)
 8000876:	f001 f85f 	bl	8001938 <HAL_ADC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 fb12 	bl	8000ea8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000884:	230a      	movs	r3, #10
 8000886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_ADC3_Init+0x98>)
 8000896:	f001 fb2b 	bl	8001ef0 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80008a0:	f000 fb02 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000066c 	.word	0x2000066c
 80008b0:	40012200 	.word	0x40012200
 80008b4:	0f000001 	.word	0x0f000001

080008b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a51      	ldr	r2, [pc, #324]	; (8000a1c <HAL_ADC_MspInit+0x164>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d130      	bne.n	800093c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
 80008de:	4b50      	ldr	r3, [pc, #320]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a4f      	ldr	r2, [pc, #316]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 80008e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b4d      	ldr	r3, [pc, #308]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008f2:	623b      	str	r3, [r7, #32]
 80008f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
 80008fa:	4b49      	ldr	r3, [pc, #292]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a48      	ldr	r2, [pc, #288]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b46      	ldr	r3, [pc, #280]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000912:	2301      	movs	r3, #1
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000916:	2303      	movs	r3, #3
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	483f      	ldr	r0, [pc, #252]	; (8000a24 <HAL_ADC_MspInit+0x16c>)
 8000926:	f001 fe55 	bl	80025d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2012      	movs	r0, #18
 8000930:	f001 fdfd 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000934:	2012      	movs	r0, #18
 8000936:	f001 fe16 	bl	8002566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800093a:	e06a      	b.n	8000a12 <HAL_ADC_MspInit+0x15a>
  else if(adcHandle->Instance==ADC2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a39      	ldr	r2, [pc, #228]	; (8000a28 <HAL_ADC_MspInit+0x170>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d130      	bne.n	80009a8 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a34      	ldr	r2, [pc, #208]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 8000950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a2d      	ldr	r2, [pc, #180]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800097e:	2302      	movs	r3, #2
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4824      	ldr	r0, [pc, #144]	; (8000a24 <HAL_ADC_MspInit+0x16c>)
 8000992:	f001 fe1f 	bl	80025d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2012      	movs	r0, #18
 800099c:	f001 fdc7 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009a0:	2012      	movs	r0, #18
 80009a2:	f001 fde0 	bl	8002566 <HAL_NVIC_EnableIRQ>
}
 80009a6:	e034      	b.n	8000a12 <HAL_ADC_MspInit+0x15a>
  else if(adcHandle->Instance==ADC3)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <HAL_ADC_MspInit+0x174>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12f      	bne.n	8000a12 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 80009bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_ADC_MspInit+0x168>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ea:	2301      	movs	r3, #1
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ee:	2303      	movs	r3, #3
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <HAL_ADC_MspInit+0x178>)
 80009fe:	f001 fde9 	bl	80025d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2012      	movs	r0, #18
 8000a08:	f001 fd91 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a0c:	2012      	movs	r0, #18
 8000a0e:	f001 fdaa 	bl	8002566 <HAL_NVIC_EnableIRQ>
}
 8000a12:	bf00      	nop
 8000a14:	3738      	adds	r7, #56	; 0x38
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40012000 	.word	0x40012000
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40012100 	.word	0x40012100
 8000a2c:	40012200 	.word	0x40012200
 8000a30:	40020800 	.word	0x40020800

08000a34 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_CRC_Init+0x20>)
 8000a3a:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <MX_CRC_Init+0x24>)
 8000a3c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_CRC_Init+0x20>)
 8000a40:	f001 fdab 	bl	800259a <HAL_CRC_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a4a:	f000 fa2d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200006b4 	.word	0x200006b4
 8000a58:	40023000 	.word	0x40023000

08000a5c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <HAL_CRC_MspInit+0x3c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d10d      	bne.n	8000a8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_CRC_MspInit+0x40>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <HAL_CRC_MspInit+0x40>)
 8000a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_CRC_MspInit+0x40>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023000 	.word	0x40023000
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a2c      	ldr	r2, [pc, #176]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b2c:	f001 fee6 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <MX_GPIO_Init+0xd8>)
 8000b48:	f001 fd44 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <MX_GPIO_Init+0xd4>)
 8000b64:	f001 fd36 	bl	80025d4 <HAL_GPIO_Init>

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020800 	.word	0x40020800

08000b7c <Model_Init>:

static ai_buffer *ai_input;
static ai_buffer *ai_output;

int Model_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	ai_error err;
	const ai_handle acts[] = { activations };
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <Model_Init+0x48>)
 8000b84:	603b      	str	r3, [r7, #0]
	err = ai_network_create_and_init(&network, acts, NULL);
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <Model_Init+0x4c>)
 8000b8e:	f004 f971 	bl	8004e74 <ai_network_create_and_init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	607b      	str	r3, [r7, #4]

	ai_input = ai_network_inputs_get(network, NULL);
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <Model_Init+0x4c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 f9dd 	bl	8004f5c <ai_network_inputs_get>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <Model_Init+0x50>)
 8000ba6:	6013      	str	r3, [r2, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <Model_Init+0x4c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f004 f9ee 	bl	8004f90 <ai_network_outputs_get>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <Model_Init+0x54>)
 8000bb8:	6013      	str	r3, [r2, #0]

	return 0;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200006e0 	.word	0x200006e0
 8000bc8:	200006c0 	.word	0x200006c0
 8000bcc:	20000d64 	.word	0x20000d64
 8000bd0:	20000d68 	.word	0x20000d68

08000bd4 <Model_Run>:

int Model_Run(const void *in_data, void *out_data)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	ai_i32 n_batch;
	ai_error err;

	/* 1 - Update IO handlers with the data payload */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <Model_Run+0x4c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <Model_Run+0x50>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	605a      	str	r2, [r3, #4]

	/* 2 - Perform the inference */
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <Model_Run+0x54>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <Model_Run+0x4c>)
 8000bf4:	6811      	ldr	r1, [r2, #0]
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <Model_Run+0x50>)
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fa1e 	bl	800503c <ai_network_run>
 8000c00:	60f8      	str	r0, [r7, #12]
	if (n_batch != 1) {
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d006      	beq.n	8000c16 <Model_Run+0x42>
		err = ai_network_get_error(network);
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <Model_Run+0x54>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 f90f 	bl	8004e30 <ai_network_get_error>
 8000c12:	4603      	mov	r3, r0
 8000c14:	60bb      	str	r3, [r7, #8]
	};

	return 0;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000d64 	.word	0x20000d64
 8000c24:	20000d68 	.word	0x20000d68
 8000c28:	200006c0 	.word	0x200006c0

08000c2c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2e:	b0f1      	sub	sp, #452	; 0x1c4
 8000c30:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c32:	f000 fdeb 	bl	800180c <HAL_Init>

	/* USER CODE BEGIN Init */
	Model_Init();
 8000c36:	f7ff ffa1 	bl	8000b7c <Model_Init>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c3a:	f000 f8c3 	bl	8000dc4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c3e:	f7ff ff2f 	bl	8000aa0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c42:	f000 fd47 	bl	80016d4 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000c46:	f7ff fd41 	bl	80006cc <MX_ADC1_Init>
	MX_ADC2_Init();
 8000c4a:	f7ff fd91 	bl	8000770 <MX_ADC2_Init>
	MX_ADC3_Init();
 8000c4e:	f7ff fde1 	bl	8000814 <MX_ADC3_Init>
	MX_CRC_Init();
 8000c52:	f7ff feef 	bl	8000a34 <MX_CRC_Init>
	MX_TIM2_Init();
 8000c56:	f000 fa89 	bl	800116c <MX_TIM2_Init>
	MX_TIM10_Init();
 8000c5a:	f000 fb01 	bl	8001260 <MX_TIM10_Init>
	MX_TIM11_Init();
 8000c5e:	f000 fb23 	bl	80012a8 <MX_TIM11_Init>
	MX_TIM12_Init();
 8000c62:	f000 fb45 	bl	80012f0 <MX_TIM12_Init>
	MX_TIM13_Init();
 8000c66:	f000 fba7 	bl	80013b8 <MX_TIM13_Init>
	MX_TIM14_Init();
 8000c6a:	f000 fbc9 	bl	8001400 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	/* Initialize PWM Timers*/
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4848      	ldr	r0, [pc, #288]	; (8000d94 <main+0x168>)
 8000c72:	f002 fd33 	bl	80036dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c76:	2104      	movs	r1, #4
 8000c78:	4846      	ldr	r0, [pc, #280]	; (8000d94 <main+0x168>)
 8000c7a:	f002 fd2f 	bl	80036dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c7e:	2108      	movs	r1, #8
 8000c80:	4844      	ldr	r0, [pc, #272]	; (8000d94 <main+0x168>)
 8000c82:	f002 fd2b 	bl	80036dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000c86:	210c      	movs	r1, #12
 8000c88:	4842      	ldr	r0, [pc, #264]	; (8000d94 <main+0x168>)
 8000c8a:	f002 fd27 	bl	80036dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4841      	ldr	r0, [pc, #260]	; (8000d98 <main+0x16c>)
 8000c92:	f002 fd23 	bl	80036dc <HAL_TIM_PWM_Start>



	/*Movement 1 Data*/
	in_data[0] = -0.48808113;
 8000c96:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <main+0x170>)
 8000c98:	4a41      	ldr	r2, [pc, #260]	; (8000da0 <main+0x174>)
 8000c9a:	601a      	str	r2, [r3, #0]
	in_data[1] = -0.55175108;
 8000c9c:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <main+0x170>)
 8000c9e:	4a41      	ldr	r2, [pc, #260]	; (8000da4 <main+0x178>)
 8000ca0:	605a      	str	r2, [r3, #4]
	in_data[2] = -0.4681329;
 8000ca2:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <main+0x170>)
 8000ca4:	4a40      	ldr	r2, [pc, #256]	; (8000da8 <main+0x17c>)
 8000ca6:	609a      	str	r2, [r3, #8]
	in_data[3] = -1.32115892;
 8000ca8:	4b3c      	ldr	r3, [pc, #240]	; (8000d9c <main+0x170>)
 8000caa:	4a40      	ldr	r2, [pc, #256]	; (8000dac <main+0x180>)
 8000cac:	60da      	str	r2, [r3, #12]
	in_data[4] = -0.55970546;
 8000cae:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <main+0x170>)
 8000cb0:	4a3f      	ldr	r2, [pc, #252]	; (8000db0 <main+0x184>)
 8000cb2:	611a      	str	r2, [r3, #16]
	in_data[5] = -0.22794302;
 8000cb4:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <main+0x170>)
 8000cb6:	4a3f      	ldr	r2, [pc, #252]	; (8000db4 <main+0x188>)
 8000cb8:	615a      	str	r2, [r3, #20]

	Model_Run(in_data, out_data);
 8000cba:	493f      	ldr	r1, [pc, #252]	; (8000db8 <main+0x18c>)
 8000cbc:	4837      	ldr	r0, [pc, #220]	; (8000d9c <main+0x170>)
 8000cbe:	f7ff ff89 	bl	8000bd4 <Model_Run>


	/* USER CODE BEGIN 2 */
	SERVO_t Servo1;
	Servo1.htim = htim2;
 8000cc2:	4a34      	ldr	r2, [pc, #208]	; (8000d94 <main+0x168>)
 8000cc4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000cc8:	4611      	mov	r1, r2
 8000cca:	2248      	movs	r2, #72	; 0x48
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f006 f8d5 	bl	8006e7c <memcpy>
	Servo1.Copy_int32Channel = TIM_CHANNEL_4;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

	SERVO_t Servo2;
	Servo2.htim = htim2;
 8000cd8:	4a2e      	ldr	r2, [pc, #184]	; (8000d94 <main+0x168>)
 8000cda:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000cde:	4611      	mov	r1, r2
 8000ce0:	2248      	movs	r2, #72	; 0x48
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 f8ca 	bl	8006e7c <memcpy>
	Servo2.Copy_int32Channel = TIM_CHANNEL_3;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130


	SERVO_t Servo3;
	Servo3.htim = htim2;
 8000cee:	4a29      	ldr	r2, [pc, #164]	; (8000d94 <main+0x168>)
 8000cf0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	2248      	movs	r2, #72	; 0x48
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f006 f8bf 	bl	8006e7c <memcpy>
	Servo3.Copy_int32Channel = TIM_CHANNEL_2;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	SERVO_t Servo4;
	Servo4.htim = htim2;
 8000d04:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <main+0x168>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	4611      	mov	r1, r2
 8000d12:	2348      	movs	r3, #72	; 0x48
 8000d14:	461a      	mov	r2, r3
 8000d16:	f006 f8b1 	bl	8006e7c <memcpy>
	Servo4.Copy_int32Channel = TIM_CHANNEL_1;
 8000d1a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000d22:	2200      	movs	r2, #0
 8000d24:	649a      	str	r2, [r3, #72]	; 0x48

	SERVO_t Servo5;
	Servo5.htim = htim12;
 8000d26:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d2a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000d2e:	4a1a      	ldr	r2, [pc, #104]	; (8000d98 <main+0x16c>)
 8000d30:	4618      	mov	r0, r3
 8000d32:	4611      	mov	r1, r2
 8000d34:	2348      	movs	r3, #72	; 0x48
 8000d36:	461a      	mov	r2, r3
 8000d38:	f006 f8a0 	bl	8006e7c <memcpy>
	Servo5.Copy_int32Channel = TIM_CHANNEL_1;
 8000d3c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d40:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8000d44:	2200      	movs	r2, #0
 8000d46:	649a      	str	r2, [r3, #72]	; 0x48
	Servo_void_SetAngle(Servo5, fest_angle);
 8000d48:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000d4c:	f5a3 76be 	sub.w	r6, r3, #380	; 0x17c
 8000d50:	238c      	movs	r3, #140	; 0x8c
 8000d52:	930f      	str	r3, [sp, #60]	; 0x3c
 8000d54:	466d      	mov	r5, sp
 8000d56:	f106 0410 	add.w	r4, r6, #16
 8000d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d66:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d6a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000d6e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d72:	f000 f8f1 	bl	8000f58 <Servo_void_SetAngle>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//		sensor1 = analogRead(&hadc1);
		//		sensor2 = analogRead(&hadc1);
		sensor3 = analogRead(&hadc1);
 8000d76:	4811      	ldr	r0, [pc, #68]	; (8000dbc <main+0x190>)
 8000d78:	f000 f89c 	bl	8000eb4 <analogRead>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <main+0x194>)
 8000d80:	6013      	str	r3, [r2, #0]
		//		serial_print(sensor1);
		//		serial_print_str(",");
		//		serial_print(sensor2);
		//		serial_print_str(",");
		serial_println(sensor3);
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <main+0x194>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f8c4 	bl	8000f14 <serial_println>
		HAL_Delay(1);
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f000 fdaf 	bl	80018f0 <HAL_Delay>
		sensor3 = analogRead(&hadc1);
 8000d92:	e7f0      	b.n	8000d76 <main+0x14a>
 8000d94:	20000d74 	.word	0x20000d74
 8000d98:	20000e4c 	.word	0x20000e4c
 8000d9c:	20000d40 	.word	0x20000d40
 8000da0:	bef9e5c5 	.word	0xbef9e5c5
 8000da4:	bf0d3f8f 	.word	0xbf0d3f8f
 8000da8:	beefaf1e 	.word	0xbeefaf1e
 8000dac:	bfa91bbc 	.word	0xbfa91bbc
 8000db0:	bf0f48db 	.word	0xbf0f48db
 8000db4:	be6969e5 	.word	0xbe6969e5
 8000db8:	20000d60 	.word	0x20000d60
 8000dbc:	200005dc 	.word	0x200005dc
 8000dc0:	200006bc 	.word	0x200006bc

08000dc4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	; 0x50
 8000dc8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2234      	movs	r2, #52	; 0x34
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f006 f860 	bl	8006e98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <SystemClock_Config+0xdc>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a2b      	ldr	r2, [pc, #172]	; (8000ea0 <SystemClock_Config+0xdc>)
 8000df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <SystemClock_Config+0xdc>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <SystemClock_Config+0xe0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a25      	ldr	r2, [pc, #148]	; (8000ea4 <SystemClock_Config+0xe0>)
 8000e0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <SystemClock_Config+0xe0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e28:	2310      	movs	r3, #16
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e34:	2308      	movs	r3, #8
 8000e36:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000e38:	23b4      	movs	r3, #180	; 0xb4
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 f909 	bl	8003064 <HAL_RCC_OscConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000e58:	f000 f826 	bl	8000ea8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e5c:	f001 fd68 	bl	8002930 <HAL_PWREx_EnableOverDrive>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000e66:	f000 f81f 	bl	8000ea8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e7a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e80:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	2105      	movs	r1, #5
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fda1 	bl	80029d0 <HAL_RCC_ClockConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000e94:	f000 f808 	bl	8000ea8 <Error_Handler>
	}
}
 8000e98:	bf00      	nop
 8000e9a:	3750      	adds	r7, #80	; 0x50
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <analogRead>:
 */

#include "sensor_readings.h"
ADC_HandleTypeDef* hadc_g; // hold the address from the argument of the function
uint32_t analogRead(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	// Get ADC value
	hadc_g = hadc;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <analogRead+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
	uint32_t raw;

	if(HAL_ADC_Start(hadc_g) != HAL_OK)
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <analogRead+0x5c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fd7a 	bl	80019c0 <HAL_ADC_Start>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <analogRead+0x22>
		Error_Handler();
 8000ed2:	f7ff ffe9 	bl	8000ea8 <Error_Handler>

	HAL_ADC_PollForConversion(hadc_g, HAL_MAX_DELAY);
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <analogRead+0x5c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f04f 31ff 	mov.w	r1, #4294967295
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fe40 	bl	8001b64 <HAL_ADC_PollForConversion>

	if((HAL_ADC_GetState(hadc_g) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <analogRead+0x5c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 f933 	bl	8002154 <HAL_ADC_GetState>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ef8:	d105      	bne.n	8000f06 <analogRead+0x52>
		raw = HAL_ADC_GetValue(hadc_g);
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <analogRead+0x5c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 ffcb 	bl	8001e9a <HAL_ADC_GetValue>
 8000f04:	60f8      	str	r0, [r7, #12]

	return raw;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000d6c 	.word	0x20000d6c

08000f14 <serial_println>:


void serial_println(uint32_t raw_data)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	char msg[10];
	// Convert to string and print
	sprintf(msg, "%lu\r\n", raw_data);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	490b      	ldr	r1, [pc, #44]	; (8000f50 <serial_println+0x3c>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f006 f8af 	bl	8007088 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f96e 	bl	8000210 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	f107 010c 	add.w	r1, r7, #12
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <serial_println+0x40>)
 8000f42:	f003 fb44 	bl	80045ce <HAL_UART_Transmit>

}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	08007a00 	.word	0x08007a00
 8000f54:	20000f24 	.word	0x20000f24

08000f58 <Servo_void_SetAngle>:
#include "servo.h"
#include "MAPPING.h"


void Servo_void_SetAngle(SERVO_t Copy_ServoMotor,int32_t Copy_int32_Angle)
{
 8000f58:	b084      	sub	sp, #16
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af02      	add	r7, sp, #8
 8000f60:	f107 0c10 	add.w	ip, r7, #16
 8000f64:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int32_t Local_int32_MappedValue;

	Local_int32_MappedValue = Mapping(SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_INPUT, SERVO_MAX_INPUT, SERVO_MIN_INPUT,Copy_int32_Angle);
 8000f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	2319      	movs	r3, #25
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	237d      	movs	r3, #125	; 0x7d
 8000f72:	2219      	movs	r2, #25
 8000f74:	21b4      	movs	r1, #180	; 0xb4
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff fb24 	bl	80005c4 <Mapping>
 8000f7c:	6078      	str	r0, [r7, #4]

	PWM_int32SetPWMValue(Copy_ServoMotor.htim.Instance, Copy_ServoMotor.Copy_int32Channel, Local_int32_MappedValue);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fb3d 	bl	8000604 <PWM_int32SetPWMValue>

}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f94:	b004      	add	sp, #16
 8000f96:	4770      	bx	lr

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_MspInit+0x4c>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fd6:	2007      	movs	r0, #7
 8000fd8:	f001 fa9e 	bl	8002518 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <NMI_Handler+0x4>

08000fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <UsageFault_Handler+0x4>

08001006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 fc3c 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <ADC_IRQHandler+0x1c>)
 8001042:	f000 fe1a 	bl	8001c7a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <ADC_IRQHandler+0x20>)
 8001048:	f000 fe17 	bl	8001c7a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <ADC_IRQHandler+0x24>)
 800104e:	f000 fe14 	bl	8001c7a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200005dc 	.word	0x200005dc
 800105c:	20000624 	.word	0x20000624
 8001060:	2000066c 	.word	0x2000066c

08001064 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800106a:	f002 fbff 	bl	800386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000dbc 	.word	0x20000dbc

08001078 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800107e:	f002 fbf5 	bl	800386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000e04 	.word	0x20000e04

0800108c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM2_IRQHandler+0x10>)
 8001092:	f002 fbeb 	bl	800386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000d74 	.word	0x20000d74

080010a0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80010a6:	f002 fbe1 	bl	800386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000e4c 	.word	0x20000e4c

080010b4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80010ba:	f002 fbd7 	bl	800386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000e94 	.word	0x20000e94

080010c8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80010ce:	f002 fbcd 	bl	800386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000edc 	.word	0x20000edc

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f005 fe8c 	bl	8006e28 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20020000 	.word	0x20020000
 800113c:	00000800 	.word	0x00000800
 8001140:	20000d70 	.word	0x20000d70
 8001144:	20001008 	.word	0x20001008

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800118e:	4b33      	ldr	r3, [pc, #204]	; (800125c <MX_TIM2_Init+0xf0>)
 8001190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001194:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8001196:	4b31      	ldr	r3, [pc, #196]	; (800125c <MX_TIM2_Init+0xf0>)
 8001198:	f240 3283 	movw	r2, #899	; 0x383
 800119c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <MX_TIM2_Init+0xf0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_TIM2_Init+0xf0>)
 80011a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <MX_TIM2_Init+0xf0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <MX_TIM2_Init+0xf0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011b8:	4828      	ldr	r0, [pc, #160]	; (800125c <MX_TIM2_Init+0xf0>)
 80011ba:	f002 fa40 	bl	800363e <HAL_TIM_PWM_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80011c4:	f7ff fe70 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	4619      	mov	r1, r3
 80011d6:	4821      	ldr	r0, [pc, #132]	; (800125c <MX_TIM2_Init+0xf0>)
 80011d8:	f003 f91c 	bl	8004414 <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80011e2:	f7ff fe61 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	; 0x60
 80011e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4817      	ldr	r0, [pc, #92]	; (800125c <MX_TIM2_Init+0xf0>)
 80011fe:	f002 fc3d 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001208:	f7ff fe4e 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2204      	movs	r2, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4812      	ldr	r0, [pc, #72]	; (800125c <MX_TIM2_Init+0xf0>)
 8001214:	f002 fc32 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800121e:	f7ff fe43 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2208      	movs	r2, #8
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <MX_TIM2_Init+0xf0>)
 800122a:	f002 fc27 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001234:	f7ff fe38 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	220c      	movs	r2, #12
 800123c:	4619      	mov	r1, r3
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM2_Init+0xf0>)
 8001240:	f002 fc1c 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800124a:	f7ff fe2d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800124e:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM2_Init+0xf0>)
 8001250:	f000 f9c0 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000d74 	.word	0x20000d74

08001260 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_TIM10_Init+0x40>)
 8001266:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <MX_TIM10_Init+0x44>)
 8001268:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MX_TIM10_Init+0x40>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_TIM10_Init+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_TIM10_Init+0x40>)
 8001278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800127c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_TIM10_Init+0x40>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_TIM10_Init+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_TIM10_Init+0x40>)
 800128c:	f002 f988 	bl	80035a0 <HAL_TIM_Base_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001296:	f7ff fe07 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000dbc 	.word	0x20000dbc
 80012a4:	40014400 	.word	0x40014400

080012a8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_TIM11_Init+0x40>)
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <MX_TIM11_Init+0x44>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <MX_TIM11_Init+0x40>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_TIM11_Init+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <MX_TIM11_Init+0x40>)
 80012c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_TIM11_Init+0x40>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_TIM11_Init+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_TIM11_Init+0x40>)
 80012d4:	f002 f964 	bl	80035a0 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80012de:	f7ff fde3 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000e04 	.word	0x20000e04
 80012ec:	40014800 	.word	0x40014800

080012f0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	615a      	str	r2, [r3, #20]
 8001314:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <MX_TIM12_Init+0xc0>)
 8001318:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <MX_TIM12_Init+0xc4>)
 800131a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 900-1;
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_TIM12_Init+0xc0>)
 800131e:	f240 3283 	movw	r2, #899	; 0x383
 8001322:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <MX_TIM12_Init+0xc0>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_TIM12_Init+0xc0>)
 800132c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001330:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_TIM12_Init+0xc0>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_TIM12_Init+0xc0>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800133e:	481c      	ldr	r0, [pc, #112]	; (80013b0 <MX_TIM12_Init+0xc0>)
 8001340:	f002 f92e 	bl	80035a0 <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 800134a:	f7ff fdad 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4619      	mov	r1, r3
 800135a:	4815      	ldr	r0, [pc, #84]	; (80013b0 <MX_TIM12_Init+0xc0>)
 800135c:	f002 fc50 	bl	8003c00 <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8001366:	f7ff fd9f 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800136a:	4811      	ldr	r0, [pc, #68]	; (80013b0 <MX_TIM12_Init+0xc0>)
 800136c:	f002 f967 	bl	800363e <HAL_TIM_PWM_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001376:	f7ff fd97 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800137a:	2360      	movs	r3, #96	; 0x60
 800137c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <MX_TIM12_Init+0xc0>)
 8001392:	f002 fb73 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 800139c:	f7ff fd84 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <MX_TIM12_Init+0xc0>)
 80013a2:	f000 f917 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	; 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000e4c 	.word	0x20000e4c
 80013b4:	40001800 	.word	0x40001800

080013b8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_TIM13_Init+0x40>)
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <MX_TIM13_Init+0x44>)
 80013c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <MX_TIM13_Init+0x40>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_TIM13_Init+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <MX_TIM13_Init+0x40>)
 80013d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_TIM13_Init+0x40>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_TIM13_Init+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_TIM13_Init+0x40>)
 80013e4:	f002 f8dc 	bl	80035a0 <HAL_TIM_Base_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80013ee:	f7ff fd5b 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000e94 	.word	0x20000e94
 80013fc:	40001c00 	.word	0x40001c00

08001400 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_TIM14_Init+0x40>)
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <MX_TIM14_Init+0x44>)
 8001408:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <MX_TIM14_Init+0x40>)
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_TIM14_Init+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <MX_TIM14_Init+0x40>)
 8001418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_TIM14_Init+0x40>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_TIM14_Init+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_TIM14_Init+0x40>)
 800142c:	f002 f8b8 	bl	80035a0 <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001436:	f7ff fd37 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000edc 	.word	0x20000edc
 8001444:	40002000 	.word	0x40002000

08001448 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001458:	d115      	bne.n	8001486 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_TIM_PWM_MspInit+0x48>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_TIM_PWM_MspInit+0x48>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_TIM_PWM_MspInit+0x48>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	201c      	movs	r0, #28
 800147c:	f001 f857 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001480:	201c      	movs	r0, #28
 8001482:	f001 f870 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a46      	ldr	r2, [pc, #280]	; (80015bc <HAL_TIM_Base_MspInit+0x128>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d116      	bne.n	80014d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a44      	ldr	r2, [pc, #272]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	69fb      	ldr	r3, [r7, #28]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2019      	movs	r0, #25
 80014c8:	f001 f831 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014cc:	2019      	movs	r0, #25
 80014ce:	f001 f84a 	bl	8002566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80014d2:	e06e      	b.n	80015b2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM11)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a3a      	ldr	r2, [pc, #232]	; (80015c4 <HAL_TIM_Base_MspInit+0x130>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d116      	bne.n	800150c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a36      	ldr	r2, [pc, #216]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	201a      	movs	r0, #26
 8001500:	f001 f815 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001504:	201a      	movs	r0, #26
 8001506:	f001 f82e 	bl	8002566 <HAL_NVIC_EnableIRQ>
}
 800150a:	e052      	b.n	80015b2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM12)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a2d      	ldr	r2, [pc, #180]	; (80015c8 <HAL_TIM_Base_MspInit+0x134>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d116      	bne.n	8001544 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 8001520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	202b      	movs	r0, #43	; 0x2b
 8001538:	f000 fff9 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800153c:	202b      	movs	r0, #43	; 0x2b
 800153e:	f001 f812 	bl	8002566 <HAL_NVIC_EnableIRQ>
}
 8001542:	e036      	b.n	80015b2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM13)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a20      	ldr	r2, [pc, #128]	; (80015cc <HAL_TIM_Base_MspInit+0x138>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d116      	bne.n	800157c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a1a      	ldr	r2, [pc, #104]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	202c      	movs	r0, #44	; 0x2c
 8001570:	f000 ffdd 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001574:	202c      	movs	r0, #44	; 0x2c
 8001576:	f000 fff6 	bl	8002566 <HAL_NVIC_EnableIRQ>
}
 800157a:	e01a      	b.n	80015b2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM14)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <HAL_TIM_Base_MspInit+0x13c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d115      	bne.n	80015b2 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_TIM_Base_MspInit+0x12c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	202d      	movs	r0, #45	; 0x2d
 80015a8:	f000 ffc1 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80015ac:	202d      	movs	r0, #45	; 0x2d
 80015ae:	f000 ffda 	bl	8002566 <HAL_NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40014400 	.word	0x40014400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40014800 	.word	0x40014800
 80015c8:	40001800 	.word	0x40001800
 80015cc:	40001c00 	.word	0x40001c00
 80015d0:	40002000 	.word	0x40002000

080015d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f4:	d13e      	bne.n	8001674 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_TIM_MspPostInit+0xf0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a31      	ldr	r2, [pc, #196]	; (80016c4 <HAL_TIM_MspPostInit+0xf0>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <HAL_TIM_MspPostInit+0xf0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_TIM_MspPostInit+0xf0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <HAL_TIM_MspPostInit+0xf0>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_TIM_MspPostInit+0xf0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_9;
 800162e:	f240 6304 	movw	r3, #1540	; 0x604
 8001632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001640:	2301      	movs	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	481f      	ldr	r0, [pc, #124]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 800164c:	f000 ffc2 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001662:	2301      	movs	r3, #1
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4817      	ldr	r0, [pc, #92]	; (80016cc <HAL_TIM_MspPostInit+0xf8>)
 800166e:	f000 ffb1 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001672:	e023      	b.n	80016bc <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM12)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a15      	ldr	r2, [pc, #84]	; (80016d0 <HAL_TIM_MspPostInit+0xfc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d11e      	bne.n	80016bc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_TIM_MspPostInit+0xf0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_TIM_MspPostInit+0xf0>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_TIM_MspPostInit+0xf0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800169a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80016ac:	2309      	movs	r3, #9
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4804      	ldr	r0, [pc, #16]	; (80016c8 <HAL_TIM_MspPostInit+0xf4>)
 80016b8:	f000 ff8c 	bl	80025d4 <HAL_GPIO_Init>
}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40001800 	.word	0x40001800

080016d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <MX_USART2_UART_Init+0x50>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_USART2_UART_Init+0x4c>)
 800170c:	f002 ff12 	bl	8004534 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001716:	f7ff fbc7 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000f24 	.word	0x20000f24
 8001724:	40004400 	.word	0x40004400

08001728 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_UART_MspInit+0x84>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12b      	bne.n	80017a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_UART_MspInit+0x88>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_UART_MspInit+0x88>)
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_UART_MspInit+0x88>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_UART_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_UART_MspInit+0x88>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_UART_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001782:	230c      	movs	r3, #12
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001792:	2307      	movs	r3, #7
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <HAL_UART_MspInit+0x8c>)
 800179e:	f000 ff19 	bl	80025d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40004400 	.word	0x40004400
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000

080017b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017be:	490e      	ldr	r1, [pc, #56]	; (80017f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d4:	4c0b      	ldr	r4, [pc, #44]	; (8001804 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e2:	f7ff fcb1 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e6:	f005 fb25 	bl	8006e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ea:	f7ff fa1f 	bl	8000c2c <main>
  bx  lr    
 80017ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f8:	200005b8 	.word	0x200005b8
  ldr r2, =_sidata
 80017fc:	0800ad44 	.word	0x0800ad44
  ldr r2, =_sbss
 8001800:	200005c0 	.word	0x200005c0
  ldr r4, =_ebss
 8001804:	20001004 	.word	0x20001004

08001808 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <CAN1_RX0_IRQHandler>
	...

0800180c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <HAL_Init+0x40>)
 8001816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_Init+0x40>)
 8001822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_Init+0x40>)
 800182e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 fe6f 	bl	8002518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	2000      	movs	r0, #0
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff fbaa 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023c00 	.word	0x40023c00

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fe87 	bl	8002582 <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 fe4f 	bl	800252e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x20>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_IncTick+0x24>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000f68 	.word	0x20000f68

080018d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000f68 	.word	0x20000f68

080018f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f8:	f7ff ffee 	bl	80018d8 <HAL_GetTick>
 80018fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001908:	d005      	beq.n	8001916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_Delay+0x44>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001916:	bf00      	nop
 8001918:	f7ff ffde 	bl	80018d8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	429a      	cmp	r2, r3
 8001926:	d8f7      	bhi.n	8001918 <HAL_Delay+0x28>
  {
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000008 	.word	0x20000008

08001938 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e033      	b.n	80019b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7fe ffae 	bl	80008b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	2b00      	cmp	r3, #0
 8001974:	d118      	bne.n	80019a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800197e:	f023 0302 	bic.w	r3, r3, #2
 8001982:	f043 0202 	orr.w	r2, r3, #2
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 fbee 	bl	800216c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f023 0303 	bic.w	r3, r3, #3
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40
 80019a6:	e001      	b.n	80019ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Start+0x1a>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0b2      	b.n	8001b40 <HAL_ADC_Start+0x180>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d018      	beq.n	8001a22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a00:	4b52      	ldr	r3, [pc, #328]	; (8001b4c <HAL_ADC_Start+0x18c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a52      	ldr	r2, [pc, #328]	; (8001b50 <HAL_ADC_Start+0x190>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9a      	lsrs	r2, r3, #18
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a14:	e002      	b.n	8001a1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f9      	bne.n	8001a16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d17a      	bne.n	8001b26 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6e:	d106      	bne.n	8001a7e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	f023 0206 	bic.w	r2, r3, #6
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	645a      	str	r2, [r3, #68]	; 0x44
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a8c:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <HAL_ADC_Start+0x194>)
 8001a8e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d12a      	bne.n	8001afc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a2b      	ldr	r2, [pc, #172]	; (8001b58 <HAL_ADC_Start+0x198>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d015      	beq.n	8001adc <HAL_ADC_Start+0x11c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a29      	ldr	r2, [pc, #164]	; (8001b5c <HAL_ADC_Start+0x19c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d105      	bne.n	8001ac6 <HAL_ADC_Start+0x106>
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_ADC_Start+0x194>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00a      	beq.n	8001adc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <HAL_ADC_Start+0x1a0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d136      	bne.n	8001b3e <HAL_ADC_Start+0x17e>
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_ADC_Start+0x194>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d130      	bne.n	8001b3e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d129      	bne.n	8001b3e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	e020      	b.n	8001b3e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <HAL_ADC_Start+0x198>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d11b      	bne.n	8001b3e <HAL_ADC_Start+0x17e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d114      	bne.n	8001b3e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	e00b      	b.n	8001b3e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	431bde83 	.word	0x431bde83
 8001b54:	40012300 	.word	0x40012300
 8001b58:	40012000 	.word	0x40012000
 8001b5c:	40012100 	.word	0x40012100
 8001b60:	40012200 	.word	0x40012200

08001b64 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b80:	d113      	bne.n	8001baa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b90:	d10b      	bne.n	8001baa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f043 0220 	orr.w	r2, r3, #32
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e063      	b.n	8001c72 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001baa:	f7ff fe95 	bl	80018d8 <HAL_GetTick>
 8001bae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bb0:	e021      	b.n	8001bf6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb8:	d01d      	beq.n	8001bf6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_ADC_PollForConversion+0x6c>
 8001bc0:	f7ff fe8a 	bl	80018d8 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d212      	bcs.n	8001bf6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f043 0204 	orr.w	r2, r3, #4
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e03d      	b.n	8001c72 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d1d6      	bne.n	8001bb2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0212 	mvn.w	r2, #18
 8001c0c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d123      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d11f      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d006      	beq.n	8001c4c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d111      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
 8001ca8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d049      	beq.n	8001d44 <HAL_ADC_IRQHandler+0xca>
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d046      	beq.n	8001d44 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f003 0310 	and.w	r3, r3, #16
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d12b      	bne.n	8001d34 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d127      	bne.n	8001d34 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d119      	bne.n	8001d34 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0220 	bic.w	r2, r2, #32
 8001d0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8bd 	bl	8001eb4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f06f 0212 	mvn.w	r2, #18
 8001d42:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d057      	beq.n	8001e0a <HAL_ADC_IRQHandler+0x190>
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d054      	beq.n	8001e0a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d139      	bne.n	8001dfa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d12b      	bne.n	8001dfa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d124      	bne.n	8001dfa <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11d      	bne.n	8001dfa <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d119      	bne.n	8001dfa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f043 0201 	orr.w	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fab2 	bl	8002364 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 020c 	mvn.w	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e18:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d017      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x1d6>
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d014      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10d      	bne.n	8001e50 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f841 	bl	8001ec8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f06f 0201 	mvn.w	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e5e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d015      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x218>
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	f043 0202 	orr.w	r2, r3, #2
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0220 	mvn.w	r2, #32
 8001e80:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f82a 	bl	8001edc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0220 	mvn.w	r2, #32
 8001e90:	601a      	str	r2, [r3, #0]
  }
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1c>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e113      	b.n	8002134 <HAL_ADC_ConfigChannel+0x244>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	d925      	bls.n	8001f68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68d9      	ldr	r1, [r3, #12]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	3b1e      	subs	r3, #30
 8001f32:	2207      	movs	r2, #7
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	400a      	ands	r2, r1
 8001f40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68d9      	ldr	r1, [r3, #12]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	4603      	mov	r3, r0
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4403      	add	r3, r0
 8001f5a:	3b1e      	subs	r3, #30
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	e022      	b.n	8001fae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6919      	ldr	r1, [r3, #16]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	400a      	ands	r2, r1
 8001f8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6919      	ldr	r1, [r3, #16]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4403      	add	r3, r0
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d824      	bhi.n	8002000 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b05      	subs	r3, #5
 8001fc8:	221f      	movs	r2, #31
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	3b05      	subs	r3, #5
 8001ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffe:	e04c      	b.n	800209a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b0c      	cmp	r3, #12
 8002006:	d824      	bhi.n	8002052 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b23      	subs	r3, #35	; 0x23
 800201a:	221f      	movs	r2, #31
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43da      	mvns	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	400a      	ands	r2, r1
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	4618      	mov	r0, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	3b23      	subs	r3, #35	; 0x23
 8002044:	fa00 f203 	lsl.w	r2, r0, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
 8002050:	e023      	b.n	800209a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	3b41      	subs	r3, #65	; 0x41
 8002064:	221f      	movs	r2, #31
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	400a      	ands	r2, r1
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	4618      	mov	r0, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	3b41      	subs	r3, #65	; 0x41
 800208e:	fa00 f203 	lsl.w	r2, r0, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800209a:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_ADC_ConfigChannel+0x250>)
 800209c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a28      	ldr	r2, [pc, #160]	; (8002144 <HAL_ADC_ConfigChannel+0x254>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d10f      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x1d8>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b12      	cmp	r3, #18
 80020ae:	d10b      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_ADC_ConfigChannel+0x254>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d12b      	bne.n	800212a <HAL_ADC_ConfigChannel+0x23a>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <HAL_ADC_ConfigChannel+0x258>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <HAL_ADC_ConfigChannel+0x1f4>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b11      	cmp	r3, #17
 80020e2:	d122      	bne.n	800212a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <HAL_ADC_ConfigChannel+0x258>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d111      	bne.n	800212a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_ADC_ConfigChannel+0x25c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a11      	ldr	r2, [pc, #68]	; (8002150 <HAL_ADC_ConfigChannel+0x260>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	0c9a      	lsrs	r2, r3, #18
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800211c:	e002      	b.n	8002124 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3b01      	subs	r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f9      	bne.n	800211e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40012300 	.word	0x40012300
 8002144:	40012000 	.word	0x40012000
 8002148:	10000012 	.word	0x10000012
 800214c:	20000000 	.word	0x20000000
 8002150:	431bde83 	.word	0x431bde83

08002154 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002174:	4b79      	ldr	r3, [pc, #484]	; (800235c <ADC_Init+0x1f0>)
 8002176:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	431a      	orrs	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	021a      	lsls	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6899      	ldr	r1, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	4a58      	ldr	r2, [pc, #352]	; (8002360 <ADC_Init+0x1f4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d022      	beq.n	800224a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002212:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6899      	ldr	r1, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	e00f      	b.n	800226a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002268:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0202 	bic.w	r2, r2, #2
 8002278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6899      	ldr	r1, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7e1b      	ldrb	r3, [r3, #24]
 8002284:	005a      	lsls	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01b      	beq.n	80022d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	3b01      	subs	r3, #1
 80022c4:	035a      	lsls	r2, r3, #13
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	e007      	b.n	80022e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	051a      	lsls	r2, r3, #20
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002314:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6899      	ldr	r1, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002322:	025a      	lsls	r2, r3, #9
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6899      	ldr	r1, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	029a      	lsls	r2, r3, #10
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	609a      	str	r2, [r3, #8]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40012300 	.word	0x40012300
 8002360:	0f000001 	.word	0x0f000001

08002364 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e4:	d301      	bcc.n	80024ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00f      	b.n	800250a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <SysTick_Config+0x40>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f2:	210f      	movs	r1, #15
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f7ff ff8e 	bl	8002418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <SysTick_Config+0x40>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <SysTick_Config+0x40>)
 8002504:	2207      	movs	r2, #7
 8002506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	e000e010 	.word	0xe000e010

08002518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff29 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002540:	f7ff ff3e 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f7ff ff8e 	bl	800246c <NVIC_EncodePriority>
 8002550:	4602      	mov	r2, r0
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff5d 	bl	8002418 <__NVIC_SetPriority>
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff31 	bl	80023dc <__NVIC_EnableIRQ>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffa2 	bl	80024d4 <SysTick_Config>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e00e      	b.n	80025ca <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	795b      	ldrb	r3, [r3, #5]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7fe fa4d 	bl	8000a5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e165      	b.n	80028bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f0:	2201      	movs	r2, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	429a      	cmp	r2, r3
 800260a:	f040 8154 	bne.w	80028b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d005      	beq.n	8002626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002622:	2b02      	cmp	r3, #2
 8002624:	d130      	bne.n	8002688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0201 	and.w	r2, r3, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b03      	cmp	r3, #3
 8002692:	d017      	beq.n	80026c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d123      	bne.n	8002718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	08da      	lsrs	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3208      	adds	r2, #8
 80026d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	220f      	movs	r2, #15
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	08da      	lsrs	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3208      	adds	r2, #8
 8002712:	69b9      	ldr	r1, [r7, #24]
 8002714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0203 	and.w	r2, r3, #3
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80ae 	beq.w	80028b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b5d      	ldr	r3, [pc, #372]	; (80028d4 <HAL_GPIO_Init+0x300>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a5c      	ldr	r2, [pc, #368]	; (80028d4 <HAL_GPIO_Init+0x300>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <HAL_GPIO_Init+0x300>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002776:	4a58      	ldr	r2, [pc, #352]	; (80028d8 <HAL_GPIO_Init+0x304>)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3302      	adds	r3, #2
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_GPIO_Init+0x308>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d025      	beq.n	80027ee <HAL_GPIO_Init+0x21a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4e      	ldr	r2, [pc, #312]	; (80028e0 <HAL_GPIO_Init+0x30c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01f      	beq.n	80027ea <HAL_GPIO_Init+0x216>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4d      	ldr	r2, [pc, #308]	; (80028e4 <HAL_GPIO_Init+0x310>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x212>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <HAL_GPIO_Init+0x314>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x20e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4b      	ldr	r2, [pc, #300]	; (80028ec <HAL_GPIO_Init+0x318>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x20a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4a      	ldr	r2, [pc, #296]	; (80028f0 <HAL_GPIO_Init+0x31c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x206>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a49      	ldr	r2, [pc, #292]	; (80028f4 <HAL_GPIO_Init+0x320>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x202>
 80027d2:	2306      	movs	r3, #6
 80027d4:	e00c      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027d6:	2307      	movs	r3, #7
 80027d8:	e00a      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027da:	2305      	movs	r3, #5
 80027dc:	e008      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027de:	2304      	movs	r3, #4
 80027e0:	e006      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027e2:	2303      	movs	r3, #3
 80027e4:	e004      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_GPIO_Init+0x21c>
 80027ee:	2300      	movs	r3, #0
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	f002 0203 	and.w	r2, r2, #3
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	4093      	lsls	r3, r2
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002800:	4935      	ldr	r1, [pc, #212]	; (80028d8 <HAL_GPIO_Init+0x304>)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	3302      	adds	r3, #2
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <HAL_GPIO_Init+0x324>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002832:	4a31      	ldr	r2, [pc, #196]	; (80028f8 <HAL_GPIO_Init+0x324>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002838:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <HAL_GPIO_Init+0x324>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800285c:	4a26      	ldr	r2, [pc, #152]	; (80028f8 <HAL_GPIO_Init+0x324>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002862:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <HAL_GPIO_Init+0x324>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002886:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <HAL_GPIO_Init+0x324>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_GPIO_Init+0x324>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b0:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <HAL_GPIO_Init+0x324>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	f67f ae96 	bls.w	80025f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40013800 	.word	0x40013800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40020400 	.word	0x40020400
 80028e4:	40020800 	.word	0x40020800
 80028e8:	40020c00 	.word	0x40020c00
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40021400 	.word	0x40021400
 80028f4:	40021800 	.word	0x40021800
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002918:	e003      	b.n	8002922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800295c:	f7fe ffbc 	bl	80018d8 <HAL_GetTick>
 8002960:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002962:	e009      	b.n	8002978 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002964:	f7fe ffb8 	bl	80018d8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002972:	d901      	bls.n	8002978 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e01f      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d1ee      	bne.n	8002964 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800298c:	f7fe ffa4 	bl	80018d8 <HAL_GetTick>
 8002990:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002992:	e009      	b.n	80029a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002994:	f7fe ffa0 	bl	80018d8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029a2:	d901      	bls.n	80029a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e007      	b.n	80029b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b4:	d1ee      	bne.n	8002994 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	420e0040 	.word	0x420e0040
 80029c8:	40007000 	.word	0x40007000
 80029cc:	420e0044 	.word	0x420e0044

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0cc      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b68      	ldr	r3, [pc, #416]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d90c      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d044      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d119      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e06f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9e:	4b3b      	ldr	r3, [pc, #236]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e067      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4934      	ldr	r1, [pc, #208]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac0:	f7fe ff0a 	bl	80018d8 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7fe ff06 	bl	80018d8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e04f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d20c      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f855 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fe6a 	bl	8001850 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	08007a3c 	.word	0x08007a3c
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000000 	.word	0x20000000

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bb8:	f7ff fff0 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0a9b      	lsrs	r3, r3, #10
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4903      	ldr	r1, [pc, #12]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	08007a4c 	.word	0x08007a4c

08002bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002be0:	f7ff ffdc 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	0b5b      	lsrs	r3, r3, #13
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	08007a4c 	.word	0x08007a4c

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b0ae      	sub	sp, #184	; 0xb8
 8002c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c2a:	4bcb      	ldr	r3, [pc, #812]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	f200 8206 	bhi.w	8003044 <HAL_RCC_GetSysClockFreq+0x440>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08003045 	.word	0x08003045
 8002c48:	08003045 	.word	0x08003045
 8002c4c:	08003045 	.word	0x08003045
 8002c50:	08002c7d 	.word	0x08002c7d
 8002c54:	08003045 	.word	0x08003045
 8002c58:	08003045 	.word	0x08003045
 8002c5c:	08003045 	.word	0x08003045
 8002c60:	08002c85 	.word	0x08002c85
 8002c64:	08003045 	.word	0x08003045
 8002c68:	08003045 	.word	0x08003045
 8002c6c:	08003045 	.word	0x08003045
 8002c70:	08002e75 	.word	0x08002e75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4bb9      	ldr	r3, [pc, #740]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002c7a:	e1e7      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c7c:	4bb8      	ldr	r3, [pc, #736]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c82:	e1e3      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c84:	4bb4      	ldr	r3, [pc, #720]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c90:	4bb1      	ldr	r3, [pc, #708]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d071      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9c:	4bae      	ldr	r3, [pc, #696]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ca8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	462b      	mov	r3, r5
 8002cc6:	f04f 0000 	mov.w	r0, #0
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	0159      	lsls	r1, r3, #5
 8002cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd4:	0150      	lsls	r0, r2, #5
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4621      	mov	r1, r4
 8002cdc:	1a51      	subs	r1, r2, r1
 8002cde:	6439      	str	r1, [r7, #64]	; 0x40
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	018b      	lsls	r3, r1, #6
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cfe:	4641      	mov	r1, r8
 8002d00:	018a      	lsls	r2, r1, #6
 8002d02:	4641      	mov	r1, r8
 8002d04:	1a51      	subs	r1, r2, r1
 8002d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d08:	4649      	mov	r1, r9
 8002d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	00cb      	lsls	r3, r1, #3
 8002d20:	4641      	mov	r1, r8
 8002d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d26:	4641      	mov	r1, r8
 8002d28:	00ca      	lsls	r2, r1, #3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4622      	mov	r2, r4
 8002d32:	189b      	adds	r3, r3, r2
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
 8002d36:	462b      	mov	r3, r5
 8002d38:	460a      	mov	r2, r1
 8002d3a:	eb42 0303 	adc.w	r3, r2, r3
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	024b      	lsls	r3, r1, #9
 8002d50:	4621      	mov	r1, r4
 8002d52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d56:	4621      	mov	r1, r4
 8002d58:	024a      	lsls	r2, r1, #9
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002d70:	f7fd faa6 	bl	80002c0 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d7e:	e067      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d80:	4b75      	ldr	r3, [pc, #468]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002da2:	4622      	mov	r2, r4
 8002da4:	462b      	mov	r3, r5
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0159      	lsls	r1, r3, #5
 8002db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db4:	0150      	lsls	r0, r2, #5
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4621      	mov	r1, r4
 8002dbc:	1a51      	subs	r1, r2, r1
 8002dbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	018b      	lsls	r3, r1, #6
 8002dd8:	4641      	mov	r1, r8
 8002dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dde:	4641      	mov	r1, r8
 8002de0:	018a      	lsls	r2, r1, #6
 8002de2:	4641      	mov	r1, r8
 8002de4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002de8:	4649      	mov	r1, r9
 8002dea:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e02:	4692      	mov	sl, r2
 8002e04:	469b      	mov	fp, r3
 8002e06:	4623      	mov	r3, r4
 8002e08:	eb1a 0303 	adds.w	r3, sl, r3
 8002e0c:	623b      	str	r3, [r7, #32]
 8002e0e:	462b      	mov	r3, r5
 8002e10:	eb4b 0303 	adc.w	r3, fp, r3
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e22:	4629      	mov	r1, r5
 8002e24:	028b      	lsls	r3, r1, #10
 8002e26:	4621      	mov	r1, r4
 8002e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	028a      	lsls	r2, r1, #10
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e38:	2200      	movs	r2, #0
 8002e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e3c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e42:	f7fd fa3d 	bl	80002c0 <__aeabi_uldivmod>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e50:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e72:	e0eb      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e74:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e80:	4b35      	ldr	r3, [pc, #212]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d06b      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	2200      	movs	r2, #0
 8002e94:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ea4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	462b      	mov	r3, r5
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	0159      	lsls	r1, r3, #5
 8002eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eba:	0150      	lsls	r0, r2, #5
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	1a51      	subs	r1, r2, r1
 8002ec4:	61b9      	str	r1, [r7, #24]
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	eb63 0301 	sbc.w	r3, r3, r1
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002eda:	4659      	mov	r1, fp
 8002edc:	018b      	lsls	r3, r1, #6
 8002ede:	4651      	mov	r1, sl
 8002ee0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	018a      	lsls	r2, r1, #6
 8002ee8:	4651      	mov	r1, sl
 8002eea:	ebb2 0801 	subs.w	r8, r2, r1
 8002eee:	4659      	mov	r1, fp
 8002ef0:	eb63 0901 	sbc.w	r9, r3, r1
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f08:	4690      	mov	r8, r2
 8002f0a:	4699      	mov	r9, r3
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	eb18 0303 	adds.w	r3, r8, r3
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	462b      	mov	r3, r5
 8002f16:	eb49 0303 	adc.w	r3, r9, r3
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f28:	4629      	mov	r1, r5
 8002f2a:	024b      	lsls	r3, r1, #9
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f32:	4621      	mov	r1, r4
 8002f34:	024a      	lsls	r2, r1, #9
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f3e:	2200      	movs	r2, #0
 8002f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f48:	f7fd f9ba 	bl	80002c0 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4613      	mov	r3, r2
 8002f52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f56:	e065      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x420>
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	00f42400 	.word	0x00f42400
 8002f60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f64:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_RCC_GetSysClockFreq+0x458>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	4611      	mov	r1, r2
 8002f70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f74:	653b      	str	r3, [r7, #80]	; 0x50
 8002f76:	2300      	movs	r3, #0
 8002f78:	657b      	str	r3, [r7, #84]	; 0x54
 8002f7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002f7e:	4642      	mov	r2, r8
 8002f80:	464b      	mov	r3, r9
 8002f82:	f04f 0000 	mov.w	r0, #0
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	0159      	lsls	r1, r3, #5
 8002f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f90:	0150      	lsls	r0, r2, #5
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4641      	mov	r1, r8
 8002f98:	1a51      	subs	r1, r2, r1
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fb0:	4659      	mov	r1, fp
 8002fb2:	018b      	lsls	r3, r1, #6
 8002fb4:	4651      	mov	r1, sl
 8002fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fba:	4651      	mov	r1, sl
 8002fbc:	018a      	lsls	r2, r1, #6
 8002fbe:	4651      	mov	r1, sl
 8002fc0:	1a54      	subs	r4, r2, r1
 8002fc2:	4659      	mov	r1, fp
 8002fc4:	eb63 0501 	sbc.w	r5, r3, r1
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	00eb      	lsls	r3, r5, #3
 8002fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd6:	00e2      	lsls	r2, r4, #3
 8002fd8:	4614      	mov	r4, r2
 8002fda:	461d      	mov	r5, r3
 8002fdc:	4643      	mov	r3, r8
 8002fde:	18e3      	adds	r3, r4, r3
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	eb45 0303 	adc.w	r3, r5, r3
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	028b      	lsls	r3, r1, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003000:	4621      	mov	r1, r4
 8003002:	028a      	lsls	r2, r1, #10
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800300c:	2200      	movs	r2, #0
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003010:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003012:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003016:	f7fd f953 	bl	80002c0 <__aeabi_uldivmod>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4613      	mov	r3, r2
 8003020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003024:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HAL_RCC_GetSysClockFreq+0x458>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	0f1b      	lsrs	r3, r3, #28
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003042:	e003      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800304a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003050:	4618      	mov	r0, r3
 8003052:	37b8      	adds	r7, #184	; 0xb8
 8003054:	46bd      	mov	sp, r7
 8003056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	00f42400 	.word	0x00f42400

08003064 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e28d      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8083 	beq.w	800318a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003084:	4b94      	ldr	r3, [pc, #592]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b04      	cmp	r3, #4
 800308e:	d019      	beq.n	80030c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003090:	4b91      	ldr	r3, [pc, #580]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003098:	2b08      	cmp	r3, #8
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800309c:	4b8e      	ldr	r3, [pc, #568]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a8:	d00c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030aa:	4b8b      	ldr	r3, [pc, #556]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d112      	bne.n	80030dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b6:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c2:	d10b      	bne.n	80030dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	4b84      	ldr	r3, [pc, #528]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05b      	beq.n	8003188 <HAL_RCC_OscConfig+0x124>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d157      	bne.n	8003188 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e25a      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x90>
 80030e6:	4b7c      	ldr	r3, [pc, #496]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7b      	ldr	r2, [pc, #492]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xcc>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0xb4>
 80030fe:	4b76      	ldr	r3, [pc, #472]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b73      	ldr	r3, [pc, #460]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a72      	ldr	r2, [pc, #456]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xcc>
 8003118:	4b6f      	ldr	r3, [pc, #444]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6e      	ldr	r2, [pc, #440]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b6c      	ldr	r3, [pc, #432]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a6b      	ldr	r2, [pc, #428]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe fbce 	bl	80018d8 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe fbca 	bl	80018d8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e21f      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xdc>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe fbba 	bl	80018d8 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe fbb6 	bl	80018d8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e20b      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b57      	ldr	r3, [pc, #348]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x104>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d06f      	beq.n	8003276 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003196:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d017      	beq.n	80031d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031a2:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d105      	bne.n	80031ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b44      	ldr	r3, [pc, #272]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x186>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1d3      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4937      	ldr	r1, [pc, #220]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x278>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fb63 	bl	80018d8 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003216:	f7fe fb5f 	bl	80018d8 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1b4      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4925      	ldr	r1, [pc, #148]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCC_OscConfig+0x278>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fb42 	bl	80018d8 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003258:	f7fe fb3e 	bl	80018d8 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e193      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d036      	beq.n	80032f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_RCC_OscConfig+0x27c>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fe fb22 	bl	80018d8 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003298:	f7fe fb1e 	bl	80018d8 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e173      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x234>
 80032b6:	e01b      	b.n	80032f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_OscConfig+0x27c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe fb0b 	bl	80018d8 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	e00e      	b.n	80032e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fe fb07 	bl	80018d8 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d907      	bls.n	80032e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e15c      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
 80032d8:	40023800 	.word	0x40023800
 80032dc:	42470000 	.word	0x42470000
 80032e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	4b8a      	ldr	r3, [pc, #552]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ea      	bne.n	80032c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8097 	beq.w	800342c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b83      	ldr	r3, [pc, #524]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	4b7f      	ldr	r3, [pc, #508]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a7e      	ldr	r2, [pc, #504]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b7c      	ldr	r3, [pc, #496]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b79      	ldr	r3, [pc, #484]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333a:	4b76      	ldr	r3, [pc, #472]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a75      	ldr	r2, [pc, #468]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7fe fac7 	bl	80018d8 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334e:	f7fe fac3 	bl	80018d8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e118      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x31e>
 8003374:	4b66      	ldr	r3, [pc, #408]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a65      	ldr	r2, [pc, #404]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
 8003380:	e01c      	b.n	80033bc <HAL_RCC_OscConfig+0x358>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b05      	cmp	r3, #5
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x340>
 800338a:	4b61      	ldr	r3, [pc, #388]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a60      	ldr	r2, [pc, #384]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	4b5e      	ldr	r3, [pc, #376]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5d      	ldr	r2, [pc, #372]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0x358>
 80033a4:	4b5a      	ldr	r3, [pc, #360]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a59      	ldr	r2, [pc, #356]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	4b57      	ldr	r3, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a56      	ldr	r2, [pc, #344]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80033b6:	f023 0304 	bic.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe fa88 	bl	80018d8 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fe fa84 	bl	80018d8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0d7      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ee      	beq.n	80033cc <HAL_RCC_OscConfig+0x368>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fe fa72 	bl	80018d8 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fe fa6e 	bl	80018d8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0c1      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ee      	bne.n	80033f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003420:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	4a3a      	ldr	r2, [pc, #232]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80ad 	beq.w	8003590 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b08      	cmp	r3, #8
 8003440:	d060      	beq.n	8003504 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d145      	bne.n	80034d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b33      	ldr	r3, [pc, #204]	; (8003518 <HAL_RCC_OscConfig+0x4b4>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fe fa42 	bl	80018d8 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe fa3e 	bl	80018d8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e093      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	3b01      	subs	r3, #1
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	071b      	lsls	r3, r3, #28
 80034a2:	491b      	ldr	r1, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_RCC_OscConfig+0x4b4>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe fa13 	bl	80018d8 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe fa0f 	bl	80018d8 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e064      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x452>
 80034d4:	e05c      	b.n	8003590 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_OscConfig+0x4b4>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe f9fc 	bl	80018d8 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe f9f8 	bl	80018d8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e04d      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x480>
 8003502:	e045      	b.n	8003590 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e040      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
 8003510:	40023800 	.word	0x40023800
 8003514:	40007000 	.word	0x40007000
 8003518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x538>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d030      	beq.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d129      	bne.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d122      	bne.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800354c:	4013      	ands	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003554:	4293      	cmp	r3, r2
 8003556:	d119      	bne.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	085b      	lsrs	r3, r3, #1
 8003564:	3b01      	subs	r3, #1
 8003566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d10f      	bne.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d107      	bne.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e041      	b.n	8003636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd ff64 	bl	8001494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f000 fc08 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e041      	b.n	80036d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fd feef 	bl	8001448 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 fbb9 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <HAL_TIM_PWM_Start+0x24>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e022      	b.n	8003746 <HAL_TIM_PWM_Start+0x6a>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b04      	cmp	r3, #4
 8003704:	d109      	bne.n	800371a <HAL_TIM_PWM_Start+0x3e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	bf14      	ite	ne
 8003712:	2301      	movne	r3, #1
 8003714:	2300      	moveq	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	e015      	b.n	8003746 <HAL_TIM_PWM_Start+0x6a>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d109      	bne.n	8003734 <HAL_TIM_PWM_Start+0x58>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	e008      	b.n	8003746 <HAL_TIM_PWM_Start+0x6a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e07c      	b.n	8003848 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_TIM_PWM_Start+0x82>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375c:	e013      	b.n	8003786 <HAL_TIM_PWM_Start+0xaa>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b04      	cmp	r3, #4
 8003762:	d104      	bne.n	800376e <HAL_TIM_PWM_Start+0x92>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800376c:	e00b      	b.n	8003786 <HAL_TIM_PWM_Start+0xaa>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d104      	bne.n	800377e <HAL_TIM_PWM_Start+0xa2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377c:	e003      	b.n	8003786 <HAL_TIM_PWM_Start+0xaa>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fe1a 	bl	80043c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a2d      	ldr	r2, [pc, #180]	; (8003850 <HAL_TIM_PWM_Start+0x174>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_TIM_PWM_Start+0xcc>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a2c      	ldr	r2, [pc, #176]	; (8003854 <HAL_TIM_PWM_Start+0x178>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d101      	bne.n	80037ac <HAL_TIM_PWM_Start+0xd0>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_TIM_PWM_Start+0xd2>
 80037ac:	2300      	movs	r3, #0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a22      	ldr	r2, [pc, #136]	; (8003850 <HAL_TIM_PWM_Start+0x174>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d022      	beq.n	8003812 <HAL_TIM_PWM_Start+0x136>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d4:	d01d      	beq.n	8003812 <HAL_TIM_PWM_Start+0x136>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_TIM_PWM_Start+0x17c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d018      	beq.n	8003812 <HAL_TIM_PWM_Start+0x136>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_TIM_PWM_Start+0x180>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_TIM_PWM_Start+0x136>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <HAL_TIM_PWM_Start+0x184>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_TIM_PWM_Start+0x136>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a16      	ldr	r2, [pc, #88]	; (8003854 <HAL_TIM_PWM_Start+0x178>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_TIM_PWM_Start+0x136>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a18      	ldr	r2, [pc, #96]	; (8003864 <HAL_TIM_PWM_Start+0x188>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_TIM_PWM_Start+0x136>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a16      	ldr	r2, [pc, #88]	; (8003868 <HAL_TIM_PWM_Start+0x18c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d111      	bne.n	8003836 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b06      	cmp	r3, #6
 8003822:	d010      	beq.n	8003846 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003834:	e007      	b.n	8003846 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40010000 	.word	0x40010000
 8003854:	40010400 	.word	0x40010400
 8003858:	40000400 	.word	0x40000400
 800385c:	40000800 	.word	0x40000800
 8003860:	40000c00 	.word	0x40000c00
 8003864:	40014000 	.word	0x40014000
 8003868:	40001800 	.word	0x40001800

0800386c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d122      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b02      	cmp	r3, #2
 800388e:	d11b      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0202 	mvn.w	r2, #2
 8003898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa81 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa73 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fa84 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d122      	bne.n	800391c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d11b      	bne.n	800391c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0204 	mvn.w	r2, #4
 80038ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa57 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 8003908:	e005      	b.n	8003916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa49 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fa5a 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b08      	cmp	r3, #8
 8003928:	d122      	bne.n	8003970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b08      	cmp	r3, #8
 8003936:	d11b      	bne.n	8003970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f06f 0208 	mvn.w	r2, #8
 8003940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2204      	movs	r2, #4
 8003946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fa2d 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 800395c:	e005      	b.n	800396a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa1f 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fa30 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b10      	cmp	r3, #16
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b10      	cmp	r3, #16
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0210 	mvn.w	r2, #16
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2208      	movs	r2, #8
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fa03 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f9f5 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fa06 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d10e      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d107      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0201 	mvn.w	r2, #1
 80039e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f9cf 	bl	8003d8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d10e      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d107      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fd82 	bl	8004520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d10e      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b40      	cmp	r3, #64	; 0x40
 8003a36:	d107      	bne.n	8003a48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f9cb 	bl	8003dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d10e      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d107      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0220 	mvn.w	r2, #32
 8003a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fd4c 	bl	800450c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0ae      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	f200 809f 	bhi.w	8003be8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003be9 	.word	0x08003be9
 8003ab8:	08003be9 	.word	0x08003be9
 8003abc:	08003be9 	.word	0x08003be9
 8003ac0:	08003b25 	.word	0x08003b25
 8003ac4:	08003be9 	.word	0x08003be9
 8003ac8:	08003be9 	.word	0x08003be9
 8003acc:	08003be9 	.word	0x08003be9
 8003ad0:	08003b67 	.word	0x08003b67
 8003ad4:	08003be9 	.word	0x08003be9
 8003ad8:	08003be9 	.word	0x08003be9
 8003adc:	08003be9 	.word	0x08003be9
 8003ae0:	08003ba7 	.word	0x08003ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fa22 	bl	8003f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0208 	orr.w	r2, r2, #8
 8003afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6999      	ldr	r1, [r3, #24]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	619a      	str	r2, [r3, #24]
      break;
 8003b22:	e064      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fa72 	bl	8004014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	021a      	lsls	r2, r3, #8
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	619a      	str	r2, [r3, #24]
      break;
 8003b64:	e043      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fac7 	bl	8004100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0208 	orr.w	r2, r2, #8
 8003b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0204 	bic.w	r2, r2, #4
 8003b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69d9      	ldr	r1, [r3, #28]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	61da      	str	r2, [r3, #28]
      break;
 8003ba4:	e023      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fb1b 	bl	80041e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	61da      	str	r2, [r3, #28]
      break;
 8003be6:	e002      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	75fb      	strb	r3, [r7, #23]
      break;
 8003bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIM_ConfigClockSource+0x1c>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e0b4      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x186>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c54:	d03e      	beq.n	8003cd4 <HAL_TIM_ConfigClockSource+0xd4>
 8003c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5a:	f200 8087 	bhi.w	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c62:	f000 8086 	beq.w	8003d72 <HAL_TIM_ConfigClockSource+0x172>
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6a:	d87f      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c6c:	2b70      	cmp	r3, #112	; 0x70
 8003c6e:	d01a      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0xa6>
 8003c70:	2b70      	cmp	r3, #112	; 0x70
 8003c72:	d87b      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	2b60      	cmp	r3, #96	; 0x60
 8003c76:	d050      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x11a>
 8003c78:	2b60      	cmp	r3, #96	; 0x60
 8003c7a:	d877      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c7c:	2b50      	cmp	r3, #80	; 0x50
 8003c7e:	d03c      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0xfa>
 8003c80:	2b50      	cmp	r3, #80	; 0x50
 8003c82:	d873      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d058      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0x13a>
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	d86f      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c8c:	2b30      	cmp	r3, #48	; 0x30
 8003c8e:	d064      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003c90:	2b30      	cmp	r3, #48	; 0x30
 8003c92:	d86b      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d060      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d867      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d05c      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d05a      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ca4:	e062      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f000 fb67 	bl	8004388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	609a      	str	r2, [r3, #8]
      break;
 8003cd2:	e04f      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f000 fb50 	bl	8004388 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf6:	609a      	str	r2, [r3, #8]
      break;
 8003cf8:	e03c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f000 fac4 	bl	8004294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2150      	movs	r1, #80	; 0x50
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fb1d 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 8003d18:	e02c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	461a      	mov	r2, r3
 8003d28:	f000 fae3 	bl	80042f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2160      	movs	r1, #96	; 0x60
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fb0d 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 8003d38:	e01c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f000 faa4 	bl	8004294 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2140      	movs	r1, #64	; 0x40
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fafd 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 8003d58:	e00c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f000 faf4 	bl	8004352 <TIM_ITRx_SetConfig>
      break;
 8003d6a:	e003      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d70:	e000      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a40      	ldr	r2, [pc, #256]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d00f      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3d      	ldr	r2, [pc, #244]	; (8003f0c <TIM_Base_SetConfig+0x118>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3c      	ldr	r2, [pc, #240]	; (8003f10 <TIM_Base_SetConfig+0x11c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3b      	ldr	r2, [pc, #236]	; (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3a      	ldr	r2, [pc, #232]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e54:	d027      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2c      	ldr	r2, [pc, #176]	; (8003f0c <TIM_Base_SetConfig+0x118>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d023      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2b      	ldr	r2, [pc, #172]	; (8003f10 <TIM_Base_SetConfig+0x11c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d017      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a28      	ldr	r2, [pc, #160]	; (8003f1c <TIM_Base_SetConfig+0x128>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <TIM_Base_SetConfig+0x134>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <TIM_Base_SetConfig+0x138>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0xf8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d103      	bne.n	8003ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	615a      	str	r2, [r3, #20]
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800
 8003f14:	40000c00 	.word	0x40000c00
 8003f18:	40010400 	.word	0x40010400
 8003f1c:	40014000 	.word	0x40014000
 8003f20:	40014400 	.word	0x40014400
 8003f24:	40014800 	.word	0x40014800
 8003f28:	40001800 	.word	0x40001800
 8003f2c:	40001c00 	.word	0x40001c00
 8003f30:	40002000 	.word	0x40002000

08003f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f023 0201 	bic.w	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 0302 	bic.w	r3, r3, #2
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a20      	ldr	r2, [pc, #128]	; (800400c <TIM_OC1_SetConfig+0xd8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC1_SetConfig+0x64>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a1f      	ldr	r2, [pc, #124]	; (8004010 <TIM_OC1_SetConfig+0xdc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10c      	bne.n	8003fb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0308 	bic.w	r3, r3, #8
 8003f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f023 0304 	bic.w	r3, r3, #4
 8003fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a15      	ldr	r2, [pc, #84]	; (800400c <TIM_OC1_SetConfig+0xd8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_OC1_SetConfig+0x8e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a14      	ldr	r2, [pc, #80]	; (8004010 <TIM_OC1_SetConfig+0xdc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d111      	bne.n	8003fe6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	621a      	str	r2, [r3, #32]
}
 8004000:	bf00      	nop
 8004002:	371c      	adds	r7, #28
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40010000 	.word	0x40010000
 8004010:	40010400 	.word	0x40010400

08004014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f023 0210 	bic.w	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0320 	bic.w	r3, r3, #32
 800405e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <TIM_OC2_SetConfig+0xe4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_OC2_SetConfig+0x68>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a21      	ldr	r2, [pc, #132]	; (80040fc <TIM_OC2_SetConfig+0xe8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d10d      	bne.n	8004098 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004096:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a17      	ldr	r2, [pc, #92]	; (80040f8 <TIM_OC2_SetConfig+0xe4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_OC2_SetConfig+0x94>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a16      	ldr	r2, [pc, #88]	; (80040fc <TIM_OC2_SetConfig+0xe8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d113      	bne.n	80040d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40010000 	.word	0x40010000
 80040fc:	40010400 	.word	0x40010400

08004100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a21      	ldr	r2, [pc, #132]	; (80041e0 <TIM_OC3_SetConfig+0xe0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_OC3_SetConfig+0x66>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <TIM_OC3_SetConfig+0xe4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d10d      	bne.n	8004182 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800416c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <TIM_OC3_SetConfig+0xe0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_OC3_SetConfig+0x92>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <TIM_OC3_SetConfig+0xe4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d113      	bne.n	80041ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40010400 	.word	0x40010400

080041e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	031b      	lsls	r3, r3, #12
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a12      	ldr	r2, [pc, #72]	; (800428c <TIM_OC4_SetConfig+0xa4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d003      	beq.n	8004250 <TIM_OC4_SetConfig+0x68>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a11      	ldr	r2, [pc, #68]	; (8004290 <TIM_OC4_SetConfig+0xa8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d109      	bne.n	8004264 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	019b      	lsls	r3, r3, #6
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000
 8004290:	40010400 	.word	0x40010400

08004294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f023 0201 	bic.w	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f023 030a 	bic.w	r3, r3, #10
 80042d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b087      	sub	sp, #28
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f023 0210 	bic.w	r2, r3, #16
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800431c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	031b      	lsls	r3, r3, #12
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800432e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	f043 0307 	orr.w	r3, r3, #7
 8004374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	609a      	str	r2, [r3, #8]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	021a      	lsls	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	609a      	str	r2, [r3, #8]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2201      	movs	r2, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1a      	ldr	r2, [r3, #32]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	43db      	mvns	r3, r3
 80043ea:	401a      	ands	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004400:	431a      	orrs	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004428:	2302      	movs	r3, #2
 800442a:	e05a      	b.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d022      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004478:	d01d      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d018      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1a      	ldr	r2, [pc, #104]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00e      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a17      	ldr	r2, [pc, #92]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a15      	ldr	r2, [pc, #84]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10c      	bne.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40010000 	.word	0x40010000
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40010400 	.word	0x40010400
 8004504:	40014000 	.word	0x40014000
 8004508:	40001800 	.word	0x40001800

0800450c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e03f      	b.n	80045c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fd f8e4 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f929 	bl	80047d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800458c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695a      	ldr	r2, [r3, #20]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800459c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b08a      	sub	sp, #40	; 0x28
 80045d2:	af02      	add	r7, sp, #8
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	603b      	str	r3, [r7, #0]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d17c      	bne.n	80046e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_UART_Transmit+0x2c>
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e075      	b.n	80046ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_UART_Transmit+0x3e>
 8004608:	2302      	movs	r3, #2
 800460a:	e06e      	b.n	80046ea <HAL_UART_Transmit+0x11c>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2221      	movs	r2, #33	; 0x21
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004622:	f7fd f959 	bl	80018d8 <HAL_GetTick>
 8004626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	88fa      	ldrh	r2, [r7, #6]
 800462c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	88fa      	ldrh	r2, [r7, #6]
 8004632:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463c:	d108      	bne.n	8004650 <HAL_UART_Transmit+0x82>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	e003      	b.n	8004658 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004660:	e02a      	b.n	80046b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2200      	movs	r2, #0
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f840 	bl	80046f2 <UART_WaitOnFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e036      	b.n	80046ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10b      	bne.n	800469a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	3302      	adds	r3, #2
 8004696:	61bb      	str	r3, [r7, #24]
 8004698:	e007      	b.n	80046aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	3301      	adds	r3, #1
 80046a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1cf      	bne.n	8004662 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2200      	movs	r2, #0
 80046ca:	2140      	movs	r1, #64	; 0x40
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f810 	bl	80046f2 <UART_WaitOnFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e006      	b.n	80046ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b090      	sub	sp, #64	; 0x40
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	4613      	mov	r3, r2
 8004700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004702:	e050      	b.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d04c      	beq.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800470c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x30>
 8004712:	f7fd f8e1 	bl	80018d8 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800471e:	429a      	cmp	r2, r3
 8004720:	d241      	bcs.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004742:	637a      	str	r2, [r7, #52]	; 0x34
 8004744:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e5      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3314      	adds	r3, #20
 800475c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	613b      	str	r3, [r7, #16]
   return(result);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	63bb      	str	r3, [r7, #56]	; 0x38
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3314      	adds	r3, #20
 8004774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004776:	623a      	str	r2, [r7, #32]
 8004778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	69f9      	ldr	r1, [r7, #28]
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	61bb      	str	r3, [r7, #24]
   return(result);
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e5      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e00f      	b.n	80047c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d09f      	beq.n	8004704 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3740      	adds	r7, #64	; 0x40
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d4:	b0c0      	sub	sp, #256	; 0x100
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	68d9      	ldr	r1, [r3, #12]
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	ea40 0301 	orr.w	r3, r0, r1
 80047f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	431a      	orrs	r2, r3
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004828:	f021 010c 	bic.w	r1, r1, #12
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004836:	430b      	orrs	r3, r1
 8004838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484a:	6999      	ldr	r1, [r3, #24]
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	ea40 0301 	orr.w	r3, r0, r1
 8004856:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b8f      	ldr	r3, [pc, #572]	; (8004a9c <UART_SetConfig+0x2cc>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d005      	beq.n	8004870 <UART_SetConfig+0xa0>
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b8d      	ldr	r3, [pc, #564]	; (8004aa0 <UART_SetConfig+0x2d0>)
 800486c:	429a      	cmp	r2, r3
 800486e:	d104      	bne.n	800487a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004870:	f7fe f9b4 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 8004874:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004878:	e003      	b.n	8004882 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800487a:	f7fe f99b 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 800487e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488c:	f040 810c 	bne.w	8004aa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800489a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800489e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	1891      	adds	r1, r2, r2
 80048a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80048aa:	415b      	adcs	r3, r3
 80048ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048b2:	4621      	mov	r1, r4
 80048b4:	eb12 0801 	adds.w	r8, r2, r1
 80048b8:	4629      	mov	r1, r5
 80048ba:	eb43 0901 	adc.w	r9, r3, r1
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048d2:	4690      	mov	r8, r2
 80048d4:	4699      	mov	r9, r3
 80048d6:	4623      	mov	r3, r4
 80048d8:	eb18 0303 	adds.w	r3, r8, r3
 80048dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048e0:	462b      	mov	r3, r5
 80048e2:	eb49 0303 	adc.w	r3, r9, r3
 80048e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048fe:	460b      	mov	r3, r1
 8004900:	18db      	adds	r3, r3, r3
 8004902:	653b      	str	r3, [r7, #80]	; 0x50
 8004904:	4613      	mov	r3, r2
 8004906:	eb42 0303 	adc.w	r3, r2, r3
 800490a:	657b      	str	r3, [r7, #84]	; 0x54
 800490c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004914:	f7fb fcd4 	bl	80002c0 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <UART_SetConfig+0x2d4>)
 800491e:	fba3 2302 	umull	r2, r3, r3, r2
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	011c      	lsls	r4, r3, #4
 8004926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800492a:	2200      	movs	r2, #0
 800492c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004930:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	1891      	adds	r1, r2, r2
 800493e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004940:	415b      	adcs	r3, r3
 8004942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004948:	4641      	mov	r1, r8
 800494a:	eb12 0a01 	adds.w	sl, r2, r1
 800494e:	4649      	mov	r1, r9
 8004950:	eb43 0b01 	adc.w	fp, r3, r1
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004968:	4692      	mov	sl, r2
 800496a:	469b      	mov	fp, r3
 800496c:	4643      	mov	r3, r8
 800496e:	eb1a 0303 	adds.w	r3, sl, r3
 8004972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004976:	464b      	mov	r3, r9
 8004978:	eb4b 0303 	adc.w	r3, fp, r3
 800497c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800498c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004994:	460b      	mov	r3, r1
 8004996:	18db      	adds	r3, r3, r3
 8004998:	643b      	str	r3, [r7, #64]	; 0x40
 800499a:	4613      	mov	r3, r2
 800499c:	eb42 0303 	adc.w	r3, r2, r3
 80049a0:	647b      	str	r3, [r7, #68]	; 0x44
 80049a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049aa:	f7fb fc89 	bl	80002c0 <__aeabi_uldivmod>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4611      	mov	r1, r2
 80049b4:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <UART_SetConfig+0x2d4>)
 80049b6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2264      	movs	r2, #100	; 0x64
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	1acb      	subs	r3, r1, r3
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049ca:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <UART_SetConfig+0x2d4>)
 80049cc:	fba3 2302 	umull	r2, r3, r3, r2
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049d8:	441c      	add	r4, r3
 80049da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049ec:	4642      	mov	r2, r8
 80049ee:	464b      	mov	r3, r9
 80049f0:	1891      	adds	r1, r2, r2
 80049f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049f4:	415b      	adcs	r3, r3
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049fc:	4641      	mov	r1, r8
 80049fe:	1851      	adds	r1, r2, r1
 8004a00:	6339      	str	r1, [r7, #48]	; 0x30
 8004a02:	4649      	mov	r1, r9
 8004a04:	414b      	adcs	r3, r1
 8004a06:	637b      	str	r3, [r7, #52]	; 0x34
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a14:	4659      	mov	r1, fp
 8004a16:	00cb      	lsls	r3, r1, #3
 8004a18:	4651      	mov	r1, sl
 8004a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a1e:	4651      	mov	r1, sl
 8004a20:	00ca      	lsls	r2, r1, #3
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	4642      	mov	r2, r8
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a30:	464b      	mov	r3, r9
 8004a32:	460a      	mov	r2, r1
 8004a34:	eb42 0303 	adc.w	r3, r2, r3
 8004a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a50:	460b      	mov	r3, r1
 8004a52:	18db      	adds	r3, r3, r3
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a56:	4613      	mov	r3, r2
 8004a58:	eb42 0303 	adc.w	r3, r2, r3
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a66:	f7fb fc2b 	bl	80002c0 <__aeabi_uldivmod>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <UART_SetConfig+0x2d4>)
 8004a70:	fba3 1302 	umull	r1, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	2164      	movs	r1, #100	; 0x64
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	3332      	adds	r3, #50	; 0x32
 8004a82:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <UART_SetConfig+0x2d4>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	f003 0207 	and.w	r2, r3, #7
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4422      	add	r2, r4
 8004a96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a98:	e105      	b.n	8004ca6 <UART_SetConfig+0x4d6>
 8004a9a:	bf00      	nop
 8004a9c:	40011000 	.word	0x40011000
 8004aa0:	40011400 	.word	0x40011400
 8004aa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ab6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004aba:	4642      	mov	r2, r8
 8004abc:	464b      	mov	r3, r9
 8004abe:	1891      	adds	r1, r2, r2
 8004ac0:	6239      	str	r1, [r7, #32]
 8004ac2:	415b      	adcs	r3, r3
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aca:	4641      	mov	r1, r8
 8004acc:	1854      	adds	r4, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb43 0501 	adc.w	r5, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	00eb      	lsls	r3, r5, #3
 8004ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae2:	00e2      	lsls	r2, r4, #3
 8004ae4:	4614      	mov	r4, r2
 8004ae6:	461d      	mov	r5, r3
 8004ae8:	4643      	mov	r3, r8
 8004aea:	18e3      	adds	r3, r4, r3
 8004aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004af0:	464b      	mov	r3, r9
 8004af2:	eb45 0303 	adc.w	r3, r5, r3
 8004af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b16:	4629      	mov	r1, r5
 8004b18:	008b      	lsls	r3, r1, #2
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b20:	4621      	mov	r1, r4
 8004b22:	008a      	lsls	r2, r1, #2
 8004b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b28:	f7fb fbca 	bl	80002c0 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <UART_SetConfig+0x4e4>)
 8004b32:	fba3 2302 	umull	r2, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	011c      	lsls	r4, r3, #4
 8004b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	1891      	adds	r1, r2, r2
 8004b52:	61b9      	str	r1, [r7, #24]
 8004b54:	415b      	adcs	r3, r3
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	1851      	adds	r1, r2, r1
 8004b60:	6139      	str	r1, [r7, #16]
 8004b62:	4649      	mov	r1, r9
 8004b64:	414b      	adcs	r3, r1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b74:	4659      	mov	r1, fp
 8004b76:	00cb      	lsls	r3, r1, #3
 8004b78:	4651      	mov	r1, sl
 8004b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b7e:	4651      	mov	r1, sl
 8004b80:	00ca      	lsls	r2, r1, #3
 8004b82:	4610      	mov	r0, r2
 8004b84:	4619      	mov	r1, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	4642      	mov	r2, r8
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b90:	464b      	mov	r3, r9
 8004b92:	460a      	mov	r2, r1
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ba6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	008b      	lsls	r3, r1, #2
 8004bb8:	4641      	mov	r1, r8
 8004bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	008a      	lsls	r2, r1, #2
 8004bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004bc6:	f7fb fb7b 	bl	80002c0 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4b39      	ldr	r3, [pc, #228]	; (8004cb4 <UART_SetConfig+0x4e4>)
 8004bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	2164      	movs	r1, #100	; 0x64
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	3332      	adds	r3, #50	; 0x32
 8004be2:	4a34      	ldr	r2, [pc, #208]	; (8004cb4 <UART_SetConfig+0x4e4>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bee:	441c      	add	r4, r3
 8004bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	673b      	str	r3, [r7, #112]	; 0x70
 8004bf8:	677a      	str	r2, [r7, #116]	; 0x74
 8004bfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bfe:	4642      	mov	r2, r8
 8004c00:	464b      	mov	r3, r9
 8004c02:	1891      	adds	r1, r2, r2
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	415b      	adcs	r3, r3
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c0e:	4641      	mov	r1, r8
 8004c10:	1851      	adds	r1, r2, r1
 8004c12:	6039      	str	r1, [r7, #0]
 8004c14:	4649      	mov	r1, r9
 8004c16:	414b      	adcs	r3, r1
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c26:	4659      	mov	r1, fp
 8004c28:	00cb      	lsls	r3, r1, #3
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c30:	4651      	mov	r1, sl
 8004c32:	00ca      	lsls	r2, r1, #3
 8004c34:	4610      	mov	r0, r2
 8004c36:	4619      	mov	r1, r3
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	189b      	adds	r3, r3, r2
 8004c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c40:	464b      	mov	r3, r9
 8004c42:	460a      	mov	r2, r1
 8004c44:	eb42 0303 	adc.w	r3, r2, r3
 8004c48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	663b      	str	r3, [r7, #96]	; 0x60
 8004c54:	667a      	str	r2, [r7, #100]	; 0x64
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c62:	4649      	mov	r1, r9
 8004c64:	008b      	lsls	r3, r1, #2
 8004c66:	4641      	mov	r1, r8
 8004c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	008a      	lsls	r2, r1, #2
 8004c70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c74:	f7fb fb24 	bl	80002c0 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <UART_SetConfig+0x4e4>)
 8004c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2164      	movs	r1, #100	; 0x64
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	3332      	adds	r3, #50	; 0x32
 8004c90:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <UART_SetConfig+0x4e4>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4422      	add	r2, r4
 8004ca4:	609a      	str	r2, [r3, #8]
}
 8004ca6:	bf00      	nop
 8004ca8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cac:	46bd      	mov	sp, r7
 8004cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb2:	bf00      	nop
 8004cb4:	51eb851f 	.word	0x51eb851f

08004cb8 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4820      	ldr	r0, [pc, #128]	; (8004d48 <network_configure_activations+0x90>)
 8004cc8:	f000 fa96 	bl	80051f8 <ai_platform_get_activations_map>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d02f      	beq.n	8004d32 <network_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004cd2:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <network_configure_activations+0x90>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <network_configure_activations+0x94>)
 8004cd8:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004cda:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <network_configure_activations+0x90>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1b      	ldr	r2, [pc, #108]	; (8004d4c <network_configure_activations+0x94>)
 8004ce0:	60d3      	str	r3, [r2, #12]
    
    L1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 8004ce2:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <network_configure_activations+0x90>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3318      	adds	r3, #24
 8004ce8:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <network_configure_activations+0x98>)
 8004cea:	6093      	str	r3, [r2, #8]
    L1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 8004cec:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <network_configure_activations+0x90>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3318      	adds	r3, #24
 8004cf2:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <network_configure_activations+0x98>)
 8004cf4:	60d3      	str	r3, [r2, #12]
    
    L1_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <network_configure_activations+0x90>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3318      	adds	r3, #24
 8004cfc:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <network_configure_activations+0x9c>)
 8004cfe:	6093      	str	r3, [r2, #8]
    L1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 8004d00:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <network_configure_activations+0x90>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3318      	adds	r3, #24
 8004d06:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <network_configure_activations+0x9c>)
 8004d08:	60d3      	str	r3, [r2, #12]
    
    L5_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <network_configure_activations+0x90>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a12      	ldr	r2, [pc, #72]	; (8004d58 <network_configure_activations+0xa0>)
 8004d10:	6093      	str	r3, [r2, #8]
    L5_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004d12:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <network_configure_activations+0x90>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <network_configure_activations+0xa0>)
 8004d18:	60d3      	str	r3, [r2, #12]
    
    L5_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <network_configure_activations+0x90>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4a0e      	ldr	r2, [pc, #56]	; (8004d5c <network_configure_activations+0xa4>)
 8004d22:	6093      	str	r3, [r2, #8]
    L5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 8004d24:	4b08      	ldr	r3, [pc, #32]	; (8004d48 <network_configure_activations+0x90>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	4a0c      	ldr	r2, [pc, #48]	; (8004d5c <network_configure_activations+0xa4>)
 8004d2c:	60d3      	str	r3, [r2, #12]
    
    return true;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e005      	b.n	8004d3e <network_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004d32:	2213      	movs	r2, #19
 8004d34:	2130      	movs	r1, #48	; 0x30
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fb42 	bl	80053c0 <ai_platform_network_set_error>
  return false;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000f6c 	.word	0x20000f6c
 8004d4c:	2000008c 	.word	0x2000008c
 8004d50:	2000000c 	.word	0x2000000c
 8004d54:	2000001c 	.word	0x2000001c
 8004d58:	2000002c 	.word	0x2000002c
 8004d5c:	2000003c 	.word	0x2000003c

08004d60 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	482b      	ldr	r0, [pc, #172]	; (8004e1c <network_configure_weights+0xbc>)
 8004d70:	f000 f9ee 	bl	8005150 <ai_platform_get_weights_map>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d045      	beq.n	8004e06 <network_configure_weights+0xa6>
    /* Updating weights (byte) offsets */
    
    L1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d7a:	4b29      	ldr	r3, [pc, #164]	; (8004e20 <network_configure_weights+0xc0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d82:	4a27      	ldr	r2, [pc, #156]	; (8004e20 <network_configure_weights+0xc0>)
 8004d84:	6013      	str	r3, [r2, #0]
    L1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8004d86:	4b25      	ldr	r3, [pc, #148]	; (8004e1c <network_configure_weights+0xbc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a25      	ldr	r2, [pc, #148]	; (8004e20 <network_configure_weights+0xc0>)
 8004d8c:	6093      	str	r3, [r2, #8]
    L1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004d8e:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <network_configure_weights+0xbc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a23      	ldr	r2, [pc, #140]	; (8004e20 <network_configure_weights+0xc0>)
 8004d94:	60d3      	str	r3, [r2, #12]
    
    L1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d96:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <network_configure_weights+0xc4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d9e:	4a21      	ldr	r2, [pc, #132]	; (8004e24 <network_configure_weights+0xc4>)
 8004da0:	6013      	str	r3, [r2, #0]
    L1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 9600);
 8004da2:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <network_configure_weights+0xbc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 8004daa:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <network_configure_weights+0xc4>)
 8004dac:	6093      	str	r3, [r2, #8]
    L1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 9600);
 8004dae:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <network_configure_weights+0xbc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 8004db6:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <network_configure_weights+0xc4>)
 8004db8:	60d3      	str	r3, [r2, #12]
    
    L5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8004dba:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <network_configure_weights+0xc8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dc2:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <network_configure_weights+0xc8>)
 8004dc4:	6013      	str	r3, [r2, #0]
    L5_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 11200);
 8004dc6:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <network_configure_weights+0xbc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f503 532f 	add.w	r3, r3, #11200	; 0x2bc0
 8004dce:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <network_configure_weights+0xc8>)
 8004dd0:	6093      	str	r3, [r2, #8]
    L5_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 11200);
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <network_configure_weights+0xbc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f503 532f 	add.w	r3, r3, #11200	; 0x2bc0
 8004dda:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <network_configure_weights+0xc8>)
 8004ddc:	60d3      	str	r3, [r2, #12]
    
    L5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004dde:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <network_configure_weights+0xcc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de6:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <network_configure_weights+0xcc>)
 8004de8:	6013      	str	r3, [r2, #0]
    L5_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 12800);
 8004dea:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <network_configure_weights+0xbc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8004df2:	4a0e      	ldr	r2, [pc, #56]	; (8004e2c <network_configure_weights+0xcc>)
 8004df4:	6093      	str	r3, [r2, #8]
    L5_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 12800);
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <network_configure_weights+0xbc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8004dfe:	4a0b      	ldr	r2, [pc, #44]	; (8004e2c <network_configure_weights+0xcc>)
 8004e00:	60d3      	str	r3, [r2, #12]
    
    return true;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e005      	b.n	8004e12 <network_configure_weights+0xb2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004e06:	2212      	movs	r2, #18
 8004e08:	2130      	movs	r1, #48	; 0x30
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fad8 	bl	80053c0 <ai_platform_network_set_error>
  return false;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000f70 	.word	0x20000f70
 8004e20:	2000004c 	.word	0x2000004c
 8004e24:	2000005c 	.word	0x2000005c
 8004e28:	2000006c 	.word	0x2000006c
 8004e2c:	2000007c 	.word	0x2000007c

08004e30 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fa53 	bl	80052e4 <ai_platform_network_get_error>
 8004e3e:	4603      	mov	r3, r0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004e52:	2300      	movs	r3, #0
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	2305      	movs	r3, #5
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4a04      	ldr	r2, [pc, #16]	; (8004e70 <ai_network_create+0x28>)
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fc59 	bl	8005718 <ai_platform_network_create>
 8004e66:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	200004b0 	.word	0x200004b0

08004e74 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b096      	sub	sp, #88	; 0x58
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8004e80:	2100      	movs	r1, #0
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f7ff ffe0 	bl	8004e48 <ai_network_create>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8004e8c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <ai_network_create_and_init+0x24>
        return err;
 8004e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e96:	e05d      	b.n	8004f54 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8004e98:	f107 0314 	add.w	r3, r7, #20
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f8dd 	bl	800505c <ai_network_data_params_get>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f083 0301 	eor.w	r3, r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d008      	beq.n	8004ec0 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff ffbc 	bl	8004e30 <ai_network_get_error>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8004ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ebe:	e049      	b.n	8004f54 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d016      	beq.n	8004ef4 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	657b      	str	r3, [r7, #84]	; 0x54
 8004eca:	e00e      	b.n	8004eea <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8004ecc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	f107 0314 	add.w	r3, r7, #20
 8004edc:	330c      	adds	r3, #12
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 f922 	bl	8005128 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8004ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	657b      	str	r3, [r7, #84]	; 0x54
 8004eea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004eec:	461a      	mov	r2, r3
 8004eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	dbeb      	blt.n	8004ecc <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d016      	beq.n	8004f28 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8004efa:	2300      	movs	r3, #0
 8004efc:	653b      	str	r3, [r7, #80]	; 0x50
 8004efe:	e00e      	b.n	8004f1e <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004f00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	4413      	add	r3, r2
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	f107 0314 	add.w	r3, r7, #20
 8004f10:	3304      	adds	r3, #4
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f908 	bl	8005128 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8004f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f1e:	8b7b      	ldrh	r3, [r7, #26]
 8004f20:	461a      	mov	r2, r3
 8004f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f24:	4293      	cmp	r3, r2
 8004f26:	dbeb      	blt.n	8004f00 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f107 0214 	add.w	r2, r7, #20
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f846 	bl	8004fc4 <ai_network_init>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f083 0301 	eor.w	r3, r3, #1
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d006      	beq.n	8004f52 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ff71 	bl	8004e30 <ai_network_get_error>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8004f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3758      	adds	r7, #88	; 0x58
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <ai_network_inputs_get+0x2c>)
 8004f6e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a06      	ldr	r2, [pc, #24]	; (8004f8c <ai_network_inputs_get+0x30>)
 8004f74:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8004f76:	6839      	ldr	r1, [r7, #0]
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fa27 	bl	80053cc <ai_platform_inputs_get>
 8004f7e:	4603      	mov	r3, r0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	200004b0 	.word	0x200004b0
 8004f8c:	a1c00100 	.word	0xa1c00100

08004f90 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d104      	bne.n	8004faa <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <ai_network_outputs_get+0x2c>)
 8004fa2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a06      	ldr	r2, [pc, #24]	; (8004fc0 <ai_network_outputs_get+0x30>)
 8004fa8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8004faa:	6839      	ldr	r1, [r7, #0]
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fae3 	bl	8005578 <ai_platform_outputs_get>
 8004fb2:	4603      	mov	r3, r0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	200004b0 	.word	0x200004b0
 8004fc0:	a1c00100 	.word	0xa1c00100

08004fc4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fc77 	bl	80058c4 <ai_platform_network_init>
 8004fd6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <ai_network_init+0x1e>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e028      	b.n	8005034 <ai_network_init+0x70>

  ai_bool ok = true;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff feb9 	bl	8004d60 <network_configure_weights>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bf14      	ite	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	2300      	moveq	r3, #0
 8004ffe:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff fe58 	bl	8004cb8 <network_configure_activations>
 8005008:	4603      	mov	r3, r0
 800500a:	461a      	mov	r2, r3
 800500c:	7afb      	ldrb	r3, [r7, #11]
 800500e:	4013      	ands	r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf14      	ite	ne
 8005014:	2301      	movne	r3, #1
 8005016:	2300      	moveq	r3, #0
 8005018:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fd40 	bl	8005aa0 <ai_platform_network_post_init>
 8005020:	4603      	mov	r3, r0
 8005022:	461a      	mov	r2, r3
 8005024:	7afb      	ldrb	r3, [r7, #11]
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	bf14      	ite	ne
 800502c:	2301      	movne	r3, #1
 800502e:	2300      	moveq	r3, #0
 8005030:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005032:	7afb      	ldrb	r3, [r7, #11]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fdaf 	bl	8005bb0 <ai_platform_network_process>
 8005052:	4603      	mov	r3, r0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <ai_network_data_params_get+0x12>
 800506a:	2300      	movs	r3, #0
 800506c:	e016      	b.n	800509c <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800506e:	4a0d      	ldr	r2, [pc, #52]	; (80050a4 <ai_network_data_params_get+0x48>)
 8005070:	f107 0310 	add.w	r3, r7, #16
 8005074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005078:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800507c:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <ai_network_data_params_get+0x4c>)
 800507e:	f107 0308 	add.w	r3, r7, #8
 8005082:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005086:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800508a:	f107 0210 	add.w	r2, r7, #16
 800508e:	f107 0308 	add.w	r3, r7, #8
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f903 	bl	80052a0 <ai_platform_bind_network_params>
 800509a:	4603      	mov	r3, r0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	08007a2c 	.word	0x08007a2c
 80050a8:	08007a34 	.word	0x08007a34

080050ac <ai_buffer_get_size>:
 80050ac:	b378      	cbz	r0, 800510e <ai_buffer_get_size+0x62>
 80050ae:	b410      	push	{r4}
 80050b0:	6803      	ldr	r3, [r0, #0]
 80050b2:	4a17      	ldr	r2, [pc, #92]	; (8005110 <ai_buffer_get_size+0x64>)
 80050b4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80050b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050bc:	4293      	cmp	r3, r2
 80050be:	d01e      	beq.n	80050fe <ai_buffer_get_size+0x52>
 80050c0:	6984      	ldr	r4, [r0, #24]
 80050c2:	6862      	ldr	r2, [r4, #4]
 80050c4:	7d03      	ldrb	r3, [r0, #20]
 80050c6:	6941      	ldr	r1, [r0, #20]
 80050c8:	f1a3 0301 	sub.w	r3, r3, #1
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80050d6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80050da:	da0b      	bge.n	80050f4 <ai_buffer_get_size+0x48>
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d102      	bne.n	80050e6 <ai_buffer_get_size+0x3a>
 80050e0:	2802      	cmp	r0, #2
 80050e2:	d007      	beq.n	80050f4 <ai_buffer_get_size+0x48>
 80050e4:	2302      	movs	r3, #2
 80050e6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80050ea:	3301      	adds	r3, #1
 80050ec:	4298      	cmp	r0, r3
 80050ee:	fb01 f202 	mul.w	r2, r1, r2
 80050f2:	d1f3      	bne.n	80050dc <ai_buffer_get_size+0x30>
 80050f4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80050f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	2900      	cmp	r1, #0
 8005100:	d0de      	beq.n	80050c0 <ai_buffer_get_size+0x14>
 8005102:	6984      	ldr	r4, [r0, #24]
 8005104:	6863      	ldr	r3, [r4, #4]
 8005106:	331f      	adds	r3, #31
 8005108:	f023 021f 	bic.w	r2, r3, #31
 800510c:	e7da      	b.n	80050c4 <ai_buffer_get_size+0x18>
 800510e:	4770      	bx	lr
 8005110:	000400c0 	.word	0x000400c0

08005114 <ai_buffer_array_sane>:
 8005114:	b138      	cbz	r0, 8005126 <ai_buffer_array_sane+0x12>
 8005116:	6843      	ldr	r3, [r0, #4]
 8005118:	b123      	cbz	r3, 8005124 <ai_buffer_array_sane+0x10>
 800511a:	8840      	ldrh	r0, [r0, #2]
 800511c:	3800      	subs	r0, #0
 800511e:	bf18      	it	ne
 8005120:	2001      	movne	r0, #1
 8005122:	4770      	bx	lr
 8005124:	4618      	mov	r0, r3
 8005126:	4770      	bx	lr

08005128 <ai_buffer_array_item_set_address>:
 8005128:	b150      	cbz	r0, 8005140 <ai_buffer_array_item_set_address+0x18>
 800512a:	6843      	ldr	r3, [r0, #4]
 800512c:	b14b      	cbz	r3, 8005142 <ai_buffer_array_item_set_address+0x1a>
 800512e:	8840      	ldrh	r0, [r0, #2]
 8005130:	b900      	cbnz	r0, 8005134 <ai_buffer_array_item_set_address+0xc>
 8005132:	4770      	bx	lr
 8005134:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005138:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800513c:	2001      	movs	r0, #1
 800513e:	604a      	str	r2, [r1, #4]
 8005140:	4770      	bx	lr
 8005142:	4618      	mov	r0, r3
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop

08005148 <_ai_platform_acquire_crc>:
 8005148:	2001      	movs	r0, #1
 800514a:	4770      	bx	lr

0800514c <_ai_platform_release_crc>:
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop

08005150 <ai_platform_get_weights_map>:
 8005150:	2a00      	cmp	r2, #0
 8005152:	d037      	beq.n	80051c4 <ai_platform_get_weights_map+0x74>
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	4604      	mov	r4, r0
 8005158:	b1a0      	cbz	r0, 8005184 <ai_platform_get_weights_map+0x34>
 800515a:	460f      	mov	r7, r1
 800515c:	b191      	cbz	r1, 8005184 <ai_platform_get_weights_map+0x34>
 800515e:	4b25      	ldr	r3, [pc, #148]	; (80051f4 <ai_platform_get_weights_map+0xa4>)
 8005160:	6810      	ldr	r0, [r2, #0]
 8005162:	4298      	cmp	r0, r3
 8005164:	4615      	mov	r5, r2
 8005166:	d00f      	beq.n	8005188 <ai_platform_get_weights_map+0x38>
 8005168:	6855      	ldr	r5, [r2, #4]
 800516a:	b15d      	cbz	r5, 8005184 <ai_platform_get_weights_map+0x34>
 800516c:	682e      	ldr	r6, [r5, #0]
 800516e:	429e      	cmp	r6, r3
 8005170:	d02a      	beq.n	80051c8 <ai_platform_get_weights_map+0x78>
 8005172:	f1a1 0001 	sub.w	r0, r1, #1
 8005176:	6025      	str	r5, [r4, #0]
 8005178:	fab0 f080 	clz	r0, r0
 800517c:	0940      	lsrs	r0, r0, #5
 800517e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005180:	42a7      	cmp	r7, r4
 8005182:	d034      	beq.n	80051ee <ai_platform_get_weights_map+0x9e>
 8005184:	2000      	movs	r0, #0
 8005186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005188:	1d10      	adds	r0, r2, #4
 800518a:	f7ff ffc3 	bl	8005114 <ai_buffer_array_sane>
 800518e:	2800      	cmp	r0, #0
 8005190:	d0f8      	beq.n	8005184 <ai_platform_get_weights_map+0x34>
 8005192:	88eb      	ldrh	r3, [r5, #6]
 8005194:	429f      	cmp	r7, r3
 8005196:	d1f5      	bne.n	8005184 <ai_platform_get_weights_map+0x34>
 8005198:	f04f 0e00 	mov.w	lr, #0
 800519c:	1f23      	subs	r3, r4, #4
 800519e:	4670      	mov	r0, lr
 80051a0:	68aa      	ldr	r2, [r5, #8]
 80051a2:	eb02 0c0e 	add.w	ip, r2, lr
 80051a6:	f10e 0e1c 	add.w	lr, lr, #28
 80051aa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80051ae:	b124      	cbz	r4, 80051ba <ai_platform_get_weights_map+0x6a>
 80051b0:	3001      	adds	r0, #1
 80051b2:	4287      	cmp	r7, r0
 80051b4:	f843 4f04 	str.w	r4, [r3, #4]!
 80051b8:	d1f2      	bne.n	80051a0 <ai_platform_get_weights_map+0x50>
 80051ba:	1a38      	subs	r0, r7, r0
 80051bc:	fab0 f080 	clz	r0, r0
 80051c0:	0940      	lsrs	r0, r0, #5
 80051c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c4:	2000      	movs	r0, #0
 80051c6:	4770      	bx	lr
 80051c8:	1f23      	subs	r3, r4, #4
 80051ca:	4628      	mov	r0, r5
 80051cc:	2400      	movs	r4, #0
 80051ce:	e000      	b.n	80051d2 <ai_platform_get_weights_map+0x82>
 80051d0:	4614      	mov	r4, r2
 80051d2:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80051d6:	42b2      	cmp	r2, r6
 80051d8:	d0d2      	beq.n	8005180 <ai_platform_get_weights_map+0x30>
 80051da:	f843 2f04 	str.w	r2, [r3, #4]!
 80051de:	1c62      	adds	r2, r4, #1
 80051e0:	4297      	cmp	r7, r2
 80051e2:	d1f5      	bne.n	80051d0 <ai_platform_get_weights_map+0x80>
 80051e4:	3402      	adds	r4, #2
 80051e6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80051ea:	42b3      	cmp	r3, r6
 80051ec:	d1ca      	bne.n	8005184 <ai_platform_get_weights_map+0x34>
 80051ee:	2001      	movs	r0, #1
 80051f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f2:	bf00      	nop
 80051f4:	a1facade 	.word	0xa1facade

080051f8 <ai_platform_get_activations_map>:
 80051f8:	2a00      	cmp	r2, #0
 80051fa:	d038      	beq.n	800526e <ai_platform_get_activations_map+0x76>
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	4604      	mov	r4, r0
 8005200:	b1a0      	cbz	r0, 800522c <ai_platform_get_activations_map+0x34>
 8005202:	460f      	mov	r7, r1
 8005204:	b191      	cbz	r1, 800522c <ai_platform_get_activations_map+0x34>
 8005206:	4b25      	ldr	r3, [pc, #148]	; (800529c <ai_platform_get_activations_map+0xa4>)
 8005208:	6810      	ldr	r0, [r2, #0]
 800520a:	4298      	cmp	r0, r3
 800520c:	4615      	mov	r5, r2
 800520e:	d00f      	beq.n	8005230 <ai_platform_get_activations_map+0x38>
 8005210:	6a15      	ldr	r5, [r2, #32]
 8005212:	b15d      	cbz	r5, 800522c <ai_platform_get_activations_map+0x34>
 8005214:	682e      	ldr	r6, [r5, #0]
 8005216:	429e      	cmp	r6, r3
 8005218:	d02b      	beq.n	8005272 <ai_platform_get_activations_map+0x7a>
 800521a:	f1a1 0001 	sub.w	r0, r1, #1
 800521e:	6025      	str	r5, [r4, #0]
 8005220:	fab0 f080 	clz	r0, r0
 8005224:	0940      	lsrs	r0, r0, #5
 8005226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005228:	42a7      	cmp	r7, r4
 800522a:	d035      	beq.n	8005298 <ai_platform_get_activations_map+0xa0>
 800522c:	2000      	movs	r0, #0
 800522e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005230:	f102 000c 	add.w	r0, r2, #12
 8005234:	f7ff ff6e 	bl	8005114 <ai_buffer_array_sane>
 8005238:	2800      	cmp	r0, #0
 800523a:	d0f7      	beq.n	800522c <ai_platform_get_activations_map+0x34>
 800523c:	89eb      	ldrh	r3, [r5, #14]
 800523e:	429f      	cmp	r7, r3
 8005240:	d1f4      	bne.n	800522c <ai_platform_get_activations_map+0x34>
 8005242:	f04f 0e00 	mov.w	lr, #0
 8005246:	1f23      	subs	r3, r4, #4
 8005248:	4670      	mov	r0, lr
 800524a:	692a      	ldr	r2, [r5, #16]
 800524c:	eb02 0c0e 	add.w	ip, r2, lr
 8005250:	f10e 0e1c 	add.w	lr, lr, #28
 8005254:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005258:	b124      	cbz	r4, 8005264 <ai_platform_get_activations_map+0x6c>
 800525a:	3001      	adds	r0, #1
 800525c:	4287      	cmp	r7, r0
 800525e:	f843 4f04 	str.w	r4, [r3, #4]!
 8005262:	d1f2      	bne.n	800524a <ai_platform_get_activations_map+0x52>
 8005264:	1a38      	subs	r0, r7, r0
 8005266:	fab0 f080 	clz	r0, r0
 800526a:	0940      	lsrs	r0, r0, #5
 800526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800526e:	2000      	movs	r0, #0
 8005270:	4770      	bx	lr
 8005272:	1f23      	subs	r3, r4, #4
 8005274:	4628      	mov	r0, r5
 8005276:	2400      	movs	r4, #0
 8005278:	e000      	b.n	800527c <ai_platform_get_activations_map+0x84>
 800527a:	4614      	mov	r4, r2
 800527c:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005280:	42b2      	cmp	r2, r6
 8005282:	d0d1      	beq.n	8005228 <ai_platform_get_activations_map+0x30>
 8005284:	f843 2f04 	str.w	r2, [r3, #4]!
 8005288:	1c62      	adds	r2, r4, #1
 800528a:	4297      	cmp	r7, r2
 800528c:	d1f5      	bne.n	800527a <ai_platform_get_activations_map+0x82>
 800528e:	3402      	adds	r4, #2
 8005290:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005294:	42b3      	cmp	r3, r6
 8005296:	d1c9      	bne.n	800522c <ai_platform_get_activations_map+0x34>
 8005298:	2001      	movs	r0, #1
 800529a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800529c:	a1facade 	.word	0xa1facade

080052a0 <ai_platform_bind_network_params>:
 80052a0:	b1a0      	cbz	r0, 80052cc <ai_platform_bind_network_params+0x2c>
 80052a2:	b1b1      	cbz	r1, 80052d2 <ai_platform_bind_network_params+0x32>
 80052a4:	b1c2      	cbz	r2, 80052d8 <ai_platform_bind_network_params+0x38>
 80052a6:	b410      	push	{r4}
 80052a8:	4603      	mov	r3, r0
 80052aa:	4c0d      	ldr	r4, [pc, #52]	; (80052e0 <ai_platform_bind_network_params+0x40>)
 80052ac:	f843 4b04 	str.w	r4, [r3], #4
 80052b0:	f100 0c0c 	add.w	ip, r0, #12
 80052b4:	c903      	ldmia	r1, {r0, r1}
 80052b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80052ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052be:	e88c 0003 	stmia.w	ip, {r0, r1}
 80052c2:	2301      	movs	r3, #1
 80052c4:	4618      	mov	r0, r3
 80052c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	4603      	mov	r3, r0
 80052ce:	4618      	mov	r0, r3
 80052d0:	4770      	bx	lr
 80052d2:	460b      	mov	r3, r1
 80052d4:	4618      	mov	r0, r3
 80052d6:	4770      	bx	lr
 80052d8:	4613      	mov	r3, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	a1facade 	.word	0xa1facade

080052e4 <ai_platform_network_get_error>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	b1f0      	cbz	r0, 8005326 <ai_platform_network_get_error+0x42>
 80052e8:	4b2f      	ldr	r3, [pc, #188]	; (80053a8 <ai_platform_network_get_error+0xc4>)
 80052ea:	6802      	ldr	r2, [r0, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	4604      	mov	r4, r0
 80052f0:	d119      	bne.n	8005326 <ai_platform_network_get_error+0x42>
 80052f2:	f7ff ff29 	bl	8005148 <_ai_platform_acquire_crc>
 80052f6:	4b2d      	ldr	r3, [pc, #180]	; (80053ac <ai_platform_network_get_error+0xc8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005302:	d03c      	beq.n	800537e <ai_platform_network_get_error+0x9a>
 8005304:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <ai_platform_network_get_error+0xcc>)
 8005306:	2301      	movs	r3, #1
 8005308:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800530c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1fb      	bne.n	800530c <ai_platform_network_get_error+0x28>
 8005314:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <ai_platform_network_get_error+0xd0>)
 8005316:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800531a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800531e:	4b26      	ldr	r3, [pc, #152]	; (80053b8 <ai_platform_network_get_error+0xd4>)
 8005320:	429a      	cmp	r2, r3
 8005322:	d038      	beq.n	8005396 <ai_platform_network_get_error+0xb2>
 8005324:	e7fe      	b.n	8005324 <ai_platform_network_get_error+0x40>
 8005326:	f7ff ff0f 	bl	8005148 <_ai_platform_acquire_crc>
 800532a:	4b20      	ldr	r3, [pc, #128]	; (80053ac <ai_platform_network_get_error+0xc8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005336:	d010      	beq.n	800535a <ai_platform_network_get_error+0x76>
 8005338:	4a1d      	ldr	r2, [pc, #116]	; (80053b0 <ai_platform_network_get_error+0xcc>)
 800533a:	2301      	movs	r3, #1
 800533c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005340:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1fb      	bne.n	8005340 <ai_platform_network_get_error+0x5c>
 8005348:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <ai_platform_network_get_error+0xd0>)
 800534a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800534e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005352:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <ai_platform_network_get_error+0xd4>)
 8005354:	429a      	cmp	r2, r3
 8005356:	d00d      	beq.n	8005374 <ai_platform_network_get_error+0x90>
 8005358:	e7fe      	b.n	8005358 <ai_platform_network_get_error+0x74>
 800535a:	4a18      	ldr	r2, [pc, #96]	; (80053bc <ai_platform_network_get_error+0xd8>)
 800535c:	2301      	movs	r3, #1
 800535e:	6093      	str	r3, [r2, #8]
 8005360:	6893      	ldr	r3, [r2, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1fc      	bne.n	8005360 <ai_platform_network_get_error+0x7c>
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <ai_platform_network_get_error+0xd0>)
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <ai_platform_network_get_error+0xd4>)
 800536e:	429a      	cmp	r2, r3
 8005370:	d000      	beq.n	8005374 <ai_platform_network_get_error+0x90>
 8005372:	e7fe      	b.n	8005372 <ai_platform_network_get_error+0x8e>
 8005374:	f7ff feea 	bl	800514c <_ai_platform_release_crc>
 8005378:	f241 0010 	movw	r0, #4112	; 0x1010
 800537c:	bd10      	pop	{r4, pc}
 800537e:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <ai_platform_network_get_error+0xd8>)
 8005380:	2301      	movs	r3, #1
 8005382:	6093      	str	r3, [r2, #8]
 8005384:	6893      	ldr	r3, [r2, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1fc      	bne.n	8005384 <ai_platform_network_get_error+0xa0>
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <ai_platform_network_get_error+0xd0>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	6812      	ldr	r2, [r2, #0]
 8005390:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <ai_platform_network_get_error+0xd4>)
 8005392:	429a      	cmp	r2, r3
 8005394:	d107      	bne.n	80053a6 <ai_platform_network_get_error+0xc2>
 8005396:	f7ff fed9 	bl	800514c <_ai_platform_release_crc>
 800539a:	f104 0010 	add.w	r0, r4, #16
 800539e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a2:	f000 be8d 	b.w	80060c0 <core_get_error>
 80053a6:	e7fe      	b.n	80053a6 <ai_platform_network_get_error+0xc2>
 80053a8:	a1c00100 	.word	0xa1c00100
 80053ac:	e0042000 	.word	0xe0042000
 80053b0:	58024000 	.word	0x58024000
 80053b4:	f407a5c2 	.word	0xf407a5c2
 80053b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80053bc:	40023000 	.word	0x40023000

080053c0 <ai_platform_network_set_error>:
 80053c0:	b110      	cbz	r0, 80053c8 <ai_platform_network_set_error+0x8>
 80053c2:	3010      	adds	r0, #16
 80053c4:	f000 be82 	b.w	80060cc <core_set_error>
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop

080053cc <ai_platform_inputs_get>:
 80053cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	b085      	sub	sp, #20
 80053d2:	9102      	str	r1, [sp, #8]
 80053d4:	b1f0      	cbz	r0, 8005414 <ai_platform_inputs_get+0x48>
 80053d6:	4b62      	ldr	r3, [pc, #392]	; (8005560 <ai_platform_inputs_get+0x194>)
 80053d8:	6802      	ldr	r2, [r0, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	4607      	mov	r7, r0
 80053de:	d119      	bne.n	8005414 <ai_platform_inputs_get+0x48>
 80053e0:	f7ff feb2 	bl	8005148 <_ai_platform_acquire_crc>
 80053e4:	4b5f      	ldr	r3, [pc, #380]	; (8005564 <ai_platform_inputs_get+0x198>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f0:	d03d      	beq.n	800546e <ai_platform_inputs_get+0xa2>
 80053f2:	4a5d      	ldr	r2, [pc, #372]	; (8005568 <ai_platform_inputs_get+0x19c>)
 80053f4:	2301      	movs	r3, #1
 80053f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80053fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1fb      	bne.n	80053fa <ai_platform_inputs_get+0x2e>
 8005402:	4b5a      	ldr	r3, [pc, #360]	; (800556c <ai_platform_inputs_get+0x1a0>)
 8005404:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005408:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800540c:	4b58      	ldr	r3, [pc, #352]	; (8005570 <ai_platform_inputs_get+0x1a4>)
 800540e:	429a      	cmp	r2, r3
 8005410:	d039      	beq.n	8005486 <ai_platform_inputs_get+0xba>
 8005412:	e7fe      	b.n	8005412 <ai_platform_inputs_get+0x46>
 8005414:	f7ff fe98 	bl	8005148 <_ai_platform_acquire_crc>
 8005418:	4b52      	ldr	r3, [pc, #328]	; (8005564 <ai_platform_inputs_get+0x198>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005424:	d010      	beq.n	8005448 <ai_platform_inputs_get+0x7c>
 8005426:	4a50      	ldr	r2, [pc, #320]	; (8005568 <ai_platform_inputs_get+0x19c>)
 8005428:	2301      	movs	r3, #1
 800542a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800542e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1fb      	bne.n	800542e <ai_platform_inputs_get+0x62>
 8005436:	4b4d      	ldr	r3, [pc, #308]	; (800556c <ai_platform_inputs_get+0x1a0>)
 8005438:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800543c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005440:	4b4b      	ldr	r3, [pc, #300]	; (8005570 <ai_platform_inputs_get+0x1a4>)
 8005442:	429a      	cmp	r2, r3
 8005444:	d00d      	beq.n	8005462 <ai_platform_inputs_get+0x96>
 8005446:	e7fe      	b.n	8005446 <ai_platform_inputs_get+0x7a>
 8005448:	4a4a      	ldr	r2, [pc, #296]	; (8005574 <ai_platform_inputs_get+0x1a8>)
 800544a:	2301      	movs	r3, #1
 800544c:	6093      	str	r3, [r2, #8]
 800544e:	6893      	ldr	r3, [r2, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1fc      	bne.n	800544e <ai_platform_inputs_get+0x82>
 8005454:	4b45      	ldr	r3, [pc, #276]	; (800556c <ai_platform_inputs_get+0x1a0>)
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	4b45      	ldr	r3, [pc, #276]	; (8005570 <ai_platform_inputs_get+0x1a4>)
 800545c:	429a      	cmp	r2, r3
 800545e:	d000      	beq.n	8005462 <ai_platform_inputs_get+0x96>
 8005460:	e7fe      	b.n	8005460 <ai_platform_inputs_get+0x94>
 8005462:	f7ff fe73 	bl	800514c <_ai_platform_release_crc>
 8005466:	2000      	movs	r0, #0
 8005468:	b005      	add	sp, #20
 800546a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800546e:	4a41      	ldr	r2, [pc, #260]	; (8005574 <ai_platform_inputs_get+0x1a8>)
 8005470:	2301      	movs	r3, #1
 8005472:	6093      	str	r3, [r2, #8]
 8005474:	6893      	ldr	r3, [r2, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1fc      	bne.n	8005474 <ai_platform_inputs_get+0xa8>
 800547a:	4b3c      	ldr	r3, [pc, #240]	; (800556c <ai_platform_inputs_get+0x1a0>)
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	6812      	ldr	r2, [r2, #0]
 8005480:	4b3b      	ldr	r3, [pc, #236]	; (8005570 <ai_platform_inputs_get+0x1a4>)
 8005482:	429a      	cmp	r2, r3
 8005484:	d155      	bne.n	8005532 <ai_platform_inputs_get+0x166>
 8005486:	f7ff fe61 	bl	800514c <_ai_platform_release_crc>
 800548a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d051      	beq.n	8005534 <ai_platform_inputs_get+0x168>
 8005490:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005494:	f1ba 0f00 	cmp.w	sl, #0
 8005498:	d04c      	beq.n	8005534 <ai_platform_inputs_get+0x168>
 800549a:	f04f 0b00 	mov.w	fp, #0
 800549e:	465d      	mov	r5, fp
 80054a0:	9703      	str	r7, [sp, #12]
 80054a2:	e016      	b.n	80054d2 <ai_platform_inputs_get+0x106>
 80054a4:	9901      	ldr	r1, [sp, #4]
 80054a6:	2301      	movs	r3, #1
 80054a8:	507b      	str	r3, [r7, r1]
 80054aa:	69b1      	ldr	r1, [r6, #24]
 80054ac:	6849      	ldr	r1, [r1, #4]
 80054ae:	6121      	str	r1, [r4, #16]
 80054b0:	f04f 0301 	mov.w	r3, #1
 80054b4:	7523      	strb	r3, [r4, #20]
 80054b6:	e9c4 c200 	strd	ip, r2, [r4]
 80054ba:	6962      	ldr	r2, [r4, #20]
 80054bc:	60a0      	str	r0, [r4, #8]
 80054be:	2300      	movs	r3, #0
 80054c0:	f369 221f 	bfi	r2, r9, #8, #24
 80054c4:	f8c4 8018 	str.w	r8, [r4, #24]
 80054c8:	60e3      	str	r3, [r4, #12]
 80054ca:	3501      	adds	r5, #1
 80054cc:	f10b 0b1c 	add.w	fp, fp, #28
 80054d0:	6162      	str	r2, [r4, #20]
 80054d2:	f8ba 3000 	ldrh.w	r3, [sl]
 80054d6:	42ab      	cmp	r3, r5
 80054d8:	b2aa      	uxth	r2, r5
 80054da:	d93a      	bls.n	8005552 <ai_platform_inputs_get+0x186>
 80054dc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80054e0:	00e9      	lsls	r1, r5, #3
 80054e2:	9101      	str	r1, [sp, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d034      	beq.n	8005552 <ai_platform_inputs_get+0x186>
 80054e8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80054ec:	2e00      	cmp	r6, #0
 80054ee:	d030      	beq.n	8005552 <ai_platform_inputs_get+0x186>
 80054f0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80054f4:	69b2      	ldr	r2, [r6, #24]
 80054f6:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80054fa:	6810      	ldr	r0, [r2, #0]
 80054fc:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005500:	68b3      	ldr	r3, [r6, #8]
 8005502:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8005506:	f001 fbe9 	bl	8006cdc <ai_array_to_buffer_fmt>
 800550a:	69b1      	ldr	r1, [r6, #24]
 800550c:	4684      	mov	ip, r0
 800550e:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8005512:	688a      	ldr	r2, [r1, #8]
 8005514:	445c      	add	r4, fp
 8005516:	2800      	cmp	r0, #0
 8005518:	d0c8      	beq.n	80054ac <ai_platform_inputs_get+0xe0>
 800551a:	2100      	movs	r1, #0
 800551c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005520:	6831      	ldr	r1, [r6, #0]
 8005522:	6041      	str	r1, [r0, #4]
 8005524:	b111      	cbz	r1, 800552c <ai_platform_inputs_get+0x160>
 8005526:	8849      	ldrh	r1, [r1, #2]
 8005528:	2900      	cmp	r1, #0
 800552a:	d1bb      	bne.n	80054a4 <ai_platform_inputs_get+0xd8>
 800552c:	69b1      	ldr	r1, [r6, #24]
 800552e:	2000      	movs	r0, #0
 8005530:	e7bc      	b.n	80054ac <ai_platform_inputs_get+0xe0>
 8005532:	e7fe      	b.n	8005532 <ai_platform_inputs_get+0x166>
 8005534:	2218      	movs	r2, #24
 8005536:	2111      	movs	r1, #17
 8005538:	f107 0010 	add.w	r0, r7, #16
 800553c:	f000 fdc6 	bl	80060cc <core_set_error>
 8005540:	2200      	movs	r2, #0
 8005542:	4610      	mov	r0, r2
 8005544:	9b02      	ldr	r3, [sp, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d08e      	beq.n	8005468 <ai_platform_inputs_get+0x9c>
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	b005      	add	sp, #20
 800554e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005552:	9f03      	ldr	r7, [sp, #12]
 8005554:	2a00      	cmp	r2, #0
 8005556:	d0ed      	beq.n	8005534 <ai_platform_inputs_get+0x168>
 8005558:	f8da 3008 	ldr.w	r3, [sl, #8]
 800555c:	6858      	ldr	r0, [r3, #4]
 800555e:	e7f1      	b.n	8005544 <ai_platform_inputs_get+0x178>
 8005560:	a1c00100 	.word	0xa1c00100
 8005564:	e0042000 	.word	0xe0042000
 8005568:	58024000 	.word	0x58024000
 800556c:	f407a5c2 	.word	0xf407a5c2
 8005570:	b5e8b5cd 	.word	0xb5e8b5cd
 8005574:	40023000 	.word	0x40023000

08005578 <ai_platform_outputs_get>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	b085      	sub	sp, #20
 800557e:	9102      	str	r1, [sp, #8]
 8005580:	b1f0      	cbz	r0, 80055c0 <ai_platform_outputs_get+0x48>
 8005582:	4b5f      	ldr	r3, [pc, #380]	; (8005700 <ai_platform_outputs_get+0x188>)
 8005584:	6802      	ldr	r2, [r0, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	4607      	mov	r7, r0
 800558a:	d119      	bne.n	80055c0 <ai_platform_outputs_get+0x48>
 800558c:	f7ff fddc 	bl	8005148 <_ai_platform_acquire_crc>
 8005590:	4b5c      	ldr	r3, [pc, #368]	; (8005704 <ai_platform_outputs_get+0x18c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559c:	d03d      	beq.n	800561a <ai_platform_outputs_get+0xa2>
 800559e:	4a5a      	ldr	r2, [pc, #360]	; (8005708 <ai_platform_outputs_get+0x190>)
 80055a0:	2301      	movs	r3, #1
 80055a2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80055a6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1fb      	bne.n	80055a6 <ai_platform_outputs_get+0x2e>
 80055ae:	4b57      	ldr	r3, [pc, #348]	; (800570c <ai_platform_outputs_get+0x194>)
 80055b0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80055b4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80055b8:	4b55      	ldr	r3, [pc, #340]	; (8005710 <ai_platform_outputs_get+0x198>)
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d039      	beq.n	8005632 <ai_platform_outputs_get+0xba>
 80055be:	e7fe      	b.n	80055be <ai_platform_outputs_get+0x46>
 80055c0:	f7ff fdc2 	bl	8005148 <_ai_platform_acquire_crc>
 80055c4:	4b4f      	ldr	r3, [pc, #316]	; (8005704 <ai_platform_outputs_get+0x18c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d0:	d010      	beq.n	80055f4 <ai_platform_outputs_get+0x7c>
 80055d2:	4a4d      	ldr	r2, [pc, #308]	; (8005708 <ai_platform_outputs_get+0x190>)
 80055d4:	2301      	movs	r3, #1
 80055d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80055da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1fb      	bne.n	80055da <ai_platform_outputs_get+0x62>
 80055e2:	4b4a      	ldr	r3, [pc, #296]	; (800570c <ai_platform_outputs_get+0x194>)
 80055e4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80055e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80055ec:	4b48      	ldr	r3, [pc, #288]	; (8005710 <ai_platform_outputs_get+0x198>)
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d00d      	beq.n	800560e <ai_platform_outputs_get+0x96>
 80055f2:	e7fe      	b.n	80055f2 <ai_platform_outputs_get+0x7a>
 80055f4:	4a47      	ldr	r2, [pc, #284]	; (8005714 <ai_platform_outputs_get+0x19c>)
 80055f6:	2301      	movs	r3, #1
 80055f8:	6093      	str	r3, [r2, #8]
 80055fa:	6893      	ldr	r3, [r2, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1fc      	bne.n	80055fa <ai_platform_outputs_get+0x82>
 8005600:	4b42      	ldr	r3, [pc, #264]	; (800570c <ai_platform_outputs_get+0x194>)
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	4b42      	ldr	r3, [pc, #264]	; (8005710 <ai_platform_outputs_get+0x198>)
 8005608:	429a      	cmp	r2, r3
 800560a:	d000      	beq.n	800560e <ai_platform_outputs_get+0x96>
 800560c:	e7fe      	b.n	800560c <ai_platform_outputs_get+0x94>
 800560e:	f7ff fd9d 	bl	800514c <_ai_platform_release_crc>
 8005612:	2000      	movs	r0, #0
 8005614:	b005      	add	sp, #20
 8005616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561a:	4a3e      	ldr	r2, [pc, #248]	; (8005714 <ai_platform_outputs_get+0x19c>)
 800561c:	2301      	movs	r3, #1
 800561e:	6093      	str	r3, [r2, #8]
 8005620:	6893      	ldr	r3, [r2, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1fc      	bne.n	8005620 <ai_platform_outputs_get+0xa8>
 8005626:	4b39      	ldr	r3, [pc, #228]	; (800570c <ai_platform_outputs_get+0x194>)
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	4b38      	ldr	r3, [pc, #224]	; (8005710 <ai_platform_outputs_get+0x198>)
 800562e:	429a      	cmp	r2, r3
 8005630:	d150      	bne.n	80056d4 <ai_platform_outputs_get+0x15c>
 8005632:	f7ff fd8b 	bl	800514c <_ai_platform_release_crc>
 8005636:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d958      	bls.n	80056ee <ai_platform_outputs_get+0x176>
 800563c:	f04f 0b00 	mov.w	fp, #0
 8005640:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8005644:	9703      	str	r7, [sp, #12]
 8005646:	465d      	mov	r5, fp
 8005648:	e016      	b.n	8005678 <ai_platform_outputs_get+0x100>
 800564a:	9901      	ldr	r1, [sp, #4]
 800564c:	2301      	movs	r3, #1
 800564e:	507b      	str	r3, [r7, r1]
 8005650:	69b1      	ldr	r1, [r6, #24]
 8005652:	6849      	ldr	r1, [r1, #4]
 8005654:	6121      	str	r1, [r4, #16]
 8005656:	f04f 0301 	mov.w	r3, #1
 800565a:	7523      	strb	r3, [r4, #20]
 800565c:	e9c4 c200 	strd	ip, r2, [r4]
 8005660:	6962      	ldr	r2, [r4, #20]
 8005662:	60a0      	str	r0, [r4, #8]
 8005664:	2300      	movs	r3, #0
 8005666:	f369 221f 	bfi	r2, r9, #8, #24
 800566a:	f8c4 8018 	str.w	r8, [r4, #24]
 800566e:	60e3      	str	r3, [r4, #12]
 8005670:	3501      	adds	r5, #1
 8005672:	f10b 0b1c 	add.w	fp, fp, #28
 8005676:	6162      	str	r2, [r4, #20]
 8005678:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800567c:	42ab      	cmp	r3, r5
 800567e:	b2aa      	uxth	r2, r5
 8005680:	d929      	bls.n	80056d6 <ai_platform_outputs_get+0x15e>
 8005682:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005686:	00e9      	lsls	r1, r5, #3
 8005688:	9101      	str	r1, [sp, #4]
 800568a:	b323      	cbz	r3, 80056d6 <ai_platform_outputs_get+0x15e>
 800568c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005690:	b30e      	cbz	r6, 80056d6 <ai_platform_outputs_get+0x15e>
 8005692:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005696:	69b2      	ldr	r2, [r6, #24]
 8005698:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800569c:	6810      	ldr	r0, [r2, #0]
 800569e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80056a2:	68b3      	ldr	r3, [r6, #8]
 80056a4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80056a8:	f001 fb18 	bl	8006cdc <ai_array_to_buffer_fmt>
 80056ac:	69b1      	ldr	r1, [r6, #24]
 80056ae:	4684      	mov	ip, r0
 80056b0:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80056b4:	688a      	ldr	r2, [r1, #8]
 80056b6:	445c      	add	r4, fp
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d0ca      	beq.n	8005652 <ai_platform_outputs_get+0xda>
 80056bc:	2100      	movs	r1, #0
 80056be:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80056c2:	6831      	ldr	r1, [r6, #0]
 80056c4:	6041      	str	r1, [r0, #4]
 80056c6:	b111      	cbz	r1, 80056ce <ai_platform_outputs_get+0x156>
 80056c8:	8849      	ldrh	r1, [r1, #2]
 80056ca:	2900      	cmp	r1, #0
 80056cc:	d1bd      	bne.n	800564a <ai_platform_outputs_get+0xd2>
 80056ce:	69b1      	ldr	r1, [r6, #24]
 80056d0:	2000      	movs	r0, #0
 80056d2:	e7be      	b.n	8005652 <ai_platform_outputs_get+0xda>
 80056d4:	e7fe      	b.n	80056d4 <ai_platform_outputs_get+0x15c>
 80056d6:	9f03      	ldr	r7, [sp, #12]
 80056d8:	b14a      	cbz	r2, 80056ee <ai_platform_outputs_get+0x176>
 80056da:	f8da 3014 	ldr.w	r3, [sl, #20]
 80056de:	6858      	ldr	r0, [r3, #4]
 80056e0:	9b02      	ldr	r3, [sp, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d096      	beq.n	8005614 <ai_platform_outputs_get+0x9c>
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	b005      	add	sp, #20
 80056ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ee:	2218      	movs	r2, #24
 80056f0:	2111      	movs	r1, #17
 80056f2:	f107 0010 	add.w	r0, r7, #16
 80056f6:	f000 fce9 	bl	80060cc <core_set_error>
 80056fa:	2200      	movs	r2, #0
 80056fc:	4610      	mov	r0, r2
 80056fe:	e7ef      	b.n	80056e0 <ai_platform_outputs_get+0x168>
 8005700:	a1c00100 	.word	0xa1c00100
 8005704:	e0042000 	.word	0xe0042000
 8005708:	58024000 	.word	0x58024000
 800570c:	f407a5c2 	.word	0xf407a5c2
 8005710:	b5e8b5cd 	.word	0xb5e8b5cd
 8005714:	40023000 	.word	0x40023000

08005718 <ai_platform_network_create>:
 8005718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800571c:	b083      	sub	sp, #12
 800571e:	4606      	mov	r6, r0
 8005720:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8005724:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8005728:	4615      	mov	r5, r2
 800572a:	461f      	mov	r7, r3
 800572c:	f7ff fd0c 	bl	8005148 <_ai_platform_acquire_crc>
 8005730:	b188      	cbz	r0, 8005756 <ai_platform_network_create+0x3e>
 8005732:	4a5d      	ldr	r2, [pc, #372]	; (80058a8 <ai_platform_network_create+0x190>)
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800573a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800573e:	4603      	mov	r3, r0
 8005740:	d00e      	beq.n	8005760 <ai_platform_network_create+0x48>
 8005742:	4a5a      	ldr	r2, [pc, #360]	; (80058ac <ai_platform_network_create+0x194>)
 8005744:	2118      	movs	r1, #24
 8005746:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800574a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800574e:	2918      	cmp	r1, #24
 8005750:	d018      	beq.n	8005784 <ai_platform_network_create+0x6c>
 8005752:	f7ff fcfb 	bl	800514c <_ai_platform_release_crc>
 8005756:	f244 1033 	movw	r0, #16691	; 0x4133
 800575a:	b003      	add	sp, #12
 800575c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005760:	4a53      	ldr	r2, [pc, #332]	; (80058b0 <ai_platform_network_create+0x198>)
 8005762:	2101      	movs	r1, #1
 8005764:	6091      	str	r1, [r2, #8]
 8005766:	2114      	movs	r1, #20
 8005768:	e001      	b.n	800576e <ai_platform_network_create+0x56>
 800576a:	3901      	subs	r1, #1
 800576c:	d002      	beq.n	8005774 <ai_platform_network_create+0x5c>
 800576e:	6894      	ldr	r4, [r2, #8]
 8005770:	2c00      	cmp	r4, #0
 8005772:	d1fa      	bne.n	800576a <ai_platform_network_create+0x52>
 8005774:	4a4e      	ldr	r2, [pc, #312]	; (80058b0 <ai_platform_network_create+0x198>)
 8005776:	6891      	ldr	r1, [r2, #8]
 8005778:	b911      	cbnz	r1, 8005780 <ai_platform_network_create+0x68>
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	3201      	adds	r2, #1
 800577e:	d008      	beq.n	8005792 <ai_platform_network_create+0x7a>
 8005780:	4618      	mov	r0, r3
 8005782:	e7e6      	b.n	8005752 <ai_platform_network_create+0x3a>
 8005784:	2101      	movs	r1, #1
 8005786:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800578a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800578e:	2900      	cmp	r1, #0
 8005790:	d1fb      	bne.n	800578a <ai_platform_network_create+0x72>
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff fcda 	bl	800514c <_ai_platform_release_crc>
 8005798:	f7ff fcd6 	bl	8005148 <_ai_platform_acquire_crc>
 800579c:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <ai_platform_network_create+0x190>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a8:	d010      	beq.n	80057cc <ai_platform_network_create+0xb4>
 80057aa:	4b40      	ldr	r3, [pc, #256]	; (80058ac <ai_platform_network_create+0x194>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80057b2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80057b6:	2900      	cmp	r1, #0
 80057b8:	d1fb      	bne.n	80057b2 <ai_platform_network_create+0x9a>
 80057ba:	4a3e      	ldr	r2, [pc, #248]	; (80058b4 <ai_platform_network_create+0x19c>)
 80057bc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80057c0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80057c4:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <ai_platform_network_create+0x1a0>)
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d00c      	beq.n	80057e4 <ai_platform_network_create+0xcc>
 80057ca:	e7fe      	b.n	80057ca <ai_platform_network_create+0xb2>
 80057cc:	4a38      	ldr	r2, [pc, #224]	; (80058b0 <ai_platform_network_create+0x198>)
 80057ce:	2301      	movs	r3, #1
 80057d0:	6093      	str	r3, [r2, #8]
 80057d2:	6893      	ldr	r3, [r2, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1fc      	bne.n	80057d2 <ai_platform_network_create+0xba>
 80057d8:	4b36      	ldr	r3, [pc, #216]	; (80058b4 <ai_platform_network_create+0x19c>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	4b36      	ldr	r3, [pc, #216]	; (80058b8 <ai_platform_network_create+0x1a0>)
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d122      	bne.n	800582a <ai_platform_network_create+0x112>
 80057e4:	f7ff fcb2 	bl	800514c <_ai_platform_release_crc>
 80057e8:	b38e      	cbz	r6, 800584e <ai_platform_network_create+0x136>
 80057ea:	4b34      	ldr	r3, [pc, #208]	; (80058bc <ai_platform_network_create+0x1a4>)
 80057ec:	602b      	str	r3, [r5, #0]
 80057ee:	6035      	str	r5, [r6, #0]
 80057f0:	f000 fc64 	bl	80060bc <core_init>
 80057f4:	b1d0      	cbz	r0, 800582c <ai_platform_network_create+0x114>
 80057f6:	f7ff fca7 	bl	8005148 <_ai_platform_acquire_crc>
 80057fa:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <ai_platform_network_create+0x190>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005806:	d025      	beq.n	8005854 <ai_platform_network_create+0x13c>
 8005808:	4a28      	ldr	r2, [pc, #160]	; (80058ac <ai_platform_network_create+0x194>)
 800580a:	2301      	movs	r3, #1
 800580c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005810:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1fb      	bne.n	8005810 <ai_platform_network_create+0xf8>
 8005818:	4b26      	ldr	r3, [pc, #152]	; (80058b4 <ai_platform_network_create+0x19c>)
 800581a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800581e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005822:	4b25      	ldr	r3, [pc, #148]	; (80058b8 <ai_platform_network_create+0x1a0>)
 8005824:	429a      	cmp	r2, r3
 8005826:	d022      	beq.n	800586e <ai_platform_network_create+0x156>
 8005828:	e7fe      	b.n	8005828 <ai_platform_network_create+0x110>
 800582a:	e7fe      	b.n	800582a <ai_platform_network_create+0x112>
 800582c:	2430      	movs	r4, #48	; 0x30
 800582e:	2300      	movs	r3, #0
 8005830:	6033      	str	r3, [r6, #0]
 8005832:	2610      	movs	r6, #16
 8005834:	464a      	mov	r2, r9
 8005836:	4641      	mov	r1, r8
 8005838:	4638      	mov	r0, r7
 800583a:	f001 fa31 	bl	8006ca0 <ai_version_get>
 800583e:	4603      	mov	r3, r0
 8005840:	2000      	movs	r0, #0
 8005842:	f364 0007 	bfi	r0, r4, #0, #8
 8005846:	64ab      	str	r3, [r5, #72]	; 0x48
 8005848:	f366 201f 	bfi	r0, r6, #8, #24
 800584c:	e785      	b.n	800575a <ai_platform_network_create+0x42>
 800584e:	f241 0010 	movw	r0, #4112	; 0x1010
 8005852:	e782      	b.n	800575a <ai_platform_network_create+0x42>
 8005854:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <ai_platform_network_create+0x198>)
 8005856:	2301      	movs	r3, #1
 8005858:	6093      	str	r3, [r2, #8]
 800585a:	6893      	ldr	r3, [r2, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1fc      	bne.n	800585a <ai_platform_network_create+0x142>
 8005860:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <ai_platform_network_create+0x19c>)
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <ai_platform_network_create+0x1a0>)
 8005868:	429a      	cmp	r2, r3
 800586a:	d000      	beq.n	800586e <ai_platform_network_create+0x156>
 800586c:	e7fe      	b.n	800586c <ai_platform_network_create+0x154>
 800586e:	f7ff fc6d 	bl	800514c <_ai_platform_release_crc>
 8005872:	2200      	movs	r2, #0
 8005874:	4641      	mov	r1, r8
 8005876:	4638      	mov	r0, r7
 8005878:	f001 fa12 	bl	8006ca0 <ai_version_get>
 800587c:	2200      	movs	r2, #0
 800587e:	4604      	mov	r4, r0
 8005880:	2105      	movs	r1, #5
 8005882:	2001      	movs	r0, #1
 8005884:	f001 fa0c 	bl	8006ca0 <ai_version_get>
 8005888:	4284      	cmp	r4, r0
 800588a:	d001      	beq.n	8005890 <ai_platform_network_create+0x178>
 800588c:	2401      	movs	r4, #1
 800588e:	e7ce      	b.n	800582e <ai_platform_network_create+0x116>
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <ai_platform_network_create+0x1a8>)
 8005892:	9301      	str	r3, [sp, #4]
 8005894:	a801      	add	r0, sp, #4
 8005896:	f001 f849 	bl	800692c <ai_check_custom_types>
 800589a:	b110      	cbz	r0, 80058a2 <ai_platform_network_create+0x18a>
 800589c:	2600      	movs	r6, #0
 800589e:	4634      	mov	r4, r6
 80058a0:	e7c8      	b.n	8005834 <ai_platform_network_create+0x11c>
 80058a2:	2402      	movs	r4, #2
 80058a4:	e7c3      	b.n	800582e <ai_platform_network_create+0x116>
 80058a6:	bf00      	nop
 80058a8:	e0042000 	.word	0xe0042000
 80058ac:	58024000 	.word	0x58024000
 80058b0:	40023000 	.word	0x40023000
 80058b4:	f407a5c2 	.word	0xf407a5c2
 80058b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80058bc:	a1c00100 	.word	0xa1c00100
 80058c0:	84048403 	.word	0x84048403

080058c4 <ai_platform_network_init>:
 80058c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c8:	b1f8      	cbz	r0, 800590a <ai_platform_network_init+0x46>
 80058ca:	4b6e      	ldr	r3, [pc, #440]	; (8005a84 <ai_platform_network_init+0x1c0>)
 80058cc:	6802      	ldr	r2, [r0, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	4604      	mov	r4, r0
 80058d2:	d11a      	bne.n	800590a <ai_platform_network_init+0x46>
 80058d4:	460e      	mov	r6, r1
 80058d6:	f7ff fc37 	bl	8005148 <_ai_platform_acquire_crc>
 80058da:	4b6b      	ldr	r3, [pc, #428]	; (8005a88 <ai_platform_network_init+0x1c4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e6:	d03d      	beq.n	8005964 <ai_platform_network_init+0xa0>
 80058e8:	4a68      	ldr	r2, [pc, #416]	; (8005a8c <ai_platform_network_init+0x1c8>)
 80058ea:	2301      	movs	r3, #1
 80058ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80058f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1fb      	bne.n	80058f0 <ai_platform_network_init+0x2c>
 80058f8:	4b65      	ldr	r3, [pc, #404]	; (8005a90 <ai_platform_network_init+0x1cc>)
 80058fa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80058fe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005902:	4b64      	ldr	r3, [pc, #400]	; (8005a94 <ai_platform_network_init+0x1d0>)
 8005904:	429a      	cmp	r2, r3
 8005906:	d039      	beq.n	800597c <ai_platform_network_init+0xb8>
 8005908:	e7fe      	b.n	8005908 <ai_platform_network_init+0x44>
 800590a:	f7ff fc1d 	bl	8005148 <_ai_platform_acquire_crc>
 800590e:	4b5e      	ldr	r3, [pc, #376]	; (8005a88 <ai_platform_network_init+0x1c4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591a:	d010      	beq.n	800593e <ai_platform_network_init+0x7a>
 800591c:	4a5b      	ldr	r2, [pc, #364]	; (8005a8c <ai_platform_network_init+0x1c8>)
 800591e:	2301      	movs	r3, #1
 8005920:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005924:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1fb      	bne.n	8005924 <ai_platform_network_init+0x60>
 800592c:	4b58      	ldr	r3, [pc, #352]	; (8005a90 <ai_platform_network_init+0x1cc>)
 800592e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005932:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005936:	4b57      	ldr	r3, [pc, #348]	; (8005a94 <ai_platform_network_init+0x1d0>)
 8005938:	429a      	cmp	r2, r3
 800593a:	d00d      	beq.n	8005958 <ai_platform_network_init+0x94>
 800593c:	e7fe      	b.n	800593c <ai_platform_network_init+0x78>
 800593e:	4a56      	ldr	r2, [pc, #344]	; (8005a98 <ai_platform_network_init+0x1d4>)
 8005940:	2301      	movs	r3, #1
 8005942:	6093      	str	r3, [r2, #8]
 8005944:	6893      	ldr	r3, [r2, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1fc      	bne.n	8005944 <ai_platform_network_init+0x80>
 800594a:	4b51      	ldr	r3, [pc, #324]	; (8005a90 <ai_platform_network_init+0x1cc>)
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	4b50      	ldr	r3, [pc, #320]	; (8005a94 <ai_platform_network_init+0x1d0>)
 8005952:	429a      	cmp	r2, r3
 8005954:	d000      	beq.n	8005958 <ai_platform_network_init+0x94>
 8005956:	e7fe      	b.n	8005956 <ai_platform_network_init+0x92>
 8005958:	f7ff fbf8 	bl	800514c <_ai_platform_release_crc>
 800595c:	2600      	movs	r6, #0
 800595e:	4630      	mov	r0, r6
 8005960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005964:	4a4c      	ldr	r2, [pc, #304]	; (8005a98 <ai_platform_network_init+0x1d4>)
 8005966:	2301      	movs	r3, #1
 8005968:	6093      	str	r3, [r2, #8]
 800596a:	6893      	ldr	r3, [r2, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1fc      	bne.n	800596a <ai_platform_network_init+0xa6>
 8005970:	4b47      	ldr	r3, [pc, #284]	; (8005a90 <ai_platform_network_init+0x1cc>)
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	4b47      	ldr	r3, [pc, #284]	; (8005a94 <ai_platform_network_init+0x1d0>)
 8005978:	429a      	cmp	r2, r3
 800597a:	d11c      	bne.n	80059b6 <ai_platform_network_init+0xf2>
 800597c:	f7ff fbe6 	bl	800514c <_ai_platform_release_crc>
 8005980:	2e00      	cmp	r6, #0
 8005982:	d06f      	beq.n	8005a64 <ai_platform_network_init+0x1a0>
 8005984:	4b45      	ldr	r3, [pc, #276]	; (8005a9c <ai_platform_network_init+0x1d8>)
 8005986:	6832      	ldr	r2, [r6, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d115      	bne.n	80059b8 <ai_platform_network_init+0xf4>
 800598c:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8005990:	6933      	ldr	r3, [r6, #16]
 8005992:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8005996:	89f7      	ldrh	r7, [r6, #14]
 8005998:	62a3      	str	r3, [r4, #40]	; 0x28
 800599a:	e9c4 2107 	strd	r2, r1, [r4, #28]
 800599e:	2303      	movs	r3, #3
 80059a0:	84e7      	strh	r7, [r4, #38]	; 0x26
 80059a2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80059a6:	60e3      	str	r3, [r4, #12]
 80059a8:	4620      	mov	r0, r4
 80059aa:	4626      	mov	r6, r4
 80059ac:	f000 ffe8 	bl	8006980 <ai_layers_init_all>
 80059b0:	4630      	mov	r0, r6
 80059b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059b6:	e7fe      	b.n	80059b6 <ai_platform_network_init+0xf2>
 80059b8:	2101      	movs	r1, #1
 80059ba:	4630      	mov	r0, r6
 80059bc:	4635      	mov	r5, r6
 80059be:	6876      	ldr	r6, [r6, #4]
 80059c0:	f7ff fb74 	bl	80050ac <ai_buffer_get_size>
 80059c4:	f105 081c 	add.w	r8, r5, #28
 80059c8:	4681      	mov	r9, r0
 80059ca:	2101      	movs	r1, #1
 80059cc:	4640      	mov	r0, r8
 80059ce:	6a2f      	ldr	r7, [r5, #32]
 80059d0:	f7ff fb6c 	bl	80050ac <ai_buffer_get_size>
 80059d4:	f1b9 0f00 	cmp.w	r9, #0
 80059d8:	d025      	beq.n	8005a26 <ai_platform_network_init+0x162>
 80059da:	2201      	movs	r2, #1
 80059dc:	4696      	mov	lr, r2
 80059de:	bb30      	cbnz	r0, 8005a2e <ai_platform_network_init+0x16a>
 80059e0:	4680      	mov	r8, r0
 80059e2:	4607      	mov	r7, r0
 80059e4:	b376      	cbz	r6, 8005a44 <ai_platform_network_init+0x180>
 80059e6:	8be3      	ldrh	r3, [r4, #30]
 80059e8:	4573      	cmp	r3, lr
 80059ea:	d323      	bcc.n	8005a34 <ai_platform_network_init+0x170>
 80059ec:	b142      	cbz	r2, 8005a00 <ai_platform_network_init+0x13c>
 80059ee:	46ac      	mov	ip, r5
 80059f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80059f4:	6a25      	ldr	r5, [r4, #32]
 80059f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059f8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80059fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005a00:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005a02:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8005a06:	2600      	movs	r6, #0
 8005a08:	42bb      	cmp	r3, r7
 8005a0a:	83a6      	strh	r6, [r4, #28]
 8005a0c:	d323      	bcc.n	8005a56 <ai_platform_network_init+0x192>
 8005a0e:	b37f      	cbz	r7, 8005a70 <ai_platform_network_init+0x1ac>
 8005a10:	46c4      	mov	ip, r8
 8005a12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005a16:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a1a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8005a1e:	46b6      	mov	lr, r6
 8005a20:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005a24:	e7bb      	b.n	800599e <ai_platform_network_init+0xda>
 8005a26:	464a      	mov	r2, r9
 8005a28:	46ce      	mov	lr, r9
 8005a2a:	464d      	mov	r5, r9
 8005a2c:	e7d7      	b.n	80059de <ai_platform_network_init+0x11a>
 8005a2e:	b30f      	cbz	r7, 8005a74 <ai_platform_network_init+0x1b0>
 8005a30:	2701      	movs	r7, #1
 8005a32:	e7d7      	b.n	80059e4 <ai_platform_network_init+0x120>
 8005a34:	2212      	movs	r2, #18
 8005a36:	2116      	movs	r1, #22
 8005a38:	f104 0010 	add.w	r0, r4, #16
 8005a3c:	f000 fb46 	bl	80060cc <core_set_error>
 8005a40:	2600      	movs	r6, #0
 8005a42:	e78c      	b.n	800595e <ai_platform_network_init+0x9a>
 8005a44:	f1b9 0f00 	cmp.w	r9, #0
 8005a48:	d0cd      	beq.n	80059e6 <ai_platform_network_init+0x122>
 8005a4a:	2110      	movs	r1, #16
 8005a4c:	2212      	movs	r2, #18
 8005a4e:	1860      	adds	r0, r4, r1
 8005a50:	f000 fb3c 	bl	80060cc <core_set_error>
 8005a54:	e783      	b.n	800595e <ai_platform_network_init+0x9a>
 8005a56:	2213      	movs	r2, #19
 8005a58:	2116      	movs	r1, #22
 8005a5a:	f104 0010 	add.w	r0, r4, #16
 8005a5e:	f000 fb35 	bl	80060cc <core_set_error>
 8005a62:	e77c      	b.n	800595e <ai_platform_network_init+0x9a>
 8005a64:	2110      	movs	r1, #16
 8005a66:	2211      	movs	r2, #17
 8005a68:	1860      	adds	r0, r4, r1
 8005a6a:	f000 fb2f 	bl	80060cc <core_set_error>
 8005a6e:	e776      	b.n	800595e <ai_platform_network_init+0x9a>
 8005a70:	46be      	mov	lr, r7
 8005a72:	e794      	b.n	800599e <ai_platform_network_init+0xda>
 8005a74:	2110      	movs	r1, #16
 8005a76:	2213      	movs	r2, #19
 8005a78:	1860      	adds	r0, r4, r1
 8005a7a:	f000 fb27 	bl	80060cc <core_set_error>
 8005a7e:	463e      	mov	r6, r7
 8005a80:	e76d      	b.n	800595e <ai_platform_network_init+0x9a>
 8005a82:	bf00      	nop
 8005a84:	a1c00100 	.word	0xa1c00100
 8005a88:	e0042000 	.word	0xe0042000
 8005a8c:	58024000 	.word	0x58024000
 8005a90:	f407a5c2 	.word	0xf407a5c2
 8005a94:	b5e8b5cd 	.word	0xb5e8b5cd
 8005a98:	40023000 	.word	0x40023000
 8005a9c:	a1facade 	.word	0xa1facade

08005aa0 <ai_platform_network_post_init>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	b1f0      	cbz	r0, 8005ae2 <ai_platform_network_post_init+0x42>
 8005aa4:	4b3c      	ldr	r3, [pc, #240]	; (8005b98 <ai_platform_network_post_init+0xf8>)
 8005aa6:	6802      	ldr	r2, [r0, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	4604      	mov	r4, r0
 8005aac:	d119      	bne.n	8005ae2 <ai_platform_network_post_init+0x42>
 8005aae:	f7ff fb4b 	bl	8005148 <_ai_platform_acquire_crc>
 8005ab2:	4b3a      	ldr	r3, [pc, #232]	; (8005b9c <ai_platform_network_post_init+0xfc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abe:	d03b      	beq.n	8005b38 <ai_platform_network_post_init+0x98>
 8005ac0:	4a37      	ldr	r2, [pc, #220]	; (8005ba0 <ai_platform_network_post_init+0x100>)
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ac8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1fb      	bne.n	8005ac8 <ai_platform_network_post_init+0x28>
 8005ad0:	4b34      	ldr	r3, [pc, #208]	; (8005ba4 <ai_platform_network_post_init+0x104>)
 8005ad2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005ad6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ada:	4b33      	ldr	r3, [pc, #204]	; (8005ba8 <ai_platform_network_post_init+0x108>)
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d037      	beq.n	8005b50 <ai_platform_network_post_init+0xb0>
 8005ae0:	e7fe      	b.n	8005ae0 <ai_platform_network_post_init+0x40>
 8005ae2:	f7ff fb31 	bl	8005148 <_ai_platform_acquire_crc>
 8005ae6:	4b2d      	ldr	r3, [pc, #180]	; (8005b9c <ai_platform_network_post_init+0xfc>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af2:	d010      	beq.n	8005b16 <ai_platform_network_post_init+0x76>
 8005af4:	4a2a      	ldr	r2, [pc, #168]	; (8005ba0 <ai_platform_network_post_init+0x100>)
 8005af6:	2301      	movs	r3, #1
 8005af8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005afc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1fb      	bne.n	8005afc <ai_platform_network_post_init+0x5c>
 8005b04:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <ai_platform_network_post_init+0x104>)
 8005b06:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005b0a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b0e:	4b26      	ldr	r3, [pc, #152]	; (8005ba8 <ai_platform_network_post_init+0x108>)
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d00d      	beq.n	8005b30 <ai_platform_network_post_init+0x90>
 8005b14:	e7fe      	b.n	8005b14 <ai_platform_network_post_init+0x74>
 8005b16:	4a25      	ldr	r2, [pc, #148]	; (8005bac <ai_platform_network_post_init+0x10c>)
 8005b18:	2301      	movs	r3, #1
 8005b1a:	6093      	str	r3, [r2, #8]
 8005b1c:	6893      	ldr	r3, [r2, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1fc      	bne.n	8005b1c <ai_platform_network_post_init+0x7c>
 8005b22:	4b20      	ldr	r3, [pc, #128]	; (8005ba4 <ai_platform_network_post_init+0x104>)
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <ai_platform_network_post_init+0x108>)
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d000      	beq.n	8005b30 <ai_platform_network_post_init+0x90>
 8005b2e:	e7fe      	b.n	8005b2e <ai_platform_network_post_init+0x8e>
 8005b30:	f7ff fb0c 	bl	800514c <_ai_platform_release_crc>
 8005b34:	2000      	movs	r0, #0
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <ai_platform_network_post_init+0x10c>)
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	6093      	str	r3, [r2, #8]
 8005b3e:	6893      	ldr	r3, [r2, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1fc      	bne.n	8005b3e <ai_platform_network_post_init+0x9e>
 8005b44:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <ai_platform_network_post_init+0x104>)
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	4b17      	ldr	r3, [pc, #92]	; (8005ba8 <ai_platform_network_post_init+0x108>)
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d11a      	bne.n	8005b86 <ai_platform_network_post_init+0xe6>
 8005b50:	f7ff fafc 	bl	800514c <_ai_platform_release_crc>
 8005b54:	68e3      	ldr	r3, [r4, #12]
 8005b56:	f013 0502 	ands.w	r5, r3, #2
 8005b5a:	d015      	beq.n	8005b88 <ai_platform_network_post_init+0xe8>
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 ff1d 	bl	800699c <ai_layers_post_init_all>
 8005b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b64:	b16b      	cbz	r3, 8005b82 <ai_platform_network_post_init+0xe2>
 8005b66:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005b68:	e007      	b.n	8005b7a <ai_platform_network_post_init+0xda>
 8005b6a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8005b6e:	4798      	blx	r3
 8005b70:	692b      	ldr	r3, [r5, #16]
 8005b72:	42ab      	cmp	r3, r5
 8005b74:	d005      	beq.n	8005b82 <ai_platform_network_post_init+0xe2>
 8005b76:	b123      	cbz	r3, 8005b82 <ai_platform_network_post_init+0xe2>
 8005b78:	461d      	mov	r5, r3
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	2d00      	cmp	r5, #0
 8005b80:	d1f3      	bne.n	8005b6a <ai_platform_network_post_init+0xca>
 8005b82:	2001      	movs	r0, #1
 8005b84:	bd38      	pop	{r3, r4, r5, pc}
 8005b86:	e7fe      	b.n	8005b86 <ai_platform_network_post_init+0xe6>
 8005b88:	2210      	movs	r2, #16
 8005b8a:	2111      	movs	r1, #17
 8005b8c:	18a0      	adds	r0, r4, r2
 8005b8e:	f000 fa9d 	bl	80060cc <core_set_error>
 8005b92:	4628      	mov	r0, r5
 8005b94:	bd38      	pop	{r3, r4, r5, pc}
 8005b96:	bf00      	nop
 8005b98:	a1c00100 	.word	0xa1c00100
 8005b9c:	e0042000 	.word	0xe0042000
 8005ba0:	58024000 	.word	0x58024000
 8005ba4:	f407a5c2 	.word	0xf407a5c2
 8005ba8:	b5e8b5cd 	.word	0xb5e8b5cd
 8005bac:	40023000 	.word	0x40023000

08005bb0 <ai_platform_network_process>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	460e      	mov	r6, r1
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	4693      	mov	fp, r2
 8005bba:	4605      	mov	r5, r0
 8005bbc:	b120      	cbz	r0, 8005bc8 <ai_platform_network_process+0x18>
 8005bbe:	4bb8      	ldr	r3, [pc, #736]	; (8005ea0 <ai_platform_network_process+0x2f0>)
 8005bc0:	6802      	ldr	r2, [r0, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	bf18      	it	ne
 8005bc6:	2500      	movne	r5, #0
 8005bc8:	f7ff fabe 	bl	8005148 <_ai_platform_acquire_crc>
 8005bcc:	4bb5      	ldr	r3, [pc, #724]	; (8005ea4 <ai_platform_network_process+0x2f4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd8:	d010      	beq.n	8005bfc <ai_platform_network_process+0x4c>
 8005bda:	4ab3      	ldr	r2, [pc, #716]	; (8005ea8 <ai_platform_network_process+0x2f8>)
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005be2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1fb      	bne.n	8005be2 <ai_platform_network_process+0x32>
 8005bea:	4bb0      	ldr	r3, [pc, #704]	; (8005eac <ai_platform_network_process+0x2fc>)
 8005bec:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005bf0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005bf4:	4bae      	ldr	r3, [pc, #696]	; (8005eb0 <ai_platform_network_process+0x300>)
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d00d      	beq.n	8005c16 <ai_platform_network_process+0x66>
 8005bfa:	e7fe      	b.n	8005bfa <ai_platform_network_process+0x4a>
 8005bfc:	4aad      	ldr	r2, [pc, #692]	; (8005eb4 <ai_platform_network_process+0x304>)
 8005bfe:	2301      	movs	r3, #1
 8005c00:	6093      	str	r3, [r2, #8]
 8005c02:	6893      	ldr	r3, [r2, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1fc      	bne.n	8005c02 <ai_platform_network_process+0x52>
 8005c08:	4ba8      	ldr	r3, [pc, #672]	; (8005eac <ai_platform_network_process+0x2fc>)
 8005c0a:	6013      	str	r3, [r2, #0]
 8005c0c:	6812      	ldr	r2, [r2, #0]
 8005c0e:	4ba8      	ldr	r3, [pc, #672]	; (8005eb0 <ai_platform_network_process+0x300>)
 8005c10:	429a      	cmp	r2, r3
 8005c12:	f040 812c 	bne.w	8005e6e <ai_platform_network_process+0x2be>
 8005c16:	f7ff fa99 	bl	800514c <_ai_platform_release_crc>
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	f000 8154 	beq.w	8005ec8 <ai_platform_network_process+0x318>
 8005c20:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8124 	beq.w	8005e70 <ai_platform_network_process+0x2c0>
 8005c28:	68eb      	ldr	r3, [r5, #12]
 8005c2a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2700      	movs	r7, #0
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	616f      	str	r7, [r5, #20]
 8005c38:	f040 813e 	bne.w	8005eb8 <ai_platform_network_process+0x308>
 8005c3c:	2e00      	cmp	r6, #0
 8005c3e:	f000 811d 	beq.w	8005e7c <ai_platform_network_process+0x2cc>
 8005c42:	f1ba 0f00 	cmp.w	sl, #0
 8005c46:	f000 8119 	beq.w	8005e7c <ai_platform_network_process+0x2cc>
 8005c4a:	f8ba 3000 	ldrh.w	r3, [sl]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8114 	beq.w	8005e7c <ai_platform_network_process+0x2cc>
 8005c54:	69b3      	ldr	r3, [r6, #24]
 8005c56:	f8cd b00c 	str.w	fp, [sp, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8005c60:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d072      	beq.n	8005d4e <ai_platform_network_process+0x19e>
 8005c68:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005c6c:	2c00      	cmp	r4, #0
 8005c6e:	d06e      	beq.n	8005d4e <ai_platform_network_process+0x19e>
 8005c70:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005c74:	f8d3 9000 	ldr.w	r9, [r3]
 8005c78:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8005c7c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005c80:	f000 81e0 	beq.w	8006044 <ai_platform_network_process+0x494>
 8005c84:	69a3      	ldr	r3, [r4, #24]
 8005c86:	2101      	movs	r1, #1
 8005c88:	4630      	mov	r0, r6
 8005c8a:	685d      	ldr	r5, [r3, #4]
 8005c8c:	f7ff fa0e 	bl	80050ac <ai_buffer_get_size>
 8005c90:	4285      	cmp	r5, r0
 8005c92:	f0c0 811b 	bcc.w	8005ecc <ai_platform_network_process+0x31c>
 8005c96:	68e0      	ldr	r0, [r4, #12]
 8005c98:	69b1      	ldr	r1, [r6, #24]
 8005c9a:	68c2      	ldr	r2, [r0, #12]
 8005c9c:	68cb      	ldr	r3, [r1, #12]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	f040 8114 	bne.w	8005ecc <ai_platform_network_process+0x31c>
 8005ca4:	6882      	ldr	r2, [r0, #8]
 8005ca6:	688b      	ldr	r3, [r1, #8]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	f040 810f 	bne.w	8005ecc <ai_platform_network_process+0x31c>
 8005cae:	6842      	ldr	r2, [r0, #4]
 8005cb0:	684b      	ldr	r3, [r1, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	f040 810a 	bne.w	8005ecc <ai_platform_network_process+0x31c>
 8005cb8:	69a3      	ldr	r3, [r4, #24]
 8005cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cbe:	f001 f8a1 	bl	8006e04 <ai_array_get_data_byte_size>
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 fff1 	bl	8006cac <get_tensor_byte_size>
 8005cca:	4285      	cmp	r5, r0
 8005ccc:	f0c0 80fe 	bcc.w	8005ecc <ai_platform_network_process+0x31c>
 8005cd0:	69a3      	ldr	r3, [r4, #24]
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	f001 f802 	bl	8006cdc <ai_array_to_buffer_fmt>
 8005cd8:	6833      	ldr	r3, [r6, #0]
 8005cda:	4058      	eors	r0, r3
 8005cdc:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005ce0:	f040 81bb 	bne.w	800605a <ai_platform_network_process+0x4aa>
 8005ce4:	6873      	ldr	r3, [r6, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 81ae 	beq.w	8006048 <ai_platform_network_process+0x498>
 8005cec:	69b3      	ldr	r3, [r6, #24]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 819e 	beq.w	8006032 <ai_platform_network_process+0x482>
 8005cf6:	9a01      	ldr	r2, [sp, #4]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	bf38      	it	cc
 8005cfc:	461a      	movcc	r2, r3
 8005cfe:	4620      	mov	r0, r4
 8005d00:	9201      	str	r2, [sp, #4]
 8005d02:	f000 ffd3 	bl	8006cac <get_tensor_byte_size>
 8005d06:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d0a:	69b3      	ldr	r3, [r6, #24]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	fb00 f303 	mul.w	r3, r0, r3
 8005d12:	f8c8 300c 	str.w	r3, [r8, #12]
 8005d16:	6871      	ldr	r1, [r6, #4]
 8005d18:	f8c8 1004 	str.w	r1, [r8, #4]
 8005d1c:	440b      	add	r3, r1
 8005d1e:	f849 300b 	str.w	r3, [r9, fp]
 8005d22:	69a0      	ldr	r0, [r4, #24]
 8005d24:	6803      	ldr	r3, [r0, #0]
 8005d26:	009a      	lsls	r2, r3, #2
 8005d28:	f107 0701 	add.w	r7, r7, #1
 8005d2c:	f106 061c 	add.w	r6, r6, #28
 8005d30:	f100 80af 	bmi.w	8005e92 <ai_platform_network_process+0x2e2>
 8005d34:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005d38:	1a9b      	subs	r3, r3, r2
 8005d3a:	4419      	add	r1, r3
 8005d3c:	6081      	str	r1, [r0, #8]
 8005d3e:	69a3      	ldr	r3, [r4, #24]
 8005d40:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005d44:	60da      	str	r2, [r3, #12]
 8005d46:	f8ba 3000 	ldrh.w	r3, [sl]
 8005d4a:	42bb      	cmp	r3, r7
 8005d4c:	d888      	bhi.n	8005c60 <ai_platform_network_process+0xb0>
 8005d4e:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8005d52:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8005d54:	f1bb 0f00 	cmp.w	fp, #0
 8005d58:	f000 8188 	beq.w	800606c <ai_platform_network_process+0x4bc>
 8005d5c:	2a01      	cmp	r2, #1
 8005d5e:	f240 8160 	bls.w	8006022 <ai_platform_network_process+0x472>
 8005d62:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8005d66:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8159 	beq.w	8006022 <ai_platform_network_process+0x472>
 8005d70:	465e      	mov	r6, fp
 8005d72:	2700      	movs	r7, #0
 8005d74:	462c      	mov	r4, r5
 8005d76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 80b4 	beq.w	8005ee8 <ai_platform_network_process+0x338>
 8005d80:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8005d84:	2d00      	cmp	r5, #0
 8005d86:	f000 80af 	beq.w	8005ee8 <ai_platform_network_process+0x338>
 8005d8a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005d8e:	f8d3 8000 	ldr.w	r8, [r3]
 8005d92:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8005d96:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005d9a:	f000 8173 	beq.w	8006084 <ai_platform_network_process+0x4d4>
 8005d9e:	69ab      	ldr	r3, [r5, #24]
 8005da0:	2101      	movs	r1, #1
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	9302      	str	r3, [sp, #8]
 8005da6:	4630      	mov	r0, r6
 8005da8:	f7ff f980 	bl	80050ac <ai_buffer_get_size>
 8005dac:	9b02      	ldr	r3, [sp, #8]
 8005dae:	4283      	cmp	r3, r0
 8005db0:	f0c0 8136 	bcc.w	8006020 <ai_platform_network_process+0x470>
 8005db4:	68e8      	ldr	r0, [r5, #12]
 8005db6:	69b1      	ldr	r1, [r6, #24]
 8005db8:	68c2      	ldr	r2, [r0, #12]
 8005dba:	68cb      	ldr	r3, [r1, #12]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	f040 812f 	bne.w	8006020 <ai_platform_network_process+0x470>
 8005dc2:	6882      	ldr	r2, [r0, #8]
 8005dc4:	688b      	ldr	r3, [r1, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	f040 812a 	bne.w	8006020 <ai_platform_network_process+0x470>
 8005dcc:	6842      	ldr	r2, [r0, #4]
 8005dce:	684b      	ldr	r3, [r1, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	f040 8125 	bne.w	8006020 <ai_platform_network_process+0x470>
 8005dd6:	69ab      	ldr	r3, [r5, #24]
 8005dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ddc:	f001 f812 	bl	8006e04 <ai_array_get_data_byte_size>
 8005de0:	9002      	str	r0, [sp, #8]
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 ff62 	bl	8006cac <get_tensor_byte_size>
 8005de8:	9b02      	ldr	r3, [sp, #8]
 8005dea:	4283      	cmp	r3, r0
 8005dec:	f0c0 8118 	bcc.w	8006020 <ai_platform_network_process+0x470>
 8005df0:	69ab      	ldr	r3, [r5, #24]
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	f000 ff72 	bl	8006cdc <ai_array_to_buffer_fmt>
 8005df8:	6833      	ldr	r3, [r6, #0]
 8005dfa:	4058      	eors	r0, r3
 8005dfc:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8005e00:	f040 8138 	bne.w	8006074 <ai_platform_network_process+0x4c4>
 8005e04:	6873      	ldr	r3, [r6, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 814f 	beq.w	80060aa <ai_platform_network_process+0x4fa>
 8005e0c:	69b3      	ldr	r3, [r6, #24]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 8141 	beq.w	8006098 <ai_platform_network_process+0x4e8>
 8005e16:	9a01      	ldr	r2, [sp, #4]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	bf38      	it	cc
 8005e1c:	461a      	movcc	r2, r3
 8005e1e:	4628      	mov	r0, r5
 8005e20:	9201      	str	r2, [sp, #4]
 8005e22:	f000 ff43 	bl	8006cac <get_tensor_byte_size>
 8005e26:	f8ca 0008 	str.w	r0, [sl, #8]
 8005e2a:	69b3      	ldr	r3, [r6, #24]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	fb00 f303 	mul.w	r3, r0, r3
 8005e32:	f8ca 300c 	str.w	r3, [sl, #12]
 8005e36:	6871      	ldr	r1, [r6, #4]
 8005e38:	f8ca 1004 	str.w	r1, [sl, #4]
 8005e3c:	440b      	add	r3, r1
 8005e3e:	f848 300b 	str.w	r3, [r8, fp]
 8005e42:	69a8      	ldr	r0, [r5, #24]
 8005e44:	6803      	ldr	r3, [r0, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	f107 0701 	add.w	r7, r7, #1
 8005e4c:	f106 061c 	add.w	r6, r6, #28
 8005e50:	d445      	bmi.n	8005ede <ai_platform_network_process+0x32e>
 8005e52:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	4419      	add	r1, r3
 8005e5a:	6081      	str	r1, [r0, #8]
 8005e5c:	69ab      	ldr	r3, [r5, #24]
 8005e5e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005e62:	60da      	str	r2, [r3, #12]
 8005e64:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005e68:	429f      	cmp	r7, r3
 8005e6a:	d384      	bcc.n	8005d76 <ai_platform_network_process+0x1c6>
 8005e6c:	e03c      	b.n	8005ee8 <ai_platform_network_process+0x338>
 8005e6e:	e7fe      	b.n	8005e6e <ai_platform_network_process+0x2be>
 8005e70:	68ea      	ldr	r2, [r5, #12]
 8005e72:	616b      	str	r3, [r5, #20]
 8005e74:	f002 0203 	and.w	r2, r2, #3
 8005e78:	2a03      	cmp	r2, #3
 8005e7a:	d11d      	bne.n	8005eb8 <ai_platform_network_process+0x308>
 8005e7c:	2217      	movs	r2, #23
 8005e7e:	2112      	movs	r1, #18
 8005e80:	f105 0010 	add.w	r0, r5, #16
 8005e84:	f000 f922 	bl	80060cc <core_set_error>
 8005e88:	2400      	movs	r4, #0
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	b005      	add	sp, #20
 8005e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e92:	f8ba 3000 	ldrh.w	r3, [sl]
 8005e96:	429f      	cmp	r7, r3
 8005e98:	f4ff aee2 	bcc.w	8005c60 <ai_platform_network_process+0xb0>
 8005e9c:	e757      	b.n	8005d4e <ai_platform_network_process+0x19e>
 8005e9e:	bf00      	nop
 8005ea0:	a1c00100 	.word	0xa1c00100
 8005ea4:	e0042000 	.word	0xe0042000
 8005ea8:	58024000 	.word	0x58024000
 8005eac:	f407a5c2 	.word	0xf407a5c2
 8005eb0:	b5e8b5cd 	.word	0xb5e8b5cd
 8005eb4:	40023000 	.word	0x40023000
 8005eb8:	2230      	movs	r2, #48	; 0x30
 8005eba:	2111      	movs	r1, #17
 8005ebc:	f105 0010 	add.w	r0, r5, #16
 8005ec0:	f000 f904 	bl	80060cc <core_set_error>
 8005ec4:	2400      	movs	r4, #0
 8005ec6:	e7e0      	b.n	8005e8a <ai_platform_network_process+0x2da>
 8005ec8:	462c      	mov	r4, r5
 8005eca:	e7de      	b.n	8005e8a <ai_platform_network_process+0x2da>
 8005ecc:	9d02      	ldr	r5, [sp, #8]
 8005ece:	2218      	movs	r2, #24
 8005ed0:	2112      	movs	r1, #18
 8005ed2:	f105 0010 	add.w	r0, r5, #16
 8005ed6:	f000 f8f9 	bl	80060cc <core_set_error>
 8005eda:	2400      	movs	r4, #0
 8005edc:	e7d5      	b.n	8005e8a <ai_platform_network_process+0x2da>
 8005ede:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005ee2:	429f      	cmp	r7, r3
 8005ee4:	f4ff af47 	bcc.w	8005d76 <ai_platform_network_process+0x1c6>
 8005ee8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005eec:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8005eee:	82a3      	strh	r3, [r4, #20]
 8005ef0:	4625      	mov	r5, r4
 8005ef2:	2a00      	cmp	r2, #0
 8005ef4:	f040 808e 	bne.w	8006014 <ai_platform_network_process+0x464>
 8005ef8:	4616      	mov	r6, r2
 8005efa:	4617      	mov	r7, r2
 8005efc:	8aec      	ldrh	r4, [r5, #22]
 8005efe:	429c      	cmp	r4, r3
 8005f00:	bf38      	it	cc
 8005f02:	46ab      	movcc	fp, r5
 8005f04:	d2c1      	bcs.n	8005e8a <ai_platform_network_process+0x2da>
 8005f06:	2e00      	cmp	r6, #0
 8005f08:	d030      	beq.n	8005f6c <ai_platform_network_process+0x3bc>
 8005f0a:	f04f 0800 	mov.w	r8, #0
 8005f0e:	e014      	b.n	8005f3a <ai_platform_network_process+0x38a>
 8005f10:	6882      	ldr	r2, [r0, #8]
 8005f12:	68c5      	ldr	r5, [r0, #12]
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	1b52      	subs	r2, r2, r5
 8005f18:	4413      	add	r3, r2
 8005f1a:	6083      	str	r3, [r0, #8]
 8005f1c:	698b      	ldr	r3, [r1, #24]
 8005f1e:	6862      	ldr	r2, [r4, #4]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005f26:	f859 200a 	ldr.w	r2, [r9, sl]
 8005f2a:	440b      	add	r3, r1
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	bf24      	itt	cs
 8005f30:	68e3      	ldrcs	r3, [r4, #12]
 8005f32:	1ad3      	subcs	r3, r2, r3
 8005f34:	6063      	str	r3, [r4, #4]
 8005f36:	f108 0801 	add.w	r8, r8, #1
 8005f3a:	8833      	ldrh	r3, [r6, #0]
 8005f3c:	4543      	cmp	r3, r8
 8005f3e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005f42:	d913      	bls.n	8005f6c <ai_platform_network_process+0x3bc>
 8005f44:	6873      	ldr	r3, [r6, #4]
 8005f46:	b18b      	cbz	r3, 8005f6c <ai_platform_network_process+0x3bc>
 8005f48:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005f4c:	b171      	cbz	r1, 8005f6c <ai_platform_network_process+0x3bc>
 8005f4e:	6988      	ldr	r0, [r1, #24]
 8005f50:	68b2      	ldr	r2, [r6, #8]
 8005f52:	6803      	ldr	r3, [r0, #0]
 8005f54:	f8d2 9000 	ldr.w	r9, [r2]
 8005f58:	009d      	lsls	r5, r3, #2
 8005f5a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8005f5e:	d5d7      	bpl.n	8005f10 <ai_platform_network_process+0x360>
 8005f60:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8005f64:	6880      	ldr	r0, [r0, #8]
 8005f66:	f000 ff89 	bl	8006e7c <memcpy>
 8005f6a:	e7da      	b.n	8005f22 <ai_platform_network_process+0x372>
 8005f6c:	4658      	mov	r0, fp
 8005f6e:	f000 fd29 	bl	80069c4 <ai_layers_forward_all>
 8005f72:	2f00      	cmp	r7, #0
 8005f74:	d03f      	beq.n	8005ff6 <ai_platform_network_process+0x446>
 8005f76:	2400      	movs	r4, #0
 8005f78:	e016      	b.n	8005fa8 <ai_platform_network_process+0x3f8>
 8005f7a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8005f7e:	f859 100a 	ldr.w	r1, [r9, sl]
 8005f82:	4413      	add	r3, r2
 8005f84:	428b      	cmp	r3, r1
 8005f86:	bf24      	itt	cs
 8005f88:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005f8c:	1acb      	subcs	r3, r1, r3
 8005f8e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005f92:	6981      	ldr	r1, [r0, #24]
 8005f94:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005f98:	1b52      	subs	r2, r2, r5
 8005f9a:	4413      	add	r3, r2
 8005f9c:	608b      	str	r3, [r1, #8]
 8005f9e:	6983      	ldr	r3, [r0, #24]
 8005fa0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	3401      	adds	r4, #1
 8005fa8:	883b      	ldrh	r3, [r7, #0]
 8005faa:	42a3      	cmp	r3, r4
 8005fac:	d923      	bls.n	8005ff6 <ai_platform_network_process+0x446>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	b30b      	cbz	r3, 8005ff6 <ai_platform_network_process+0x446>
 8005fb2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005fb6:	b1f0      	cbz	r0, 8005ff6 <ai_platform_network_process+0x446>
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	6983      	ldr	r3, [r0, #24]
 8005fbc:	f8d2 9000 	ldr.w	r9, [r2]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	0092      	lsls	r2, r2, #2
 8005fc4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005fc8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005fcc:	d5d5      	bpl.n	8005f7a <ai_platform_network_process+0x3ca>
 8005fce:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8005fd2:	6899      	ldr	r1, [r3, #8]
 8005fd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005fd8:	f000 ff50 	bl	8006e7c <memcpy>
 8005fdc:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8005fe0:	f859 200a 	ldr.w	r2, [r9, sl]
 8005fe4:	440b      	add	r3, r1
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	bf24      	itt	cs
 8005fea:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005fee:	1ad3      	subcs	r3, r2, r3
 8005ff0:	f8c8 3004 	str.w	r3, [r8, #4]
 8005ff4:	e7d7      	b.n	8005fa6 <ai_platform_network_process+0x3f6>
 8005ff6:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8005ffa:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8005ffe:	3401      	adds	r4, #1
 8006000:	b2a4      	uxth	r4, r4
 8006002:	42a3      	cmp	r3, r4
 8006004:	f8ab 4016 	strh.w	r4, [fp, #22]
 8006008:	f63f af7d 	bhi.w	8005f06 <ai_platform_network_process+0x356>
 800600c:	4620      	mov	r0, r4
 800600e:	b005      	add	sp, #20
 8006010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006014:	2a01      	cmp	r2, #1
 8006016:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8006018:	d03c      	beq.n	8006094 <ai_platform_network_process+0x4e4>
 800601a:	f106 070c 	add.w	r7, r6, #12
 800601e:	e76d      	b.n	8005efc <ai_platform_network_process+0x34c>
 8006020:	4625      	mov	r5, r4
 8006022:	2218      	movs	r2, #24
 8006024:	2113      	movs	r1, #19
 8006026:	f105 0010 	add.w	r0, r5, #16
 800602a:	f000 f84f 	bl	80060cc <core_set_error>
 800602e:	2400      	movs	r4, #0
 8006030:	e72b      	b.n	8005e8a <ai_platform_network_process+0x2da>
 8006032:	9d02      	ldr	r5, [sp, #8]
 8006034:	4604      	mov	r4, r0
 8006036:	2221      	movs	r2, #33	; 0x21
 8006038:	2112      	movs	r1, #18
 800603a:	f105 0010 	add.w	r0, r5, #16
 800603e:	f000 f845 	bl	80060cc <core_set_error>
 8006042:	e722      	b.n	8005e8a <ai_platform_network_process+0x2da>
 8006044:	9d02      	ldr	r5, [sp, #8]
 8006046:	e719      	b.n	8005e7c <ai_platform_network_process+0x2cc>
 8006048:	9d02      	ldr	r5, [sp, #8]
 800604a:	4604      	mov	r4, r0
 800604c:	2217      	movs	r2, #23
 800604e:	2112      	movs	r1, #18
 8006050:	f105 0010 	add.w	r0, r5, #16
 8006054:	f000 f83a 	bl	80060cc <core_set_error>
 8006058:	e717      	b.n	8005e8a <ai_platform_network_process+0x2da>
 800605a:	9d02      	ldr	r5, [sp, #8]
 800605c:	2219      	movs	r2, #25
 800605e:	2112      	movs	r1, #18
 8006060:	f105 0010 	add.w	r0, r5, #16
 8006064:	f000 f832 	bl	80060cc <core_set_error>
 8006068:	2400      	movs	r4, #0
 800606a:	e70e      	b.n	8005e8a <ai_platform_network_process+0x2da>
 800606c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006070:	82ab      	strh	r3, [r5, #20]
 8006072:	e73e      	b.n	8005ef2 <ai_platform_network_process+0x342>
 8006074:	f104 0010 	add.w	r0, r4, #16
 8006078:	2219      	movs	r2, #25
 800607a:	2113      	movs	r1, #19
 800607c:	f000 f826 	bl	80060cc <core_set_error>
 8006080:	2400      	movs	r4, #0
 8006082:	e702      	b.n	8005e8a <ai_platform_network_process+0x2da>
 8006084:	f104 0010 	add.w	r0, r4, #16
 8006088:	2217      	movs	r2, #23
 800608a:	2113      	movs	r1, #19
 800608c:	f000 f81e 	bl	80060cc <core_set_error>
 8006090:	4654      	mov	r4, sl
 8006092:	e6fa      	b.n	8005e8a <ai_platform_network_process+0x2da>
 8006094:	2700      	movs	r7, #0
 8006096:	e731      	b.n	8005efc <ai_platform_network_process+0x34c>
 8006098:	4625      	mov	r5, r4
 800609a:	2221      	movs	r2, #33	; 0x21
 800609c:	4604      	mov	r4, r0
 800609e:	2113      	movs	r1, #19
 80060a0:	f105 0010 	add.w	r0, r5, #16
 80060a4:	f000 f812 	bl	80060cc <core_set_error>
 80060a8:	e6ef      	b.n	8005e8a <ai_platform_network_process+0x2da>
 80060aa:	4625      	mov	r5, r4
 80060ac:	2217      	movs	r2, #23
 80060ae:	4604      	mov	r4, r0
 80060b0:	2113      	movs	r1, #19
 80060b2:	f105 0010 	add.w	r0, r5, #16
 80060b6:	f000 f809 	bl	80060cc <core_set_error>
 80060ba:	e6e6      	b.n	8005e8a <ai_platform_network_process+0x2da>

080060bc <core_init>:
 80060bc:	2001      	movs	r0, #1
 80060be:	4770      	bx	lr

080060c0 <core_get_error>:
 80060c0:	4603      	mov	r3, r0
 80060c2:	2200      	movs	r2, #0
 80060c4:	6800      	ldr	r0, [r0, #0]
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop

080060cc <core_set_error>:
 80060cc:	4603      	mov	r3, r0
 80060ce:	7800      	ldrb	r0, [r0, #0]
 80060d0:	b108      	cbz	r0, 80060d6 <core_set_error+0xa>
 80060d2:	2000      	movs	r0, #0
 80060d4:	4770      	bx	lr
 80060d6:	7019      	strb	r1, [r3, #0]
 80060d8:	6819      	ldr	r1, [r3, #0]
 80060da:	f362 211f 	bfi	r1, r2, #8, #24
 80060de:	2001      	movs	r0, #1
 80060e0:	6019      	str	r1, [r3, #0]
 80060e2:	4770      	bx	lr

080060e4 <forward_dense>:
 80060e4:	6983      	ldr	r3, [r0, #24]
 80060e6:	881a      	ldrh	r2, [r3, #0]
 80060e8:	2a00      	cmp	r2, #0
 80060ea:	f000 8181 	beq.w	80063f0 <forward_dense+0x30c>
 80060ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f2:	ed2d 8b02 	vpush	{d8}
 80060f6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80060fa:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80060fe:	b095      	sub	sp, #84	; 0x54
 8006100:	b105      	cbz	r5, 8006104 <forward_dense+0x20>
 8006102:	682d      	ldr	r5, [r5, #0]
 8006104:	2a01      	cmp	r2, #1
 8006106:	f000 828f 	beq.w	8006628 <forward_dense+0x544>
 800610a:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800610e:	b106      	cbz	r6, 8006112 <forward_dense+0x2e>
 8006110:	6836      	ldr	r6, [r6, #0]
 8006112:	2a02      	cmp	r2, #2
 8006114:	f000 816e 	beq.w	80063f4 <forward_dense+0x310>
 8006118:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800611c:	930b      	str	r3, [sp, #44]	; 0x2c
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 8274 	beq.w	800660c <forward_dense+0x528>
 8006124:	4619      	mov	r1, r3
 8006126:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800612a:	6809      	ldr	r1, [r1, #0]
 800612c:	910d      	str	r1, [sp, #52]	; 0x34
 800612e:	2b01      	cmp	r3, #1
 8006130:	f240 826e 	bls.w	8006610 <forward_dense+0x52c>
 8006134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	930b      	str	r3, [sp, #44]	; 0x2c
 800613a:	460b      	mov	r3, r1
 800613c:	68e8      	ldr	r0, [r5, #12]
 800613e:	68f7      	ldr	r7, [r6, #12]
 8006140:	6840      	ldr	r0, [r0, #4]
 8006142:	6999      	ldr	r1, [r3, #24]
 8006144:	9013      	str	r0, [sp, #76]	; 0x4c
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	680b      	ldr	r3, [r1, #0]
 800614a:	9012      	str	r0, [sp, #72]	; 0x48
 800614c:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8006150:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8006154:	fb00 f404 	mul.w	r4, r0, r4
 8006158:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800615c:	fa4e f000 	asr.w	r0, lr, r0
 8006160:	2a03      	cmp	r2, #3
 8006162:	9010      	str	r0, [sp, #64]	; 0x40
 8006164:	f000 825d 	beq.w	8006622 <forward_dense+0x53e>
 8006168:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800616c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8006170:	2a00      	cmp	r2, #0
 8006172:	f000 8246 	beq.w	8006602 <forward_dense+0x51e>
 8006176:	6812      	ldr	r2, [r2, #0]
 8006178:	2a00      	cmp	r2, #0
 800617a:	f000 8242 	beq.w	8006602 <forward_dense+0x51e>
 800617e:	2b04      	cmp	r3, #4
 8006180:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8006184:	f000 822c 	beq.w	80065e0 <forward_dense+0x4fc>
 8006188:	2b08      	cmp	r3, #8
 800618a:	f000 8229 	beq.w	80065e0 <forward_dense+0x4fc>
 800618e:	f04f 0b00 	mov.w	fp, #0
 8006192:	69b2      	ldr	r2, [r6, #24]
 8006194:	69ab      	ldr	r3, [r5, #24]
 8006196:	6891      	ldr	r1, [r2, #8]
 8006198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	6952      	ldr	r2, [r2, #20]
 800619e:	9106      	str	r1, [sp, #24]
 80061a0:	fb07 f404 	mul.w	r4, r7, r4
 80061a4:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80061a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061aa:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80061ae:	4281      	cmp	r1, r0
 80061b0:	ea4f 0482 	mov.w	r4, r2, lsl #2
 80061b4:	900e      	str	r0, [sp, #56]	; 0x38
 80061b6:	940c      	str	r4, [sp, #48]	; 0x30
 80061b8:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 80061bc:	f080 8113 	bcs.w	80063e6 <forward_dense+0x302>
 80061c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80061c2:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8006410 <forward_dense+0x32c>
 80061c6:	f021 0201 	bic.w	r2, r1, #1
 80061ca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80061ce:	9204      	str	r2, [sp, #16]
 80061d0:	f001 0201 	and.w	r2, r1, #1
 80061d4:	08c8      	lsrs	r0, r1, #3
 80061d6:	9208      	str	r2, [sp, #32]
 80061d8:	008a      	lsls	r2, r1, #2
 80061da:	f001 0a07 	and.w	sl, r1, #7
 80061de:	920f      	str	r2, [sp, #60]	; 0x3c
 80061e0:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 80061e4:	3320      	adds	r3, #32
 80061e6:	465c      	mov	r4, fp
 80061e8:	9007      	str	r0, [sp, #28]
 80061ea:	46cb      	mov	fp, r9
 80061ec:	9205      	str	r2, [sp, #20]
 80061ee:	9302      	str	r3, [sp, #8]
 80061f0:	46c1      	mov	r9, r8
 80061f2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80061f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	9b02      	ldr	r3, [sp, #8]
 80061fe:	3b20      	subs	r3, #32
 8006200:	930a      	str	r3, [sp, #40]	; 0x28
 8006202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006204:	b10b      	cbz	r3, 800620a <forward_dense+0x126>
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2c00      	cmp	r4, #0
 800620c:	f000 81da 	beq.w	80065c4 <forward_dense+0x4e0>
 8006210:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006212:	2904      	cmp	r1, #4
 8006214:	9906      	ldr	r1, [sp, #24]
 8006216:	f000 80fd 	beq.w	8006414 <forward_dense+0x330>
 800621a:	4549      	cmp	r1, r9
 800621c:	f080 80d2 	bcs.w	80063c4 <forward_dense+0x2e0>
 8006220:	460f      	mov	r7, r1
 8006222:	9907      	ldr	r1, [sp, #28]
 8006224:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006228:	f8dd a014 	ldr.w	sl, [sp, #20]
 800622c:	1c4e      	adds	r6, r1, #1
 800622e:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006232:	4694      	mov	ip, r2
 8006234:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006236:	468e      	mov	lr, r1
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80de 	beq.w	80063fa <forward_dense+0x316>
 800623e:	ecf3 2a01 	vldmia	r3!, {s5}
 8006242:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8006410 <forward_dense+0x32c>
 8006246:	f1be 0f00 	cmp.w	lr, #0
 800624a:	f000 80de 	beq.w	800640a <forward_dense+0x326>
 800624e:	f10c 0108 	add.w	r1, ip, #8
 8006252:	4640      	mov	r0, r8
 8006254:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8006258:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800625c:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8006260:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8006264:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8006268:	ed10 5a04 	vldr	s10, [r0, #-16]
 800626c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8006270:	ed10 6a02 	vldr	s12, [r0, #-8]
 8006274:	ed50 6a01 	vldr	s13, [r0, #-4]
 8006278:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800627c:	edd5 7a00 	vldr	s15, [r5]
 8006280:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8006284:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006288:	ee67 7a83 	vmul.f32	s15, s15, s6
 800628c:	ed95 3a00 	vldr	s6, [r5]
 8006290:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8006294:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006298:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800629c:	3108      	adds	r1, #8
 800629e:	edd5 3a00 	vldr	s7, [r5]
 80062a2:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80062a6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80062aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80062ae:	3020      	adds	r0, #32
 80062b0:	ed95 4a00 	vldr	s8, [r5]
 80062b4:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80062b8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80062bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80062c0:	edd5 4a00 	vldr	s9, [r5]
 80062c4:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80062c8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80062cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80062d0:	ed95 5a00 	vldr	s10, [r5]
 80062d4:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80062d8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80062dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80062e0:	edd5 5a00 	vldr	s11, [r5]
 80062e4:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80062e8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80062ec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80062f0:	428e      	cmp	r6, r1
 80062f2:	ed95 6a00 	vldr	s12, [r5]
 80062f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80062fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062fe:	d1a9      	bne.n	8006254 <forward_dense+0x170>
 8006300:	f1a6 0108 	sub.w	r1, r6, #8
 8006304:	4650      	mov	r0, sl
 8006306:	2a00      	cmp	r2, #0
 8006308:	d04a      	beq.n	80063a0 <forward_dense+0x2bc>
 800630a:	780d      	ldrb	r5, [r1, #0]
 800630c:	edd0 6a00 	vldr	s13, [r0]
 8006310:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006314:	edd5 7a00 	vldr	s15, [r5]
 8006318:	2a01      	cmp	r2, #1
 800631a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800631e:	d03f      	beq.n	80063a0 <forward_dense+0x2bc>
 8006320:	784d      	ldrb	r5, [r1, #1]
 8006322:	edd0 6a01 	vldr	s13, [r0, #4]
 8006326:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800632a:	edd5 7a00 	vldr	s15, [r5]
 800632e:	2a02      	cmp	r2, #2
 8006330:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006334:	d034      	beq.n	80063a0 <forward_dense+0x2bc>
 8006336:	788d      	ldrb	r5, [r1, #2]
 8006338:	edd0 6a02 	vldr	s13, [r0, #8]
 800633c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006340:	edd5 7a00 	vldr	s15, [r5]
 8006344:	2a03      	cmp	r2, #3
 8006346:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800634a:	d029      	beq.n	80063a0 <forward_dense+0x2bc>
 800634c:	78cd      	ldrb	r5, [r1, #3]
 800634e:	edd0 6a03 	vldr	s13, [r0, #12]
 8006352:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006356:	edd5 7a00 	vldr	s15, [r5]
 800635a:	2a04      	cmp	r2, #4
 800635c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006360:	d01e      	beq.n	80063a0 <forward_dense+0x2bc>
 8006362:	790d      	ldrb	r5, [r1, #4]
 8006364:	edd0 6a04 	vldr	s13, [r0, #16]
 8006368:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800636c:	edd5 7a00 	vldr	s15, [r5]
 8006370:	2a05      	cmp	r2, #5
 8006372:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006376:	d013      	beq.n	80063a0 <forward_dense+0x2bc>
 8006378:	794d      	ldrb	r5, [r1, #5]
 800637a:	edd0 6a05 	vldr	s13, [r0, #20]
 800637e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006382:	edd5 7a00 	vldr	s15, [r5]
 8006386:	2a06      	cmp	r2, #6
 8006388:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800638c:	d008      	beq.n	80063a0 <forward_dense+0x2bc>
 800638e:	7989      	ldrb	r1, [r1, #6]
 8006390:	edd0 7a06 	vldr	s15, [r0, #24]
 8006394:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006398:	edd1 6a00 	vldr	s13, [r1]
 800639c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063a0:	44dc      	add	ip, fp
 80063a2:	445e      	add	r6, fp
 80063a4:	ee32 7a87 	vadd.f32	s14, s5, s14
 80063a8:	eca7 7a01 	vstmia	r7!, {s14}
 80063ac:	454f      	cmp	r7, r9
 80063ae:	f4ff af43 	bcc.w	8006238 <forward_dense+0x154>
 80063b2:	9a06      	ldr	r2, [sp, #24]
 80063b4:	eba9 0302 	sub.w	r3, r9, r2
 80063b8:	3b01      	subs	r3, #1
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	3304      	adds	r3, #4
 80063c0:	18d3      	adds	r3, r2, r3
 80063c2:	9306      	str	r3, [sp, #24]
 80063c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063c6:	9a05      	ldr	r2, [sp, #20]
 80063c8:	4499      	add	r9, r3
 80063ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063cc:	441a      	add	r2, r3
 80063ce:	9205      	str	r2, [sp, #20]
 80063d0:	9a02      	ldr	r2, [sp, #8]
 80063d2:	441a      	add	r2, r3
 80063d4:	9202      	str	r2, [sp, #8]
 80063d6:	9a04      	ldr	r2, [sp, #16]
 80063d8:	441a      	add	r2, r3
 80063da:	9204      	str	r2, [sp, #16]
 80063dc:	9b06      	ldr	r3, [sp, #24]
 80063de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063e0:	4293      	cmp	r3, r2
 80063e2:	f4ff af08 	bcc.w	80061f6 <forward_dense+0x112>
 80063e6:	b015      	add	sp, #84	; 0x54
 80063e8:	ecbd 8b02 	vpop	{d8}
 80063ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f0:	6853      	ldr	r3, [r2, #4]
 80063f2:	deff      	udf	#255	; 0xff
 80063f4:	2300      	movs	r3, #0
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	deff      	udf	#255	; 0xff
 80063fa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006410 <forward_dense+0x32c>
 80063fe:	eef0 2a48 	vmov.f32	s5, s16
 8006402:	f1be 0f00 	cmp.w	lr, #0
 8006406:	f47f af22 	bne.w	800624e <forward_dense+0x16a>
 800640a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800640c:	4661      	mov	r1, ip
 800640e:	e77a      	b.n	8006306 <forward_dense+0x222>
 8006410:	00000000 	.word	0x00000000
 8006414:	4549      	cmp	r1, r9
 8006416:	d2d5      	bcs.n	80063c4 <forward_dense+0x2e0>
 8006418:	9807      	ldr	r0, [sp, #28]
 800641a:	9103      	str	r1, [sp, #12]
 800641c:	9904      	ldr	r1, [sp, #16]
 800641e:	f100 0c01 	add.w	ip, r0, #1
 8006422:	3901      	subs	r1, #1
 8006424:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8006428:	9109      	str	r1, [sp, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 80b2 	beq.w	8006594 <forward_dense+0x4b0>
 8006430:	9907      	ldr	r1, [sp, #28]
 8006432:	ecf3 2a01 	vldmia	r3!, {s5}
 8006436:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8006410 <forward_dense+0x32c>
 800643a:	2900      	cmp	r1, #0
 800643c:	f000 80b2 	beq.w	80065a4 <forward_dense+0x4c0>
 8006440:	9902      	ldr	r1, [sp, #8]
 8006442:	1d10      	adds	r0, r2, #4
 8006444:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8006448:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800644c:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8006450:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8006454:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8006458:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800645c:	ed11 5a04 	vldr	s10, [r1, #-16]
 8006460:	ed51 5a03 	vldr	s11, [r1, #-12]
 8006464:	ed11 6a02 	vldr	s12, [r1, #-8]
 8006468:	ed51 6a01 	vldr	s13, [r1, #-4]
 800646c:	f006 070f 	and.w	r7, r6, #15
 8006470:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8006474:	edd7 7a00 	vldr	s15, [r7]
 8006478:	0936      	lsrs	r6, r6, #4
 800647a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800647e:	ed96 3a00 	vldr	s6, [r6]
 8006482:	ee67 7a82 	vmul.f32	s15, s15, s4
 8006486:	092e      	lsrs	r6, r5, #4
 8006488:	eee3 7a23 	vfma.f32	s15, s6, s7
 800648c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006490:	f005 050f 	and.w	r5, r5, #15
 8006494:	edd6 3a00 	vldr	s7, [r6]
 8006498:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800649c:	eee3 7a84 	vfma.f32	s15, s7, s8
 80064a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80064a4:	0937      	lsrs	r7, r6, #4
 80064a6:	ed95 4a00 	vldr	s8, [r5]
 80064aa:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80064ae:	eee4 7a24 	vfma.f32	s15, s8, s9
 80064b2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80064b6:	f006 060f 	and.w	r6, r6, #15
 80064ba:	edd7 4a00 	vldr	s9, [r7]
 80064be:	eee4 7a85 	vfma.f32	s15, s9, s10
 80064c2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80064c6:	3004      	adds	r0, #4
 80064c8:	ed96 5a00 	vldr	s10, [r6]
 80064cc:	092e      	lsrs	r6, r5, #4
 80064ce:	eee5 7a25 	vfma.f32	s15, s10, s11
 80064d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80064d6:	f005 050f 	and.w	r5, r5, #15
 80064da:	edd6 5a00 	vldr	s11, [r6]
 80064de:	eee5 7a86 	vfma.f32	s15, s11, s12
 80064e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80064e6:	4584      	cmp	ip, r0
 80064e8:	ed95 6a00 	vldr	s12, [r5]
 80064ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 80064f0:	f101 0120 	add.w	r1, r1, #32
 80064f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064f8:	d1a4      	bne.n	8006444 <forward_dense+0x360>
 80064fa:	f8dd e014 	ldr.w	lr, [sp, #20]
 80064fe:	f1ac 0804 	sub.w	r8, ip, #4
 8006502:	9904      	ldr	r1, [sp, #16]
 8006504:	458e      	cmp	lr, r1
 8006506:	d22a      	bcs.n	800655e <forward_dense+0x47a>
 8006508:	9909      	ldr	r1, [sp, #36]	; 0x24
 800650a:	eba1 070e 	sub.w	r7, r1, lr
 800650e:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8006512:	f10e 0008 	add.w	r0, lr, #8
 8006516:	f108 36ff 	add.w	r6, r8, #4294967295
 800651a:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800651e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006522:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006526:	ed50 6a02 	vldr	s13, [r0, #-8]
 800652a:	f001 050f 	and.w	r5, r1, #15
 800652e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8006532:	edd5 7a00 	vldr	s15, [r5]
 8006536:	0909      	lsrs	r1, r1, #4
 8006538:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800653c:	ed91 6a00 	vldr	s12, [r1]
 8006540:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006544:	42b7      	cmp	r7, r6
 8006546:	eee6 7a26 	vfma.f32	s15, s12, s13
 800654a:	f100 0008 	add.w	r0, r0, #8
 800654e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006552:	d1e4      	bne.n	800651e <forward_dense+0x43a>
 8006554:	f10a 0a01 	add.w	sl, sl, #1
 8006558:	44d0      	add	r8, sl
 800655a:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800655e:	9908      	ldr	r1, [sp, #32]
 8006560:	b321      	cbz	r1, 80065ac <forward_dense+0x4c8>
 8006562:	f898 1000 	ldrb.w	r1, [r8]
 8006566:	edde 7a00 	vldr	s15, [lr]
 800656a:	0909      	lsrs	r1, r1, #4
 800656c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8006570:	edd1 6a00 	vldr	s13, [r1]
 8006574:	9903      	ldr	r1, [sp, #12]
 8006576:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800657a:	445a      	add	r2, fp
 800657c:	44dc      	add	ip, fp
 800657e:	ee72 2a87 	vadd.f32	s5, s5, s14
 8006582:	ece1 2a01 	vstmia	r1!, {s5}
 8006586:	4589      	cmp	r9, r1
 8006588:	9103      	str	r1, [sp, #12]
 800658a:	f67f af12 	bls.w	80063b2 <forward_dense+0x2ce>
 800658e:	2b00      	cmp	r3, #0
 8006590:	f47f af4e 	bne.w	8006430 <forward_dense+0x34c>
 8006594:	9907      	ldr	r1, [sp, #28]
 8006596:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8006410 <forward_dense+0x32c>
 800659a:	eef0 2a48 	vmov.f32	s5, s16
 800659e:	2900      	cmp	r1, #0
 80065a0:	f47f af4e 	bne.w	8006440 <forward_dense+0x35c>
 80065a4:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80065a8:	4690      	mov	r8, r2
 80065aa:	e7aa      	b.n	8006502 <forward_dense+0x41e>
 80065ac:	9903      	ldr	r1, [sp, #12]
 80065ae:	ee32 7a87 	vadd.f32	s14, s5, s14
 80065b2:	445a      	add	r2, fp
 80065b4:	eca1 7a01 	vstmia	r1!, {s14}
 80065b8:	4549      	cmp	r1, r9
 80065ba:	9103      	str	r1, [sp, #12]
 80065bc:	44dc      	add	ip, fp
 80065be:	f4ff af34 	bcc.w	800642a <forward_dense+0x346>
 80065c2:	e6f6      	b.n	80063b2 <forward_dense+0x2ce>
 80065c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80065c6:	9d06      	ldr	r5, [sp, #24]
 80065c8:	9101      	str	r1, [sp, #4]
 80065ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80065cc:	9100      	str	r1, [sp, #0]
 80065ce:	4628      	mov	r0, r5
 80065d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065d2:	f000 fa41 	bl	8006a58 <lite_dense_if32of32wf32>
 80065d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065d8:	462b      	mov	r3, r5
 80065da:	4413      	add	r3, r2
 80065dc:	9306      	str	r3, [sp, #24]
 80065de:	e6f1      	b.n	80063c4 <forward_dense+0x2e0>
 80065e0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	d016      	beq.n	8006618 <forward_dense+0x534>
 80065ea:	e9d9 0100 	ldrd	r0, r1, [r9]
 80065ee:	f000 fbe1 	bl	8006db4 <ai_array_get_byte_size>
 80065f2:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80065f6:	4602      	mov	r2, r0
 80065f8:	4641      	mov	r1, r8
 80065fa:	4658      	mov	r0, fp
 80065fc:	f000 fc3e 	bl	8006e7c <memcpy>
 8006600:	e5c7      	b.n	8006192 <forward_dense+0xae>
 8006602:	2b04      	cmp	r3, #4
 8006604:	d00a      	beq.n	800661c <forward_dense+0x538>
 8006606:	f04f 0900 	mov.w	r9, #0
 800660a:	e5bd      	b.n	8006188 <forward_dense+0xa4>
 800660c:	930d      	str	r3, [sp, #52]	; 0x34
 800660e:	e595      	b.n	800613c <forward_dense+0x58>
 8006610:	2300      	movs	r3, #0
 8006612:	930b      	str	r3, [sp, #44]	; 0x2c
 8006614:	460b      	mov	r3, r1
 8006616:	e591      	b.n	800613c <forward_dense+0x58>
 8006618:	46c3      	mov	fp, r8
 800661a:	e5ba      	b.n	8006192 <forward_dense+0xae>
 800661c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8006620:	e5b7      	b.n	8006192 <forward_dense+0xae>
 8006622:	2300      	movs	r3, #0
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	deff      	udf	#255	; 0xff
 8006628:	2300      	movs	r3, #0
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	deff      	udf	#255	; 0xff
 800662e:	bf00      	nop

08006630 <forward_sigmoid>:
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	ed2d 8b02 	vpush	{d8}
 8006636:	6982      	ldr	r2, [r0, #24]
 8006638:	8813      	ldrh	r3, [r2, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d03b      	beq.n	80066b6 <forward_sigmoid+0x86>
 800663e:	6852      	ldr	r2, [r2, #4]
 8006640:	6854      	ldr	r4, [r2, #4]
 8006642:	b104      	cbz	r4, 8006646 <forward_sigmoid+0x16>
 8006644:	6824      	ldr	r4, [r4, #0]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d034      	beq.n	80066b4 <forward_sigmoid+0x84>
 800664a:	6915      	ldr	r5, [r2, #16]
 800664c:	b105      	cbz	r5, 8006650 <forward_sigmoid+0x20>
 800664e:	682d      	ldr	r5, [r5, #0]
 8006650:	68a3      	ldr	r3, [r4, #8]
 8006652:	0a1b      	lsrs	r3, r3, #8
 8006654:	d031      	beq.n	80066ba <forward_sigmoid+0x8a>
 8006656:	68e0      	ldr	r0, [r4, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800665e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006662:	4298      	cmp	r0, r3
 8006664:	fb01 f202 	mul.w	r2, r1, r2
 8006668:	d1f9      	bne.n	800665e <forward_sigmoid+0x2e>
 800666a:	69a7      	ldr	r7, [r4, #24]
 800666c:	69a9      	ldr	r1, [r5, #24]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	688e      	ldr	r6, [r1, #8]
 8006672:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006676:	3a01      	subs	r2, #1
 8006678:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800667c:	42ab      	cmp	r3, r5
 800667e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8006682:	d814      	bhi.n	80066ae <forward_sigmoid+0x7e>
 8006684:	3504      	adds	r5, #4
 8006686:	3604      	adds	r6, #4
 8006688:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800668c:	462c      	mov	r4, r5
 800668e:	ed35 0a01 	vldmdb	r5!, {s0}
 8006692:	eeb1 0a40 	vneg.f32	s0, s0
 8006696:	f001 f865 	bl	8007764 <expf>
 800669a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800669e:	3c08      	subs	r4, #8
 80066a0:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80066a4:	ed66 7a01 	vstmdb	r6!, {s15}
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	42a3      	cmp	r3, r4
 80066ac:	d9ee      	bls.n	800668c <forward_sigmoid+0x5c>
 80066ae:	ecbd 8b02 	vpop	{d8}
 80066b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b4:	2300      	movs	r3, #0
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	deff      	udf	#255	; 0xff
 80066ba:	69ab      	ldr	r3, [r5, #24]
 80066bc:	69a7      	ldr	r7, [r4, #24]
 80066be:	689e      	ldr	r6, [r3, #8]
 80066c0:	68bd      	ldr	r5, [r7, #8]
 80066c2:	e7df      	b.n	8006684 <forward_sigmoid+0x54>

080066c4 <forward_relu>:
 80066c4:	6982      	ldr	r2, [r0, #24]
 80066c6:	8813      	ldrh	r3, [r2, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d05b      	beq.n	8006784 <forward_relu+0xc0>
 80066cc:	6851      	ldr	r1, [r2, #4]
 80066ce:	684a      	ldr	r2, [r1, #4]
 80066d0:	b102      	cbz	r2, 80066d4 <forward_relu+0x10>
 80066d2:	6812      	ldr	r2, [r2, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	f000 8123 	beq.w	8006920 <forward_relu+0x25c>
 80066da:	b470      	push	{r4, r5, r6}
 80066dc:	6909      	ldr	r1, [r1, #16]
 80066de:	b101      	cbz	r1, 80066e2 <forward_relu+0x1e>
 80066e0:	6809      	ldr	r1, [r1, #0]
 80066e2:	69c6      	ldr	r6, [r0, #28]
 80066e4:	2e00      	cmp	r6, #0
 80066e6:	f000 8097 	beq.w	8006818 <forward_relu+0x154>
 80066ea:	6873      	ldr	r3, [r6, #4]
 80066ec:	6988      	ldr	r0, [r1, #24]
 80066ee:	6991      	ldr	r1, [r2, #24]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	f000 80c1 	beq.w	8006878 <forward_relu+0x1b4>
 80066f6:	6893      	ldr	r3, [r2, #8]
 80066f8:	6880      	ldr	r0, [r0, #8]
 80066fa:	688c      	ldr	r4, [r1, #8]
 80066fc:	0a1b      	lsrs	r3, r3, #8
 80066fe:	f000 80f2 	beq.w	80068e6 <forward_relu+0x222>
 8006702:	68d5      	ldr	r5, [r2, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800670a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800670e:	42ab      	cmp	r3, r5
 8006710:	fb01 f202 	mul.w	r2, r1, r2
 8006714:	d1f9      	bne.n	800670a <forward_relu+0x46>
 8006716:	68b3      	ldr	r3, [r6, #8]
 8006718:	ed93 7a02 	vldr	s14, [r3, #8]
 800671c:	edd3 6a00 	vldr	s13, [r3]
 8006720:	ed93 6a01 	vldr	s12, [r3, #4]
 8006724:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006728:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800672c:	3a01      	subs	r2, #1
 800672e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006732:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006736:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800673a:	d425      	bmi.n	8006788 <forward_relu+0xc4>
 800673c:	429c      	cmp	r4, r3
 800673e:	d81f      	bhi.n	8006780 <forward_relu+0xbc>
 8006740:	1d1a      	adds	r2, r3, #4
 8006742:	1d01      	adds	r1, r0, #4
 8006744:	e00d      	b.n	8006762 <forward_relu+0x9e>
 8006746:	eef4 6ae7 	vcmpe.f32	s13, s15
 800674a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674e:	db03      	blt.n	8006758 <forward_relu+0x94>
 8006750:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006754:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006758:	3b08      	subs	r3, #8
 800675a:	429c      	cmp	r4, r3
 800675c:	ed61 7a01 	vstmdb	r1!, {s15}
 8006760:	d80e      	bhi.n	8006780 <forward_relu+0xbc>
 8006762:	4613      	mov	r3, r2
 8006764:	ed72 7a01 	vldmdb	r2!, {s15}
 8006768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800676c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006770:	d9e9      	bls.n	8006746 <forward_relu+0x82>
 8006772:	3b08      	subs	r3, #8
 8006774:	eef0 7a47 	vmov.f32	s15, s14
 8006778:	429c      	cmp	r4, r3
 800677a:	ed61 7a01 	vstmdb	r1!, {s15}
 800677e:	d9f0      	bls.n	8006762 <forward_relu+0x9e>
 8006780:	bc70      	pop	{r4, r5, r6}
 8006782:	4770      	bx	lr
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	deff      	udf	#255	; 0xff
 8006788:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800678c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006790:	d11f      	bne.n	80067d2 <forward_relu+0x10e>
 8006792:	429c      	cmp	r4, r3
 8006794:	d8f4      	bhi.n	8006780 <forward_relu+0xbc>
 8006796:	1b1c      	subs	r4, r3, r4
 8006798:	f024 0403 	bic.w	r4, r4, #3
 800679c:	1d1a      	adds	r2, r3, #4
 800679e:	2500      	movs	r5, #0
 80067a0:	1b1b      	subs	r3, r3, r4
 80067a2:	1d01      	adds	r1, r0, #4
 80067a4:	ed72 7a01 	vldmdb	r2!, {s15}
 80067a8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80067ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b0:	dc0a      	bgt.n	80067c8 <forward_relu+0x104>
 80067b2:	429a      	cmp	r2, r3
 80067b4:	f841 5d04 	str.w	r5, [r1, #-4]!
 80067b8:	d0e2      	beq.n	8006780 <forward_relu+0xbc>
 80067ba:	ed72 7a01 	vldmdb	r2!, {s15}
 80067be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80067c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c6:	ddf4      	ble.n	80067b2 <forward_relu+0xee>
 80067c8:	429a      	cmp	r2, r3
 80067ca:	ed61 7a01 	vstmdb	r1!, {s15}
 80067ce:	d1e9      	bne.n	80067a4 <forward_relu+0xe0>
 80067d0:	e7d6      	b.n	8006780 <forward_relu+0xbc>
 80067d2:	429c      	cmp	r4, r3
 80067d4:	d8d4      	bhi.n	8006780 <forward_relu+0xbc>
 80067d6:	1b1c      	subs	r4, r3, r4
 80067d8:	f024 0403 	bic.w	r4, r4, #3
 80067dc:	1d1a      	adds	r2, r3, #4
 80067de:	1d01      	adds	r1, r0, #4
 80067e0:	1b1b      	subs	r3, r3, r4
 80067e2:	ed72 7a01 	vldmdb	r2!, {s15}
 80067e6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80067ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ee:	db0e      	blt.n	800680e <forward_relu+0x14a>
 80067f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067f4:	4293      	cmp	r3, r2
 80067f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80067fa:	ed61 7a01 	vstmdb	r1!, {s15}
 80067fe:	d0bf      	beq.n	8006780 <forward_relu+0xbc>
 8006800:	ed72 7a01 	vldmdb	r2!, {s15}
 8006804:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800680c:	daf0      	bge.n	80067f0 <forward_relu+0x12c>
 800680e:	4293      	cmp	r3, r2
 8006810:	ed61 7a01 	vstmdb	r1!, {s15}
 8006814:	d1e5      	bne.n	80067e2 <forward_relu+0x11e>
 8006816:	e7b3      	b.n	8006780 <forward_relu+0xbc>
 8006818:	6893      	ldr	r3, [r2, #8]
 800681a:	6989      	ldr	r1, [r1, #24]
 800681c:	6990      	ldr	r0, [r2, #24]
 800681e:	6889      	ldr	r1, [r1, #8]
 8006820:	6884      	ldr	r4, [r0, #8]
 8006822:	0a1b      	lsrs	r3, r3, #8
 8006824:	d075      	beq.n	8006912 <forward_relu+0x24e>
 8006826:	68d5      	ldr	r5, [r2, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800682e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8006832:	429d      	cmp	r5, r3
 8006834:	fb00 f202 	mul.w	r2, r0, r2
 8006838:	d1f9      	bne.n	800682e <forward_relu+0x16a>
 800683a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800683e:	3b01      	subs	r3, #1
 8006840:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006844:	4294      	cmp	r4, r2
 8006846:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800684a:	d899      	bhi.n	8006780 <forward_relu+0xbc>
 800684c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006928 <forward_relu+0x264>
 8006850:	3204      	adds	r2, #4
 8006852:	3104      	adds	r1, #4
 8006854:	4613      	mov	r3, r2
 8006856:	ed72 7a01 	vldmdb	r2!, {s15}
 800685a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006862:	f1a3 0308 	sub.w	r3, r3, #8
 8006866:	bfb8      	it	lt
 8006868:	eef0 7a47 	vmovlt.f32	s15, s14
 800686c:	429c      	cmp	r4, r3
 800686e:	ed61 7a01 	vstmdb	r1!, {s15}
 8006872:	d9ef      	bls.n	8006854 <forward_relu+0x190>
 8006874:	bc70      	pop	{r4, r5, r6}
 8006876:	4770      	bx	lr
 8006878:	688c      	ldr	r4, [r1, #8]
 800687a:	6891      	ldr	r1, [r2, #8]
 800687c:	6880      	ldr	r0, [r0, #8]
 800687e:	0a09      	lsrs	r1, r1, #8
 8006880:	d049      	beq.n	8006916 <forward_relu+0x252>
 8006882:	68d5      	ldr	r5, [r2, #12]
 8006884:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8006888:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800688c:	42aa      	cmp	r2, r5
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	d1f9      	bne.n	8006888 <forward_relu+0x1c4>
 8006894:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8006898:	3a01      	subs	r2, #1
 800689a:	68b1      	ldr	r1, [r6, #8]
 800689c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068a0:	429c      	cmp	r4, r3
 80068a2:	ed91 7a00 	vldr	s14, [r1]
 80068a6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80068aa:	f63f af69 	bhi.w	8006780 <forward_relu+0xbc>
 80068ae:	2500      	movs	r5, #0
 80068b0:	3304      	adds	r3, #4
 80068b2:	1d02      	adds	r2, r0, #4
 80068b4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80068b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80068bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c0:	f1a3 0104 	sub.w	r1, r3, #4
 80068c4:	f1a3 0308 	sub.w	r3, r3, #8
 80068c8:	d406      	bmi.n	80068d8 <forward_relu+0x214>
 80068ca:	429c      	cmp	r4, r3
 80068cc:	f842 5d04 	str.w	r5, [r2, #-4]!
 80068d0:	f63f af56 	bhi.w	8006780 <forward_relu+0xbc>
 80068d4:	460b      	mov	r3, r1
 80068d6:	e7ed      	b.n	80068b4 <forward_relu+0x1f0>
 80068d8:	429c      	cmp	r4, r3
 80068da:	ed62 7a01 	vstmdb	r2!, {s15}
 80068de:	f63f af4f 	bhi.w	8006780 <forward_relu+0xbc>
 80068e2:	460b      	mov	r3, r1
 80068e4:	e7e6      	b.n	80068b4 <forward_relu+0x1f0>
 80068e6:	68b3      	ldr	r3, [r6, #8]
 80068e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80068ec:	edd3 6a00 	vldr	s13, [r3]
 80068f0:	ed93 6a01 	vldr	s12, [r3, #4]
 80068f4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80068f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068fc:	d401      	bmi.n	8006902 <forward_relu+0x23e>
 80068fe:	4623      	mov	r3, r4
 8006900:	e71e      	b.n	8006740 <forward_relu+0x7c>
 8006902:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800690a:	4623      	mov	r3, r4
 800690c:	f47f af63 	bne.w	80067d6 <forward_relu+0x112>
 8006910:	e741      	b.n	8006796 <forward_relu+0xd2>
 8006912:	4622      	mov	r2, r4
 8006914:	e79a      	b.n	800684c <forward_relu+0x188>
 8006916:	68b2      	ldr	r2, [r6, #8]
 8006918:	4623      	mov	r3, r4
 800691a:	ed92 7a00 	vldr	s14, [r2]
 800691e:	e7c6      	b.n	80068ae <forward_relu+0x1ea>
 8006920:	2300      	movs	r3, #0
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	deff      	udf	#255	; 0xff
 8006926:	bf00      	nop
 8006928:	00000000 	.word	0x00000000

0800692c <ai_check_custom_types>:
 800692c:	b082      	sub	sp, #8
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <ai_check_custom_types+0x50>)
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	b118      	cbz	r0, 800693c <ai_check_custom_types+0x10>
 8006934:	7803      	ldrb	r3, [r0, #0]
 8006936:	2b03      	cmp	r3, #3
 8006938:	d002      	beq.n	8006940 <ai_check_custom_types+0x14>
 800693a:	2000      	movs	r0, #0
 800693c:	b002      	add	sp, #8
 800693e:	4770      	bx	lr
 8006940:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006944:	4293      	cmp	r3, r2
 8006946:	d004      	beq.n	8006952 <ai_check_custom_types+0x26>
 8006948:	2001      	movs	r0, #1
 800694a:	f080 0001 	eor.w	r0, r0, #1
 800694e:	b002      	add	sp, #8
 8006950:	4770      	bx	lr
 8006952:	7842      	ldrb	r2, [r0, #1]
 8006954:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006958:	429a      	cmp	r2, r3
 800695a:	f100 0001 	add.w	r0, r0, #1
 800695e:	d1f3      	bne.n	8006948 <ai_check_custom_types+0x1c>
 8006960:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006964:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006968:	429a      	cmp	r2, r3
 800696a:	d1ed      	bne.n	8006948 <ai_check_custom_types+0x1c>
 800696c:	7842      	ldrb	r2, [r0, #1]
 800696e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006972:	429a      	cmp	r2, r3
 8006974:	d1e8      	bne.n	8006948 <ai_check_custom_types+0x1c>
 8006976:	2000      	movs	r0, #0
 8006978:	e7e7      	b.n	800694a <ai_check_custom_types+0x1e>
 800697a:	bf00      	nop
 800697c:	84048403 	.word	0x84048403

08006980 <ai_layers_init_all>:
 8006980:	4601      	mov	r1, r0
 8006982:	2000      	movs	r0, #0
 8006984:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006986:	b143      	cbz	r3, 800699a <ai_layers_init_all+0x1a>
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	60d9      	str	r1, [r3, #12]
 800698c:	429a      	cmp	r2, r3
 800698e:	f100 0001 	add.w	r0, r0, #1
 8006992:	d002      	beq.n	800699a <ai_layers_init_all+0x1a>
 8006994:	b10a      	cbz	r2, 800699a <ai_layers_init_all+0x1a>
 8006996:	4613      	mov	r3, r2
 8006998:	e7f5      	b.n	8006986 <ai_layers_init_all+0x6>
 800699a:	4770      	bx	lr

0800699c <ai_layers_post_init_all>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80069a0:	2500      	movs	r5, #0
 80069a2:	b16c      	cbz	r4, 80069c0 <ai_layers_post_init_all+0x24>
 80069a4:	6863      	ldr	r3, [r4, #4]
 80069a6:	07db      	lsls	r3, r3, #31
 80069a8:	d504      	bpl.n	80069b4 <ai_layers_post_init_all+0x18>
 80069aa:	6a23      	ldr	r3, [r4, #32]
 80069ac:	4620      	mov	r0, r4
 80069ae:	b10b      	cbz	r3, 80069b4 <ai_layers_post_init_all+0x18>
 80069b0:	4798      	blx	r3
 80069b2:	3501      	adds	r5, #1
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	42a3      	cmp	r3, r4
 80069b8:	d002      	beq.n	80069c0 <ai_layers_post_init_all+0x24>
 80069ba:	b10b      	cbz	r3, 80069c0 <ai_layers_post_init_all+0x24>
 80069bc:	461c      	mov	r4, r3
 80069be:	e7f0      	b.n	80069a2 <ai_layers_post_init_all+0x6>
 80069c0:	4628      	mov	r0, r5
 80069c2:	bd38      	pop	{r3, r4, r5, pc}

080069c4 <ai_layers_forward_all>:
 80069c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80069cc:	4604      	mov	r4, r0
 80069ce:	f1b8 0f00 	cmp.w	r8, #0
 80069d2:	d02b      	beq.n	8006a2c <ai_layers_forward_all+0x68>
 80069d4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80069d6:	6381      	str	r1, [r0, #56]	; 0x38
 80069d8:	b321      	cbz	r1, 8006a24 <ai_layers_forward_all+0x60>
 80069da:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80069dc:	2001      	movs	r0, #1
 80069de:	47c0      	blx	r8
 80069e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80069e2:	b1fe      	cbz	r6, 8006a24 <ai_layers_forward_all+0x60>
 80069e4:	2700      	movs	r7, #0
 80069e6:	4631      	mov	r1, r6
 80069e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80069ea:	2002      	movs	r0, #2
 80069ec:	47c0      	blx	r8
 80069ee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80069f0:	4628      	mov	r0, r5
 80069f2:	696b      	ldr	r3, [r5, #20]
 80069f4:	4798      	blx	r3
 80069f6:	692e      	ldr	r6, [r5, #16]
 80069f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80069fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069fc:	42b5      	cmp	r5, r6
 80069fe:	f04f 0003 	mov.w	r0, #3
 8006a02:	d007      	beq.n	8006a14 <ai_layers_forward_all+0x50>
 8006a04:	47c0      	blx	r8
 8006a06:	3701      	adds	r7, #1
 8006a08:	63a6      	str	r6, [r4, #56]	; 0x38
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	d1eb      	bne.n	80069e6 <ai_layers_forward_all+0x22>
 8006a0e:	4638      	mov	r0, r7
 8006a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a14:	2003      	movs	r0, #3
 8006a16:	47c0      	blx	r8
 8006a18:	2300      	movs	r3, #0
 8006a1a:	3701      	adds	r7, #1
 8006a1c:	63a3      	str	r3, [r4, #56]	; 0x38
 8006a1e:	4638      	mov	r0, r7
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	2700      	movs	r7, #0
 8006a26:	4638      	mov	r0, r7
 8006a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a2c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006a2e:	6385      	str	r5, [r0, #56]	; 0x38
 8006a30:	2d00      	cmp	r5, #0
 8006a32:	d0f7      	beq.n	8006a24 <ai_layers_forward_all+0x60>
 8006a34:	4647      	mov	r7, r8
 8006a36:	696b      	ldr	r3, [r5, #20]
 8006a38:	4628      	mov	r0, r5
 8006a3a:	4798      	blx	r3
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	692d      	ldr	r5, [r5, #16]
 8006a40:	429d      	cmp	r5, r3
 8006a42:	d004      	beq.n	8006a4e <ai_layers_forward_all+0x8a>
 8006a44:	63a5      	str	r5, [r4, #56]	; 0x38
 8006a46:	3701      	adds	r7, #1
 8006a48:	2d00      	cmp	r5, #0
 8006a4a:	d1f4      	bne.n	8006a36 <ai_layers_forward_all+0x72>
 8006a4c:	e7df      	b.n	8006a0e <ai_layers_forward_all+0x4a>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	63a3      	str	r3, [r4, #56]	; 0x38
 8006a52:	3701      	adds	r7, #1
 8006a54:	e7db      	b.n	8006a0e <ai_layers_forward_all+0x4a>
 8006a56:	bf00      	nop

08006a58 <lite_dense_if32of32wf32>:
 8006a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8006a60:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8006a64:	4287      	cmp	r7, r0
 8006a66:	f240 8106 	bls.w	8006c76 <lite_dense_if32of32wf32+0x21e>
 8006a6a:	f1a6 0810 	sub.w	r8, r6, #16
 8006a6e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8006a72:	f108 0801 	add.w	r8, r8, #1
 8006a76:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8006a7a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8006a7e:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8006a82:	4605      	mov	r5, r0
 8006a84:	f006 0a0f 	and.w	sl, r6, #15
 8006a88:	2e0f      	cmp	r6, #15
 8006a8a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006c9c <lite_dense_if32of32wf32+0x244>
 8006a8e:	f240 8101 	bls.w	8006c94 <lite_dense_if32of32wf32+0x23c>
 8006a92:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8006a96:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8006a9a:	46b6      	mov	lr, r6
 8006a9c:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8006aa0:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8006aa4:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8006aa8:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8006aac:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8006ab0:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8006ab4:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8006ab8:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8006abc:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8006ac0:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8006ac4:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8006ac8:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8006acc:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8006ad0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006ad4:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8006ad8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006adc:	f1ae 0e10 	sub.w	lr, lr, #16
 8006ae0:	f1be 0f0f 	cmp.w	lr, #15
 8006ae4:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8006ae8:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8006aec:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006af0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8006af4:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8006af8:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8006afc:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8006b00:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006b04:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8006b08:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8006b0c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006b10:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8006b14:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8006b18:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006b1c:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8006b20:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8006b24:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006b28:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8006b2c:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8006b30:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006b34:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8006b38:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8006b3c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006b40:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8006b44:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8006b48:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006b4c:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8006b50:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8006b54:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006b58:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006b5c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006b60:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006b64:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006b68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b70:	d894      	bhi.n	8006a9c <lite_dense_if32of32wf32+0x44>
 8006b72:	eb02 0e0b 	add.w	lr, r2, fp
 8006b76:	4654      	mov	r4, sl
 8006b78:	46c4      	mov	ip, r8
 8006b7a:	2c00      	cmp	r4, #0
 8006b7c:	d075      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006b7e:	eddc 6a00 	vldr	s13, [ip]
 8006b82:	edde 7a00 	vldr	s15, [lr]
 8006b86:	2c01      	cmp	r4, #1
 8006b88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b8c:	d06d      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006b8e:	eddc 6a01 	vldr	s13, [ip, #4]
 8006b92:	edde 7a01 	vldr	s15, [lr, #4]
 8006b96:	2c02      	cmp	r4, #2
 8006b98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b9c:	d065      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006b9e:	eddc 6a02 	vldr	s13, [ip, #8]
 8006ba2:	edde 7a02 	vldr	s15, [lr, #8]
 8006ba6:	2c03      	cmp	r4, #3
 8006ba8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bac:	d05d      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006bae:	eddc 6a03 	vldr	s13, [ip, #12]
 8006bb2:	edde 7a03 	vldr	s15, [lr, #12]
 8006bb6:	2c04      	cmp	r4, #4
 8006bb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bbc:	d055      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006bbe:	eddc 6a04 	vldr	s13, [ip, #16]
 8006bc2:	edde 7a04 	vldr	s15, [lr, #16]
 8006bc6:	2c05      	cmp	r4, #5
 8006bc8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bcc:	d04d      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006bce:	eddc 6a05 	vldr	s13, [ip, #20]
 8006bd2:	edde 7a05 	vldr	s15, [lr, #20]
 8006bd6:	2c06      	cmp	r4, #6
 8006bd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bdc:	d045      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006bde:	eddc 6a06 	vldr	s13, [ip, #24]
 8006be2:	edde 7a06 	vldr	s15, [lr, #24]
 8006be6:	2c07      	cmp	r4, #7
 8006be8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bec:	d03d      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006bee:	eddc 6a07 	vldr	s13, [ip, #28]
 8006bf2:	edde 7a07 	vldr	s15, [lr, #28]
 8006bf6:	2c08      	cmp	r4, #8
 8006bf8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bfc:	d035      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006bfe:	eddc 6a08 	vldr	s13, [ip, #32]
 8006c02:	edde 7a08 	vldr	s15, [lr, #32]
 8006c06:	2c09      	cmp	r4, #9
 8006c08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c0c:	d02d      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006c0e:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8006c12:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8006c16:	2c0a      	cmp	r4, #10
 8006c18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c1c:	d025      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006c1e:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8006c22:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8006c26:	2c0b      	cmp	r4, #11
 8006c28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c2c:	d01d      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006c2e:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8006c32:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8006c36:	2c0c      	cmp	r4, #12
 8006c38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c3c:	d015      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006c3e:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8006c42:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8006c46:	3c0d      	subs	r4, #13
 8006c48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c4c:	d00d      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006c4e:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8006c52:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8006c56:	2c01      	cmp	r4, #1
 8006c58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c5c:	d005      	beq.n	8006c6a <lite_dense_if32of32wf32+0x212>
 8006c5e:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8006c62:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8006c66:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c6a:	444a      	add	r2, r9
 8006c6c:	eca5 7a01 	vstmia	r5!, {s14}
 8006c70:	42af      	cmp	r7, r5
 8006c72:	f63f af09 	bhi.w	8006a88 <lite_dense_if32of32wf32+0x30>
 8006c76:	b15b      	cbz	r3, 8006c90 <lite_dense_if32of32wf32+0x238>
 8006c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c7a:	b14a      	cbz	r2, 8006c90 <lite_dense_if32of32wf32+0x238>
 8006c7c:	edd0 7a00 	vldr	s15, [r0]
 8006c80:	ecb3 7a01 	vldmia	r3!, {s14}
 8006c84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c88:	ece0 7a01 	vstmia	r0!, {s15}
 8006c8c:	4287      	cmp	r7, r0
 8006c8e:	d1f5      	bne.n	8006c7c <lite_dense_if32of32wf32+0x224>
 8006c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c94:	4634      	mov	r4, r6
 8006c96:	4696      	mov	lr, r2
 8006c98:	468c      	mov	ip, r1
 8006c9a:	e76e      	b.n	8006b7a <lite_dense_if32of32wf32+0x122>
 8006c9c:	00000000 	.word	0x00000000

08006ca0 <ai_version_get>:
 8006ca0:	0212      	lsls	r2, r2, #8
 8006ca2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006ca6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006caa:	4770      	bx	lr

08006cac <get_tensor_byte_size>:
 8006cac:	b410      	push	{r4}
 8006cae:	6983      	ldr	r3, [r0, #24]
 8006cb0:	68c4      	ldr	r4, [r0, #12]
 8006cb2:	6941      	ldr	r1, [r0, #20]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68e0      	ldr	r0, [r4, #12]
 8006cb8:	4a07      	ldr	r2, [pc, #28]	; (8006cd8 <get_tensor_byte_size+0x2c>)
 8006cba:	68c9      	ldr	r1, [r1, #12]
 8006cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cc0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006cc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006cc8:	fb01 f000 	mul.w	r0, r1, r0
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	bf04      	itt	eq
 8006cd0:	3007      	addeq	r0, #7
 8006cd2:	08c0      	lsreq	r0, r0, #3
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	000400c0 	.word	0x000400c0

08006cdc <ai_array_to_buffer_fmt>:
 8006cdc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d050      	beq.n	8006d86 <ai_array_to_buffer_fmt+0xaa>
 8006ce4:	4b2a      	ldr	r3, [pc, #168]	; (8006d90 <ai_array_to_buffer_fmt+0xb4>)
 8006ce6:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d00b      	beq.n	8006d06 <ai_array_to_buffer_fmt+0x2a>
 8006cee:	dc1c      	bgt.n	8006d2a <ai_array_to_buffer_fmt+0x4e>
 8006cf0:	4b28      	ldr	r3, [pc, #160]	; (8006d94 <ai_array_to_buffer_fmt+0xb8>)
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d007      	beq.n	8006d06 <ai_array_to_buffer_fmt+0x2a>
 8006cf6:	dd0b      	ble.n	8006d10 <ai_array_to_buffer_fmt+0x34>
 8006cf8:	4b27      	ldr	r3, [pc, #156]	; (8006d98 <ai_array_to_buffer_fmt+0xbc>)
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d003      	beq.n	8006d06 <ai_array_to_buffer_fmt+0x2a>
 8006cfe:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d131      	bne.n	8006d6a <ai_array_to_buffer_fmt+0x8e>
 8006d06:	4613      	mov	r3, r2
 8006d08:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006d0c:	4318      	orrs	r0, r3
 8006d0e:	4770      	bx	lr
 8006d10:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d0f6      	beq.n	8006d06 <ai_array_to_buffer_fmt+0x2a>
 8006d18:	dd2c      	ble.n	8006d74 <ai_array_to_buffer_fmt+0x98>
 8006d1a:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <ai_array_to_buffer_fmt+0xc0>)
 8006d1c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006d20:	429a      	cmp	r2, r3
 8006d22:	bf18      	it	ne
 8006d24:	2340      	movne	r3, #64	; 0x40
 8006d26:	4318      	orrs	r0, r3
 8006d28:	4770      	bx	lr
 8006d2a:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <ai_array_to_buffer_fmt+0xc4>)
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d0ea      	beq.n	8006d06 <ai_array_to_buffer_fmt+0x2a>
 8006d30:	dd0e      	ble.n	8006d50 <ai_array_to_buffer_fmt+0x74>
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <ai_array_to_buffer_fmt+0xc8>)
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d0e6      	beq.n	8006d06 <ai_array_to_buffer_fmt+0x2a>
 8006d38:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d0e2      	beq.n	8006d06 <ai_array_to_buffer_fmt+0x2a>
 8006d40:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <ai_array_to_buffer_fmt+0xcc>)
 8006d42:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006d46:	429a      	cmp	r2, r3
 8006d48:	bf18      	it	ne
 8006d4a:	2340      	movne	r3, #64	; 0x40
 8006d4c:	4318      	orrs	r0, r3
 8006d4e:	4770      	bx	lr
 8006d50:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d0d6      	beq.n	8006d06 <ai_array_to_buffer_fmt+0x2a>
 8006d58:	3307      	adds	r3, #7
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d0d3      	beq.n	8006d06 <ai_array_to_buffer_fmt+0x2a>
 8006d5e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8006d62:	429a      	cmp	r2, r3
 8006d64:	bf18      	it	ne
 8006d66:	2340      	movne	r3, #64	; 0x40
 8006d68:	e7ce      	b.n	8006d08 <ai_array_to_buffer_fmt+0x2c>
 8006d6a:	4b10      	ldr	r3, [pc, #64]	; (8006dac <ai_array_to_buffer_fmt+0xd0>)
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	bf18      	it	ne
 8006d70:	2340      	movne	r3, #64	; 0x40
 8006d72:	e7c9      	b.n	8006d08 <ai_array_to_buffer_fmt+0x2c>
 8006d74:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d0c4      	beq.n	8006d06 <ai_array_to_buffer_fmt+0x2a>
 8006d7c:	3380      	adds	r3, #128	; 0x80
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	bf18      	it	ne
 8006d82:	2340      	movne	r3, #64	; 0x40
 8006d84:	e7c0      	b.n	8006d08 <ai_array_to_buffer_fmt+0x2c>
 8006d86:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <ai_array_to_buffer_fmt+0xd4>)
 8006d88:	4003      	ands	r3, r0
 8006d8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d8e:	e7bb      	b.n	8006d08 <ai_array_to_buffer_fmt+0x2c>
 8006d90:	00840040 	.word	0x00840040
 8006d94:	00040840 	.word	0x00040840
 8006d98:	00041040 	.word	0x00041040
 8006d9c:	00040447 	.word	0x00040447
 8006da0:	00840840 	.word	0x00840840
 8006da4:	00841040 	.word	0x00841040
 8006da8:	0084084f 	.word	0x0084084f
 8006dac:	0004084f 	.word	0x0004084f
 8006db0:	00803fff 	.word	0x00803fff

08006db4 <ai_array_get_byte_size>:
 8006db4:	b319      	cbz	r1, 8006dfe <ai_array_get_byte_size+0x4a>
 8006db6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006dba:	fb03 f101 	mul.w	r1, r3, r1
 8006dbe:	3107      	adds	r1, #7
 8006dc0:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8006dc4:	f021 0307 	bic.w	r3, r1, #7
 8006dc8:	2a04      	cmp	r2, #4
 8006dca:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8006dce:	fa23 f101 	lsr.w	r1, r3, r1
 8006dd2:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8006dd6:	d00b      	beq.n	8006df0 <ai_array_get_byte_size+0x3c>
 8006dd8:	2a08      	cmp	r2, #8
 8006dda:	d002      	beq.n	8006de2 <ai_array_get_byte_size+0x2e>
 8006ddc:	3107      	adds	r1, #7
 8006dde:	08c8      	lsrs	r0, r1, #3
 8006de0:	4770      	bx	lr
 8006de2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006de6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8006dea:	3107      	adds	r1, #7
 8006dec:	08c8      	lsrs	r0, r1, #3
 8006dee:	4770      	bx	lr
 8006df0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006df4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8006df8:	3107      	adds	r1, #7
 8006dfa:	08c8      	lsrs	r0, r1, #3
 8006dfc:	4770      	bx	lr
 8006dfe:	4608      	mov	r0, r1
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop

08006e04 <ai_array_get_data_byte_size>:
 8006e04:	b169      	cbz	r1, 8006e22 <ai_array_get_data_byte_size+0x1e>
 8006e06:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8006e0a:	fb02 f101 	mul.w	r1, r2, r1
 8006e0e:	1dcb      	adds	r3, r1, #7
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006e18:	fa23 f000 	lsr.w	r0, r3, r0
 8006e1c:	3007      	adds	r0, #7
 8006e1e:	08c0      	lsrs	r0, r0, #3
 8006e20:	4770      	bx	lr
 8006e22:	4608      	mov	r0, r1
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop

08006e28 <__errno>:
 8006e28:	4b01      	ldr	r3, [pc, #4]	; (8006e30 <__errno+0x8>)
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20000554 	.word	0x20000554

08006e34 <__libc_init_array>:
 8006e34:	b570      	push	{r4, r5, r6, lr}
 8006e36:	4d0d      	ldr	r5, [pc, #52]	; (8006e6c <__libc_init_array+0x38>)
 8006e38:	4c0d      	ldr	r4, [pc, #52]	; (8006e70 <__libc_init_array+0x3c>)
 8006e3a:	1b64      	subs	r4, r4, r5
 8006e3c:	10a4      	asrs	r4, r4, #2
 8006e3e:	2600      	movs	r6, #0
 8006e40:	42a6      	cmp	r6, r4
 8006e42:	d109      	bne.n	8006e58 <__libc_init_array+0x24>
 8006e44:	4d0b      	ldr	r5, [pc, #44]	; (8006e74 <__libc_init_array+0x40>)
 8006e46:	4c0c      	ldr	r4, [pc, #48]	; (8006e78 <__libc_init_array+0x44>)
 8006e48:	f000 fdc0 	bl	80079cc <_init>
 8006e4c:	1b64      	subs	r4, r4, r5
 8006e4e:	10a4      	asrs	r4, r4, #2
 8006e50:	2600      	movs	r6, #0
 8006e52:	42a6      	cmp	r6, r4
 8006e54:	d105      	bne.n	8006e62 <__libc_init_array+0x2e>
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5c:	4798      	blx	r3
 8006e5e:	3601      	adds	r6, #1
 8006e60:	e7ee      	b.n	8006e40 <__libc_init_array+0xc>
 8006e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e66:	4798      	blx	r3
 8006e68:	3601      	adds	r6, #1
 8006e6a:	e7f2      	b.n	8006e52 <__libc_init_array+0x1e>
 8006e6c:	0800ad3c 	.word	0x0800ad3c
 8006e70:	0800ad3c 	.word	0x0800ad3c
 8006e74:	0800ad3c 	.word	0x0800ad3c
 8006e78:	0800ad40 	.word	0x0800ad40

08006e7c <memcpy>:
 8006e7c:	440a      	add	r2, r1
 8006e7e:	4291      	cmp	r1, r2
 8006e80:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e84:	d100      	bne.n	8006e88 <memcpy+0xc>
 8006e86:	4770      	bx	lr
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e92:	4291      	cmp	r1, r2
 8006e94:	d1f9      	bne.n	8006e8a <memcpy+0xe>
 8006e96:	bd10      	pop	{r4, pc}

08006e98 <memset>:
 8006e98:	4402      	add	r2, r0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d100      	bne.n	8006ea2 <memset+0xa>
 8006ea0:	4770      	bx	lr
 8006ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ea6:	e7f9      	b.n	8006e9c <memset+0x4>

08006ea8 <_free_r>:
 8006ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eaa:	2900      	cmp	r1, #0
 8006eac:	d044      	beq.n	8006f38 <_free_r+0x90>
 8006eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb2:	9001      	str	r0, [sp, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8006eba:	bfb8      	it	lt
 8006ebc:	18e4      	addlt	r4, r4, r3
 8006ebe:	f000 f905 	bl	80070cc <__malloc_lock>
 8006ec2:	4a1e      	ldr	r2, [pc, #120]	; (8006f3c <_free_r+0x94>)
 8006ec4:	9801      	ldr	r0, [sp, #4]
 8006ec6:	6813      	ldr	r3, [r2, #0]
 8006ec8:	b933      	cbnz	r3, 8006ed8 <_free_r+0x30>
 8006eca:	6063      	str	r3, [r4, #4]
 8006ecc:	6014      	str	r4, [r2, #0]
 8006ece:	b003      	add	sp, #12
 8006ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ed4:	f000 b900 	b.w	80070d8 <__malloc_unlock>
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d908      	bls.n	8006eee <_free_r+0x46>
 8006edc:	6825      	ldr	r5, [r4, #0]
 8006ede:	1961      	adds	r1, r4, r5
 8006ee0:	428b      	cmp	r3, r1
 8006ee2:	bf01      	itttt	eq
 8006ee4:	6819      	ldreq	r1, [r3, #0]
 8006ee6:	685b      	ldreq	r3, [r3, #4]
 8006ee8:	1949      	addeq	r1, r1, r5
 8006eea:	6021      	streq	r1, [r4, #0]
 8006eec:	e7ed      	b.n	8006eca <_free_r+0x22>
 8006eee:	461a      	mov	r2, r3
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	b10b      	cbz	r3, 8006ef8 <_free_r+0x50>
 8006ef4:	42a3      	cmp	r3, r4
 8006ef6:	d9fa      	bls.n	8006eee <_free_r+0x46>
 8006ef8:	6811      	ldr	r1, [r2, #0]
 8006efa:	1855      	adds	r5, r2, r1
 8006efc:	42a5      	cmp	r5, r4
 8006efe:	d10b      	bne.n	8006f18 <_free_r+0x70>
 8006f00:	6824      	ldr	r4, [r4, #0]
 8006f02:	4421      	add	r1, r4
 8006f04:	1854      	adds	r4, r2, r1
 8006f06:	42a3      	cmp	r3, r4
 8006f08:	6011      	str	r1, [r2, #0]
 8006f0a:	d1e0      	bne.n	8006ece <_free_r+0x26>
 8006f0c:	681c      	ldr	r4, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	6053      	str	r3, [r2, #4]
 8006f12:	4421      	add	r1, r4
 8006f14:	6011      	str	r1, [r2, #0]
 8006f16:	e7da      	b.n	8006ece <_free_r+0x26>
 8006f18:	d902      	bls.n	8006f20 <_free_r+0x78>
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	6003      	str	r3, [r0, #0]
 8006f1e:	e7d6      	b.n	8006ece <_free_r+0x26>
 8006f20:	6825      	ldr	r5, [r4, #0]
 8006f22:	1961      	adds	r1, r4, r5
 8006f24:	428b      	cmp	r3, r1
 8006f26:	bf04      	itt	eq
 8006f28:	6819      	ldreq	r1, [r3, #0]
 8006f2a:	685b      	ldreq	r3, [r3, #4]
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	bf04      	itt	eq
 8006f30:	1949      	addeq	r1, r1, r5
 8006f32:	6021      	streq	r1, [r4, #0]
 8006f34:	6054      	str	r4, [r2, #4]
 8006f36:	e7ca      	b.n	8006ece <_free_r+0x26>
 8006f38:	b003      	add	sp, #12
 8006f3a:	bd30      	pop	{r4, r5, pc}
 8006f3c:	20000ff4 	.word	0x20000ff4

08006f40 <sbrk_aligned>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	4e0e      	ldr	r6, [pc, #56]	; (8006f7c <sbrk_aligned+0x3c>)
 8006f44:	460c      	mov	r4, r1
 8006f46:	6831      	ldr	r1, [r6, #0]
 8006f48:	4605      	mov	r5, r0
 8006f4a:	b911      	cbnz	r1, 8006f52 <sbrk_aligned+0x12>
 8006f4c:	f000 f88c 	bl	8007068 <_sbrk_r>
 8006f50:	6030      	str	r0, [r6, #0]
 8006f52:	4621      	mov	r1, r4
 8006f54:	4628      	mov	r0, r5
 8006f56:	f000 f887 	bl	8007068 <_sbrk_r>
 8006f5a:	1c43      	adds	r3, r0, #1
 8006f5c:	d00a      	beq.n	8006f74 <sbrk_aligned+0x34>
 8006f5e:	1cc4      	adds	r4, r0, #3
 8006f60:	f024 0403 	bic.w	r4, r4, #3
 8006f64:	42a0      	cmp	r0, r4
 8006f66:	d007      	beq.n	8006f78 <sbrk_aligned+0x38>
 8006f68:	1a21      	subs	r1, r4, r0
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f000 f87c 	bl	8007068 <_sbrk_r>
 8006f70:	3001      	adds	r0, #1
 8006f72:	d101      	bne.n	8006f78 <sbrk_aligned+0x38>
 8006f74:	f04f 34ff 	mov.w	r4, #4294967295
 8006f78:	4620      	mov	r0, r4
 8006f7a:	bd70      	pop	{r4, r5, r6, pc}
 8006f7c:	20000ff8 	.word	0x20000ff8

08006f80 <_malloc_r>:
 8006f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f84:	1ccd      	adds	r5, r1, #3
 8006f86:	f025 0503 	bic.w	r5, r5, #3
 8006f8a:	3508      	adds	r5, #8
 8006f8c:	2d0c      	cmp	r5, #12
 8006f8e:	bf38      	it	cc
 8006f90:	250c      	movcc	r5, #12
 8006f92:	2d00      	cmp	r5, #0
 8006f94:	4607      	mov	r7, r0
 8006f96:	db01      	blt.n	8006f9c <_malloc_r+0x1c>
 8006f98:	42a9      	cmp	r1, r5
 8006f9a:	d905      	bls.n	8006fa8 <_malloc_r+0x28>
 8006f9c:	230c      	movs	r3, #12
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	2600      	movs	r6, #0
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa8:	4e2e      	ldr	r6, [pc, #184]	; (8007064 <_malloc_r+0xe4>)
 8006faa:	f000 f88f 	bl	80070cc <__malloc_lock>
 8006fae:	6833      	ldr	r3, [r6, #0]
 8006fb0:	461c      	mov	r4, r3
 8006fb2:	bb34      	cbnz	r4, 8007002 <_malloc_r+0x82>
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	f7ff ffc2 	bl	8006f40 <sbrk_aligned>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	d14d      	bne.n	800705e <_malloc_r+0xde>
 8006fc2:	6834      	ldr	r4, [r6, #0]
 8006fc4:	4626      	mov	r6, r4
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	d140      	bne.n	800704c <_malloc_r+0xcc>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4638      	mov	r0, r7
 8006fd0:	eb04 0803 	add.w	r8, r4, r3
 8006fd4:	f000 f848 	bl	8007068 <_sbrk_r>
 8006fd8:	4580      	cmp	r8, r0
 8006fda:	d13a      	bne.n	8007052 <_malloc_r+0xd2>
 8006fdc:	6821      	ldr	r1, [r4, #0]
 8006fde:	3503      	adds	r5, #3
 8006fe0:	1a6d      	subs	r5, r5, r1
 8006fe2:	f025 0503 	bic.w	r5, r5, #3
 8006fe6:	3508      	adds	r5, #8
 8006fe8:	2d0c      	cmp	r5, #12
 8006fea:	bf38      	it	cc
 8006fec:	250c      	movcc	r5, #12
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	f7ff ffa5 	bl	8006f40 <sbrk_aligned>
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d02b      	beq.n	8007052 <_malloc_r+0xd2>
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	442b      	add	r3, r5
 8006ffe:	6023      	str	r3, [r4, #0]
 8007000:	e00e      	b.n	8007020 <_malloc_r+0xa0>
 8007002:	6822      	ldr	r2, [r4, #0]
 8007004:	1b52      	subs	r2, r2, r5
 8007006:	d41e      	bmi.n	8007046 <_malloc_r+0xc6>
 8007008:	2a0b      	cmp	r2, #11
 800700a:	d916      	bls.n	800703a <_malloc_r+0xba>
 800700c:	1961      	adds	r1, r4, r5
 800700e:	42a3      	cmp	r3, r4
 8007010:	6025      	str	r5, [r4, #0]
 8007012:	bf18      	it	ne
 8007014:	6059      	strne	r1, [r3, #4]
 8007016:	6863      	ldr	r3, [r4, #4]
 8007018:	bf08      	it	eq
 800701a:	6031      	streq	r1, [r6, #0]
 800701c:	5162      	str	r2, [r4, r5]
 800701e:	604b      	str	r3, [r1, #4]
 8007020:	4638      	mov	r0, r7
 8007022:	f104 060b 	add.w	r6, r4, #11
 8007026:	f000 f857 	bl	80070d8 <__malloc_unlock>
 800702a:	f026 0607 	bic.w	r6, r6, #7
 800702e:	1d23      	adds	r3, r4, #4
 8007030:	1af2      	subs	r2, r6, r3
 8007032:	d0b6      	beq.n	8006fa2 <_malloc_r+0x22>
 8007034:	1b9b      	subs	r3, r3, r6
 8007036:	50a3      	str	r3, [r4, r2]
 8007038:	e7b3      	b.n	8006fa2 <_malloc_r+0x22>
 800703a:	6862      	ldr	r2, [r4, #4]
 800703c:	42a3      	cmp	r3, r4
 800703e:	bf0c      	ite	eq
 8007040:	6032      	streq	r2, [r6, #0]
 8007042:	605a      	strne	r2, [r3, #4]
 8007044:	e7ec      	b.n	8007020 <_malloc_r+0xa0>
 8007046:	4623      	mov	r3, r4
 8007048:	6864      	ldr	r4, [r4, #4]
 800704a:	e7b2      	b.n	8006fb2 <_malloc_r+0x32>
 800704c:	4634      	mov	r4, r6
 800704e:	6876      	ldr	r6, [r6, #4]
 8007050:	e7b9      	b.n	8006fc6 <_malloc_r+0x46>
 8007052:	230c      	movs	r3, #12
 8007054:	603b      	str	r3, [r7, #0]
 8007056:	4638      	mov	r0, r7
 8007058:	f000 f83e 	bl	80070d8 <__malloc_unlock>
 800705c:	e7a1      	b.n	8006fa2 <_malloc_r+0x22>
 800705e:	6025      	str	r5, [r4, #0]
 8007060:	e7de      	b.n	8007020 <_malloc_r+0xa0>
 8007062:	bf00      	nop
 8007064:	20000ff4 	.word	0x20000ff4

08007068 <_sbrk_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d06      	ldr	r5, [pc, #24]	; (8007084 <_sbrk_r+0x1c>)
 800706c:	2300      	movs	r3, #0
 800706e:	4604      	mov	r4, r0
 8007070:	4608      	mov	r0, r1
 8007072:	602b      	str	r3, [r5, #0]
 8007074:	f7fa f832 	bl	80010dc <_sbrk>
 8007078:	1c43      	adds	r3, r0, #1
 800707a:	d102      	bne.n	8007082 <_sbrk_r+0x1a>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	b103      	cbz	r3, 8007082 <_sbrk_r+0x1a>
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20001000 	.word	0x20001000

08007088 <siprintf>:
 8007088:	b40e      	push	{r1, r2, r3}
 800708a:	b500      	push	{lr}
 800708c:	b09c      	sub	sp, #112	; 0x70
 800708e:	ab1d      	add	r3, sp, #116	; 0x74
 8007090:	9002      	str	r0, [sp, #8]
 8007092:	9006      	str	r0, [sp, #24]
 8007094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007098:	4809      	ldr	r0, [pc, #36]	; (80070c0 <siprintf+0x38>)
 800709a:	9107      	str	r1, [sp, #28]
 800709c:	9104      	str	r1, [sp, #16]
 800709e:	4909      	ldr	r1, [pc, #36]	; (80070c4 <siprintf+0x3c>)
 80070a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a4:	9105      	str	r1, [sp, #20]
 80070a6:	6800      	ldr	r0, [r0, #0]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	a902      	add	r1, sp, #8
 80070ac:	f000 f8a4 	bl	80071f8 <_svfiprintf_r>
 80070b0:	9b02      	ldr	r3, [sp, #8]
 80070b2:	2200      	movs	r2, #0
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	b01c      	add	sp, #112	; 0x70
 80070b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070bc:	b003      	add	sp, #12
 80070be:	4770      	bx	lr
 80070c0:	20000554 	.word	0x20000554
 80070c4:	ffff0208 	.word	0xffff0208

080070c8 <__retarget_lock_acquire_recursive>:
 80070c8:	4770      	bx	lr

080070ca <__retarget_lock_release_recursive>:
 80070ca:	4770      	bx	lr

080070cc <__malloc_lock>:
 80070cc:	4801      	ldr	r0, [pc, #4]	; (80070d4 <__malloc_lock+0x8>)
 80070ce:	f7ff bffb 	b.w	80070c8 <__retarget_lock_acquire_recursive>
 80070d2:	bf00      	nop
 80070d4:	20000ffc 	.word	0x20000ffc

080070d8 <__malloc_unlock>:
 80070d8:	4801      	ldr	r0, [pc, #4]	; (80070e0 <__malloc_unlock+0x8>)
 80070da:	f7ff bff6 	b.w	80070ca <__retarget_lock_release_recursive>
 80070de:	bf00      	nop
 80070e0:	20000ffc 	.word	0x20000ffc

080070e4 <_realloc_r>:
 80070e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e8:	4680      	mov	r8, r0
 80070ea:	4614      	mov	r4, r2
 80070ec:	460e      	mov	r6, r1
 80070ee:	b921      	cbnz	r1, 80070fa <_realloc_r+0x16>
 80070f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070f4:	4611      	mov	r1, r2
 80070f6:	f7ff bf43 	b.w	8006f80 <_malloc_r>
 80070fa:	b92a      	cbnz	r2, 8007108 <_realloc_r+0x24>
 80070fc:	f7ff fed4 	bl	8006ea8 <_free_r>
 8007100:	4625      	mov	r5, r4
 8007102:	4628      	mov	r0, r5
 8007104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007108:	f000 fb24 	bl	8007754 <_malloc_usable_size_r>
 800710c:	4284      	cmp	r4, r0
 800710e:	4607      	mov	r7, r0
 8007110:	d802      	bhi.n	8007118 <_realloc_r+0x34>
 8007112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007116:	d812      	bhi.n	800713e <_realloc_r+0x5a>
 8007118:	4621      	mov	r1, r4
 800711a:	4640      	mov	r0, r8
 800711c:	f7ff ff30 	bl	8006f80 <_malloc_r>
 8007120:	4605      	mov	r5, r0
 8007122:	2800      	cmp	r0, #0
 8007124:	d0ed      	beq.n	8007102 <_realloc_r+0x1e>
 8007126:	42bc      	cmp	r4, r7
 8007128:	4622      	mov	r2, r4
 800712a:	4631      	mov	r1, r6
 800712c:	bf28      	it	cs
 800712e:	463a      	movcs	r2, r7
 8007130:	f7ff fea4 	bl	8006e7c <memcpy>
 8007134:	4631      	mov	r1, r6
 8007136:	4640      	mov	r0, r8
 8007138:	f7ff feb6 	bl	8006ea8 <_free_r>
 800713c:	e7e1      	b.n	8007102 <_realloc_r+0x1e>
 800713e:	4635      	mov	r5, r6
 8007140:	e7df      	b.n	8007102 <_realloc_r+0x1e>

08007142 <__ssputs_r>:
 8007142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007146:	688e      	ldr	r6, [r1, #8]
 8007148:	429e      	cmp	r6, r3
 800714a:	4682      	mov	sl, r0
 800714c:	460c      	mov	r4, r1
 800714e:	4690      	mov	r8, r2
 8007150:	461f      	mov	r7, r3
 8007152:	d838      	bhi.n	80071c6 <__ssputs_r+0x84>
 8007154:	898a      	ldrh	r2, [r1, #12]
 8007156:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800715a:	d032      	beq.n	80071c2 <__ssputs_r+0x80>
 800715c:	6825      	ldr	r5, [r4, #0]
 800715e:	6909      	ldr	r1, [r1, #16]
 8007160:	eba5 0901 	sub.w	r9, r5, r1
 8007164:	6965      	ldr	r5, [r4, #20]
 8007166:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800716a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800716e:	3301      	adds	r3, #1
 8007170:	444b      	add	r3, r9
 8007172:	106d      	asrs	r5, r5, #1
 8007174:	429d      	cmp	r5, r3
 8007176:	bf38      	it	cc
 8007178:	461d      	movcc	r5, r3
 800717a:	0553      	lsls	r3, r2, #21
 800717c:	d531      	bpl.n	80071e2 <__ssputs_r+0xa0>
 800717e:	4629      	mov	r1, r5
 8007180:	f7ff fefe 	bl	8006f80 <_malloc_r>
 8007184:	4606      	mov	r6, r0
 8007186:	b950      	cbnz	r0, 800719e <__ssputs_r+0x5c>
 8007188:	230c      	movs	r3, #12
 800718a:	f8ca 3000 	str.w	r3, [sl]
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007194:	81a3      	strh	r3, [r4, #12]
 8007196:	f04f 30ff 	mov.w	r0, #4294967295
 800719a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719e:	6921      	ldr	r1, [r4, #16]
 80071a0:	464a      	mov	r2, r9
 80071a2:	f7ff fe6b 	bl	8006e7c <memcpy>
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	6126      	str	r6, [r4, #16]
 80071b4:	6165      	str	r5, [r4, #20]
 80071b6:	444e      	add	r6, r9
 80071b8:	eba5 0509 	sub.w	r5, r5, r9
 80071bc:	6026      	str	r6, [r4, #0]
 80071be:	60a5      	str	r5, [r4, #8]
 80071c0:	463e      	mov	r6, r7
 80071c2:	42be      	cmp	r6, r7
 80071c4:	d900      	bls.n	80071c8 <__ssputs_r+0x86>
 80071c6:	463e      	mov	r6, r7
 80071c8:	6820      	ldr	r0, [r4, #0]
 80071ca:	4632      	mov	r2, r6
 80071cc:	4641      	mov	r1, r8
 80071ce:	f000 faa7 	bl	8007720 <memmove>
 80071d2:	68a3      	ldr	r3, [r4, #8]
 80071d4:	1b9b      	subs	r3, r3, r6
 80071d6:	60a3      	str	r3, [r4, #8]
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	4433      	add	r3, r6
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	2000      	movs	r0, #0
 80071e0:	e7db      	b.n	800719a <__ssputs_r+0x58>
 80071e2:	462a      	mov	r2, r5
 80071e4:	f7ff ff7e 	bl	80070e4 <_realloc_r>
 80071e8:	4606      	mov	r6, r0
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d1e1      	bne.n	80071b2 <__ssputs_r+0x70>
 80071ee:	6921      	ldr	r1, [r4, #16]
 80071f0:	4650      	mov	r0, sl
 80071f2:	f7ff fe59 	bl	8006ea8 <_free_r>
 80071f6:	e7c7      	b.n	8007188 <__ssputs_r+0x46>

080071f8 <_svfiprintf_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	4698      	mov	r8, r3
 80071fe:	898b      	ldrh	r3, [r1, #12]
 8007200:	061b      	lsls	r3, r3, #24
 8007202:	b09d      	sub	sp, #116	; 0x74
 8007204:	4607      	mov	r7, r0
 8007206:	460d      	mov	r5, r1
 8007208:	4614      	mov	r4, r2
 800720a:	d50e      	bpl.n	800722a <_svfiprintf_r+0x32>
 800720c:	690b      	ldr	r3, [r1, #16]
 800720e:	b963      	cbnz	r3, 800722a <_svfiprintf_r+0x32>
 8007210:	2140      	movs	r1, #64	; 0x40
 8007212:	f7ff feb5 	bl	8006f80 <_malloc_r>
 8007216:	6028      	str	r0, [r5, #0]
 8007218:	6128      	str	r0, [r5, #16]
 800721a:	b920      	cbnz	r0, 8007226 <_svfiprintf_r+0x2e>
 800721c:	230c      	movs	r3, #12
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	e0d1      	b.n	80073ca <_svfiprintf_r+0x1d2>
 8007226:	2340      	movs	r3, #64	; 0x40
 8007228:	616b      	str	r3, [r5, #20]
 800722a:	2300      	movs	r3, #0
 800722c:	9309      	str	r3, [sp, #36]	; 0x24
 800722e:	2320      	movs	r3, #32
 8007230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007234:	f8cd 800c 	str.w	r8, [sp, #12]
 8007238:	2330      	movs	r3, #48	; 0x30
 800723a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073e4 <_svfiprintf_r+0x1ec>
 800723e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007242:	f04f 0901 	mov.w	r9, #1
 8007246:	4623      	mov	r3, r4
 8007248:	469a      	mov	sl, r3
 800724a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800724e:	b10a      	cbz	r2, 8007254 <_svfiprintf_r+0x5c>
 8007250:	2a25      	cmp	r2, #37	; 0x25
 8007252:	d1f9      	bne.n	8007248 <_svfiprintf_r+0x50>
 8007254:	ebba 0b04 	subs.w	fp, sl, r4
 8007258:	d00b      	beq.n	8007272 <_svfiprintf_r+0x7a>
 800725a:	465b      	mov	r3, fp
 800725c:	4622      	mov	r2, r4
 800725e:	4629      	mov	r1, r5
 8007260:	4638      	mov	r0, r7
 8007262:	f7ff ff6e 	bl	8007142 <__ssputs_r>
 8007266:	3001      	adds	r0, #1
 8007268:	f000 80aa 	beq.w	80073c0 <_svfiprintf_r+0x1c8>
 800726c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800726e:	445a      	add	r2, fp
 8007270:	9209      	str	r2, [sp, #36]	; 0x24
 8007272:	f89a 3000 	ldrb.w	r3, [sl]
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 80a2 	beq.w	80073c0 <_svfiprintf_r+0x1c8>
 800727c:	2300      	movs	r3, #0
 800727e:	f04f 32ff 	mov.w	r2, #4294967295
 8007282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007286:	f10a 0a01 	add.w	sl, sl, #1
 800728a:	9304      	str	r3, [sp, #16]
 800728c:	9307      	str	r3, [sp, #28]
 800728e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007292:	931a      	str	r3, [sp, #104]	; 0x68
 8007294:	4654      	mov	r4, sl
 8007296:	2205      	movs	r2, #5
 8007298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800729c:	4851      	ldr	r0, [pc, #324]	; (80073e4 <_svfiprintf_r+0x1ec>)
 800729e:	f7f8 ffbf 	bl	8000220 <memchr>
 80072a2:	9a04      	ldr	r2, [sp, #16]
 80072a4:	b9d8      	cbnz	r0, 80072de <_svfiprintf_r+0xe6>
 80072a6:	06d0      	lsls	r0, r2, #27
 80072a8:	bf44      	itt	mi
 80072aa:	2320      	movmi	r3, #32
 80072ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072b0:	0711      	lsls	r1, r2, #28
 80072b2:	bf44      	itt	mi
 80072b4:	232b      	movmi	r3, #43	; 0x2b
 80072b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ba:	f89a 3000 	ldrb.w	r3, [sl]
 80072be:	2b2a      	cmp	r3, #42	; 0x2a
 80072c0:	d015      	beq.n	80072ee <_svfiprintf_r+0xf6>
 80072c2:	9a07      	ldr	r2, [sp, #28]
 80072c4:	4654      	mov	r4, sl
 80072c6:	2000      	movs	r0, #0
 80072c8:	f04f 0c0a 	mov.w	ip, #10
 80072cc:	4621      	mov	r1, r4
 80072ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072d2:	3b30      	subs	r3, #48	; 0x30
 80072d4:	2b09      	cmp	r3, #9
 80072d6:	d94e      	bls.n	8007376 <_svfiprintf_r+0x17e>
 80072d8:	b1b0      	cbz	r0, 8007308 <_svfiprintf_r+0x110>
 80072da:	9207      	str	r2, [sp, #28]
 80072dc:	e014      	b.n	8007308 <_svfiprintf_r+0x110>
 80072de:	eba0 0308 	sub.w	r3, r0, r8
 80072e2:	fa09 f303 	lsl.w	r3, r9, r3
 80072e6:	4313      	orrs	r3, r2
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	46a2      	mov	sl, r4
 80072ec:	e7d2      	b.n	8007294 <_svfiprintf_r+0x9c>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	1d19      	adds	r1, r3, #4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	9103      	str	r1, [sp, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bfbb      	ittet	lt
 80072fa:	425b      	neglt	r3, r3
 80072fc:	f042 0202 	orrlt.w	r2, r2, #2
 8007300:	9307      	strge	r3, [sp, #28]
 8007302:	9307      	strlt	r3, [sp, #28]
 8007304:	bfb8      	it	lt
 8007306:	9204      	strlt	r2, [sp, #16]
 8007308:	7823      	ldrb	r3, [r4, #0]
 800730a:	2b2e      	cmp	r3, #46	; 0x2e
 800730c:	d10c      	bne.n	8007328 <_svfiprintf_r+0x130>
 800730e:	7863      	ldrb	r3, [r4, #1]
 8007310:	2b2a      	cmp	r3, #42	; 0x2a
 8007312:	d135      	bne.n	8007380 <_svfiprintf_r+0x188>
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	1d1a      	adds	r2, r3, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	9203      	str	r2, [sp, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	bfb8      	it	lt
 8007320:	f04f 33ff 	movlt.w	r3, #4294967295
 8007324:	3402      	adds	r4, #2
 8007326:	9305      	str	r3, [sp, #20]
 8007328:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073f4 <_svfiprintf_r+0x1fc>
 800732c:	7821      	ldrb	r1, [r4, #0]
 800732e:	2203      	movs	r2, #3
 8007330:	4650      	mov	r0, sl
 8007332:	f7f8 ff75 	bl	8000220 <memchr>
 8007336:	b140      	cbz	r0, 800734a <_svfiprintf_r+0x152>
 8007338:	2340      	movs	r3, #64	; 0x40
 800733a:	eba0 000a 	sub.w	r0, r0, sl
 800733e:	fa03 f000 	lsl.w	r0, r3, r0
 8007342:	9b04      	ldr	r3, [sp, #16]
 8007344:	4303      	orrs	r3, r0
 8007346:	3401      	adds	r4, #1
 8007348:	9304      	str	r3, [sp, #16]
 800734a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800734e:	4826      	ldr	r0, [pc, #152]	; (80073e8 <_svfiprintf_r+0x1f0>)
 8007350:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007354:	2206      	movs	r2, #6
 8007356:	f7f8 ff63 	bl	8000220 <memchr>
 800735a:	2800      	cmp	r0, #0
 800735c:	d038      	beq.n	80073d0 <_svfiprintf_r+0x1d8>
 800735e:	4b23      	ldr	r3, [pc, #140]	; (80073ec <_svfiprintf_r+0x1f4>)
 8007360:	bb1b      	cbnz	r3, 80073aa <_svfiprintf_r+0x1b2>
 8007362:	9b03      	ldr	r3, [sp, #12]
 8007364:	3307      	adds	r3, #7
 8007366:	f023 0307 	bic.w	r3, r3, #7
 800736a:	3308      	adds	r3, #8
 800736c:	9303      	str	r3, [sp, #12]
 800736e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007370:	4433      	add	r3, r6
 8007372:	9309      	str	r3, [sp, #36]	; 0x24
 8007374:	e767      	b.n	8007246 <_svfiprintf_r+0x4e>
 8007376:	fb0c 3202 	mla	r2, ip, r2, r3
 800737a:	460c      	mov	r4, r1
 800737c:	2001      	movs	r0, #1
 800737e:	e7a5      	b.n	80072cc <_svfiprintf_r+0xd4>
 8007380:	2300      	movs	r3, #0
 8007382:	3401      	adds	r4, #1
 8007384:	9305      	str	r3, [sp, #20]
 8007386:	4619      	mov	r1, r3
 8007388:	f04f 0c0a 	mov.w	ip, #10
 800738c:	4620      	mov	r0, r4
 800738e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007392:	3a30      	subs	r2, #48	; 0x30
 8007394:	2a09      	cmp	r2, #9
 8007396:	d903      	bls.n	80073a0 <_svfiprintf_r+0x1a8>
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0c5      	beq.n	8007328 <_svfiprintf_r+0x130>
 800739c:	9105      	str	r1, [sp, #20]
 800739e:	e7c3      	b.n	8007328 <_svfiprintf_r+0x130>
 80073a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80073a4:	4604      	mov	r4, r0
 80073a6:	2301      	movs	r3, #1
 80073a8:	e7f0      	b.n	800738c <_svfiprintf_r+0x194>
 80073aa:	ab03      	add	r3, sp, #12
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	462a      	mov	r2, r5
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <_svfiprintf_r+0x1f8>)
 80073b2:	a904      	add	r1, sp, #16
 80073b4:	4638      	mov	r0, r7
 80073b6:	f3af 8000 	nop.w
 80073ba:	1c42      	adds	r2, r0, #1
 80073bc:	4606      	mov	r6, r0
 80073be:	d1d6      	bne.n	800736e <_svfiprintf_r+0x176>
 80073c0:	89ab      	ldrh	r3, [r5, #12]
 80073c2:	065b      	lsls	r3, r3, #25
 80073c4:	f53f af2c 	bmi.w	8007220 <_svfiprintf_r+0x28>
 80073c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ca:	b01d      	add	sp, #116	; 0x74
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	ab03      	add	r3, sp, #12
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	462a      	mov	r2, r5
 80073d6:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <_svfiprintf_r+0x1f8>)
 80073d8:	a904      	add	r1, sp, #16
 80073da:	4638      	mov	r0, r7
 80073dc:	f000 f87a 	bl	80074d4 <_printf_i>
 80073e0:	e7eb      	b.n	80073ba <_svfiprintf_r+0x1c2>
 80073e2:	bf00      	nop
 80073e4:	0800ace8 	.word	0x0800ace8
 80073e8:	0800acf2 	.word	0x0800acf2
 80073ec:	00000000 	.word	0x00000000
 80073f0:	08007143 	.word	0x08007143
 80073f4:	0800acee 	.word	0x0800acee

080073f8 <_printf_common>:
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	4616      	mov	r6, r2
 80073fe:	4699      	mov	r9, r3
 8007400:	688a      	ldr	r2, [r1, #8]
 8007402:	690b      	ldr	r3, [r1, #16]
 8007404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007408:	4293      	cmp	r3, r2
 800740a:	bfb8      	it	lt
 800740c:	4613      	movlt	r3, r2
 800740e:	6033      	str	r3, [r6, #0]
 8007410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007414:	4607      	mov	r7, r0
 8007416:	460c      	mov	r4, r1
 8007418:	b10a      	cbz	r2, 800741e <_printf_common+0x26>
 800741a:	3301      	adds	r3, #1
 800741c:	6033      	str	r3, [r6, #0]
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	0699      	lsls	r1, r3, #26
 8007422:	bf42      	ittt	mi
 8007424:	6833      	ldrmi	r3, [r6, #0]
 8007426:	3302      	addmi	r3, #2
 8007428:	6033      	strmi	r3, [r6, #0]
 800742a:	6825      	ldr	r5, [r4, #0]
 800742c:	f015 0506 	ands.w	r5, r5, #6
 8007430:	d106      	bne.n	8007440 <_printf_common+0x48>
 8007432:	f104 0a19 	add.w	sl, r4, #25
 8007436:	68e3      	ldr	r3, [r4, #12]
 8007438:	6832      	ldr	r2, [r6, #0]
 800743a:	1a9b      	subs	r3, r3, r2
 800743c:	42ab      	cmp	r3, r5
 800743e:	dc26      	bgt.n	800748e <_printf_common+0x96>
 8007440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007444:	1e13      	subs	r3, r2, #0
 8007446:	6822      	ldr	r2, [r4, #0]
 8007448:	bf18      	it	ne
 800744a:	2301      	movne	r3, #1
 800744c:	0692      	lsls	r2, r2, #26
 800744e:	d42b      	bmi.n	80074a8 <_printf_common+0xb0>
 8007450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007454:	4649      	mov	r1, r9
 8007456:	4638      	mov	r0, r7
 8007458:	47c0      	blx	r8
 800745a:	3001      	adds	r0, #1
 800745c:	d01e      	beq.n	800749c <_printf_common+0xa4>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	68e5      	ldr	r5, [r4, #12]
 8007462:	6832      	ldr	r2, [r6, #0]
 8007464:	f003 0306 	and.w	r3, r3, #6
 8007468:	2b04      	cmp	r3, #4
 800746a:	bf08      	it	eq
 800746c:	1aad      	subeq	r5, r5, r2
 800746e:	68a3      	ldr	r3, [r4, #8]
 8007470:	6922      	ldr	r2, [r4, #16]
 8007472:	bf0c      	ite	eq
 8007474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007478:	2500      	movne	r5, #0
 800747a:	4293      	cmp	r3, r2
 800747c:	bfc4      	itt	gt
 800747e:	1a9b      	subgt	r3, r3, r2
 8007480:	18ed      	addgt	r5, r5, r3
 8007482:	2600      	movs	r6, #0
 8007484:	341a      	adds	r4, #26
 8007486:	42b5      	cmp	r5, r6
 8007488:	d11a      	bne.n	80074c0 <_printf_common+0xc8>
 800748a:	2000      	movs	r0, #0
 800748c:	e008      	b.n	80074a0 <_printf_common+0xa8>
 800748e:	2301      	movs	r3, #1
 8007490:	4652      	mov	r2, sl
 8007492:	4649      	mov	r1, r9
 8007494:	4638      	mov	r0, r7
 8007496:	47c0      	blx	r8
 8007498:	3001      	adds	r0, #1
 800749a:	d103      	bne.n	80074a4 <_printf_common+0xac>
 800749c:	f04f 30ff 	mov.w	r0, #4294967295
 80074a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a4:	3501      	adds	r5, #1
 80074a6:	e7c6      	b.n	8007436 <_printf_common+0x3e>
 80074a8:	18e1      	adds	r1, r4, r3
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	2030      	movs	r0, #48	; 0x30
 80074ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074b2:	4422      	add	r2, r4
 80074b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074bc:	3302      	adds	r3, #2
 80074be:	e7c7      	b.n	8007450 <_printf_common+0x58>
 80074c0:	2301      	movs	r3, #1
 80074c2:	4622      	mov	r2, r4
 80074c4:	4649      	mov	r1, r9
 80074c6:	4638      	mov	r0, r7
 80074c8:	47c0      	blx	r8
 80074ca:	3001      	adds	r0, #1
 80074cc:	d0e6      	beq.n	800749c <_printf_common+0xa4>
 80074ce:	3601      	adds	r6, #1
 80074d0:	e7d9      	b.n	8007486 <_printf_common+0x8e>
	...

080074d4 <_printf_i>:
 80074d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074d8:	7e0f      	ldrb	r7, [r1, #24]
 80074da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074dc:	2f78      	cmp	r7, #120	; 0x78
 80074de:	4691      	mov	r9, r2
 80074e0:	4680      	mov	r8, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	469a      	mov	sl, r3
 80074e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074ea:	d807      	bhi.n	80074fc <_printf_i+0x28>
 80074ec:	2f62      	cmp	r7, #98	; 0x62
 80074ee:	d80a      	bhi.n	8007506 <_printf_i+0x32>
 80074f0:	2f00      	cmp	r7, #0
 80074f2:	f000 80d8 	beq.w	80076a6 <_printf_i+0x1d2>
 80074f6:	2f58      	cmp	r7, #88	; 0x58
 80074f8:	f000 80a3 	beq.w	8007642 <_printf_i+0x16e>
 80074fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007504:	e03a      	b.n	800757c <_printf_i+0xa8>
 8007506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800750a:	2b15      	cmp	r3, #21
 800750c:	d8f6      	bhi.n	80074fc <_printf_i+0x28>
 800750e:	a101      	add	r1, pc, #4	; (adr r1, 8007514 <_printf_i+0x40>)
 8007510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007514:	0800756d 	.word	0x0800756d
 8007518:	08007581 	.word	0x08007581
 800751c:	080074fd 	.word	0x080074fd
 8007520:	080074fd 	.word	0x080074fd
 8007524:	080074fd 	.word	0x080074fd
 8007528:	080074fd 	.word	0x080074fd
 800752c:	08007581 	.word	0x08007581
 8007530:	080074fd 	.word	0x080074fd
 8007534:	080074fd 	.word	0x080074fd
 8007538:	080074fd 	.word	0x080074fd
 800753c:	080074fd 	.word	0x080074fd
 8007540:	0800768d 	.word	0x0800768d
 8007544:	080075b1 	.word	0x080075b1
 8007548:	0800766f 	.word	0x0800766f
 800754c:	080074fd 	.word	0x080074fd
 8007550:	080074fd 	.word	0x080074fd
 8007554:	080076af 	.word	0x080076af
 8007558:	080074fd 	.word	0x080074fd
 800755c:	080075b1 	.word	0x080075b1
 8007560:	080074fd 	.word	0x080074fd
 8007564:	080074fd 	.word	0x080074fd
 8007568:	08007677 	.word	0x08007677
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	602a      	str	r2, [r5, #0]
 8007574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800757c:	2301      	movs	r3, #1
 800757e:	e0a3      	b.n	80076c8 <_printf_i+0x1f4>
 8007580:	6820      	ldr	r0, [r4, #0]
 8007582:	6829      	ldr	r1, [r5, #0]
 8007584:	0606      	lsls	r6, r0, #24
 8007586:	f101 0304 	add.w	r3, r1, #4
 800758a:	d50a      	bpl.n	80075a2 <_printf_i+0xce>
 800758c:	680e      	ldr	r6, [r1, #0]
 800758e:	602b      	str	r3, [r5, #0]
 8007590:	2e00      	cmp	r6, #0
 8007592:	da03      	bge.n	800759c <_printf_i+0xc8>
 8007594:	232d      	movs	r3, #45	; 0x2d
 8007596:	4276      	negs	r6, r6
 8007598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759c:	485e      	ldr	r0, [pc, #376]	; (8007718 <_printf_i+0x244>)
 800759e:	230a      	movs	r3, #10
 80075a0:	e019      	b.n	80075d6 <_printf_i+0x102>
 80075a2:	680e      	ldr	r6, [r1, #0]
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075aa:	bf18      	it	ne
 80075ac:	b236      	sxthne	r6, r6
 80075ae:	e7ef      	b.n	8007590 <_printf_i+0xbc>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	6820      	ldr	r0, [r4, #0]
 80075b4:	1d19      	adds	r1, r3, #4
 80075b6:	6029      	str	r1, [r5, #0]
 80075b8:	0601      	lsls	r1, r0, #24
 80075ba:	d501      	bpl.n	80075c0 <_printf_i+0xec>
 80075bc:	681e      	ldr	r6, [r3, #0]
 80075be:	e002      	b.n	80075c6 <_printf_i+0xf2>
 80075c0:	0646      	lsls	r6, r0, #25
 80075c2:	d5fb      	bpl.n	80075bc <_printf_i+0xe8>
 80075c4:	881e      	ldrh	r6, [r3, #0]
 80075c6:	4854      	ldr	r0, [pc, #336]	; (8007718 <_printf_i+0x244>)
 80075c8:	2f6f      	cmp	r7, #111	; 0x6f
 80075ca:	bf0c      	ite	eq
 80075cc:	2308      	moveq	r3, #8
 80075ce:	230a      	movne	r3, #10
 80075d0:	2100      	movs	r1, #0
 80075d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075d6:	6865      	ldr	r5, [r4, #4]
 80075d8:	60a5      	str	r5, [r4, #8]
 80075da:	2d00      	cmp	r5, #0
 80075dc:	bfa2      	ittt	ge
 80075de:	6821      	ldrge	r1, [r4, #0]
 80075e0:	f021 0104 	bicge.w	r1, r1, #4
 80075e4:	6021      	strge	r1, [r4, #0]
 80075e6:	b90e      	cbnz	r6, 80075ec <_printf_i+0x118>
 80075e8:	2d00      	cmp	r5, #0
 80075ea:	d04d      	beq.n	8007688 <_printf_i+0x1b4>
 80075ec:	4615      	mov	r5, r2
 80075ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80075f2:	fb03 6711 	mls	r7, r3, r1, r6
 80075f6:	5dc7      	ldrb	r7, [r0, r7]
 80075f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075fc:	4637      	mov	r7, r6
 80075fe:	42bb      	cmp	r3, r7
 8007600:	460e      	mov	r6, r1
 8007602:	d9f4      	bls.n	80075ee <_printf_i+0x11a>
 8007604:	2b08      	cmp	r3, #8
 8007606:	d10b      	bne.n	8007620 <_printf_i+0x14c>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	07de      	lsls	r6, r3, #31
 800760c:	d508      	bpl.n	8007620 <_printf_i+0x14c>
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	6861      	ldr	r1, [r4, #4]
 8007612:	4299      	cmp	r1, r3
 8007614:	bfde      	ittt	le
 8007616:	2330      	movle	r3, #48	; 0x30
 8007618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800761c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007620:	1b52      	subs	r2, r2, r5
 8007622:	6122      	str	r2, [r4, #16]
 8007624:	f8cd a000 	str.w	sl, [sp]
 8007628:	464b      	mov	r3, r9
 800762a:	aa03      	add	r2, sp, #12
 800762c:	4621      	mov	r1, r4
 800762e:	4640      	mov	r0, r8
 8007630:	f7ff fee2 	bl	80073f8 <_printf_common>
 8007634:	3001      	adds	r0, #1
 8007636:	d14c      	bne.n	80076d2 <_printf_i+0x1fe>
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	b004      	add	sp, #16
 800763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007642:	4835      	ldr	r0, [pc, #212]	; (8007718 <_printf_i+0x244>)
 8007644:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007648:	6829      	ldr	r1, [r5, #0]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007650:	6029      	str	r1, [r5, #0]
 8007652:	061d      	lsls	r5, r3, #24
 8007654:	d514      	bpl.n	8007680 <_printf_i+0x1ac>
 8007656:	07df      	lsls	r7, r3, #31
 8007658:	bf44      	itt	mi
 800765a:	f043 0320 	orrmi.w	r3, r3, #32
 800765e:	6023      	strmi	r3, [r4, #0]
 8007660:	b91e      	cbnz	r6, 800766a <_printf_i+0x196>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f023 0320 	bic.w	r3, r3, #32
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	2310      	movs	r3, #16
 800766c:	e7b0      	b.n	80075d0 <_printf_i+0xfc>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	f043 0320 	orr.w	r3, r3, #32
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	2378      	movs	r3, #120	; 0x78
 8007678:	4828      	ldr	r0, [pc, #160]	; (800771c <_printf_i+0x248>)
 800767a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800767e:	e7e3      	b.n	8007648 <_printf_i+0x174>
 8007680:	0659      	lsls	r1, r3, #25
 8007682:	bf48      	it	mi
 8007684:	b2b6      	uxthmi	r6, r6
 8007686:	e7e6      	b.n	8007656 <_printf_i+0x182>
 8007688:	4615      	mov	r5, r2
 800768a:	e7bb      	b.n	8007604 <_printf_i+0x130>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	6826      	ldr	r6, [r4, #0]
 8007690:	6961      	ldr	r1, [r4, #20]
 8007692:	1d18      	adds	r0, r3, #4
 8007694:	6028      	str	r0, [r5, #0]
 8007696:	0635      	lsls	r5, r6, #24
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	d501      	bpl.n	80076a0 <_printf_i+0x1cc>
 800769c:	6019      	str	r1, [r3, #0]
 800769e:	e002      	b.n	80076a6 <_printf_i+0x1d2>
 80076a0:	0670      	lsls	r0, r6, #25
 80076a2:	d5fb      	bpl.n	800769c <_printf_i+0x1c8>
 80076a4:	8019      	strh	r1, [r3, #0]
 80076a6:	2300      	movs	r3, #0
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	4615      	mov	r5, r2
 80076ac:	e7ba      	b.n	8007624 <_printf_i+0x150>
 80076ae:	682b      	ldr	r3, [r5, #0]
 80076b0:	1d1a      	adds	r2, r3, #4
 80076b2:	602a      	str	r2, [r5, #0]
 80076b4:	681d      	ldr	r5, [r3, #0]
 80076b6:	6862      	ldr	r2, [r4, #4]
 80076b8:	2100      	movs	r1, #0
 80076ba:	4628      	mov	r0, r5
 80076bc:	f7f8 fdb0 	bl	8000220 <memchr>
 80076c0:	b108      	cbz	r0, 80076c6 <_printf_i+0x1f2>
 80076c2:	1b40      	subs	r0, r0, r5
 80076c4:	6060      	str	r0, [r4, #4]
 80076c6:	6863      	ldr	r3, [r4, #4]
 80076c8:	6123      	str	r3, [r4, #16]
 80076ca:	2300      	movs	r3, #0
 80076cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d0:	e7a8      	b.n	8007624 <_printf_i+0x150>
 80076d2:	6923      	ldr	r3, [r4, #16]
 80076d4:	462a      	mov	r2, r5
 80076d6:	4649      	mov	r1, r9
 80076d8:	4640      	mov	r0, r8
 80076da:	47d0      	blx	sl
 80076dc:	3001      	adds	r0, #1
 80076de:	d0ab      	beq.n	8007638 <_printf_i+0x164>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	079b      	lsls	r3, r3, #30
 80076e4:	d413      	bmi.n	800770e <_printf_i+0x23a>
 80076e6:	68e0      	ldr	r0, [r4, #12]
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	4298      	cmp	r0, r3
 80076ec:	bfb8      	it	lt
 80076ee:	4618      	movlt	r0, r3
 80076f0:	e7a4      	b.n	800763c <_printf_i+0x168>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4632      	mov	r2, r6
 80076f6:	4649      	mov	r1, r9
 80076f8:	4640      	mov	r0, r8
 80076fa:	47d0      	blx	sl
 80076fc:	3001      	adds	r0, #1
 80076fe:	d09b      	beq.n	8007638 <_printf_i+0x164>
 8007700:	3501      	adds	r5, #1
 8007702:	68e3      	ldr	r3, [r4, #12]
 8007704:	9903      	ldr	r1, [sp, #12]
 8007706:	1a5b      	subs	r3, r3, r1
 8007708:	42ab      	cmp	r3, r5
 800770a:	dcf2      	bgt.n	80076f2 <_printf_i+0x21e>
 800770c:	e7eb      	b.n	80076e6 <_printf_i+0x212>
 800770e:	2500      	movs	r5, #0
 8007710:	f104 0619 	add.w	r6, r4, #25
 8007714:	e7f5      	b.n	8007702 <_printf_i+0x22e>
 8007716:	bf00      	nop
 8007718:	0800acf9 	.word	0x0800acf9
 800771c:	0800ad0a 	.word	0x0800ad0a

08007720 <memmove>:
 8007720:	4288      	cmp	r0, r1
 8007722:	b510      	push	{r4, lr}
 8007724:	eb01 0402 	add.w	r4, r1, r2
 8007728:	d902      	bls.n	8007730 <memmove+0x10>
 800772a:	4284      	cmp	r4, r0
 800772c:	4623      	mov	r3, r4
 800772e:	d807      	bhi.n	8007740 <memmove+0x20>
 8007730:	1e43      	subs	r3, r0, #1
 8007732:	42a1      	cmp	r1, r4
 8007734:	d008      	beq.n	8007748 <memmove+0x28>
 8007736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800773a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800773e:	e7f8      	b.n	8007732 <memmove+0x12>
 8007740:	4402      	add	r2, r0
 8007742:	4601      	mov	r1, r0
 8007744:	428a      	cmp	r2, r1
 8007746:	d100      	bne.n	800774a <memmove+0x2a>
 8007748:	bd10      	pop	{r4, pc}
 800774a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800774e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007752:	e7f7      	b.n	8007744 <memmove+0x24>

08007754 <_malloc_usable_size_r>:
 8007754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007758:	1f18      	subs	r0, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfbc      	itt	lt
 800775e:	580b      	ldrlt	r3, [r1, r0]
 8007760:	18c0      	addlt	r0, r0, r3
 8007762:	4770      	bx	lr

08007764 <expf>:
 8007764:	b508      	push	{r3, lr}
 8007766:	ed2d 8b02 	vpush	{d8}
 800776a:	eef0 8a40 	vmov.f32	s17, s0
 800776e:	f000 f82f 	bl	80077d0 <__ieee754_expf>
 8007772:	eeb0 8a40 	vmov.f32	s16, s0
 8007776:	eeb0 0a68 	vmov.f32	s0, s17
 800777a:	f000 f919 	bl	80079b0 <finitef>
 800777e:	b160      	cbz	r0, 800779a <expf+0x36>
 8007780:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80077c0 <expf+0x5c>
 8007784:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778c:	dd0a      	ble.n	80077a4 <expf+0x40>
 800778e:	f7ff fb4b 	bl	8006e28 <__errno>
 8007792:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80077c4 <expf+0x60>
 8007796:	2322      	movs	r3, #34	; 0x22
 8007798:	6003      	str	r3, [r0, #0]
 800779a:	eeb0 0a48 	vmov.f32	s0, s16
 800779e:	ecbd 8b02 	vpop	{d8}
 80077a2:	bd08      	pop	{r3, pc}
 80077a4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80077c8 <expf+0x64>
 80077a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80077ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b0:	d5f3      	bpl.n	800779a <expf+0x36>
 80077b2:	f7ff fb39 	bl	8006e28 <__errno>
 80077b6:	2322      	movs	r3, #34	; 0x22
 80077b8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80077cc <expf+0x68>
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	e7ec      	b.n	800779a <expf+0x36>
 80077c0:	42b17180 	.word	0x42b17180
 80077c4:	7f800000 	.word	0x7f800000
 80077c8:	c2cff1b5 	.word	0xc2cff1b5
 80077cc:	00000000 	.word	0x00000000

080077d0 <__ieee754_expf>:
 80077d0:	ee10 2a10 	vmov	r2, s0
 80077d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80077d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80077dc:	d902      	bls.n	80077e4 <__ieee754_expf+0x14>
 80077de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80077e2:	4770      	bx	lr
 80077e4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80077e8:	d106      	bne.n	80077f8 <__ieee754_expf+0x28>
 80077ea:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007924 <__ieee754_expf+0x154>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bf18      	it	ne
 80077f2:	eeb0 0a67 	vmovne.f32	s0, s15
 80077f6:	4770      	bx	lr
 80077f8:	484b      	ldr	r0, [pc, #300]	; (8007928 <__ieee754_expf+0x158>)
 80077fa:	4282      	cmp	r2, r0
 80077fc:	dd02      	ble.n	8007804 <__ieee754_expf+0x34>
 80077fe:	2000      	movs	r0, #0
 8007800:	f000 b8d0 	b.w	80079a4 <__math_oflowf>
 8007804:	2a00      	cmp	r2, #0
 8007806:	da05      	bge.n	8007814 <__ieee754_expf+0x44>
 8007808:	4a48      	ldr	r2, [pc, #288]	; (800792c <__ieee754_expf+0x15c>)
 800780a:	4291      	cmp	r1, r2
 800780c:	d902      	bls.n	8007814 <__ieee754_expf+0x44>
 800780e:	2000      	movs	r0, #0
 8007810:	f000 b8c2 	b.w	8007998 <__math_uflowf>
 8007814:	4a46      	ldr	r2, [pc, #280]	; (8007930 <__ieee754_expf+0x160>)
 8007816:	4291      	cmp	r1, r2
 8007818:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800781c:	d952      	bls.n	80078c4 <__ieee754_expf+0xf4>
 800781e:	4a45      	ldr	r2, [pc, #276]	; (8007934 <__ieee754_expf+0x164>)
 8007820:	4291      	cmp	r1, r2
 8007822:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007826:	d834      	bhi.n	8007892 <__ieee754_expf+0xc2>
 8007828:	4943      	ldr	r1, [pc, #268]	; (8007938 <__ieee754_expf+0x168>)
 800782a:	4411      	add	r1, r2
 800782c:	ed91 7a00 	vldr	s14, [r1]
 8007830:	4942      	ldr	r1, [pc, #264]	; (800793c <__ieee754_expf+0x16c>)
 8007832:	440a      	add	r2, r1
 8007834:	edd2 7a00 	vldr	s15, [r2]
 8007838:	ee30 7a47 	vsub.f32	s14, s0, s14
 800783c:	f1c3 0201 	rsb	r2, r3, #1
 8007840:	1ad2      	subs	r2, r2, r3
 8007842:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007846:	ee20 6a00 	vmul.f32	s12, s0, s0
 800784a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007940 <__ieee754_expf+0x170>
 800784e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007944 <__ieee754_expf+0x174>
 8007852:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007856:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007948 <__ieee754_expf+0x178>
 800785a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800785e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800794c <__ieee754_expf+0x17c>
 8007862:	eee5 6a06 	vfma.f32	s13, s10, s12
 8007866:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007950 <__ieee754_expf+0x180>
 800786a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800786e:	eef0 6a40 	vmov.f32	s13, s0
 8007872:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007876:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800787a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800787e:	bb92      	cbnz	r2, 80078e6 <__ieee754_expf+0x116>
 8007880:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007884:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007888:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800788c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007890:	4770      	bx	lr
 8007892:	4b30      	ldr	r3, [pc, #192]	; (8007954 <__ieee754_expf+0x184>)
 8007894:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007958 <__ieee754_expf+0x188>
 8007898:	eddf 6a30 	vldr	s13, [pc, #192]	; 800795c <__ieee754_expf+0x18c>
 800789c:	4413      	add	r3, r2
 800789e:	edd3 7a00 	vldr	s15, [r3]
 80078a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80078a6:	eeb0 7a40 	vmov.f32	s14, s0
 80078aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078ae:	ee17 2a90 	vmov	r2, s15
 80078b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078b6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80078ba:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007960 <__ieee754_expf+0x190>
 80078be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80078c2:	e7be      	b.n	8007842 <__ieee754_expf+0x72>
 80078c4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80078c8:	d20b      	bcs.n	80078e2 <__ieee754_expf+0x112>
 80078ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007964 <__ieee754_expf+0x194>
 80078ce:	ee70 6a26 	vadd.f32	s13, s0, s13
 80078d2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80078d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078da:	dd02      	ble.n	80078e2 <__ieee754_expf+0x112>
 80078dc:	ee30 0a25 	vadd.f32	s0, s0, s11
 80078e0:	4770      	bx	lr
 80078e2:	2200      	movs	r2, #0
 80078e4:	e7af      	b.n	8007846 <__ieee754_expf+0x76>
 80078e6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80078ea:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80078ee:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80078f2:	bfb8      	it	lt
 80078f4:	3264      	addlt	r2, #100	; 0x64
 80078f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80078fa:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80078fe:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8007902:	ee17 3a90 	vmov	r3, s15
 8007906:	bfab      	itete	ge
 8007908:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800790c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007910:	ee00 3a10 	vmovge	s0, r3
 8007914:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8007968 <__ieee754_expf+0x198>
 8007918:	bfbc      	itt	lt
 800791a:	ee00 3a10 	vmovlt	s0, r3
 800791e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007922:	4770      	bx	lr
 8007924:	00000000 	.word	0x00000000
 8007928:	42b17217 	.word	0x42b17217
 800792c:	42cff1b5 	.word	0x42cff1b5
 8007930:	3eb17218 	.word	0x3eb17218
 8007934:	3f851591 	.word	0x3f851591
 8007938:	0800ad24 	.word	0x0800ad24
 800793c:	0800ad2c 	.word	0x0800ad2c
 8007940:	3331bb4c 	.word	0x3331bb4c
 8007944:	b5ddea0e 	.word	0xb5ddea0e
 8007948:	388ab355 	.word	0x388ab355
 800794c:	bb360b61 	.word	0xbb360b61
 8007950:	3e2aaaab 	.word	0x3e2aaaab
 8007954:	0800ad1c 	.word	0x0800ad1c
 8007958:	3fb8aa3b 	.word	0x3fb8aa3b
 800795c:	3f317180 	.word	0x3f317180
 8007960:	3717f7d1 	.word	0x3717f7d1
 8007964:	7149f2ca 	.word	0x7149f2ca
 8007968:	0d800000 	.word	0x0d800000

0800796c <with_errnof>:
 800796c:	b513      	push	{r0, r1, r4, lr}
 800796e:	4604      	mov	r4, r0
 8007970:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007974:	f7ff fa58 	bl	8006e28 <__errno>
 8007978:	ed9d 0a01 	vldr	s0, [sp, #4]
 800797c:	6004      	str	r4, [r0, #0]
 800797e:	b002      	add	sp, #8
 8007980:	bd10      	pop	{r4, pc}

08007982 <xflowf>:
 8007982:	b130      	cbz	r0, 8007992 <xflowf+0x10>
 8007984:	eef1 7a40 	vneg.f32	s15, s0
 8007988:	ee27 0a80 	vmul.f32	s0, s15, s0
 800798c:	2022      	movs	r0, #34	; 0x22
 800798e:	f7ff bfed 	b.w	800796c <with_errnof>
 8007992:	eef0 7a40 	vmov.f32	s15, s0
 8007996:	e7f7      	b.n	8007988 <xflowf+0x6>

08007998 <__math_uflowf>:
 8007998:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079a0 <__math_uflowf+0x8>
 800799c:	f7ff bff1 	b.w	8007982 <xflowf>
 80079a0:	10000000 	.word	0x10000000

080079a4 <__math_oflowf>:
 80079a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079ac <__math_oflowf+0x8>
 80079a8:	f7ff bfeb 	b.w	8007982 <xflowf>
 80079ac:	70000000 	.word	0x70000000

080079b0 <finitef>:
 80079b0:	b082      	sub	sp, #8
 80079b2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80079b6:	9801      	ldr	r0, [sp, #4]
 80079b8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80079bc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80079c0:	bfac      	ite	ge
 80079c2:	2000      	movge	r0, #0
 80079c4:	2001      	movlt	r0, #1
 80079c6:	b002      	add	sp, #8
 80079c8:	4770      	bx	lr
	...

080079cc <_init>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	bf00      	nop
 80079d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d2:	bc08      	pop	{r3}
 80079d4:	469e      	mov	lr, r3
 80079d6:	4770      	bx	lr

080079d8 <_fini>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	bf00      	nop
 80079dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079de:	bc08      	pop	{r3}
 80079e0:	469e      	mov	lr, r3
 80079e2:	4770      	bx	lr
