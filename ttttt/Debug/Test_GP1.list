
Test_GP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001368  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001474  08001474  00011474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001510  08001510  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001510  08001510  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001510  08001510  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001510  08001510  00011510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001514  08001514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08001580  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001580  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000153a  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000074f  00000000  00000000  000215cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00021d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000230  00000000  00000000  00021fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cde  00000000  00000000  000221f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b98  00000000  00000000  00024ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000808a5  00000000  00000000  00027a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a8313  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001070  00000000  00000000  000a8364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800145c 	.word	0x0800145c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800145c 	.word	0x0800145c

0800014c <TIMER_u8Init>:
#include "TIMER_private.h"
#include "TIMER_interface.h"


u8 TIMER_u8Init(u8 Copy_u8Timer , u8 Copy_u8TimerCountDir , u16 Copy_u16Prescaler,u16 Copy_u16TopValue)
{
 800014c:	b490      	push	{r4, r7}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4604      	mov	r4, r0
 8000154:	4608      	mov	r0, r1
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	4623      	mov	r3, r4
 800015c:	71fb      	strb	r3, [r7, #7]
 800015e:	4603      	mov	r3, r0
 8000160:	71bb      	strb	r3, [r7, #6]
 8000162:	460b      	mov	r3, r1
 8000164:	80bb      	strh	r3, [r7, #4]
 8000166:	4613      	mov	r3, r2
 8000168:	807b      	strh	r3, [r7, #2]
	u8 Local_u8ErrorState = OK;
 800016a:	2300      	movs	r3, #0
 800016c:	73fb      	strb	r3, [r7, #15]

	/*Enable APB*/
	switch(Copy_u8Timer)
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	3b01      	subs	r3, #1
 8000172:	2b03      	cmp	r3, #3
 8000174:	d82e      	bhi.n	80001d4 <TIMER_u8Init+0x88>
 8000176:	a201      	add	r2, pc, #4	; (adr r2, 800017c <TIMER_u8Init+0x30>)
 8000178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800017c:	0800018d 	.word	0x0800018d
 8000180:	0800019f 	.word	0x0800019f
 8000184:	080001b1 	.word	0x080001b1
 8000188:	080001c3 	.word	0x080001c3
	{
	case TIMER_1 : SET_BIT(RCC_APB2ENR,RCC_APB2ENR_TIM1_EN); break;
 800018c:	2318      	movs	r3, #24
 800018e:	881b      	ldrh	r3, [r3, #0]
 8000190:	b29b      	uxth	r3, r3
 8000192:	2218      	movs	r2, #24
 8000194:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000198:	b29b      	uxth	r3, r3
 800019a:	8013      	strh	r3, [r2, #0]
 800019c:	e01c      	b.n	80001d8 <TIMER_u8Init+0x8c>
	case TIMER_2 : SET_BIT(RCC_APB1ENR,RCC_APB1ENR_TIM2_EN); break;
 800019e:	231c      	movs	r3, #28
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	221c      	movs	r2, #28
 80001a6:	f043 0301 	orr.w	r3, r3, #1
 80001aa:	b2db      	uxtb	r3, r3
 80001ac:	7013      	strb	r3, [r2, #0]
 80001ae:	e013      	b.n	80001d8 <TIMER_u8Init+0x8c>
	case TIMER_3 : SET_BIT(RCC_APB1ENR,RCC_APB1ENR_TIM3_EN); break;
 80001b0:	231c      	movs	r3, #28
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	b2db      	uxtb	r3, r3
 80001b6:	221c      	movs	r2, #28
 80001b8:	f043 0302 	orr.w	r3, r3, #2
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	7013      	strb	r3, [r2, #0]
 80001c0:	e00a      	b.n	80001d8 <TIMER_u8Init+0x8c>
	case TIMER_4 : SET_BIT(RCC_APB1ENR,RCC_APB1ENR_TIM4_EN); break;
 80001c2:	231c      	movs	r3, #28
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	221c      	movs	r2, #28
 80001ca:	f043 0304 	orr.w	r3, r3, #4
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	7013      	strb	r3, [r2, #0]
 80001d2:	e001      	b.n	80001d8 <TIMER_u8Init+0x8c>
	default : Local_u8ErrorState = NOK;
 80001d4:	2301      	movs	r3, #1
 80001d6:	73fb      	strb	r3, [r7, #15]
	}

	/*Set Counting Direction*/
	if (Copy_u8TimerCountDir == UP)
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d108      	bne.n	80001f0 <TIMER_u8Init+0xa4>
	{
		CLR_BIT(TIM_CR1,TIM_CR1_DIR);
 80001de:	2300      	movs	r3, #0
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	b29b      	uxth	r3, r3
 80001e4:	2200      	movs	r2, #0
 80001e6:	f023 0310 	bic.w	r3, r3, #16
 80001ea:	b29b      	uxth	r3, r3
 80001ec:	8013      	strh	r3, [r2, #0]
 80001ee:	e007      	b.n	8000200 <TIMER_u8Init+0xb4>

	}
	else if (TIMER_COUNT_DIR == DOWN)
	{
		SET_BIT(TIM_CR1,TIM_CR1_DIR);
 80001f0:	2300      	movs	r3, #0
 80001f2:	881b      	ldrh	r3, [r3, #0]
 80001f4:	b29b      	uxth	r3, r3
 80001f6:	2200      	movs	r2, #0
 80001f8:	f043 0310 	orr.w	r3, r3, #16
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	8013      	strh	r3, [r2, #0]
	{
		Local_u8ErrorState = NOK;
	}

	/*Set Prescaler Value*/
	TIM_PSC = Copy_u16Prescaler-1;
 8000200:	2228      	movs	r2, #40	; 0x28
 8000202:	88bb      	ldrh	r3, [r7, #4]
 8000204:	3b01      	subs	r3, #1
 8000206:	b29b      	uxth	r3, r3
 8000208:	8013      	strh	r3, [r2, #0]

	/*Set Auto Reload Value :*/
	TIM_ARR = Copy_u16TopValue-1;
 800020a:	887b      	ldrh	r3, [r7, #2]
 800020c:	1e5a      	subs	r2, r3, #1
 800020e:	232c      	movs	r3, #44	; 0x2c
 8000210:	601a      	str	r2, [r3, #0]


	/*Enable Timer/Counter*/
	SET_BIT(TIM_CR1,TIM_CR1_CEN);
 8000212:	2300      	movs	r3, #0
 8000214:	881b      	ldrh	r3, [r3, #0]
 8000216:	b29b      	uxth	r3, r3
 8000218:	2200      	movs	r2, #0
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	b29b      	uxth	r3, r3
 8000220:	8013      	strh	r3, [r2, #0]

}
 8000222:	bf00      	nop
 8000224:	4618      	mov	r0, r3
 8000226:	3710      	adds	r7, #16
 8000228:	46bd      	mov	sp, r7
 800022a:	bc90      	pop	{r4, r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <TIMER_u8GetOverflowFlag>:

u8 TIMER_u8GetOverflowFlag(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	return GET_BIT(TIM_SR,TIM_SR_UIF);
 8000234:	2310      	movs	r3, #16
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	b29b      	uxth	r3, r3
 800023a:	b2db      	uxtb	r3, r3
 800023c:	f003 0301 	and.w	r3, r3, #1
 8000240:	b2db      	uxtb	r3, r3

}
 8000242:	4618      	mov	r0, r3
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr
	...

0800024c <main>:

#include "../Inc/1-MCAL/6.Timers/TIMER_interface.h"


void main (void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

	TIMER_u8Init(TIMER_2,UP, 1600, 10000);
 8000250:	f242 7310 	movw	r3, #10000	; 0x2710
 8000254:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000258:	2101      	movs	r1, #1
 800025a:	2002      	movs	r0, #2
 800025c:	f7ff ff76 	bl	800014c <TIMER_u8Init>

	while(1)
	{
		while(!(TIMER_u8GetOverflowFlag()));
 8000260:	bf00      	nop
 8000262:	f7ff ffe5 	bl	8000230 <TIMER_u8GetOverflowFlag>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0fa      	beq.n	8000262 <main+0x16>
		printf("HI");
 800026c:	4801      	ldr	r0, [pc, #4]	; (8000274 <main+0x28>)
 800026e:	f000 f961 	bl	8000534 <iprintf>
		while(!(TIMER_u8GetOverflowFlag()));
 8000272:	e7f5      	b.n	8000260 <main+0x14>
 8000274:	08001474 	.word	0x08001474

08000278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800027c:	e7fe      	b.n	800027c <NMI_Handler+0x4>

0800027e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000282:	e7fe      	b.n	8000282 <HardFault_Handler+0x4>

08000284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000288:	e7fe      	b.n	8000288 <MemManage_Handler+0x4>

0800028a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800028e:	e7fe      	b.n	800028e <BusFault_Handler+0x4>

08000290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000294:	e7fe      	b.n	8000294 <UsageFault_Handler+0x4>

08000296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr

080002a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr

080002ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002ae:	b480      	push	{r7}
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002b2:	bf00      	nop
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr

080002ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ba:	b580      	push	{r7, lr}
 80002bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002be:	f000 f8f5 	bl	80004ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <ITM_SendChar+0x44>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a0d      	ldr	r2, [pc, #52]	; (800030c <ITM_SendChar+0x44>)
 80002d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002dc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <ITM_SendChar+0x48>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <ITM_SendChar+0x48>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002ea:	bf00      	nop
 80002ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f8      	beq.n	80002ec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	6013      	str	r3, [r2, #0]
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	e000edfc 	.word	0xe000edfc
 8000310:	e0000e00 	.word	0xe0000e00

08000314 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000320:	2300      	movs	r3, #0
 8000322:	617b      	str	r3, [r7, #20]
 8000324:	e00a      	b.n	800033c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000326:	f3af 8000 	nop.w
 800032a:	4601      	mov	r1, r0
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	1c5a      	adds	r2, r3, #1
 8000330:	60ba      	str	r2, [r7, #8]
 8000332:	b2ca      	uxtb	r2, r1
 8000334:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	697a      	ldr	r2, [r7, #20]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	429a      	cmp	r2, r3
 8000342:	dbf0      	blt.n	8000326 <_read+0x12>
  }

  return len;
 8000344:	687b      	ldr	r3, [r7, #4]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3718      	adds	r7, #24
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b086      	sub	sp, #24
 8000352:	af00      	add	r7, sp, #0
 8000354:	60f8      	str	r0, [r7, #12]
 8000356:	60b9      	str	r1, [r7, #8]
 8000358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
 800035e:	e009      	b.n	8000374 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	1c5a      	adds	r2, r3, #1
 8000364:	60ba      	str	r2, [r7, #8]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ffad 	bl	80002c8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	3301      	adds	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
 8000374:	697a      	ldr	r2, [r7, #20]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	429a      	cmp	r2, r3
 800037a:	dbf1      	blt.n	8000360 <_write+0x12>
  }
  return len;
 800037c:	687b      	ldr	r3, [r7, #4]
}
 800037e:	4618      	mov	r0, r3
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <_close>:

int _close(int file)
{
 8000386:	b480      	push	{r7}
 8000388:	b083      	sub	sp, #12
 800038a:	af00      	add	r7, sp, #0
 800038c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000392:	4618      	mov	r0, r3
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003ac:	605a      	str	r2, [r3, #4]
  return 0;
 80003ae:	2300      	movs	r3, #0
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <_isatty>:

int _isatty(int file)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003c2:	2301      	movs	r3, #1
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b085      	sub	sp, #20
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	60f8      	str	r0, [r7, #12]
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003da:	2300      	movs	r3, #0
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3714      	adds	r7, #20
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
	...

080003e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003f0:	4a14      	ldr	r2, [pc, #80]	; (8000444 <_sbrk+0x5c>)
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <_sbrk+0x60>)
 80003f4:	1ad3      	subs	r3, r2, r3
 80003f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <_sbrk+0x64>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d102      	bne.n	800040a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <_sbrk+0x64>)
 8000406:	4a12      	ldr	r2, [pc, #72]	; (8000450 <_sbrk+0x68>)
 8000408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <_sbrk+0x64>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	693a      	ldr	r2, [r7, #16]
 8000414:	429a      	cmp	r2, r3
 8000416:	d207      	bcs.n	8000428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000418:	f000 f85a 	bl	80004d0 <__errno>
 800041c:	4603      	mov	r3, r0
 800041e:	220c      	movs	r2, #12
 8000420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000422:	f04f 33ff 	mov.w	r3, #4294967295
 8000426:	e009      	b.n	800043c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <_sbrk+0x64>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800042e:	4b07      	ldr	r3, [pc, #28]	; (800044c <_sbrk+0x64>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <_sbrk+0x64>)
 8000438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800043a:	68fb      	ldr	r3, [r7, #12]
}
 800043c:	4618      	mov	r0, r3
 800043e:	3718      	adds	r7, #24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20005000 	.word	0x20005000
 8000448:	00000400 	.word	0x00000400
 800044c:	20000084 	.word	0x20000084
 8000450:	200000a0 	.word	0x200000a0

08000454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000462:	490d      	ldr	r1, [pc, #52]	; (8000498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000464:	4a0d      	ldr	r2, [pc, #52]	; (800049c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000478:	4c0a      	ldr	r4, [pc, #40]	; (80004a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000486:	f7ff ffe5 	bl	8000454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800048a:	f000 f827 	bl	80004dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048e:	f7ff fedd 	bl	800024c <main>
  bx lr
 8000492:	4770      	bx	lr
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800049c:	08001518 	.word	0x08001518
  ldr r2, =_sbss
 80004a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80004a4:	2000009c 	.word	0x2000009c

080004a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC1_2_IRQHandler>
	...

080004ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <HAL_IncTick+0x1c>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <HAL_IncTick+0x20>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4413      	add	r3, r2
 80004bc:	4a03      	ldr	r2, [pc, #12]	; (80004cc <HAL_IncTick+0x20>)
 80004be:	6013      	str	r3, [r2, #0]
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	20000000 	.word	0x20000000
 80004cc:	20000088 	.word	0x20000088

080004d0 <__errno>:
 80004d0:	4b01      	ldr	r3, [pc, #4]	; (80004d8 <__errno+0x8>)
 80004d2:	6818      	ldr	r0, [r3, #0]
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000004 	.word	0x20000004

080004dc <__libc_init_array>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2600      	movs	r6, #0
 80004e0:	4d0c      	ldr	r5, [pc, #48]	; (8000514 <__libc_init_array+0x38>)
 80004e2:	4c0d      	ldr	r4, [pc, #52]	; (8000518 <__libc_init_array+0x3c>)
 80004e4:	1b64      	subs	r4, r4, r5
 80004e6:	10a4      	asrs	r4, r4, #2
 80004e8:	42a6      	cmp	r6, r4
 80004ea:	d109      	bne.n	8000500 <__libc_init_array+0x24>
 80004ec:	f000 ffb6 	bl	800145c <_init>
 80004f0:	2600      	movs	r6, #0
 80004f2:	4d0a      	ldr	r5, [pc, #40]	; (800051c <__libc_init_array+0x40>)
 80004f4:	4c0a      	ldr	r4, [pc, #40]	; (8000520 <__libc_init_array+0x44>)
 80004f6:	1b64      	subs	r4, r4, r5
 80004f8:	10a4      	asrs	r4, r4, #2
 80004fa:	42a6      	cmp	r6, r4
 80004fc:	d105      	bne.n	800050a <__libc_init_array+0x2e>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	f855 3b04 	ldr.w	r3, [r5], #4
 8000504:	4798      	blx	r3
 8000506:	3601      	adds	r6, #1
 8000508:	e7ee      	b.n	80004e8 <__libc_init_array+0xc>
 800050a:	f855 3b04 	ldr.w	r3, [r5], #4
 800050e:	4798      	blx	r3
 8000510:	3601      	adds	r6, #1
 8000512:	e7f2      	b.n	80004fa <__libc_init_array+0x1e>
 8000514:	08001510 	.word	0x08001510
 8000518:	08001510 	.word	0x08001510
 800051c:	08001510 	.word	0x08001510
 8000520:	08001514 	.word	0x08001514

08000524 <memset>:
 8000524:	4603      	mov	r3, r0
 8000526:	4402      	add	r2, r0
 8000528:	4293      	cmp	r3, r2
 800052a:	d100      	bne.n	800052e <memset+0xa>
 800052c:	4770      	bx	lr
 800052e:	f803 1b01 	strb.w	r1, [r3], #1
 8000532:	e7f9      	b.n	8000528 <memset+0x4>

08000534 <iprintf>:
 8000534:	b40f      	push	{r0, r1, r2, r3}
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <iprintf+0x2c>)
 8000538:	b513      	push	{r0, r1, r4, lr}
 800053a:	681c      	ldr	r4, [r3, #0]
 800053c:	b124      	cbz	r4, 8000548 <iprintf+0x14>
 800053e:	69a3      	ldr	r3, [r4, #24]
 8000540:	b913      	cbnz	r3, 8000548 <iprintf+0x14>
 8000542:	4620      	mov	r0, r4
 8000544:	f000 f866 	bl	8000614 <__sinit>
 8000548:	ab05      	add	r3, sp, #20
 800054a:	4620      	mov	r0, r4
 800054c:	9a04      	ldr	r2, [sp, #16]
 800054e:	68a1      	ldr	r1, [r4, #8]
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	f000 f9bb 	bl	80008cc <_vfiprintf_r>
 8000556:	b002      	add	sp, #8
 8000558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800055c:	b004      	add	sp, #16
 800055e:	4770      	bx	lr
 8000560:	20000004 	.word	0x20000004

08000564 <std>:
 8000564:	2300      	movs	r3, #0
 8000566:	b510      	push	{r4, lr}
 8000568:	4604      	mov	r4, r0
 800056a:	e9c0 3300 	strd	r3, r3, [r0]
 800056e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000572:	6083      	str	r3, [r0, #8]
 8000574:	8181      	strh	r1, [r0, #12]
 8000576:	6643      	str	r3, [r0, #100]	; 0x64
 8000578:	81c2      	strh	r2, [r0, #14]
 800057a:	6183      	str	r3, [r0, #24]
 800057c:	4619      	mov	r1, r3
 800057e:	2208      	movs	r2, #8
 8000580:	305c      	adds	r0, #92	; 0x5c
 8000582:	f7ff ffcf 	bl	8000524 <memset>
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <std+0x38>)
 8000588:	6224      	str	r4, [r4, #32]
 800058a:	6263      	str	r3, [r4, #36]	; 0x24
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <std+0x3c>)
 800058e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <std+0x40>)
 8000592:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <std+0x44>)
 8000596:	6323      	str	r3, [r4, #48]	; 0x30
 8000598:	bd10      	pop	{r4, pc}
 800059a:	bf00      	nop
 800059c:	08000e79 	.word	0x08000e79
 80005a0:	08000e9b 	.word	0x08000e9b
 80005a4:	08000ed3 	.word	0x08000ed3
 80005a8:	08000ef7 	.word	0x08000ef7

080005ac <_cleanup_r>:
 80005ac:	4901      	ldr	r1, [pc, #4]	; (80005b4 <_cleanup_r+0x8>)
 80005ae:	f000 b8af 	b.w	8000710 <_fwalk_reent>
 80005b2:	bf00      	nop
 80005b4:	080011c9 	.word	0x080011c9

080005b8 <__sfmoreglue>:
 80005b8:	2268      	movs	r2, #104	; 0x68
 80005ba:	b570      	push	{r4, r5, r6, lr}
 80005bc:	1e4d      	subs	r5, r1, #1
 80005be:	4355      	muls	r5, r2
 80005c0:	460e      	mov	r6, r1
 80005c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80005c6:	f000 f8e5 	bl	8000794 <_malloc_r>
 80005ca:	4604      	mov	r4, r0
 80005cc:	b140      	cbz	r0, 80005e0 <__sfmoreglue+0x28>
 80005ce:	2100      	movs	r1, #0
 80005d0:	e9c0 1600 	strd	r1, r6, [r0]
 80005d4:	300c      	adds	r0, #12
 80005d6:	60a0      	str	r0, [r4, #8]
 80005d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80005dc:	f7ff ffa2 	bl	8000524 <memset>
 80005e0:	4620      	mov	r0, r4
 80005e2:	bd70      	pop	{r4, r5, r6, pc}

080005e4 <__sfp_lock_acquire>:
 80005e4:	4801      	ldr	r0, [pc, #4]	; (80005ec <__sfp_lock_acquire+0x8>)
 80005e6:	f000 b8b3 	b.w	8000750 <__retarget_lock_acquire_recursive>
 80005ea:	bf00      	nop
 80005ec:	2000008d 	.word	0x2000008d

080005f0 <__sfp_lock_release>:
 80005f0:	4801      	ldr	r0, [pc, #4]	; (80005f8 <__sfp_lock_release+0x8>)
 80005f2:	f000 b8ae 	b.w	8000752 <__retarget_lock_release_recursive>
 80005f6:	bf00      	nop
 80005f8:	2000008d 	.word	0x2000008d

080005fc <__sinit_lock_acquire>:
 80005fc:	4801      	ldr	r0, [pc, #4]	; (8000604 <__sinit_lock_acquire+0x8>)
 80005fe:	f000 b8a7 	b.w	8000750 <__retarget_lock_acquire_recursive>
 8000602:	bf00      	nop
 8000604:	2000008e 	.word	0x2000008e

08000608 <__sinit_lock_release>:
 8000608:	4801      	ldr	r0, [pc, #4]	; (8000610 <__sinit_lock_release+0x8>)
 800060a:	f000 b8a2 	b.w	8000752 <__retarget_lock_release_recursive>
 800060e:	bf00      	nop
 8000610:	2000008e 	.word	0x2000008e

08000614 <__sinit>:
 8000614:	b510      	push	{r4, lr}
 8000616:	4604      	mov	r4, r0
 8000618:	f7ff fff0 	bl	80005fc <__sinit_lock_acquire>
 800061c:	69a3      	ldr	r3, [r4, #24]
 800061e:	b11b      	cbz	r3, 8000628 <__sinit+0x14>
 8000620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000624:	f7ff bff0 	b.w	8000608 <__sinit_lock_release>
 8000628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800062c:	6523      	str	r3, [r4, #80]	; 0x50
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <__sinit+0x68>)
 8000630:	4a13      	ldr	r2, [pc, #76]	; (8000680 <__sinit+0x6c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	62a2      	str	r2, [r4, #40]	; 0x28
 8000636:	42a3      	cmp	r3, r4
 8000638:	bf08      	it	eq
 800063a:	2301      	moveq	r3, #1
 800063c:	4620      	mov	r0, r4
 800063e:	bf08      	it	eq
 8000640:	61a3      	streq	r3, [r4, #24]
 8000642:	f000 f81f 	bl	8000684 <__sfp>
 8000646:	6060      	str	r0, [r4, #4]
 8000648:	4620      	mov	r0, r4
 800064a:	f000 f81b 	bl	8000684 <__sfp>
 800064e:	60a0      	str	r0, [r4, #8]
 8000650:	4620      	mov	r0, r4
 8000652:	f000 f817 	bl	8000684 <__sfp>
 8000656:	2200      	movs	r2, #0
 8000658:	2104      	movs	r1, #4
 800065a:	60e0      	str	r0, [r4, #12]
 800065c:	6860      	ldr	r0, [r4, #4]
 800065e:	f7ff ff81 	bl	8000564 <std>
 8000662:	2201      	movs	r2, #1
 8000664:	2109      	movs	r1, #9
 8000666:	68a0      	ldr	r0, [r4, #8]
 8000668:	f7ff ff7c 	bl	8000564 <std>
 800066c:	2202      	movs	r2, #2
 800066e:	2112      	movs	r1, #18
 8000670:	68e0      	ldr	r0, [r4, #12]
 8000672:	f7ff ff77 	bl	8000564 <std>
 8000676:	2301      	movs	r3, #1
 8000678:	61a3      	str	r3, [r4, #24]
 800067a:	e7d1      	b.n	8000620 <__sinit+0xc>
 800067c:	08001478 	.word	0x08001478
 8000680:	080005ad 	.word	0x080005ad

08000684 <__sfp>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	4607      	mov	r7, r0
 8000688:	f7ff ffac 	bl	80005e4 <__sfp_lock_acquire>
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <__sfp+0x84>)
 800068e:	681e      	ldr	r6, [r3, #0]
 8000690:	69b3      	ldr	r3, [r6, #24]
 8000692:	b913      	cbnz	r3, 800069a <__sfp+0x16>
 8000694:	4630      	mov	r0, r6
 8000696:	f7ff ffbd 	bl	8000614 <__sinit>
 800069a:	3648      	adds	r6, #72	; 0x48
 800069c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	d503      	bpl.n	80006ac <__sfp+0x28>
 80006a4:	6833      	ldr	r3, [r6, #0]
 80006a6:	b30b      	cbz	r3, 80006ec <__sfp+0x68>
 80006a8:	6836      	ldr	r6, [r6, #0]
 80006aa:	e7f7      	b.n	800069c <__sfp+0x18>
 80006ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80006b0:	b9d5      	cbnz	r5, 80006e8 <__sfp+0x64>
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <__sfp+0x88>)
 80006b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80006b8:	60e3      	str	r3, [r4, #12]
 80006ba:	6665      	str	r5, [r4, #100]	; 0x64
 80006bc:	f000 f847 	bl	800074e <__retarget_lock_init_recursive>
 80006c0:	f7ff ff96 	bl	80005f0 <__sfp_lock_release>
 80006c4:	2208      	movs	r2, #8
 80006c6:	4629      	mov	r1, r5
 80006c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80006cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80006d0:	6025      	str	r5, [r4, #0]
 80006d2:	61a5      	str	r5, [r4, #24]
 80006d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80006d8:	f7ff ff24 	bl	8000524 <memset>
 80006dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80006e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80006e4:	4620      	mov	r0, r4
 80006e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006e8:	3468      	adds	r4, #104	; 0x68
 80006ea:	e7d9      	b.n	80006a0 <__sfp+0x1c>
 80006ec:	2104      	movs	r1, #4
 80006ee:	4638      	mov	r0, r7
 80006f0:	f7ff ff62 	bl	80005b8 <__sfmoreglue>
 80006f4:	4604      	mov	r4, r0
 80006f6:	6030      	str	r0, [r6, #0]
 80006f8:	2800      	cmp	r0, #0
 80006fa:	d1d5      	bne.n	80006a8 <__sfp+0x24>
 80006fc:	f7ff ff78 	bl	80005f0 <__sfp_lock_release>
 8000700:	230c      	movs	r3, #12
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	e7ee      	b.n	80006e4 <__sfp+0x60>
 8000706:	bf00      	nop
 8000708:	08001478 	.word	0x08001478
 800070c:	ffff0001 	.word	0xffff0001

08000710 <_fwalk_reent>:
 8000710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000714:	4606      	mov	r6, r0
 8000716:	4688      	mov	r8, r1
 8000718:	2700      	movs	r7, #0
 800071a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800071e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000722:	f1b9 0901 	subs.w	r9, r9, #1
 8000726:	d505      	bpl.n	8000734 <_fwalk_reent+0x24>
 8000728:	6824      	ldr	r4, [r4, #0]
 800072a:	2c00      	cmp	r4, #0
 800072c:	d1f7      	bne.n	800071e <_fwalk_reent+0xe>
 800072e:	4638      	mov	r0, r7
 8000730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000734:	89ab      	ldrh	r3, [r5, #12]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d907      	bls.n	800074a <_fwalk_reent+0x3a>
 800073a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800073e:	3301      	adds	r3, #1
 8000740:	d003      	beq.n	800074a <_fwalk_reent+0x3a>
 8000742:	4629      	mov	r1, r5
 8000744:	4630      	mov	r0, r6
 8000746:	47c0      	blx	r8
 8000748:	4307      	orrs	r7, r0
 800074a:	3568      	adds	r5, #104	; 0x68
 800074c:	e7e9      	b.n	8000722 <_fwalk_reent+0x12>

0800074e <__retarget_lock_init_recursive>:
 800074e:	4770      	bx	lr

08000750 <__retarget_lock_acquire_recursive>:
 8000750:	4770      	bx	lr

08000752 <__retarget_lock_release_recursive>:
 8000752:	4770      	bx	lr

08000754 <sbrk_aligned>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	4e0e      	ldr	r6, [pc, #56]	; (8000790 <sbrk_aligned+0x3c>)
 8000758:	460c      	mov	r4, r1
 800075a:	6831      	ldr	r1, [r6, #0]
 800075c:	4605      	mov	r5, r0
 800075e:	b911      	cbnz	r1, 8000766 <sbrk_aligned+0x12>
 8000760:	f000 fb7a 	bl	8000e58 <_sbrk_r>
 8000764:	6030      	str	r0, [r6, #0]
 8000766:	4621      	mov	r1, r4
 8000768:	4628      	mov	r0, r5
 800076a:	f000 fb75 	bl	8000e58 <_sbrk_r>
 800076e:	1c43      	adds	r3, r0, #1
 8000770:	d00a      	beq.n	8000788 <sbrk_aligned+0x34>
 8000772:	1cc4      	adds	r4, r0, #3
 8000774:	f024 0403 	bic.w	r4, r4, #3
 8000778:	42a0      	cmp	r0, r4
 800077a:	d007      	beq.n	800078c <sbrk_aligned+0x38>
 800077c:	1a21      	subs	r1, r4, r0
 800077e:	4628      	mov	r0, r5
 8000780:	f000 fb6a 	bl	8000e58 <_sbrk_r>
 8000784:	3001      	adds	r0, #1
 8000786:	d101      	bne.n	800078c <sbrk_aligned+0x38>
 8000788:	f04f 34ff 	mov.w	r4, #4294967295
 800078c:	4620      	mov	r0, r4
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	20000094 	.word	0x20000094

08000794 <_malloc_r>:
 8000794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000798:	1ccd      	adds	r5, r1, #3
 800079a:	f025 0503 	bic.w	r5, r5, #3
 800079e:	3508      	adds	r5, #8
 80007a0:	2d0c      	cmp	r5, #12
 80007a2:	bf38      	it	cc
 80007a4:	250c      	movcc	r5, #12
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	4607      	mov	r7, r0
 80007aa:	db01      	blt.n	80007b0 <_malloc_r+0x1c>
 80007ac:	42a9      	cmp	r1, r5
 80007ae:	d905      	bls.n	80007bc <_malloc_r+0x28>
 80007b0:	230c      	movs	r3, #12
 80007b2:	2600      	movs	r6, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4630      	mov	r0, r6
 80007b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007bc:	4e2e      	ldr	r6, [pc, #184]	; (8000878 <_malloc_r+0xe4>)
 80007be:	f000 fdc5 	bl	800134c <__malloc_lock>
 80007c2:	6833      	ldr	r3, [r6, #0]
 80007c4:	461c      	mov	r4, r3
 80007c6:	bb34      	cbnz	r4, 8000816 <_malloc_r+0x82>
 80007c8:	4629      	mov	r1, r5
 80007ca:	4638      	mov	r0, r7
 80007cc:	f7ff ffc2 	bl	8000754 <sbrk_aligned>
 80007d0:	1c43      	adds	r3, r0, #1
 80007d2:	4604      	mov	r4, r0
 80007d4:	d14d      	bne.n	8000872 <_malloc_r+0xde>
 80007d6:	6834      	ldr	r4, [r6, #0]
 80007d8:	4626      	mov	r6, r4
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d140      	bne.n	8000860 <_malloc_r+0xcc>
 80007de:	6823      	ldr	r3, [r4, #0]
 80007e0:	4631      	mov	r1, r6
 80007e2:	4638      	mov	r0, r7
 80007e4:	eb04 0803 	add.w	r8, r4, r3
 80007e8:	f000 fb36 	bl	8000e58 <_sbrk_r>
 80007ec:	4580      	cmp	r8, r0
 80007ee:	d13a      	bne.n	8000866 <_malloc_r+0xd2>
 80007f0:	6821      	ldr	r1, [r4, #0]
 80007f2:	3503      	adds	r5, #3
 80007f4:	1a6d      	subs	r5, r5, r1
 80007f6:	f025 0503 	bic.w	r5, r5, #3
 80007fa:	3508      	adds	r5, #8
 80007fc:	2d0c      	cmp	r5, #12
 80007fe:	bf38      	it	cc
 8000800:	250c      	movcc	r5, #12
 8000802:	4638      	mov	r0, r7
 8000804:	4629      	mov	r1, r5
 8000806:	f7ff ffa5 	bl	8000754 <sbrk_aligned>
 800080a:	3001      	adds	r0, #1
 800080c:	d02b      	beq.n	8000866 <_malloc_r+0xd2>
 800080e:	6823      	ldr	r3, [r4, #0]
 8000810:	442b      	add	r3, r5
 8000812:	6023      	str	r3, [r4, #0]
 8000814:	e00e      	b.n	8000834 <_malloc_r+0xa0>
 8000816:	6822      	ldr	r2, [r4, #0]
 8000818:	1b52      	subs	r2, r2, r5
 800081a:	d41e      	bmi.n	800085a <_malloc_r+0xc6>
 800081c:	2a0b      	cmp	r2, #11
 800081e:	d916      	bls.n	800084e <_malloc_r+0xba>
 8000820:	1961      	adds	r1, r4, r5
 8000822:	42a3      	cmp	r3, r4
 8000824:	6025      	str	r5, [r4, #0]
 8000826:	bf18      	it	ne
 8000828:	6059      	strne	r1, [r3, #4]
 800082a:	6863      	ldr	r3, [r4, #4]
 800082c:	bf08      	it	eq
 800082e:	6031      	streq	r1, [r6, #0]
 8000830:	5162      	str	r2, [r4, r5]
 8000832:	604b      	str	r3, [r1, #4]
 8000834:	4638      	mov	r0, r7
 8000836:	f104 060b 	add.w	r6, r4, #11
 800083a:	f000 fd8d 	bl	8001358 <__malloc_unlock>
 800083e:	f026 0607 	bic.w	r6, r6, #7
 8000842:	1d23      	adds	r3, r4, #4
 8000844:	1af2      	subs	r2, r6, r3
 8000846:	d0b6      	beq.n	80007b6 <_malloc_r+0x22>
 8000848:	1b9b      	subs	r3, r3, r6
 800084a:	50a3      	str	r3, [r4, r2]
 800084c:	e7b3      	b.n	80007b6 <_malloc_r+0x22>
 800084e:	6862      	ldr	r2, [r4, #4]
 8000850:	42a3      	cmp	r3, r4
 8000852:	bf0c      	ite	eq
 8000854:	6032      	streq	r2, [r6, #0]
 8000856:	605a      	strne	r2, [r3, #4]
 8000858:	e7ec      	b.n	8000834 <_malloc_r+0xa0>
 800085a:	4623      	mov	r3, r4
 800085c:	6864      	ldr	r4, [r4, #4]
 800085e:	e7b2      	b.n	80007c6 <_malloc_r+0x32>
 8000860:	4634      	mov	r4, r6
 8000862:	6876      	ldr	r6, [r6, #4]
 8000864:	e7b9      	b.n	80007da <_malloc_r+0x46>
 8000866:	230c      	movs	r3, #12
 8000868:	4638      	mov	r0, r7
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	f000 fd74 	bl	8001358 <__malloc_unlock>
 8000870:	e7a1      	b.n	80007b6 <_malloc_r+0x22>
 8000872:	6025      	str	r5, [r4, #0]
 8000874:	e7de      	b.n	8000834 <_malloc_r+0xa0>
 8000876:	bf00      	nop
 8000878:	20000090 	.word	0x20000090

0800087c <__sfputc_r>:
 800087c:	6893      	ldr	r3, [r2, #8]
 800087e:	b410      	push	{r4}
 8000880:	3b01      	subs	r3, #1
 8000882:	2b00      	cmp	r3, #0
 8000884:	6093      	str	r3, [r2, #8]
 8000886:	da07      	bge.n	8000898 <__sfputc_r+0x1c>
 8000888:	6994      	ldr	r4, [r2, #24]
 800088a:	42a3      	cmp	r3, r4
 800088c:	db01      	blt.n	8000892 <__sfputc_r+0x16>
 800088e:	290a      	cmp	r1, #10
 8000890:	d102      	bne.n	8000898 <__sfputc_r+0x1c>
 8000892:	bc10      	pop	{r4}
 8000894:	f000 bb34 	b.w	8000f00 <__swbuf_r>
 8000898:	6813      	ldr	r3, [r2, #0]
 800089a:	1c58      	adds	r0, r3, #1
 800089c:	6010      	str	r0, [r2, #0]
 800089e:	7019      	strb	r1, [r3, #0]
 80008a0:	4608      	mov	r0, r1
 80008a2:	bc10      	pop	{r4}
 80008a4:	4770      	bx	lr

080008a6 <__sfputs_r>:
 80008a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a8:	4606      	mov	r6, r0
 80008aa:	460f      	mov	r7, r1
 80008ac:	4614      	mov	r4, r2
 80008ae:	18d5      	adds	r5, r2, r3
 80008b0:	42ac      	cmp	r4, r5
 80008b2:	d101      	bne.n	80008b8 <__sfputs_r+0x12>
 80008b4:	2000      	movs	r0, #0
 80008b6:	e007      	b.n	80008c8 <__sfputs_r+0x22>
 80008b8:	463a      	mov	r2, r7
 80008ba:	4630      	mov	r0, r6
 80008bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008c0:	f7ff ffdc 	bl	800087c <__sfputc_r>
 80008c4:	1c43      	adds	r3, r0, #1
 80008c6:	d1f3      	bne.n	80008b0 <__sfputs_r+0xa>
 80008c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080008cc <_vfiprintf_r>:
 80008cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d0:	460d      	mov	r5, r1
 80008d2:	4614      	mov	r4, r2
 80008d4:	4698      	mov	r8, r3
 80008d6:	4606      	mov	r6, r0
 80008d8:	b09d      	sub	sp, #116	; 0x74
 80008da:	b118      	cbz	r0, 80008e4 <_vfiprintf_r+0x18>
 80008dc:	6983      	ldr	r3, [r0, #24]
 80008de:	b90b      	cbnz	r3, 80008e4 <_vfiprintf_r+0x18>
 80008e0:	f7ff fe98 	bl	8000614 <__sinit>
 80008e4:	4b89      	ldr	r3, [pc, #548]	; (8000b0c <_vfiprintf_r+0x240>)
 80008e6:	429d      	cmp	r5, r3
 80008e8:	d11b      	bne.n	8000922 <_vfiprintf_r+0x56>
 80008ea:	6875      	ldr	r5, [r6, #4]
 80008ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80008ee:	07d9      	lsls	r1, r3, #31
 80008f0:	d405      	bmi.n	80008fe <_vfiprintf_r+0x32>
 80008f2:	89ab      	ldrh	r3, [r5, #12]
 80008f4:	059a      	lsls	r2, r3, #22
 80008f6:	d402      	bmi.n	80008fe <_vfiprintf_r+0x32>
 80008f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80008fa:	f7ff ff29 	bl	8000750 <__retarget_lock_acquire_recursive>
 80008fe:	89ab      	ldrh	r3, [r5, #12]
 8000900:	071b      	lsls	r3, r3, #28
 8000902:	d501      	bpl.n	8000908 <_vfiprintf_r+0x3c>
 8000904:	692b      	ldr	r3, [r5, #16]
 8000906:	b9eb      	cbnz	r3, 8000944 <_vfiprintf_r+0x78>
 8000908:	4629      	mov	r1, r5
 800090a:	4630      	mov	r0, r6
 800090c:	f000 fb5c 	bl	8000fc8 <__swsetup_r>
 8000910:	b1c0      	cbz	r0, 8000944 <_vfiprintf_r+0x78>
 8000912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000914:	07dc      	lsls	r4, r3, #31
 8000916:	d50e      	bpl.n	8000936 <_vfiprintf_r+0x6a>
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	b01d      	add	sp, #116	; 0x74
 800091e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000922:	4b7b      	ldr	r3, [pc, #492]	; (8000b10 <_vfiprintf_r+0x244>)
 8000924:	429d      	cmp	r5, r3
 8000926:	d101      	bne.n	800092c <_vfiprintf_r+0x60>
 8000928:	68b5      	ldr	r5, [r6, #8]
 800092a:	e7df      	b.n	80008ec <_vfiprintf_r+0x20>
 800092c:	4b79      	ldr	r3, [pc, #484]	; (8000b14 <_vfiprintf_r+0x248>)
 800092e:	429d      	cmp	r5, r3
 8000930:	bf08      	it	eq
 8000932:	68f5      	ldreq	r5, [r6, #12]
 8000934:	e7da      	b.n	80008ec <_vfiprintf_r+0x20>
 8000936:	89ab      	ldrh	r3, [r5, #12]
 8000938:	0598      	lsls	r0, r3, #22
 800093a:	d4ed      	bmi.n	8000918 <_vfiprintf_r+0x4c>
 800093c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800093e:	f7ff ff08 	bl	8000752 <__retarget_lock_release_recursive>
 8000942:	e7e9      	b.n	8000918 <_vfiprintf_r+0x4c>
 8000944:	2300      	movs	r3, #0
 8000946:	9309      	str	r3, [sp, #36]	; 0x24
 8000948:	2320      	movs	r3, #32
 800094a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800094e:	2330      	movs	r3, #48	; 0x30
 8000950:	f04f 0901 	mov.w	r9, #1
 8000954:	f8cd 800c 	str.w	r8, [sp, #12]
 8000958:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000b18 <_vfiprintf_r+0x24c>
 800095c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000960:	4623      	mov	r3, r4
 8000962:	469a      	mov	sl, r3
 8000964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000968:	b10a      	cbz	r2, 800096e <_vfiprintf_r+0xa2>
 800096a:	2a25      	cmp	r2, #37	; 0x25
 800096c:	d1f9      	bne.n	8000962 <_vfiprintf_r+0x96>
 800096e:	ebba 0b04 	subs.w	fp, sl, r4
 8000972:	d00b      	beq.n	800098c <_vfiprintf_r+0xc0>
 8000974:	465b      	mov	r3, fp
 8000976:	4622      	mov	r2, r4
 8000978:	4629      	mov	r1, r5
 800097a:	4630      	mov	r0, r6
 800097c:	f7ff ff93 	bl	80008a6 <__sfputs_r>
 8000980:	3001      	adds	r0, #1
 8000982:	f000 80aa 	beq.w	8000ada <_vfiprintf_r+0x20e>
 8000986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000988:	445a      	add	r2, fp
 800098a:	9209      	str	r2, [sp, #36]	; 0x24
 800098c:	f89a 3000 	ldrb.w	r3, [sl]
 8000990:	2b00      	cmp	r3, #0
 8000992:	f000 80a2 	beq.w	8000ada <_vfiprintf_r+0x20e>
 8000996:	2300      	movs	r3, #0
 8000998:	f04f 32ff 	mov.w	r2, #4294967295
 800099c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009a0:	f10a 0a01 	add.w	sl, sl, #1
 80009a4:	9304      	str	r3, [sp, #16]
 80009a6:	9307      	str	r3, [sp, #28]
 80009a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80009ac:	931a      	str	r3, [sp, #104]	; 0x68
 80009ae:	4654      	mov	r4, sl
 80009b0:	2205      	movs	r2, #5
 80009b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009b6:	4858      	ldr	r0, [pc, #352]	; (8000b18 <_vfiprintf_r+0x24c>)
 80009b8:	f000 fcba 	bl	8001330 <memchr>
 80009bc:	9a04      	ldr	r2, [sp, #16]
 80009be:	b9d8      	cbnz	r0, 80009f8 <_vfiprintf_r+0x12c>
 80009c0:	06d1      	lsls	r1, r2, #27
 80009c2:	bf44      	itt	mi
 80009c4:	2320      	movmi	r3, #32
 80009c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80009ca:	0713      	lsls	r3, r2, #28
 80009cc:	bf44      	itt	mi
 80009ce:	232b      	movmi	r3, #43	; 0x2b
 80009d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80009d4:	f89a 3000 	ldrb.w	r3, [sl]
 80009d8:	2b2a      	cmp	r3, #42	; 0x2a
 80009da:	d015      	beq.n	8000a08 <_vfiprintf_r+0x13c>
 80009dc:	4654      	mov	r4, sl
 80009de:	2000      	movs	r0, #0
 80009e0:	f04f 0c0a 	mov.w	ip, #10
 80009e4:	9a07      	ldr	r2, [sp, #28]
 80009e6:	4621      	mov	r1, r4
 80009e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009ec:	3b30      	subs	r3, #48	; 0x30
 80009ee:	2b09      	cmp	r3, #9
 80009f0:	d94e      	bls.n	8000a90 <_vfiprintf_r+0x1c4>
 80009f2:	b1b0      	cbz	r0, 8000a22 <_vfiprintf_r+0x156>
 80009f4:	9207      	str	r2, [sp, #28]
 80009f6:	e014      	b.n	8000a22 <_vfiprintf_r+0x156>
 80009f8:	eba0 0308 	sub.w	r3, r0, r8
 80009fc:	fa09 f303 	lsl.w	r3, r9, r3
 8000a00:	4313      	orrs	r3, r2
 8000a02:	46a2      	mov	sl, r4
 8000a04:	9304      	str	r3, [sp, #16]
 8000a06:	e7d2      	b.n	80009ae <_vfiprintf_r+0xe2>
 8000a08:	9b03      	ldr	r3, [sp, #12]
 8000a0a:	1d19      	adds	r1, r3, #4
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	9103      	str	r1, [sp, #12]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	bfbb      	ittet	lt
 8000a14:	425b      	neglt	r3, r3
 8000a16:	f042 0202 	orrlt.w	r2, r2, #2
 8000a1a:	9307      	strge	r3, [sp, #28]
 8000a1c:	9307      	strlt	r3, [sp, #28]
 8000a1e:	bfb8      	it	lt
 8000a20:	9204      	strlt	r2, [sp, #16]
 8000a22:	7823      	ldrb	r3, [r4, #0]
 8000a24:	2b2e      	cmp	r3, #46	; 0x2e
 8000a26:	d10c      	bne.n	8000a42 <_vfiprintf_r+0x176>
 8000a28:	7863      	ldrb	r3, [r4, #1]
 8000a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8000a2c:	d135      	bne.n	8000a9a <_vfiprintf_r+0x1ce>
 8000a2e:	9b03      	ldr	r3, [sp, #12]
 8000a30:	3402      	adds	r4, #2
 8000a32:	1d1a      	adds	r2, r3, #4
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	9203      	str	r2, [sp, #12]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bfb8      	it	lt
 8000a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8000a40:	9305      	str	r3, [sp, #20]
 8000a42:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000b1c <_vfiprintf_r+0x250>
 8000a46:	2203      	movs	r2, #3
 8000a48:	4650      	mov	r0, sl
 8000a4a:	7821      	ldrb	r1, [r4, #0]
 8000a4c:	f000 fc70 	bl	8001330 <memchr>
 8000a50:	b140      	cbz	r0, 8000a64 <_vfiprintf_r+0x198>
 8000a52:	2340      	movs	r3, #64	; 0x40
 8000a54:	eba0 000a 	sub.w	r0, r0, sl
 8000a58:	fa03 f000 	lsl.w	r0, r3, r0
 8000a5c:	9b04      	ldr	r3, [sp, #16]
 8000a5e:	3401      	adds	r4, #1
 8000a60:	4303      	orrs	r3, r0
 8000a62:	9304      	str	r3, [sp, #16]
 8000a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a68:	2206      	movs	r2, #6
 8000a6a:	482d      	ldr	r0, [pc, #180]	; (8000b20 <_vfiprintf_r+0x254>)
 8000a6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000a70:	f000 fc5e 	bl	8001330 <memchr>
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d03f      	beq.n	8000af8 <_vfiprintf_r+0x22c>
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <_vfiprintf_r+0x258>)
 8000a7a:	bb1b      	cbnz	r3, 8000ac4 <_vfiprintf_r+0x1f8>
 8000a7c:	9b03      	ldr	r3, [sp, #12]
 8000a7e:	3307      	adds	r3, #7
 8000a80:	f023 0307 	bic.w	r3, r3, #7
 8000a84:	3308      	adds	r3, #8
 8000a86:	9303      	str	r3, [sp, #12]
 8000a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a8a:	443b      	add	r3, r7
 8000a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8000a8e:	e767      	b.n	8000960 <_vfiprintf_r+0x94>
 8000a90:	460c      	mov	r4, r1
 8000a92:	2001      	movs	r0, #1
 8000a94:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a98:	e7a5      	b.n	80009e6 <_vfiprintf_r+0x11a>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f04f 0c0a 	mov.w	ip, #10
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	3401      	adds	r4, #1
 8000aa4:	9305      	str	r3, [sp, #20]
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000aac:	3a30      	subs	r2, #48	; 0x30
 8000aae:	2a09      	cmp	r2, #9
 8000ab0:	d903      	bls.n	8000aba <_vfiprintf_r+0x1ee>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0c5      	beq.n	8000a42 <_vfiprintf_r+0x176>
 8000ab6:	9105      	str	r1, [sp, #20]
 8000ab8:	e7c3      	b.n	8000a42 <_vfiprintf_r+0x176>
 8000aba:	4604      	mov	r4, r0
 8000abc:	2301      	movs	r3, #1
 8000abe:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ac2:	e7f0      	b.n	8000aa6 <_vfiprintf_r+0x1da>
 8000ac4:	ab03      	add	r3, sp, #12
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	462a      	mov	r2, r5
 8000aca:	4630      	mov	r0, r6
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <_vfiprintf_r+0x25c>)
 8000ace:	a904      	add	r1, sp, #16
 8000ad0:	f3af 8000 	nop.w
 8000ad4:	4607      	mov	r7, r0
 8000ad6:	1c78      	adds	r0, r7, #1
 8000ad8:	d1d6      	bne.n	8000a88 <_vfiprintf_r+0x1bc>
 8000ada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000adc:	07d9      	lsls	r1, r3, #31
 8000ade:	d405      	bmi.n	8000aec <_vfiprintf_r+0x220>
 8000ae0:	89ab      	ldrh	r3, [r5, #12]
 8000ae2:	059a      	lsls	r2, r3, #22
 8000ae4:	d402      	bmi.n	8000aec <_vfiprintf_r+0x220>
 8000ae6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ae8:	f7ff fe33 	bl	8000752 <__retarget_lock_release_recursive>
 8000aec:	89ab      	ldrh	r3, [r5, #12]
 8000aee:	065b      	lsls	r3, r3, #25
 8000af0:	f53f af12 	bmi.w	8000918 <_vfiprintf_r+0x4c>
 8000af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000af6:	e711      	b.n	800091c <_vfiprintf_r+0x50>
 8000af8:	ab03      	add	r3, sp, #12
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	462a      	mov	r2, r5
 8000afe:	4630      	mov	r0, r6
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <_vfiprintf_r+0x25c>)
 8000b02:	a904      	add	r1, sp, #16
 8000b04:	f000 f882 	bl	8000c0c <_printf_i>
 8000b08:	e7e4      	b.n	8000ad4 <_vfiprintf_r+0x208>
 8000b0a:	bf00      	nop
 8000b0c:	0800149c 	.word	0x0800149c
 8000b10:	080014bc 	.word	0x080014bc
 8000b14:	0800147c 	.word	0x0800147c
 8000b18:	080014dc 	.word	0x080014dc
 8000b1c:	080014e2 	.word	0x080014e2
 8000b20:	080014e6 	.word	0x080014e6
 8000b24:	00000000 	.word	0x00000000
 8000b28:	080008a7 	.word	0x080008a7

08000b2c <_printf_common>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	4616      	mov	r6, r2
 8000b32:	4699      	mov	r9, r3
 8000b34:	688a      	ldr	r2, [r1, #8]
 8000b36:	690b      	ldr	r3, [r1, #16]
 8000b38:	4607      	mov	r7, r0
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	bfb8      	it	lt
 8000b3e:	4613      	movlt	r3, r2
 8000b40:	6033      	str	r3, [r6, #0]
 8000b42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000b46:	460c      	mov	r4, r1
 8000b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b4c:	b10a      	cbz	r2, 8000b52 <_printf_common+0x26>
 8000b4e:	3301      	adds	r3, #1
 8000b50:	6033      	str	r3, [r6, #0]
 8000b52:	6823      	ldr	r3, [r4, #0]
 8000b54:	0699      	lsls	r1, r3, #26
 8000b56:	bf42      	ittt	mi
 8000b58:	6833      	ldrmi	r3, [r6, #0]
 8000b5a:	3302      	addmi	r3, #2
 8000b5c:	6033      	strmi	r3, [r6, #0]
 8000b5e:	6825      	ldr	r5, [r4, #0]
 8000b60:	f015 0506 	ands.w	r5, r5, #6
 8000b64:	d106      	bne.n	8000b74 <_printf_common+0x48>
 8000b66:	f104 0a19 	add.w	sl, r4, #25
 8000b6a:	68e3      	ldr	r3, [r4, #12]
 8000b6c:	6832      	ldr	r2, [r6, #0]
 8000b6e:	1a9b      	subs	r3, r3, r2
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	dc28      	bgt.n	8000bc6 <_printf_common+0x9a>
 8000b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000b78:	1e13      	subs	r3, r2, #0
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	bf18      	it	ne
 8000b7e:	2301      	movne	r3, #1
 8000b80:	0692      	lsls	r2, r2, #26
 8000b82:	d42d      	bmi.n	8000be0 <_printf_common+0xb4>
 8000b84:	4649      	mov	r1, r9
 8000b86:	4638      	mov	r0, r7
 8000b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000b8c:	47c0      	blx	r8
 8000b8e:	3001      	adds	r0, #1
 8000b90:	d020      	beq.n	8000bd4 <_printf_common+0xa8>
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	68e5      	ldr	r5, [r4, #12]
 8000b96:	f003 0306 	and.w	r3, r3, #6
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf18      	it	ne
 8000b9e:	2500      	movne	r5, #0
 8000ba0:	6832      	ldr	r2, [r6, #0]
 8000ba2:	f04f 0600 	mov.w	r6, #0
 8000ba6:	68a3      	ldr	r3, [r4, #8]
 8000ba8:	bf08      	it	eq
 8000baa:	1aad      	subeq	r5, r5, r2
 8000bac:	6922      	ldr	r2, [r4, #16]
 8000bae:	bf08      	it	eq
 8000bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	bfc4      	itt	gt
 8000bb8:	1a9b      	subgt	r3, r3, r2
 8000bba:	18ed      	addgt	r5, r5, r3
 8000bbc:	341a      	adds	r4, #26
 8000bbe:	42b5      	cmp	r5, r6
 8000bc0:	d11a      	bne.n	8000bf8 <_printf_common+0xcc>
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	e008      	b.n	8000bd8 <_printf_common+0xac>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	4652      	mov	r2, sl
 8000bca:	4649      	mov	r1, r9
 8000bcc:	4638      	mov	r0, r7
 8000bce:	47c0      	blx	r8
 8000bd0:	3001      	adds	r0, #1
 8000bd2:	d103      	bne.n	8000bdc <_printf_common+0xb0>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bdc:	3501      	adds	r5, #1
 8000bde:	e7c4      	b.n	8000b6a <_printf_common+0x3e>
 8000be0:	2030      	movs	r0, #48	; 0x30
 8000be2:	18e1      	adds	r1, r4, r3
 8000be4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000be8:	1c5a      	adds	r2, r3, #1
 8000bea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000bee:	4422      	add	r2, r4
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000bf6:	e7c5      	b.n	8000b84 <_printf_common+0x58>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	4622      	mov	r2, r4
 8000bfc:	4649      	mov	r1, r9
 8000bfe:	4638      	mov	r0, r7
 8000c00:	47c0      	blx	r8
 8000c02:	3001      	adds	r0, #1
 8000c04:	d0e6      	beq.n	8000bd4 <_printf_common+0xa8>
 8000c06:	3601      	adds	r6, #1
 8000c08:	e7d9      	b.n	8000bbe <_printf_common+0x92>
	...

08000c0c <_printf_i>:
 8000c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	7e0f      	ldrb	r7, [r1, #24]
 8000c12:	4691      	mov	r9, r2
 8000c14:	2f78      	cmp	r7, #120	; 0x78
 8000c16:	4680      	mov	r8, r0
 8000c18:	460c      	mov	r4, r1
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000c22:	d807      	bhi.n	8000c34 <_printf_i+0x28>
 8000c24:	2f62      	cmp	r7, #98	; 0x62
 8000c26:	d80a      	bhi.n	8000c3e <_printf_i+0x32>
 8000c28:	2f00      	cmp	r7, #0
 8000c2a:	f000 80d9 	beq.w	8000de0 <_printf_i+0x1d4>
 8000c2e:	2f58      	cmp	r7, #88	; 0x58
 8000c30:	f000 80a4 	beq.w	8000d7c <_printf_i+0x170>
 8000c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000c3c:	e03a      	b.n	8000cb4 <_printf_i+0xa8>
 8000c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000c42:	2b15      	cmp	r3, #21
 8000c44:	d8f6      	bhi.n	8000c34 <_printf_i+0x28>
 8000c46:	a101      	add	r1, pc, #4	; (adr r1, 8000c4c <_printf_i+0x40>)
 8000c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c4c:	08000ca5 	.word	0x08000ca5
 8000c50:	08000cb9 	.word	0x08000cb9
 8000c54:	08000c35 	.word	0x08000c35
 8000c58:	08000c35 	.word	0x08000c35
 8000c5c:	08000c35 	.word	0x08000c35
 8000c60:	08000c35 	.word	0x08000c35
 8000c64:	08000cb9 	.word	0x08000cb9
 8000c68:	08000c35 	.word	0x08000c35
 8000c6c:	08000c35 	.word	0x08000c35
 8000c70:	08000c35 	.word	0x08000c35
 8000c74:	08000c35 	.word	0x08000c35
 8000c78:	08000dc7 	.word	0x08000dc7
 8000c7c:	08000ce9 	.word	0x08000ce9
 8000c80:	08000da9 	.word	0x08000da9
 8000c84:	08000c35 	.word	0x08000c35
 8000c88:	08000c35 	.word	0x08000c35
 8000c8c:	08000de9 	.word	0x08000de9
 8000c90:	08000c35 	.word	0x08000c35
 8000c94:	08000ce9 	.word	0x08000ce9
 8000c98:	08000c35 	.word	0x08000c35
 8000c9c:	08000c35 	.word	0x08000c35
 8000ca0:	08000db1 	.word	0x08000db1
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	1d1a      	adds	r2, r3, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	602a      	str	r2, [r5, #0]
 8000cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e0a4      	b.n	8000e02 <_printf_i+0x1f6>
 8000cb8:	6820      	ldr	r0, [r4, #0]
 8000cba:	6829      	ldr	r1, [r5, #0]
 8000cbc:	0606      	lsls	r6, r0, #24
 8000cbe:	f101 0304 	add.w	r3, r1, #4
 8000cc2:	d50a      	bpl.n	8000cda <_printf_i+0xce>
 8000cc4:	680e      	ldr	r6, [r1, #0]
 8000cc6:	602b      	str	r3, [r5, #0]
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	da03      	bge.n	8000cd4 <_printf_i+0xc8>
 8000ccc:	232d      	movs	r3, #45	; 0x2d
 8000cce:	4276      	negs	r6, r6
 8000cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	485e      	ldr	r0, [pc, #376]	; (8000e50 <_printf_i+0x244>)
 8000cd8:	e019      	b.n	8000d0e <_printf_i+0x102>
 8000cda:	680e      	ldr	r6, [r1, #0]
 8000cdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000ce0:	602b      	str	r3, [r5, #0]
 8000ce2:	bf18      	it	ne
 8000ce4:	b236      	sxthne	r6, r6
 8000ce6:	e7ef      	b.n	8000cc8 <_printf_i+0xbc>
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	6820      	ldr	r0, [r4, #0]
 8000cec:	1d19      	adds	r1, r3, #4
 8000cee:	6029      	str	r1, [r5, #0]
 8000cf0:	0601      	lsls	r1, r0, #24
 8000cf2:	d501      	bpl.n	8000cf8 <_printf_i+0xec>
 8000cf4:	681e      	ldr	r6, [r3, #0]
 8000cf6:	e002      	b.n	8000cfe <_printf_i+0xf2>
 8000cf8:	0646      	lsls	r6, r0, #25
 8000cfa:	d5fb      	bpl.n	8000cf4 <_printf_i+0xe8>
 8000cfc:	881e      	ldrh	r6, [r3, #0]
 8000cfe:	2f6f      	cmp	r7, #111	; 0x6f
 8000d00:	bf0c      	ite	eq
 8000d02:	2308      	moveq	r3, #8
 8000d04:	230a      	movne	r3, #10
 8000d06:	4852      	ldr	r0, [pc, #328]	; (8000e50 <_printf_i+0x244>)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d0e:	6865      	ldr	r5, [r4, #4]
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	bfa8      	it	ge
 8000d14:	6821      	ldrge	r1, [r4, #0]
 8000d16:	60a5      	str	r5, [r4, #8]
 8000d18:	bfa4      	itt	ge
 8000d1a:	f021 0104 	bicge.w	r1, r1, #4
 8000d1e:	6021      	strge	r1, [r4, #0]
 8000d20:	b90e      	cbnz	r6, 8000d26 <_printf_i+0x11a>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d04d      	beq.n	8000dc2 <_printf_i+0x1b6>
 8000d26:	4615      	mov	r5, r2
 8000d28:	fbb6 f1f3 	udiv	r1, r6, r3
 8000d2c:	fb03 6711 	mls	r7, r3, r1, r6
 8000d30:	5dc7      	ldrb	r7, [r0, r7]
 8000d32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000d36:	4637      	mov	r7, r6
 8000d38:	42bb      	cmp	r3, r7
 8000d3a:	460e      	mov	r6, r1
 8000d3c:	d9f4      	bls.n	8000d28 <_printf_i+0x11c>
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d10b      	bne.n	8000d5a <_printf_i+0x14e>
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	07de      	lsls	r6, r3, #31
 8000d46:	d508      	bpl.n	8000d5a <_printf_i+0x14e>
 8000d48:	6923      	ldr	r3, [r4, #16]
 8000d4a:	6861      	ldr	r1, [r4, #4]
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	bfde      	ittt	le
 8000d50:	2330      	movle	r3, #48	; 0x30
 8000d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000d56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000d5a:	1b52      	subs	r2, r2, r5
 8000d5c:	6122      	str	r2, [r4, #16]
 8000d5e:	464b      	mov	r3, r9
 8000d60:	4621      	mov	r1, r4
 8000d62:	4640      	mov	r0, r8
 8000d64:	f8cd a000 	str.w	sl, [sp]
 8000d68:	aa03      	add	r2, sp, #12
 8000d6a:	f7ff fedf 	bl	8000b2c <_printf_common>
 8000d6e:	3001      	adds	r0, #1
 8000d70:	d14c      	bne.n	8000e0c <_printf_i+0x200>
 8000d72:	f04f 30ff 	mov.w	r0, #4294967295
 8000d76:	b004      	add	sp, #16
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	4834      	ldr	r0, [pc, #208]	; (8000e50 <_printf_i+0x244>)
 8000d7e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000d82:	6829      	ldr	r1, [r5, #0]
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	f851 6b04 	ldr.w	r6, [r1], #4
 8000d8a:	6029      	str	r1, [r5, #0]
 8000d8c:	061d      	lsls	r5, r3, #24
 8000d8e:	d514      	bpl.n	8000dba <_printf_i+0x1ae>
 8000d90:	07df      	lsls	r7, r3, #31
 8000d92:	bf44      	itt	mi
 8000d94:	f043 0320 	orrmi.w	r3, r3, #32
 8000d98:	6023      	strmi	r3, [r4, #0]
 8000d9a:	b91e      	cbnz	r6, 8000da4 <_printf_i+0x198>
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	f023 0320 	bic.w	r3, r3, #32
 8000da2:	6023      	str	r3, [r4, #0]
 8000da4:	2310      	movs	r3, #16
 8000da6:	e7af      	b.n	8000d08 <_printf_i+0xfc>
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	f043 0320 	orr.w	r3, r3, #32
 8000dae:	6023      	str	r3, [r4, #0]
 8000db0:	2378      	movs	r3, #120	; 0x78
 8000db2:	4828      	ldr	r0, [pc, #160]	; (8000e54 <_printf_i+0x248>)
 8000db4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000db8:	e7e3      	b.n	8000d82 <_printf_i+0x176>
 8000dba:	0659      	lsls	r1, r3, #25
 8000dbc:	bf48      	it	mi
 8000dbe:	b2b6      	uxthmi	r6, r6
 8000dc0:	e7e6      	b.n	8000d90 <_printf_i+0x184>
 8000dc2:	4615      	mov	r5, r2
 8000dc4:	e7bb      	b.n	8000d3e <_printf_i+0x132>
 8000dc6:	682b      	ldr	r3, [r5, #0]
 8000dc8:	6826      	ldr	r6, [r4, #0]
 8000dca:	1d18      	adds	r0, r3, #4
 8000dcc:	6961      	ldr	r1, [r4, #20]
 8000dce:	6028      	str	r0, [r5, #0]
 8000dd0:	0635      	lsls	r5, r6, #24
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	d501      	bpl.n	8000dda <_printf_i+0x1ce>
 8000dd6:	6019      	str	r1, [r3, #0]
 8000dd8:	e002      	b.n	8000de0 <_printf_i+0x1d4>
 8000dda:	0670      	lsls	r0, r6, #25
 8000ddc:	d5fb      	bpl.n	8000dd6 <_printf_i+0x1ca>
 8000dde:	8019      	strh	r1, [r3, #0]
 8000de0:	2300      	movs	r3, #0
 8000de2:	4615      	mov	r5, r2
 8000de4:	6123      	str	r3, [r4, #16]
 8000de6:	e7ba      	b.n	8000d5e <_printf_i+0x152>
 8000de8:	682b      	ldr	r3, [r5, #0]
 8000dea:	2100      	movs	r1, #0
 8000dec:	1d1a      	adds	r2, r3, #4
 8000dee:	602a      	str	r2, [r5, #0]
 8000df0:	681d      	ldr	r5, [r3, #0]
 8000df2:	6862      	ldr	r2, [r4, #4]
 8000df4:	4628      	mov	r0, r5
 8000df6:	f000 fa9b 	bl	8001330 <memchr>
 8000dfa:	b108      	cbz	r0, 8000e00 <_printf_i+0x1f4>
 8000dfc:	1b40      	subs	r0, r0, r5
 8000dfe:	6060      	str	r0, [r4, #4]
 8000e00:	6863      	ldr	r3, [r4, #4]
 8000e02:	6123      	str	r3, [r4, #16]
 8000e04:	2300      	movs	r3, #0
 8000e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e0a:	e7a8      	b.n	8000d5e <_printf_i+0x152>
 8000e0c:	462a      	mov	r2, r5
 8000e0e:	4649      	mov	r1, r9
 8000e10:	4640      	mov	r0, r8
 8000e12:	6923      	ldr	r3, [r4, #16]
 8000e14:	47d0      	blx	sl
 8000e16:	3001      	adds	r0, #1
 8000e18:	d0ab      	beq.n	8000d72 <_printf_i+0x166>
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	079b      	lsls	r3, r3, #30
 8000e1e:	d413      	bmi.n	8000e48 <_printf_i+0x23c>
 8000e20:	68e0      	ldr	r0, [r4, #12]
 8000e22:	9b03      	ldr	r3, [sp, #12]
 8000e24:	4298      	cmp	r0, r3
 8000e26:	bfb8      	it	lt
 8000e28:	4618      	movlt	r0, r3
 8000e2a:	e7a4      	b.n	8000d76 <_printf_i+0x16a>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	4632      	mov	r2, r6
 8000e30:	4649      	mov	r1, r9
 8000e32:	4640      	mov	r0, r8
 8000e34:	47d0      	blx	sl
 8000e36:	3001      	adds	r0, #1
 8000e38:	d09b      	beq.n	8000d72 <_printf_i+0x166>
 8000e3a:	3501      	adds	r5, #1
 8000e3c:	68e3      	ldr	r3, [r4, #12]
 8000e3e:	9903      	ldr	r1, [sp, #12]
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	dcf2      	bgt.n	8000e2c <_printf_i+0x220>
 8000e46:	e7eb      	b.n	8000e20 <_printf_i+0x214>
 8000e48:	2500      	movs	r5, #0
 8000e4a:	f104 0619 	add.w	r6, r4, #25
 8000e4e:	e7f5      	b.n	8000e3c <_printf_i+0x230>
 8000e50:	080014ed 	.word	0x080014ed
 8000e54:	080014fe 	.word	0x080014fe

08000e58 <_sbrk_r>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	4d05      	ldr	r5, [pc, #20]	; (8000e74 <_sbrk_r+0x1c>)
 8000e5e:	4604      	mov	r4, r0
 8000e60:	4608      	mov	r0, r1
 8000e62:	602b      	str	r3, [r5, #0]
 8000e64:	f7ff fac0 	bl	80003e8 <_sbrk>
 8000e68:	1c43      	adds	r3, r0, #1
 8000e6a:	d102      	bne.n	8000e72 <_sbrk_r+0x1a>
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	b103      	cbz	r3, 8000e72 <_sbrk_r+0x1a>
 8000e70:	6023      	str	r3, [r4, #0]
 8000e72:	bd38      	pop	{r3, r4, r5, pc}
 8000e74:	20000098 	.word	0x20000098

08000e78 <__sread>:
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	460c      	mov	r4, r1
 8000e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e80:	f000 fab8 	bl	80013f4 <_read_r>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	bfab      	itete	ge
 8000e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8000e8c:	181b      	addge	r3, r3, r0
 8000e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e92:	bfac      	ite	ge
 8000e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e96:	81a3      	strhlt	r3, [r4, #12]
 8000e98:	bd10      	pop	{r4, pc}

08000e9a <__swrite>:
 8000e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e9e:	461f      	mov	r7, r3
 8000ea0:	898b      	ldrh	r3, [r1, #12]
 8000ea2:	4605      	mov	r5, r0
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	460c      	mov	r4, r1
 8000ea8:	4616      	mov	r6, r2
 8000eaa:	d505      	bpl.n	8000eb8 <__swrite+0x1e>
 8000eac:	2302      	movs	r3, #2
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eb4:	f000 f9c4 	bl	8001240 <_lseek_r>
 8000eb8:	89a3      	ldrh	r3, [r4, #12]
 8000eba:	4632      	mov	r2, r6
 8000ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ec0:	81a3      	strh	r3, [r4, #12]
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ece:	f000 b869 	b.w	8000fa4 <_write_r>

08000ed2 <__sseek>:
 8000ed2:	b510      	push	{r4, lr}
 8000ed4:	460c      	mov	r4, r1
 8000ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eda:	f000 f9b1 	bl	8001240 <_lseek_r>
 8000ede:	1c43      	adds	r3, r0, #1
 8000ee0:	89a3      	ldrh	r3, [r4, #12]
 8000ee2:	bf15      	itete	ne
 8000ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000eee:	81a3      	strheq	r3, [r4, #12]
 8000ef0:	bf18      	it	ne
 8000ef2:	81a3      	strhne	r3, [r4, #12]
 8000ef4:	bd10      	pop	{r4, pc}

08000ef6 <__sclose>:
 8000ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000efa:	f000 b8d3 	b.w	80010a4 <_close_r>
	...

08000f00 <__swbuf_r>:
 8000f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f02:	460e      	mov	r6, r1
 8000f04:	4614      	mov	r4, r2
 8000f06:	4605      	mov	r5, r0
 8000f08:	b118      	cbz	r0, 8000f12 <__swbuf_r+0x12>
 8000f0a:	6983      	ldr	r3, [r0, #24]
 8000f0c:	b90b      	cbnz	r3, 8000f12 <__swbuf_r+0x12>
 8000f0e:	f7ff fb81 	bl	8000614 <__sinit>
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <__swbuf_r+0x98>)
 8000f14:	429c      	cmp	r4, r3
 8000f16:	d12b      	bne.n	8000f70 <__swbuf_r+0x70>
 8000f18:	686c      	ldr	r4, [r5, #4]
 8000f1a:	69a3      	ldr	r3, [r4, #24]
 8000f1c:	60a3      	str	r3, [r4, #8]
 8000f1e:	89a3      	ldrh	r3, [r4, #12]
 8000f20:	071a      	lsls	r2, r3, #28
 8000f22:	d52f      	bpl.n	8000f84 <__swbuf_r+0x84>
 8000f24:	6923      	ldr	r3, [r4, #16]
 8000f26:	b36b      	cbz	r3, 8000f84 <__swbuf_r+0x84>
 8000f28:	6923      	ldr	r3, [r4, #16]
 8000f2a:	6820      	ldr	r0, [r4, #0]
 8000f2c:	b2f6      	uxtb	r6, r6
 8000f2e:	1ac0      	subs	r0, r0, r3
 8000f30:	6963      	ldr	r3, [r4, #20]
 8000f32:	4637      	mov	r7, r6
 8000f34:	4283      	cmp	r3, r0
 8000f36:	dc04      	bgt.n	8000f42 <__swbuf_r+0x42>
 8000f38:	4621      	mov	r1, r4
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	f000 f944 	bl	80011c8 <_fflush_r>
 8000f40:	bb30      	cbnz	r0, 8000f90 <__swbuf_r+0x90>
 8000f42:	68a3      	ldr	r3, [r4, #8]
 8000f44:	3001      	adds	r0, #1
 8000f46:	3b01      	subs	r3, #1
 8000f48:	60a3      	str	r3, [r4, #8]
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	6022      	str	r2, [r4, #0]
 8000f50:	701e      	strb	r6, [r3, #0]
 8000f52:	6963      	ldr	r3, [r4, #20]
 8000f54:	4283      	cmp	r3, r0
 8000f56:	d004      	beq.n	8000f62 <__swbuf_r+0x62>
 8000f58:	89a3      	ldrh	r3, [r4, #12]
 8000f5a:	07db      	lsls	r3, r3, #31
 8000f5c:	d506      	bpl.n	8000f6c <__swbuf_r+0x6c>
 8000f5e:	2e0a      	cmp	r6, #10
 8000f60:	d104      	bne.n	8000f6c <__swbuf_r+0x6c>
 8000f62:	4621      	mov	r1, r4
 8000f64:	4628      	mov	r0, r5
 8000f66:	f000 f92f 	bl	80011c8 <_fflush_r>
 8000f6a:	b988      	cbnz	r0, 8000f90 <__swbuf_r+0x90>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <__swbuf_r+0x9c>)
 8000f72:	429c      	cmp	r4, r3
 8000f74:	d101      	bne.n	8000f7a <__swbuf_r+0x7a>
 8000f76:	68ac      	ldr	r4, [r5, #8]
 8000f78:	e7cf      	b.n	8000f1a <__swbuf_r+0x1a>
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <__swbuf_r+0xa0>)
 8000f7c:	429c      	cmp	r4, r3
 8000f7e:	bf08      	it	eq
 8000f80:	68ec      	ldreq	r4, [r5, #12]
 8000f82:	e7ca      	b.n	8000f1a <__swbuf_r+0x1a>
 8000f84:	4621      	mov	r1, r4
 8000f86:	4628      	mov	r0, r5
 8000f88:	f000 f81e 	bl	8000fc8 <__swsetup_r>
 8000f8c:	2800      	cmp	r0, #0
 8000f8e:	d0cb      	beq.n	8000f28 <__swbuf_r+0x28>
 8000f90:	f04f 37ff 	mov.w	r7, #4294967295
 8000f94:	e7ea      	b.n	8000f6c <__swbuf_r+0x6c>
 8000f96:	bf00      	nop
 8000f98:	0800149c 	.word	0x0800149c
 8000f9c:	080014bc 	.word	0x080014bc
 8000fa0:	0800147c 	.word	0x0800147c

08000fa4 <_write_r>:
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	4611      	mov	r1, r2
 8000fac:	2200      	movs	r2, #0
 8000fae:	4d05      	ldr	r5, [pc, #20]	; (8000fc4 <_write_r+0x20>)
 8000fb0:	602a      	str	r2, [r5, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f7ff f9cb 	bl	800034e <_write>
 8000fb8:	1c43      	adds	r3, r0, #1
 8000fba:	d102      	bne.n	8000fc2 <_write_r+0x1e>
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	b103      	cbz	r3, 8000fc2 <_write_r+0x1e>
 8000fc0:	6023      	str	r3, [r4, #0]
 8000fc2:	bd38      	pop	{r3, r4, r5, pc}
 8000fc4:	20000098 	.word	0x20000098

08000fc8 <__swsetup_r>:
 8000fc8:	4b32      	ldr	r3, [pc, #200]	; (8001094 <__swsetup_r+0xcc>)
 8000fca:	b570      	push	{r4, r5, r6, lr}
 8000fcc:	681d      	ldr	r5, [r3, #0]
 8000fce:	4606      	mov	r6, r0
 8000fd0:	460c      	mov	r4, r1
 8000fd2:	b125      	cbz	r5, 8000fde <__swsetup_r+0x16>
 8000fd4:	69ab      	ldr	r3, [r5, #24]
 8000fd6:	b913      	cbnz	r3, 8000fde <__swsetup_r+0x16>
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f7ff fb1b 	bl	8000614 <__sinit>
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <__swsetup_r+0xd0>)
 8000fe0:	429c      	cmp	r4, r3
 8000fe2:	d10f      	bne.n	8001004 <__swsetup_r+0x3c>
 8000fe4:	686c      	ldr	r4, [r5, #4]
 8000fe6:	89a3      	ldrh	r3, [r4, #12]
 8000fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000fec:	0719      	lsls	r1, r3, #28
 8000fee:	d42c      	bmi.n	800104a <__swsetup_r+0x82>
 8000ff0:	06dd      	lsls	r5, r3, #27
 8000ff2:	d411      	bmi.n	8001018 <__swsetup_r+0x50>
 8000ff4:	2309      	movs	r3, #9
 8000ff6:	6033      	str	r3, [r6, #0]
 8000ff8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	81a3      	strh	r3, [r4, #12]
 8001002:	e03e      	b.n	8001082 <__swsetup_r+0xba>
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <__swsetup_r+0xd4>)
 8001006:	429c      	cmp	r4, r3
 8001008:	d101      	bne.n	800100e <__swsetup_r+0x46>
 800100a:	68ac      	ldr	r4, [r5, #8]
 800100c:	e7eb      	b.n	8000fe6 <__swsetup_r+0x1e>
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <__swsetup_r+0xd8>)
 8001010:	429c      	cmp	r4, r3
 8001012:	bf08      	it	eq
 8001014:	68ec      	ldreq	r4, [r5, #12]
 8001016:	e7e6      	b.n	8000fe6 <__swsetup_r+0x1e>
 8001018:	0758      	lsls	r0, r3, #29
 800101a:	d512      	bpl.n	8001042 <__swsetup_r+0x7a>
 800101c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800101e:	b141      	cbz	r1, 8001032 <__swsetup_r+0x6a>
 8001020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001024:	4299      	cmp	r1, r3
 8001026:	d002      	beq.n	800102e <__swsetup_r+0x66>
 8001028:	4630      	mov	r0, r6
 800102a:	f000 f99b 	bl	8001364 <_free_r>
 800102e:	2300      	movs	r3, #0
 8001030:	6363      	str	r3, [r4, #52]	; 0x34
 8001032:	89a3      	ldrh	r3, [r4, #12]
 8001034:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001038:	81a3      	strh	r3, [r4, #12]
 800103a:	2300      	movs	r3, #0
 800103c:	6063      	str	r3, [r4, #4]
 800103e:	6923      	ldr	r3, [r4, #16]
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	89a3      	ldrh	r3, [r4, #12]
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	81a3      	strh	r3, [r4, #12]
 800104a:	6923      	ldr	r3, [r4, #16]
 800104c:	b94b      	cbnz	r3, 8001062 <__swsetup_r+0x9a>
 800104e:	89a3      	ldrh	r3, [r4, #12]
 8001050:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001058:	d003      	beq.n	8001062 <__swsetup_r+0x9a>
 800105a:	4621      	mov	r1, r4
 800105c:	4630      	mov	r0, r6
 800105e:	f000 f927 	bl	80012b0 <__smakebuf_r>
 8001062:	89a0      	ldrh	r0, [r4, #12]
 8001064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001068:	f010 0301 	ands.w	r3, r0, #1
 800106c:	d00a      	beq.n	8001084 <__swsetup_r+0xbc>
 800106e:	2300      	movs	r3, #0
 8001070:	60a3      	str	r3, [r4, #8]
 8001072:	6963      	ldr	r3, [r4, #20]
 8001074:	425b      	negs	r3, r3
 8001076:	61a3      	str	r3, [r4, #24]
 8001078:	6923      	ldr	r3, [r4, #16]
 800107a:	b943      	cbnz	r3, 800108e <__swsetup_r+0xc6>
 800107c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001080:	d1ba      	bne.n	8000ff8 <__swsetup_r+0x30>
 8001082:	bd70      	pop	{r4, r5, r6, pc}
 8001084:	0781      	lsls	r1, r0, #30
 8001086:	bf58      	it	pl
 8001088:	6963      	ldrpl	r3, [r4, #20]
 800108a:	60a3      	str	r3, [r4, #8]
 800108c:	e7f4      	b.n	8001078 <__swsetup_r+0xb0>
 800108e:	2000      	movs	r0, #0
 8001090:	e7f7      	b.n	8001082 <__swsetup_r+0xba>
 8001092:	bf00      	nop
 8001094:	20000004 	.word	0x20000004
 8001098:	0800149c 	.word	0x0800149c
 800109c:	080014bc 	.word	0x080014bc
 80010a0:	0800147c 	.word	0x0800147c

080010a4 <_close_r>:
 80010a4:	b538      	push	{r3, r4, r5, lr}
 80010a6:	2300      	movs	r3, #0
 80010a8:	4d05      	ldr	r5, [pc, #20]	; (80010c0 <_close_r+0x1c>)
 80010aa:	4604      	mov	r4, r0
 80010ac:	4608      	mov	r0, r1
 80010ae:	602b      	str	r3, [r5, #0]
 80010b0:	f7ff f969 	bl	8000386 <_close>
 80010b4:	1c43      	adds	r3, r0, #1
 80010b6:	d102      	bne.n	80010be <_close_r+0x1a>
 80010b8:	682b      	ldr	r3, [r5, #0]
 80010ba:	b103      	cbz	r3, 80010be <_close_r+0x1a>
 80010bc:	6023      	str	r3, [r4, #0]
 80010be:	bd38      	pop	{r3, r4, r5, pc}
 80010c0:	20000098 	.word	0x20000098

080010c4 <__sflush_r>:
 80010c4:	898a      	ldrh	r2, [r1, #12]
 80010c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c8:	4605      	mov	r5, r0
 80010ca:	0710      	lsls	r0, r2, #28
 80010cc:	460c      	mov	r4, r1
 80010ce:	d457      	bmi.n	8001180 <__sflush_r+0xbc>
 80010d0:	684b      	ldr	r3, [r1, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	dc04      	bgt.n	80010e0 <__sflush_r+0x1c>
 80010d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010d8:	2b00      	cmp	r3, #0
 80010da:	dc01      	bgt.n	80010e0 <__sflush_r+0x1c>
 80010dc:	2000      	movs	r0, #0
 80010de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010e2:	2e00      	cmp	r6, #0
 80010e4:	d0fa      	beq.n	80010dc <__sflush_r+0x18>
 80010e6:	2300      	movs	r3, #0
 80010e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010ec:	682f      	ldr	r7, [r5, #0]
 80010ee:	602b      	str	r3, [r5, #0]
 80010f0:	d032      	beq.n	8001158 <__sflush_r+0x94>
 80010f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010f4:	89a3      	ldrh	r3, [r4, #12]
 80010f6:	075a      	lsls	r2, r3, #29
 80010f8:	d505      	bpl.n	8001106 <__sflush_r+0x42>
 80010fa:	6863      	ldr	r3, [r4, #4]
 80010fc:	1ac0      	subs	r0, r0, r3
 80010fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001100:	b10b      	cbz	r3, 8001106 <__sflush_r+0x42>
 8001102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001104:	1ac0      	subs	r0, r0, r3
 8001106:	2300      	movs	r3, #0
 8001108:	4602      	mov	r2, r0
 800110a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800110c:	4628      	mov	r0, r5
 800110e:	6a21      	ldr	r1, [r4, #32]
 8001110:	47b0      	blx	r6
 8001112:	1c43      	adds	r3, r0, #1
 8001114:	89a3      	ldrh	r3, [r4, #12]
 8001116:	d106      	bne.n	8001126 <__sflush_r+0x62>
 8001118:	6829      	ldr	r1, [r5, #0]
 800111a:	291d      	cmp	r1, #29
 800111c:	d82c      	bhi.n	8001178 <__sflush_r+0xb4>
 800111e:	4a29      	ldr	r2, [pc, #164]	; (80011c4 <__sflush_r+0x100>)
 8001120:	40ca      	lsrs	r2, r1
 8001122:	07d6      	lsls	r6, r2, #31
 8001124:	d528      	bpl.n	8001178 <__sflush_r+0xb4>
 8001126:	2200      	movs	r2, #0
 8001128:	6062      	str	r2, [r4, #4]
 800112a:	6922      	ldr	r2, [r4, #16]
 800112c:	04d9      	lsls	r1, r3, #19
 800112e:	6022      	str	r2, [r4, #0]
 8001130:	d504      	bpl.n	800113c <__sflush_r+0x78>
 8001132:	1c42      	adds	r2, r0, #1
 8001134:	d101      	bne.n	800113a <__sflush_r+0x76>
 8001136:	682b      	ldr	r3, [r5, #0]
 8001138:	b903      	cbnz	r3, 800113c <__sflush_r+0x78>
 800113a:	6560      	str	r0, [r4, #84]	; 0x54
 800113c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800113e:	602f      	str	r7, [r5, #0]
 8001140:	2900      	cmp	r1, #0
 8001142:	d0cb      	beq.n	80010dc <__sflush_r+0x18>
 8001144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001148:	4299      	cmp	r1, r3
 800114a:	d002      	beq.n	8001152 <__sflush_r+0x8e>
 800114c:	4628      	mov	r0, r5
 800114e:	f000 f909 	bl	8001364 <_free_r>
 8001152:	2000      	movs	r0, #0
 8001154:	6360      	str	r0, [r4, #52]	; 0x34
 8001156:	e7c2      	b.n	80010de <__sflush_r+0x1a>
 8001158:	6a21      	ldr	r1, [r4, #32]
 800115a:	2301      	movs	r3, #1
 800115c:	4628      	mov	r0, r5
 800115e:	47b0      	blx	r6
 8001160:	1c41      	adds	r1, r0, #1
 8001162:	d1c7      	bne.n	80010f4 <__sflush_r+0x30>
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0c4      	beq.n	80010f4 <__sflush_r+0x30>
 800116a:	2b1d      	cmp	r3, #29
 800116c:	d001      	beq.n	8001172 <__sflush_r+0xae>
 800116e:	2b16      	cmp	r3, #22
 8001170:	d101      	bne.n	8001176 <__sflush_r+0xb2>
 8001172:	602f      	str	r7, [r5, #0]
 8001174:	e7b2      	b.n	80010dc <__sflush_r+0x18>
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800117c:	81a3      	strh	r3, [r4, #12]
 800117e:	e7ae      	b.n	80010de <__sflush_r+0x1a>
 8001180:	690f      	ldr	r7, [r1, #16]
 8001182:	2f00      	cmp	r7, #0
 8001184:	d0aa      	beq.n	80010dc <__sflush_r+0x18>
 8001186:	0793      	lsls	r3, r2, #30
 8001188:	bf18      	it	ne
 800118a:	2300      	movne	r3, #0
 800118c:	680e      	ldr	r6, [r1, #0]
 800118e:	bf08      	it	eq
 8001190:	694b      	ldreq	r3, [r1, #20]
 8001192:	1bf6      	subs	r6, r6, r7
 8001194:	600f      	str	r7, [r1, #0]
 8001196:	608b      	str	r3, [r1, #8]
 8001198:	2e00      	cmp	r6, #0
 800119a:	dd9f      	ble.n	80010dc <__sflush_r+0x18>
 800119c:	4633      	mov	r3, r6
 800119e:	463a      	mov	r2, r7
 80011a0:	4628      	mov	r0, r5
 80011a2:	6a21      	ldr	r1, [r4, #32]
 80011a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80011a8:	47e0      	blx	ip
 80011aa:	2800      	cmp	r0, #0
 80011ac:	dc06      	bgt.n	80011bc <__sflush_r+0xf8>
 80011ae:	89a3      	ldrh	r3, [r4, #12]
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b8:	81a3      	strh	r3, [r4, #12]
 80011ba:	e790      	b.n	80010de <__sflush_r+0x1a>
 80011bc:	4407      	add	r7, r0
 80011be:	1a36      	subs	r6, r6, r0
 80011c0:	e7ea      	b.n	8001198 <__sflush_r+0xd4>
 80011c2:	bf00      	nop
 80011c4:	20400001 	.word	0x20400001

080011c8 <_fflush_r>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	690b      	ldr	r3, [r1, #16]
 80011cc:	4605      	mov	r5, r0
 80011ce:	460c      	mov	r4, r1
 80011d0:	b913      	cbnz	r3, 80011d8 <_fflush_r+0x10>
 80011d2:	2500      	movs	r5, #0
 80011d4:	4628      	mov	r0, r5
 80011d6:	bd38      	pop	{r3, r4, r5, pc}
 80011d8:	b118      	cbz	r0, 80011e2 <_fflush_r+0x1a>
 80011da:	6983      	ldr	r3, [r0, #24]
 80011dc:	b90b      	cbnz	r3, 80011e2 <_fflush_r+0x1a>
 80011de:	f7ff fa19 	bl	8000614 <__sinit>
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <_fflush_r+0x6c>)
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d11b      	bne.n	8001220 <_fflush_r+0x58>
 80011e8:	686c      	ldr	r4, [r5, #4]
 80011ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0ef      	beq.n	80011d2 <_fflush_r+0xa>
 80011f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011f4:	07d0      	lsls	r0, r2, #31
 80011f6:	d404      	bmi.n	8001202 <_fflush_r+0x3a>
 80011f8:	0599      	lsls	r1, r3, #22
 80011fa:	d402      	bmi.n	8001202 <_fflush_r+0x3a>
 80011fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011fe:	f7ff faa7 	bl	8000750 <__retarget_lock_acquire_recursive>
 8001202:	4628      	mov	r0, r5
 8001204:	4621      	mov	r1, r4
 8001206:	f7ff ff5d 	bl	80010c4 <__sflush_r>
 800120a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800120c:	4605      	mov	r5, r0
 800120e:	07da      	lsls	r2, r3, #31
 8001210:	d4e0      	bmi.n	80011d4 <_fflush_r+0xc>
 8001212:	89a3      	ldrh	r3, [r4, #12]
 8001214:	059b      	lsls	r3, r3, #22
 8001216:	d4dd      	bmi.n	80011d4 <_fflush_r+0xc>
 8001218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800121a:	f7ff fa9a 	bl	8000752 <__retarget_lock_release_recursive>
 800121e:	e7d9      	b.n	80011d4 <_fflush_r+0xc>
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <_fflush_r+0x70>)
 8001222:	429c      	cmp	r4, r3
 8001224:	d101      	bne.n	800122a <_fflush_r+0x62>
 8001226:	68ac      	ldr	r4, [r5, #8]
 8001228:	e7df      	b.n	80011ea <_fflush_r+0x22>
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <_fflush_r+0x74>)
 800122c:	429c      	cmp	r4, r3
 800122e:	bf08      	it	eq
 8001230:	68ec      	ldreq	r4, [r5, #12]
 8001232:	e7da      	b.n	80011ea <_fflush_r+0x22>
 8001234:	0800149c 	.word	0x0800149c
 8001238:	080014bc 	.word	0x080014bc
 800123c:	0800147c 	.word	0x0800147c

08001240 <_lseek_r>:
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	2200      	movs	r2, #0
 800124a:	4d05      	ldr	r5, [pc, #20]	; (8001260 <_lseek_r+0x20>)
 800124c:	602a      	str	r2, [r5, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	f7ff f8bd 	bl	80003ce <_lseek>
 8001254:	1c43      	adds	r3, r0, #1
 8001256:	d102      	bne.n	800125e <_lseek_r+0x1e>
 8001258:	682b      	ldr	r3, [r5, #0]
 800125a:	b103      	cbz	r3, 800125e <_lseek_r+0x1e>
 800125c:	6023      	str	r3, [r4, #0]
 800125e:	bd38      	pop	{r3, r4, r5, pc}
 8001260:	20000098 	.word	0x20000098

08001264 <__swhatbuf_r>:
 8001264:	b570      	push	{r4, r5, r6, lr}
 8001266:	460e      	mov	r6, r1
 8001268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800126c:	4614      	mov	r4, r2
 800126e:	2900      	cmp	r1, #0
 8001270:	461d      	mov	r5, r3
 8001272:	b096      	sub	sp, #88	; 0x58
 8001274:	da08      	bge.n	8001288 <__swhatbuf_r+0x24>
 8001276:	2200      	movs	r2, #0
 8001278:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800127c:	602a      	str	r2, [r5, #0]
 800127e:	061a      	lsls	r2, r3, #24
 8001280:	d410      	bmi.n	80012a4 <__swhatbuf_r+0x40>
 8001282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001286:	e00e      	b.n	80012a6 <__swhatbuf_r+0x42>
 8001288:	466a      	mov	r2, sp
 800128a:	f000 f8c5 	bl	8001418 <_fstat_r>
 800128e:	2800      	cmp	r0, #0
 8001290:	dbf1      	blt.n	8001276 <__swhatbuf_r+0x12>
 8001292:	9a01      	ldr	r2, [sp, #4]
 8001294:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001298:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800129c:	425a      	negs	r2, r3
 800129e:	415a      	adcs	r2, r3
 80012a0:	602a      	str	r2, [r5, #0]
 80012a2:	e7ee      	b.n	8001282 <__swhatbuf_r+0x1e>
 80012a4:	2340      	movs	r3, #64	; 0x40
 80012a6:	2000      	movs	r0, #0
 80012a8:	6023      	str	r3, [r4, #0]
 80012aa:	b016      	add	sp, #88	; 0x58
 80012ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080012b0 <__smakebuf_r>:
 80012b0:	898b      	ldrh	r3, [r1, #12]
 80012b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012b4:	079d      	lsls	r5, r3, #30
 80012b6:	4606      	mov	r6, r0
 80012b8:	460c      	mov	r4, r1
 80012ba:	d507      	bpl.n	80012cc <__smakebuf_r+0x1c>
 80012bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	6123      	str	r3, [r4, #16]
 80012c4:	2301      	movs	r3, #1
 80012c6:	6163      	str	r3, [r4, #20]
 80012c8:	b002      	add	sp, #8
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
 80012cc:	466a      	mov	r2, sp
 80012ce:	ab01      	add	r3, sp, #4
 80012d0:	f7ff ffc8 	bl	8001264 <__swhatbuf_r>
 80012d4:	9900      	ldr	r1, [sp, #0]
 80012d6:	4605      	mov	r5, r0
 80012d8:	4630      	mov	r0, r6
 80012da:	f7ff fa5b 	bl	8000794 <_malloc_r>
 80012de:	b948      	cbnz	r0, 80012f4 <__smakebuf_r+0x44>
 80012e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012e4:	059a      	lsls	r2, r3, #22
 80012e6:	d4ef      	bmi.n	80012c8 <__smakebuf_r+0x18>
 80012e8:	f023 0303 	bic.w	r3, r3, #3
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	81a3      	strh	r3, [r4, #12]
 80012f2:	e7e3      	b.n	80012bc <__smakebuf_r+0xc>
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <__smakebuf_r+0x7c>)
 80012f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80012f8:	89a3      	ldrh	r3, [r4, #12]
 80012fa:	6020      	str	r0, [r4, #0]
 80012fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001300:	81a3      	strh	r3, [r4, #12]
 8001302:	9b00      	ldr	r3, [sp, #0]
 8001304:	6120      	str	r0, [r4, #16]
 8001306:	6163      	str	r3, [r4, #20]
 8001308:	9b01      	ldr	r3, [sp, #4]
 800130a:	b15b      	cbz	r3, 8001324 <__smakebuf_r+0x74>
 800130c:	4630      	mov	r0, r6
 800130e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001312:	f000 f893 	bl	800143c <_isatty_r>
 8001316:	b128      	cbz	r0, 8001324 <__smakebuf_r+0x74>
 8001318:	89a3      	ldrh	r3, [r4, #12]
 800131a:	f023 0303 	bic.w	r3, r3, #3
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	81a3      	strh	r3, [r4, #12]
 8001324:	89a0      	ldrh	r0, [r4, #12]
 8001326:	4305      	orrs	r5, r0
 8001328:	81a5      	strh	r5, [r4, #12]
 800132a:	e7cd      	b.n	80012c8 <__smakebuf_r+0x18>
 800132c:	080005ad 	.word	0x080005ad

08001330 <memchr>:
 8001330:	4603      	mov	r3, r0
 8001332:	b510      	push	{r4, lr}
 8001334:	b2c9      	uxtb	r1, r1
 8001336:	4402      	add	r2, r0
 8001338:	4293      	cmp	r3, r2
 800133a:	4618      	mov	r0, r3
 800133c:	d101      	bne.n	8001342 <memchr+0x12>
 800133e:	2000      	movs	r0, #0
 8001340:	e003      	b.n	800134a <memchr+0x1a>
 8001342:	7804      	ldrb	r4, [r0, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d1f6      	bne.n	8001338 <memchr+0x8>
 800134a:	bd10      	pop	{r4, pc}

0800134c <__malloc_lock>:
 800134c:	4801      	ldr	r0, [pc, #4]	; (8001354 <__malloc_lock+0x8>)
 800134e:	f7ff b9ff 	b.w	8000750 <__retarget_lock_acquire_recursive>
 8001352:	bf00      	nop
 8001354:	2000008c 	.word	0x2000008c

08001358 <__malloc_unlock>:
 8001358:	4801      	ldr	r0, [pc, #4]	; (8001360 <__malloc_unlock+0x8>)
 800135a:	f7ff b9fa 	b.w	8000752 <__retarget_lock_release_recursive>
 800135e:	bf00      	nop
 8001360:	2000008c 	.word	0x2000008c

08001364 <_free_r>:
 8001364:	b538      	push	{r3, r4, r5, lr}
 8001366:	4605      	mov	r5, r0
 8001368:	2900      	cmp	r1, #0
 800136a:	d040      	beq.n	80013ee <_free_r+0x8a>
 800136c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001370:	1f0c      	subs	r4, r1, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	bfb8      	it	lt
 8001376:	18e4      	addlt	r4, r4, r3
 8001378:	f7ff ffe8 	bl	800134c <__malloc_lock>
 800137c:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <_free_r+0x8c>)
 800137e:	6813      	ldr	r3, [r2, #0]
 8001380:	b933      	cbnz	r3, 8001390 <_free_r+0x2c>
 8001382:	6063      	str	r3, [r4, #4]
 8001384:	6014      	str	r4, [r2, #0]
 8001386:	4628      	mov	r0, r5
 8001388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800138c:	f7ff bfe4 	b.w	8001358 <__malloc_unlock>
 8001390:	42a3      	cmp	r3, r4
 8001392:	d908      	bls.n	80013a6 <_free_r+0x42>
 8001394:	6820      	ldr	r0, [r4, #0]
 8001396:	1821      	adds	r1, r4, r0
 8001398:	428b      	cmp	r3, r1
 800139a:	bf01      	itttt	eq
 800139c:	6819      	ldreq	r1, [r3, #0]
 800139e:	685b      	ldreq	r3, [r3, #4]
 80013a0:	1809      	addeq	r1, r1, r0
 80013a2:	6021      	streq	r1, [r4, #0]
 80013a4:	e7ed      	b.n	8001382 <_free_r+0x1e>
 80013a6:	461a      	mov	r2, r3
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	b10b      	cbz	r3, 80013b0 <_free_r+0x4c>
 80013ac:	42a3      	cmp	r3, r4
 80013ae:	d9fa      	bls.n	80013a6 <_free_r+0x42>
 80013b0:	6811      	ldr	r1, [r2, #0]
 80013b2:	1850      	adds	r0, r2, r1
 80013b4:	42a0      	cmp	r0, r4
 80013b6:	d10b      	bne.n	80013d0 <_free_r+0x6c>
 80013b8:	6820      	ldr	r0, [r4, #0]
 80013ba:	4401      	add	r1, r0
 80013bc:	1850      	adds	r0, r2, r1
 80013be:	4283      	cmp	r3, r0
 80013c0:	6011      	str	r1, [r2, #0]
 80013c2:	d1e0      	bne.n	8001386 <_free_r+0x22>
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	4401      	add	r1, r0
 80013ca:	6011      	str	r1, [r2, #0]
 80013cc:	6053      	str	r3, [r2, #4]
 80013ce:	e7da      	b.n	8001386 <_free_r+0x22>
 80013d0:	d902      	bls.n	80013d8 <_free_r+0x74>
 80013d2:	230c      	movs	r3, #12
 80013d4:	602b      	str	r3, [r5, #0]
 80013d6:	e7d6      	b.n	8001386 <_free_r+0x22>
 80013d8:	6820      	ldr	r0, [r4, #0]
 80013da:	1821      	adds	r1, r4, r0
 80013dc:	428b      	cmp	r3, r1
 80013de:	bf01      	itttt	eq
 80013e0:	6819      	ldreq	r1, [r3, #0]
 80013e2:	685b      	ldreq	r3, [r3, #4]
 80013e4:	1809      	addeq	r1, r1, r0
 80013e6:	6021      	streq	r1, [r4, #0]
 80013e8:	6063      	str	r3, [r4, #4]
 80013ea:	6054      	str	r4, [r2, #4]
 80013ec:	e7cb      	b.n	8001386 <_free_r+0x22>
 80013ee:	bd38      	pop	{r3, r4, r5, pc}
 80013f0:	20000090 	.word	0x20000090

080013f4 <_read_r>:
 80013f4:	b538      	push	{r3, r4, r5, lr}
 80013f6:	4604      	mov	r4, r0
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	2200      	movs	r2, #0
 80013fe:	4d05      	ldr	r5, [pc, #20]	; (8001414 <_read_r+0x20>)
 8001400:	602a      	str	r2, [r5, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	f7fe ff86 	bl	8000314 <_read>
 8001408:	1c43      	adds	r3, r0, #1
 800140a:	d102      	bne.n	8001412 <_read_r+0x1e>
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	b103      	cbz	r3, 8001412 <_read_r+0x1e>
 8001410:	6023      	str	r3, [r4, #0]
 8001412:	bd38      	pop	{r3, r4, r5, pc}
 8001414:	20000098 	.word	0x20000098

08001418 <_fstat_r>:
 8001418:	b538      	push	{r3, r4, r5, lr}
 800141a:	2300      	movs	r3, #0
 800141c:	4d06      	ldr	r5, [pc, #24]	; (8001438 <_fstat_r+0x20>)
 800141e:	4604      	mov	r4, r0
 8001420:	4608      	mov	r0, r1
 8001422:	4611      	mov	r1, r2
 8001424:	602b      	str	r3, [r5, #0]
 8001426:	f7fe ffb9 	bl	800039c <_fstat>
 800142a:	1c43      	adds	r3, r0, #1
 800142c:	d102      	bne.n	8001434 <_fstat_r+0x1c>
 800142e:	682b      	ldr	r3, [r5, #0]
 8001430:	b103      	cbz	r3, 8001434 <_fstat_r+0x1c>
 8001432:	6023      	str	r3, [r4, #0]
 8001434:	bd38      	pop	{r3, r4, r5, pc}
 8001436:	bf00      	nop
 8001438:	20000098 	.word	0x20000098

0800143c <_isatty_r>:
 800143c:	b538      	push	{r3, r4, r5, lr}
 800143e:	2300      	movs	r3, #0
 8001440:	4d05      	ldr	r5, [pc, #20]	; (8001458 <_isatty_r+0x1c>)
 8001442:	4604      	mov	r4, r0
 8001444:	4608      	mov	r0, r1
 8001446:	602b      	str	r3, [r5, #0]
 8001448:	f7fe ffb7 	bl	80003ba <_isatty>
 800144c:	1c43      	adds	r3, r0, #1
 800144e:	d102      	bne.n	8001456 <_isatty_r+0x1a>
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	b103      	cbz	r3, 8001456 <_isatty_r+0x1a>
 8001454:	6023      	str	r3, [r4, #0]
 8001456:	bd38      	pop	{r3, r4, r5, pc}
 8001458:	20000098 	.word	0x20000098

0800145c <_init>:
 800145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145e:	bf00      	nop
 8001460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001462:	bc08      	pop	{r3}
 8001464:	469e      	mov	lr, r3
 8001466:	4770      	bx	lr

08001468 <_fini>:
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146a:	bf00      	nop
 800146c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800146e:	bc08      	pop	{r3}
 8001470:	469e      	mov	lr, r3
 8001472:	4770      	bx	lr
