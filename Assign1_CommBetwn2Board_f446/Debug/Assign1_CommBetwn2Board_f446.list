
Assign1_CommBetwn2Board_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007dc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009a0  080009a0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009a0  080009a0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080009a0  080009a0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009a0  080009a0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009a0  080009a0  000109a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009a4  080009a4  000109a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080009a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  080009c8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  080009c8  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000151a  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000527  00000000  00000000  0002156a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000130  00000000  00000000  00021a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000d8  00000000  00000000  00021bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001481  00000000  00000000  00021ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a8e  00000000  00000000  00023121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004d9d  00000000  00000000  00024baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002994c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000033c  00000000  00000000  0002999c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000988 	.word	0x08000988

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08000988 	.word	0x08000988

08000204 <GPIO_u8PinInit>:
 * @brief 		the function initializes the GPIO pin according to the input parameters
 * @param[in]	PinConfig : the initialization values of the pin
 * @retval		ErrorStatus
 * */
uint8_t GPIO_u8PinInit(const GPIO_PinConfig_T *PinConfig)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK,
 800020c:	2301      	movs	r3, #1
 800020e:	73fb      	strb	r3, [r7, #15]
			Local_u8RegNum,
			Local_u8BitNum;

	/*Check Null Pointer*/
	if(PinConfig != NULL)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b03      	cmp	r3, #3
 8000214:	f000 8130 	beq.w	8000478 <GPIO_u8PinInit+0x274>
	{
		/*Check Valid Inputs Configuration*/
		if((PinConfig->Port <= PORTH) && ((PinConfig->PinNum) <= PIN15)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b07      	cmp	r3, #7
 800021e:	f200 8128 	bhi.w	8000472 <GPIO_u8PinInit+0x26e>
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	2b0f      	cmp	r3, #15
 8000228:	f200 8123 	bhi.w	8000472 <GPIO_u8PinInit+0x26e>
				&& (PinConfig->Mode <= ANALOG) && (PinConfig->AltFunc <= AF15)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	789b      	ldrb	r3, [r3, #2]
 8000230:	2b03      	cmp	r3, #3
 8000232:	f200 811e 	bhi.w	8000472 <GPIO_u8PinInit+0x26e>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	799b      	ldrb	r3, [r3, #6]
 800023a:	2b0f      	cmp	r3, #15
 800023c:	f200 8119 	bhi.w	8000472 <GPIO_u8PinInit+0x26e>
				&& (PinConfig->OutType <= OPEN_DRAIN) && (PinConfig->PullType <= PULL_DN)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	791b      	ldrb	r3, [r3, #4]
 8000244:	2b01      	cmp	r3, #1
 8000246:	f200 8114 	bhi.w	8000472 <GPIO_u8PinInit+0x26e>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	795b      	ldrb	r3, [r3, #5]
 800024e:	2b02      	cmp	r3, #2
 8000250:	f200 810f 	bhi.w	8000472 <GPIO_u8PinInit+0x26e>
				&&(PinConfig->Speed) <= HIGH)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	78db      	ldrb	r3, [r3, #3]
 8000258:	2b03      	cmp	r3, #3
 800025a:	f200 810a 	bhi.w	8000472 <GPIO_u8PinInit+0x26e>
		{
			/*1. Set Pin Mode : Input ,Output ,Analog ,Alternative Function */
			(GPIOPort[PinConfig->Port]->MODER) &= ~(MODER_MASK << ((PinConfig->PinNum)*MODER_PIN_ACCESS)) ;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	461a      	mov	r2, r3
 8000264:	4b8a      	ldr	r3, [pc, #552]	; (8000490 <GPIO_u8PinInit+0x28c>)
 8000266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	785b      	ldrb	r3, [r3, #1]
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	2103      	movs	r1, #3
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
 8000278:	43db      	mvns	r3, r3
 800027a:	4619      	mov	r1, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4618      	mov	r0, r3
 8000282:	4b83      	ldr	r3, [pc, #524]	; (8000490 <GPIO_u8PinInit+0x28c>)
 8000284:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000288:	400a      	ands	r2, r1
 800028a:	601a      	str	r2, [r3, #0]
			(GPIOPort[PinConfig->Port]->MODER) |= ((PinConfig->Mode) << (PinConfig->PinNum)*MODER_PIN_ACCESS);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	461a      	mov	r2, r3
 8000292:	4b7f      	ldr	r3, [pc, #508]	; (8000490 <GPIO_u8PinInit+0x28c>)
 8000294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	789b      	ldrb	r3, [r3, #2]
 800029e:	4619      	mov	r1, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	785b      	ldrb	r3, [r3, #1]
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	4619      	mov	r1, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	4b77      	ldr	r3, [pc, #476]	; (8000490 <GPIO_u8PinInit+0x28c>)
 80002b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002b8:	430a      	orrs	r2, r1
 80002ba:	601a      	str	r2, [r3, #0]

			/*2. Set Pull State : PullUp ,PullDn ,NoPull*/
			(GPIOPort[PinConfig->Port]->PUPDR) &= ~(PUPDR_MASK << (PinConfig->PinNum)*PUPDR_PIN_ACCESS);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b73      	ldr	r3, [pc, #460]	; (8000490 <GPIO_u8PinInit+0x28c>)
 80002c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002c8:	68da      	ldr	r2, [r3, #12]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	785b      	ldrb	r3, [r3, #1]
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	4618      	mov	r0, r3
 80002e0:	4b6b      	ldr	r3, [pc, #428]	; (8000490 <GPIO_u8PinInit+0x28c>)
 80002e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002e6:	400a      	ands	r2, r1
 80002e8:	60da      	str	r2, [r3, #12]
			(GPIOPort[PinConfig->Port]->PUPDR) |= (PinConfig->PullType << (PinConfig->PinNum)*PUPDR_PIN_ACCESS);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b67      	ldr	r3, [pc, #412]	; (8000490 <GPIO_u8PinInit+0x28c>)
 80002f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002f6:	68da      	ldr	r2, [r3, #12]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	795b      	ldrb	r3, [r3, #5]
 80002fc:	4619      	mov	r1, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	785b      	ldrb	r3, [r3, #1]
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	fa01 f303 	lsl.w	r3, r1, r3
 8000308:	4619      	mov	r1, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	4b5f      	ldr	r3, [pc, #380]	; (8000490 <GPIO_u8PinInit+0x28c>)
 8000312:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000316:	430a      	orrs	r2, r1
 8000318:	60da      	str	r2, [r3, #12]

			/*Output Pin Setting*/
			if((PinConfig->Mode == OUTPUT) || (PinConfig->Mode == ALTER_FUNC))
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	789b      	ldrb	r3, [r3, #2]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d004      	beq.n	800032c <GPIO_u8PinInit+0x128>
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	789b      	ldrb	r3, [r3, #2]
 8000326:	2b02      	cmp	r3, #2
 8000328:	f040 80a9 	bne.w	800047e <GPIO_u8PinInit+0x27a>
			{
				/*3. Set Output Type Of Pin : PushPull ,OpenDrain*/
				(GPIOPort[PinConfig->Port]->OTYPER) &= ~(OTYPER_MASK << PinConfig->PinNum);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	4b57      	ldr	r3, [pc, #348]	; (8000490 <GPIO_u8PinInit+0x28c>)
 8000334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000338:	685a      	ldr	r2, [r3, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	785b      	ldrb	r3, [r3, #1]
 800033e:	4619      	mov	r1, r3
 8000340:	2301      	movs	r3, #1
 8000342:	408b      	lsls	r3, r1
 8000344:	43db      	mvns	r3, r3
 8000346:	4619      	mov	r1, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4618      	mov	r0, r3
 800034e:	4b50      	ldr	r3, [pc, #320]	; (8000490 <GPIO_u8PinInit+0x28c>)
 8000350:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000354:	400a      	ands	r2, r1
 8000356:	605a      	str	r2, [r3, #4]
				(GPIOPort[PinConfig->Port]->OTYPER) |= (PinConfig->OutType << PinConfig->PinNum);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	461a      	mov	r2, r3
 800035e:	4b4c      	ldr	r3, [pc, #304]	; (8000490 <GPIO_u8PinInit+0x28c>)
 8000360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000364:	685a      	ldr	r2, [r3, #4]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	4619      	mov	r1, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	785b      	ldrb	r3, [r3, #1]
 8000370:	fa01 f303 	lsl.w	r3, r1, r3
 8000374:	4619      	mov	r1, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	4b44      	ldr	r3, [pc, #272]	; (8000490 <GPIO_u8PinInit+0x28c>)
 800037e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000382:	430a      	orrs	r2, r1
 8000384:	605a      	str	r2, [r3, #4]

				/*4. Set Speed Of Pin : Low ,Medium ,Fast ,High*/
				(GPIOPort[PinConfig->Port]->OSPEEDER) &= ~(OSPEEDER_MASK << (PinConfig->PinNum)*OSPEEDER_PIN_ACCESS);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	461a      	mov	r2, r3
 800038c:	4b40      	ldr	r3, [pc, #256]	; (8000490 <GPIO_u8PinInit+0x28c>)
 800038e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000392:	689a      	ldr	r2, [r3, #8]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	785b      	ldrb	r3, [r3, #1]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	2103      	movs	r1, #3
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	4b39      	ldr	r3, [pc, #228]	; (8000490 <GPIO_u8PinInit+0x28c>)
 80003ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003b0:	400a      	ands	r2, r1
 80003b2:	609a      	str	r2, [r3, #8]
				(GPIOPort[PinConfig->Port]->OSPEEDER) |= (PinConfig->Speed << (PinConfig->PinNum)*OSPEEDER_PIN_ACCESS);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b35      	ldr	r3, [pc, #212]	; (8000490 <GPIO_u8PinInit+0x28c>)
 80003bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003c0:	689a      	ldr	r2, [r3, #8]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	78db      	ldrb	r3, [r3, #3]
 80003c6:	4619      	mov	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	785b      	ldrb	r3, [r3, #1]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	4619      	mov	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	4618      	mov	r0, r3
 80003da:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <GPIO_u8PinInit+0x28c>)
 80003dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003e0:	430a      	orrs	r2, r1
 80003e2:	609a      	str	r2, [r3, #8]

				/*5. Set Alternative Function*/
				if(PinConfig->Mode == ALTER_FUNC)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	789b      	ldrb	r3, [r3, #2]
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	d148      	bne.n	800047e <GPIO_u8PinInit+0x27a>
				{
					Local_u8RegNum = (PinConfig->PinNum)/AFR_DIV_REM;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	785b      	ldrb	r3, [r3, #1]
 80003f0:	08db      	lsrs	r3, r3, #3
 80003f2:	73bb      	strb	r3, [r7, #14]
					Local_u8BitNum = ((PinConfig->PinNum)%AFR_DIV_REM)*AFR_PIN_ACCESS;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	785b      	ldrb	r3, [r3, #1]
 80003f8:	f003 0307 	and.w	r3, r3, #7
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	737b      	strb	r3, [r7, #13]

					(GPIOPort[PinConfig->Port]->AFR[Local_u8RegNum]) &= ~(AFR_MASK << Local_u8BitNum);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	461a      	mov	r2, r3
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <GPIO_u8PinInit+0x28c>)
 800040a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800040e:	7bba      	ldrb	r2, [r7, #14]
 8000410:	3208      	adds	r2, #8
 8000412:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000416:	7b7b      	ldrb	r3, [r7, #13]
 8000418:	220f      	movs	r2, #15
 800041a:	fa02 f303 	lsl.w	r3, r2, r3
 800041e:	43db      	mvns	r3, r3
 8000420:	4618      	mov	r0, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	461a      	mov	r2, r3
 8000428:	4b19      	ldr	r3, [pc, #100]	; (8000490 <GPIO_u8PinInit+0x28c>)
 800042a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800042e:	7bba      	ldrb	r2, [r7, #14]
 8000430:	4001      	ands	r1, r0
 8000432:	3208      	adds	r2, #8
 8000434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					(GPIOPort[PinConfig->Port]->AFR[Local_u8RegNum]) |= (PinConfig->AltFunc << Local_u8BitNum);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	461a      	mov	r2, r3
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <GPIO_u8PinInit+0x28c>)
 8000440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000444:	7bba      	ldrb	r2, [r7, #14]
 8000446:	3208      	adds	r2, #8
 8000448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	799b      	ldrb	r3, [r3, #6]
 8000450:	461a      	mov	r2, r3
 8000452:	7b7b      	ldrb	r3, [r7, #13]
 8000454:	fa02 f303 	lsl.w	r3, r2, r3
 8000458:	4618      	mov	r0, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	461a      	mov	r2, r3
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <GPIO_u8PinInit+0x28c>)
 8000462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000466:	7bba      	ldrb	r2, [r7, #14]
 8000468:	4301      	orrs	r1, r0
 800046a:	3208      	adds	r2, #8
 800046c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if((PinConfig->Mode == OUTPUT) || (PinConfig->Mode == ALTER_FUNC))
 8000470:	e005      	b.n	800047e <GPIO_u8PinInit+0x27a>
				}
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 8000472:	2302      	movs	r3, #2
 8000474:	73fb      	strb	r3, [r7, #15]
 8000476:	e003      	b.n	8000480 <GPIO_u8PinInit+0x27c>
		}
	}

	else
	{
		Local_u8ErrorState = NULL_PTR;
 8000478:	2304      	movs	r3, #4
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	e000      	b.n	8000480 <GPIO_u8PinInit+0x27c>
			if((PinConfig->Mode == OUTPUT) || (PinConfig->Mode == ALTER_FUNC))
 800047e:	bf00      	nop
	}

	return Local_u8ErrorState;
 8000480:	7bfb      	ldrb	r3, [r7, #15]

}
 8000482:	4618      	mov	r0, r3
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000000 	.word	0x20000000

08000494 <GPIO_u8SetPinValue>:
 * @param[in]	PinNum : the pin number ,get options @Pin_T enum
 * @param[in]	PinValue : the output value ,get options @PinVal_T
 * @retval		ErrorStatus
 * */
uint8_t GPIO_u8SetPinValue(Port_T Port , Pin_T PinNum , PinVal_T PinValue)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
 800049e:	460b      	mov	r3, r1
 80004a0:	71bb      	strb	r3, [r7, #6]
 80004a2:	4613      	mov	r3, r2
 80004a4:	717b      	strb	r3, [r7, #5]
	uint8_t  Local_u8ErrorState = OK;
 80004a6:	2301      	movs	r3, #1
 80004a8:	73fb      	strb	r3, [r7, #15]

	/*Check Valid Inputs Configuration*/
	if((Port <= PORTH) && (PinNum <= PIN15)
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b07      	cmp	r3, #7
 80004ae:	d827      	bhi.n	8000500 <GPIO_u8SetPinValue+0x6c>
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	2b0f      	cmp	r3, #15
 80004b4:	d824      	bhi.n	8000500 <GPIO_u8SetPinValue+0x6c>
		&& (PinValue <= PIN_HIGH))
 80004b6:	797b      	ldrb	r3, [r7, #5]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d821      	bhi.n	8000500 <GPIO_u8SetPinValue+0x6c>
	{
		(GPIOPort[Port])->ODR &= ~(ODR_MASK << PinNum);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4a15      	ldr	r2, [pc, #84]	; (8000514 <GPIO_u8SetPinValue+0x80>)
 80004c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	79bb      	ldrb	r3, [r7, #6]
 80004c8:	2101      	movs	r1, #1
 80004ca:	fa01 f303 	lsl.w	r3, r1, r3
 80004ce:	43db      	mvns	r3, r3
 80004d0:	4618      	mov	r0, r3
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	490f      	ldr	r1, [pc, #60]	; (8000514 <GPIO_u8SetPinValue+0x80>)
 80004d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004da:	4002      	ands	r2, r0
 80004dc:	615a      	str	r2, [r3, #20]
		(GPIOPort[Port])->ODR |= (PinValue << PinNum);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <GPIO_u8SetPinValue+0x80>)
 80004e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	7979      	ldrb	r1, [r7, #5]
 80004ea:	79bb      	ldrb	r3, [r7, #6]
 80004ec:	fa01 f303 	lsl.w	r3, r1, r3
 80004f0:	4618      	mov	r0, r3
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	4907      	ldr	r1, [pc, #28]	; (8000514 <GPIO_u8SetPinValue+0x80>)
 80004f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004fa:	4302      	orrs	r2, r0
 80004fc:	615a      	str	r2, [r3, #20]
 80004fe:	e001      	b.n	8000504 <GPIO_u8SetPinValue+0x70>
	}
	else
	{
		Local_u8ErrorState = NOK;
 8000500:	2302      	movs	r3, #2
 8000502:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 8000504:	7bfb      	ldrb	r3, [r7, #15]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000000 	.word	0x20000000

08000518 <GPIO_u8ReadPinValue>:
 * @param[in]	PinNum : the pin number ,get options @Pin_T enum
 * @param[out]	PinValue : the reading pin value ,get options @PinVal_T
 * @retval		ErrorStatus
 * */
uint8_t GPIO_u8ReadPinValue(Port_T Port , Pin_T PinNum , PinVal_T *PinValue)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	603a      	str	r2, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	460b      	mov	r3, r1
 8000526:	71bb      	strb	r3, [r7, #6]
	uint8_t  Local_u8ErrorState = OK;
 8000528:	2301      	movs	r3, #1
 800052a:	73fb      	strb	r3, [r7, #15]

	/*Check Valid Inputs Configuration*/
	if((Port <= PORTH) && ((PinNum) <= PIN15))
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b07      	cmp	r3, #7
 8000530:	d811      	bhi.n	8000556 <GPIO_u8ReadPinValue+0x3e>
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	2b0f      	cmp	r3, #15
 8000536:	d80e      	bhi.n	8000556 <GPIO_u8ReadPinValue+0x3e>
	{
		*PinValue = (((GPIOPort[Port])->IDR >> PinNum)&IDR_ANDING);
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <GPIO_u8ReadPinValue+0x50>)
 800053c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000540:	691a      	ldr	r2, [r3, #16]
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	fa22 f303 	lsr.w	r3, r2, r3
 8000548:	b2db      	uxtb	r3, r3
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e001      	b.n	800055a <GPIO_u8ReadPinValue+0x42>
	}
	else
	{
		Local_u8ErrorState = NOK;
 8000556:	2302      	movs	r3, #2
 8000558:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 800055a:	7bfb      	ldrb	r3, [r7, #15]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	20000000 	.word	0x20000000

0800056c <RCC_u8PeripheralClkEnable>:
	return Local_u8ErrorState;

}

uint8_t RCC_u8PeripheralClkEnable(Peripheral_T Copy_u8PeripheralName ,uint8_t Copy_u8ClkType )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = OK;
 800057c:	2301      	movs	r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
	switch(Copy_u8ClkType)
 8000580:	79bb      	ldrb	r3, [r7, #6]
 8000582:	3b01      	subs	r3, #1
 8000584:	2b04      	cmp	r3, #4
 8000586:	d844      	bhi.n	8000612 <RCC_u8PeripheralClkEnable+0xa6>
 8000588:	a201      	add	r2, pc, #4	; (adr r2, 8000590 <RCC_u8PeripheralClkEnable+0x24>)
 800058a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058e:	bf00      	nop
 8000590:	080005a5 	.word	0x080005a5
 8000594:	080005bb 	.word	0x080005bb
 8000598:	080005d1 	.word	0x080005d1
 800059c:	080005e7 	.word	0x080005e7
 80005a0:	080005fd 	.word	0x080005fd
	{

	case RCC_AHB1_CLK  : SET_BIT(RCC->AHB1ENR,Copy_u8PeripheralName);break;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <RCC_u8PeripheralClkEnable+0xb8>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	79fa      	ldrb	r2, [r7, #7]
 80005aa:	2101      	movs	r1, #1
 80005ac:	fa01 f202 	lsl.w	r2, r1, r2
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <RCC_u8PeripheralClkEnable+0xb8>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6313      	str	r3, [r2, #48]	; 0x30
 80005b8:	e02d      	b.n	8000616 <RCC_u8PeripheralClkEnable+0xaa>
	case RCC_AHB2_CLK  : SET_BIT(RCC->AHB2ENR,Copy_u8PeripheralName);break;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <RCC_u8PeripheralClkEnable+0xb8>)
 80005bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	2101      	movs	r1, #1
 80005c2:	fa01 f202 	lsl.w	r2, r1, r2
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a16      	ldr	r2, [pc, #88]	; (8000624 <RCC_u8PeripheralClkEnable+0xb8>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	6353      	str	r3, [r2, #52]	; 0x34
 80005ce:	e022      	b.n	8000616 <RCC_u8PeripheralClkEnable+0xaa>
	case RCC_AHB3_CLK  : SET_BIT(RCC->AHB3ENR,Copy_u8PeripheralName);break;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <RCC_u8PeripheralClkEnable+0xb8>)
 80005d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005d4:	79fa      	ldrb	r2, [r7, #7]
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <RCC_u8PeripheralClkEnable+0xb8>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	6393      	str	r3, [r2, #56]	; 0x38
 80005e4:	e017      	b.n	8000616 <RCC_u8PeripheralClkEnable+0xaa>
	case RCC_APB1_CLK  : SET_BIT(RCC->APB1ENR,Copy_u8PeripheralName);break;
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <RCC_u8PeripheralClkEnable+0xb8>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	79fa      	ldrb	r2, [r7, #7]
 80005ec:	2101      	movs	r1, #1
 80005ee:	fa01 f202 	lsl.w	r2, r1, r2
 80005f2:	4611      	mov	r1, r2
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <RCC_u8PeripheralClkEnable+0xb8>)
 80005f6:	430b      	orrs	r3, r1
 80005f8:	6413      	str	r3, [r2, #64]	; 0x40
 80005fa:	e00c      	b.n	8000616 <RCC_u8PeripheralClkEnable+0xaa>
	case RCC_APB2_CLK  : SET_BIT(RCC->APB2ENR,Copy_u8PeripheralName);break;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <RCC_u8PeripheralClkEnable+0xb8>)
 80005fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000600:	79fa      	ldrb	r2, [r7, #7]
 8000602:	2101      	movs	r1, #1
 8000604:	fa01 f202 	lsl.w	r2, r1, r2
 8000608:	4611      	mov	r1, r2
 800060a:	4a06      	ldr	r2, [pc, #24]	; (8000624 <RCC_u8PeripheralClkEnable+0xb8>)
 800060c:	430b      	orrs	r3, r1
 800060e:	6453      	str	r3, [r2, #68]	; 0x44
 8000610:	e001      	b.n	8000616 <RCC_u8PeripheralClkEnable+0xaa>
	default : Local_u8ErrorState = NOK;
 8000612:	2302      	movs	r3, #2
 8000614:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000616:	7bfb      	ldrb	r3, [r7, #15]

}
 8000618:	4618      	mov	r0, r3
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	40023800 	.word	0x40023800

08000628 <Delay_u8MilliSec>:

	return Local_u8ErrorState;
}

uint8_t Delay_u8MilliSec(uint32_t Copy_u32Delay)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 8000630:	2301      	movs	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
	static uint32_t Local_u32Counter = 0;
	uint32_t Local_u32PreloadVal;

	/*1. Set Preload value*/
	Local_u32PreloadVal = (Copy_u32Delay*SYSTICK_SPEED)/SYSTICK_MILLI;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a19      	ldr	r2, [pc, #100]	; (800069c <Delay_u8MilliSec+0x74>)
 8000638:	fb02 f303 	mul.w	r3, r2, r3
 800063c:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <Delay_u8MilliSec+0x78>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	099b      	lsrs	r3, r3, #6
 8000644:	60bb      	str	r3, [r7, #8]
	SysTick_u8SetPreloadVal(Local_u32PreloadVal);
 8000646:	68b8      	ldr	r0, [r7, #8]
 8000648:	f000 f884 	bl	8000754 <SysTick_u8SetPreloadVal>

	/*2. Set Clk Source*/
	SysTick_u8SetClkSrc(SYSTICK_CLK_SRC);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 f82f 	bl	80006b0 <SysTick_u8SetClkSrc>

	/*3. Disable Interrupt & Enable Timer*/
	SysTick_u8ClkControl(SYSTICK_ENABLE);
 8000652:	2001      	movs	r0, #1
 8000654:	f000 f84c 	bl	80006f0 <SysTick_u8ClkControl>

	/*4. Busy waiting for count flag*/
	while(((SysTick_u8GetCounterFlag()) != SYST_RISED_FLAG) && (Local_u32Counter < SYSTICK_TIMEOUT))
 8000658:	e004      	b.n	8000664 <Delay_u8MilliSec+0x3c>
	{
		Local_u32Counter++;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <Delay_u8MilliSec+0x7c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <Delay_u8MilliSec+0x7c>)
 8000662:	6013      	str	r3, [r2, #0]
	while(((SysTick_u8GetCounterFlag()) != SYST_RISED_FLAG) && (Local_u32Counter < SYSTICK_TIMEOUT))
 8000664:	f000 f860 	bl	8000728 <SysTick_u8GetCounterFlag>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	d004      	beq.n	8000678 <Delay_u8MilliSec+0x50>
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <Delay_u8MilliSec+0x7c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <Delay_u8MilliSec+0x80>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d9f0      	bls.n	800065a <Delay_u8MilliSec+0x32>
	}
	if(Local_u32Counter == SYSTICK_TIMEOUT)
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <Delay_u8MilliSec+0x7c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <Delay_u8MilliSec+0x84>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d101      	bne.n	8000686 <Delay_u8MilliSec+0x5e>
	{
		Local_u8ErrorState = NOK;
 8000682:	2302      	movs	r3, #2
 8000684:	73fb      	strb	r3, [r7, #15]
	}

	/*5. Stop Clock*/
	SysTick_u8ClkControl(SYSTICK_DISABLE);
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f832 	bl	80006f0 <SysTick_u8ClkControl>

	/*6. Clear Counter*/
	Local_u32Counter = 0;
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <Delay_u8MilliSec+0x7c>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]

	return Local_u8ErrorState;
 8000692:	7bfb      	ldrb	r3, [r7, #15]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	00f42400 	.word	0x00f42400
 80006a0:	10624dd3 	.word	0x10624dd3
 80006a4:	2000003c 	.word	0x2000003c
 80006a8:	00030d3f 	.word	0x00030d3f
 80006ac:	00030d40 	.word	0x00030d40

080006b0 <SysTick_u8SetClkSrc>:
 * @param[in]	Copy_u8ClkSource  : you can see @SysTick_ClkSrc_T
 * @param[in]	Copy_u8PreLoadVal : the preload value
 *	retval 		ErrorStatus
 * */
uint8_t SysTick_u8SetClkSrc(SysTick_ClkSrc_T Copy_u8ClkSource)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = OK;
 80006ba:	2301      	movs	r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]

	/*1. Set Clk Source*/
	SYSTICK->CSR &= ~(SYST_CLKSRC_MASK << SYST_CLKSRC_SHIFT);
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <SysTick_u8SetClkSrc+0x3c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <SysTick_u8SetClkSrc+0x3c>)
 80006c4:	f023 0304 	bic.w	r3, r3, #4
 80006c8:	6013      	str	r3, [r2, #0]
	SYSTICK->CSR |= ~(Copy_u8ClkSource << SYST_CLKSRC_SHIFT);
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <SysTick_u8SetClkSrc+0x3c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	43d2      	mvns	r2, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <SysTick_u8SetClkSrc+0x3c>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6013      	str	r3, [r2, #0]

	return Local_u8ErrorState;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]

}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <SysTick_u8ClkControl>:
/*	@brief		SysTick_u8ClkControl : control the timer by input configuration (Enable/Disable)
 * @param[in]	Copy_u8Control : you can see @SysTick_Control_T
 *	retval 		ErrorStatus
 * */
uint8_t SysTick_u8ClkControl(SysTick_Control_T Copy_u8Control)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = OK;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]

	SYSTICK->CSR &= ~(SYST_ENABLE_MASK);
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <SysTick_u8ClkControl+0x34>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <SysTick_u8ClkControl+0x34>)
 8000704:	f023 0303 	bic.w	r3, r3, #3
 8000708:	6013      	str	r3, [r2, #0]
	SYSTICK->CSR |= Copy_u8Control;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <SysTick_u8ClkControl+0x34>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4904      	ldr	r1, [pc, #16]	; (8000724 <SysTick_u8ClkControl+0x34>)
 8000712:	4313      	orrs	r3, r2
 8000714:	600b      	str	r3, [r1, #0]

	return Local_u8ErrorState;
 8000716:	7bfb      	ldrb	r3, [r7, #15]

}
 8000718:	4618      	mov	r0, r3
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e010 	.word	0xe000e010

08000728 <SysTick_u8GetCounterFlag>:

	return Local_u8ErrorState;
}

uint8_t SysTick_u8GetCounterFlag(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
	uint8_t Local_u8Flag = 0 ;
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
	Local_u8Flag = ((SYSTICK->CSR >> SYST_COUNT_FLAG_SHIFT)& SYST_COUNT_FLAG_ANDIG);
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <SysTick_u8GetCounterFlag+0x28>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	0c1b      	lsrs	r3, r3, #16
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]

	return Local_u8Flag;
 8000740:	79fb      	ldrb	r3, [r7, #7]
}
 8000742:	4618      	mov	r0, r3
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <SysTick_u8SetPreloadVal>:

uint8_t SysTick_u8SetPreloadVal(uint32_t Copy_u32PreloadVal)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = 0 ;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]

	SYSTICK->RVR = Copy_u32PreloadVal;
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <SysTick_u8SetPreloadVal+0x20>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6053      	str	r3, [r2, #4]

	return Local_u8ErrorState;
 8000766:	7bfb      	ldrb	r3, [r7, #15]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e010 	.word	0xe000e010

08000778 <main>:

#include "../Inc/RCC_interface.h"
#include "../Inc/GPIO_interface.h"

int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
	uint8_t Local_u8GetVal[8],
	Local_u8Avg;

	GPIO_PinConfig_T LED1 =
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	f8c3 2003 	str.w	r2, [r3, #3]
 800078a:	2308      	movs	r3, #8
 800078c:	777b      	strb	r3, [r7, #29]
 800078e:	2301      	movs	r3, #1
 8000790:	77bb      	strb	r3, [r7, #30]
 8000792:	2301      	movs	r3, #1
 8000794:	77fb      	strb	r3, [r7, #31]
			.OutType = PUSH_PULL,
			.Speed = MEDIUM

	};

	GPIO_PinConfig_T LED2 =
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	f8c3 2003 	str.w	r2, [r3, #3]
 80007a2:	2301      	movs	r3, #1
 80007a4:	753b      	strb	r3, [r7, #20]
 80007a6:	230a      	movs	r3, #10
 80007a8:	757b      	strb	r3, [r7, #21]
 80007aa:	2301      	movs	r3, #1
 80007ac:	75bb      	strb	r3, [r7, #22]
 80007ae:	2301      	movs	r3, #1
 80007b0:	75fb      	strb	r3, [r7, #23]
			.OutType = PUSH_PULL,
			.Speed = MEDIUM

	};

	GPIO_PinConfig_T LED3 =
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	f8c3 2003 	str.w	r2, [r3, #3]
 80007be:	2301      	movs	r3, #1
 80007c0:	733b      	strb	r3, [r7, #12]
 80007c2:	2304      	movs	r3, #4
 80007c4:	737b      	strb	r3, [r7, #13]
 80007c6:	2301      	movs	r3, #1
 80007c8:	73bb      	strb	r3, [r7, #14]
 80007ca:	2301      	movs	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
			.OutType = PUSH_PULL,
			.Speed = MEDIUM

	};

	GPIO_PinConfig_T KEY1 =
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	f8c3 2003 	str.w	r2, [r3, #3]
 80007d8:	2306      	movs	r3, #6
 80007da:	717b      	strb	r3, [r7, #5]
 80007dc:	2301      	movs	r3, #1
 80007de:	727b      	strb	r3, [r7, #9]
			.Mode = INPUT,
			.PullType = PULL_UP

	};

	RCC_u8PeripheralClkEnable(GPIOA_Per, RCC_AHB1_CLK);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff fec2 	bl	800056c <RCC_u8PeripheralClkEnable>
	RCC_u8PeripheralClkEnable(GPIOB_Per, RCC_AHB1_CLK);
 80007e8:	2101      	movs	r1, #1
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff febe 	bl	800056c <RCC_u8PeripheralClkEnable>

	GPIO_u8PinInit(&LED1);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fd05 	bl	8000204 <GPIO_u8PinInit>
	GPIO_u8PinInit(&LED2);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fd00 	bl	8000204 <GPIO_u8PinInit>
	GPIO_u8PinInit(&LED3);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fcfb 	bl	8000204 <GPIO_u8PinInit>

	GPIO_u8PinInit(&KEY1);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fcf7 	bl	8000204 <GPIO_u8PinInit>

	while(1)
	{
		Local_u8Avg = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		for(uint8_t Counter = 0 ; Counter < 8 ;Counter++)
 800081c:	2300      	movs	r3, #0
 800081e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000822:	e023      	b.n	800086c <main+0xf4>
		{
			GPIO_u8ReadPinValue(KEY1.Port, KEY1.PinNum, &Local_u8GetVal[Counter]);
 8000824:	7938      	ldrb	r0, [r7, #4]
 8000826:	7979      	ldrb	r1, [r7, #5]
 8000828:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800082c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000830:	4413      	add	r3, r2
 8000832:	461a      	mov	r2, r3
 8000834:	f7ff fe70 	bl	8000518 <GPIO_u8ReadPinValue>
			Delay_u8MilliSec(5);
 8000838:	2005      	movs	r0, #5
 800083a:	f7ff fef5 	bl	8000628 <Delay_u8MilliSec>
			Local_u8Avg |= (Local_u8GetVal[Counter] << Counter);
 800083e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000842:	3330      	adds	r3, #48	; 0x30
 8000844:	443b      	add	r3, r7
 8000846:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800084a:	461a      	mov	r2, r3
 800084c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	b25a      	sxtb	r2, r3
 8000856:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800085a:	4313      	orrs	r3, r2
 800085c:	b25b      	sxtb	r3, r3
 800085e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for(uint8_t Counter = 0 ; Counter < 8 ;Counter++)
 8000862:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000866:	3301      	adds	r3, #1
 8000868:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800086c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000870:	2b07      	cmp	r3, #7
 8000872:	d9d7      	bls.n	8000824 <main+0xac>

		}
		/*Key1 is pressed*/
		if(Local_u8Avg >= 240)
 8000874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000878:	2bef      	cmp	r3, #239	; 0xef
 800087a:	d909      	bls.n	8000890 <main+0x118>
		{
			GPIO_u8SetPinValue(LED1.Port, LED1.PinNum, PIN_HIGH);
 800087c:	7f3b      	ldrb	r3, [r7, #28]
 800087e:	7f79      	ldrb	r1, [r7, #29]
 8000880:	2201      	movs	r2, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe06 	bl	8000494 <GPIO_u8SetPinValue>
			Delay_u8MilliSec(50);
 8000888:	2032      	movs	r0, #50	; 0x32
 800088a:	f7ff fecd 	bl	8000628 <Delay_u8MilliSec>
 800088e:	e01a      	b.n	80008c6 <main+0x14e>

		}

		/*Key2 is pressed*/
		else if(Local_u8Avg >= 15)
 8000890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000894:	2b0e      	cmp	r3, #14
 8000896:	d909      	bls.n	80008ac <main+0x134>
		{
			GPIO_u8SetPinValue(LED2.Port, LED2.PinNum, PIN_HIGH);
 8000898:	7d3b      	ldrb	r3, [r7, #20]
 800089a:	7d79      	ldrb	r1, [r7, #21]
 800089c:	2201      	movs	r2, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fdf8 	bl	8000494 <GPIO_u8SetPinValue>
			Delay_u8MilliSec(50);
 80008a4:	2032      	movs	r0, #50	; 0x32
 80008a6:	f7ff febf 	bl	8000628 <Delay_u8MilliSec>
 80008aa:	e00c      	b.n	80008c6 <main+0x14e>
		}

		/*Key3 is pressed*/
		else if(Local_u8Avg >= 6)
 80008ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008b0:	2b05      	cmp	r3, #5
 80008b2:	d908      	bls.n	80008c6 <main+0x14e>
		{
			GPIO_u8SetPinValue(LED3.Port, LED3.PinNum, PIN_HIGH);
 80008b4:	7b3b      	ldrb	r3, [r7, #12]
 80008b6:	7b79      	ldrb	r1, [r7, #13]
 80008b8:	2201      	movs	r2, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fdea 	bl	8000494 <GPIO_u8SetPinValue>
			Delay_u8MilliSec(50);
 80008c0:	2032      	movs	r0, #50	; 0x32
 80008c2:	f7ff feb1 	bl	8000628 <Delay_u8MilliSec>
		}

		GPIO_u8SetPinValue(LED1.Port, LED1.PinNum, PIN_LOW);
 80008c6:	7f3b      	ldrb	r3, [r7, #28]
 80008c8:	7f79      	ldrb	r1, [r7, #29]
 80008ca:	2200      	movs	r2, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fde1 	bl	8000494 <GPIO_u8SetPinValue>
		GPIO_u8SetPinValue(LED2.Port, LED2.PinNum, PIN_LOW);
 80008d2:	7d3b      	ldrb	r3, [r7, #20]
 80008d4:	7d79      	ldrb	r1, [r7, #21]
 80008d6:	2200      	movs	r2, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fddb 	bl	8000494 <GPIO_u8SetPinValue>
		GPIO_u8SetPinValue(LED3.Port, LED3.PinNum, PIN_LOW);
 80008de:	7b3b      	ldrb	r3, [r7, #12]
 80008e0:	7b79      	ldrb	r1, [r7, #13]
 80008e2:	2200      	movs	r2, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fdd5 	bl	8000494 <GPIO_u8SetPinValue>
		Local_u8Avg = 0;
 80008ea:	e794      	b.n	8000816 <main+0x9e>

080008ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	; (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	; (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800091a:	f000 f811 	bl	8000940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff ff2b 	bl	8000778 <main>

08000922 <LoopForever>:

LoopForever:
  b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   r0, =_estack
 8000924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000930:	080009a8 	.word	0x080009a8
  ldr r2, =_sbss
 8000934:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000938:	20000040 	.word	0x20000040

0800093c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC_IRQHandler>
	...

08000940 <__libc_init_array>:
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	4d0d      	ldr	r5, [pc, #52]	; (8000978 <__libc_init_array+0x38>)
 8000944:	4c0d      	ldr	r4, [pc, #52]	; (800097c <__libc_init_array+0x3c>)
 8000946:	1b64      	subs	r4, r4, r5
 8000948:	10a4      	asrs	r4, r4, #2
 800094a:	2600      	movs	r6, #0
 800094c:	42a6      	cmp	r6, r4
 800094e:	d109      	bne.n	8000964 <__libc_init_array+0x24>
 8000950:	4d0b      	ldr	r5, [pc, #44]	; (8000980 <__libc_init_array+0x40>)
 8000952:	4c0c      	ldr	r4, [pc, #48]	; (8000984 <__libc_init_array+0x44>)
 8000954:	f000 f818 	bl	8000988 <_init>
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	10a4      	asrs	r4, r4, #2
 800095c:	2600      	movs	r6, #0
 800095e:	42a6      	cmp	r6, r4
 8000960:	d105      	bne.n	800096e <__libc_init_array+0x2e>
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f855 3b04 	ldr.w	r3, [r5], #4
 8000968:	4798      	blx	r3
 800096a:	3601      	adds	r6, #1
 800096c:	e7ee      	b.n	800094c <__libc_init_array+0xc>
 800096e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000972:	4798      	blx	r3
 8000974:	3601      	adds	r6, #1
 8000976:	e7f2      	b.n	800095e <__libc_init_array+0x1e>
 8000978:	080009a0 	.word	0x080009a0
 800097c:	080009a0 	.word	0x080009a0
 8000980:	080009a0 	.word	0x080009a0
 8000984:	080009a4 	.word	0x080009a4

08000988 <_init>:
 8000988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098a:	bf00      	nop
 800098c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800098e:	bc08      	pop	{r3}
 8000990:	469e      	mov	lr, r3
 8000992:	4770      	bx	lr

08000994 <_fini>:
 8000994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000996:	bf00      	nop
 8000998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800099a:	bc08      	pop	{r3}
 800099c:	469e      	mov	lr, r3
 800099e:	4770      	bx	lr
