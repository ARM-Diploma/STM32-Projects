
Deployment_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad4  08006398  08006398  00016398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e6c  08006e6c  00020c94  2**0
                  CONTENTS
  4 .ARM          00000008  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e74  08006e74  00020c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c94  20000000  08006e7c  00020000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000c94  08007b10  00020c94  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20000e60  08007b10  00020e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020c94  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019af9  00000000  00000000  00020cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405c  00000000  00000000  0003a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0003e820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  0003f4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261b9  00000000  00000000  000408e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019eeb  00000000  00000000  00066a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e74b7  00000000  00000000  00080984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167e3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003648  00000000  00000000  00167e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000e89d  00000000  00000000  0016b4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000c94 	.word	0x20000c94
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006380 	.word	0x08006380

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000c98 	.word	0x20000c98
 800020c:	08006380 	.word	0x08006380

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b992 	b.w	8000f24 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f824 	bl	8000c54 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2ulz>:
 8000c18:	b5d0      	push	{r4, r6, r7, lr}
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__aeabi_d2ulz+0x34>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4606      	mov	r6, r0
 8000c20:	460f      	mov	r7, r1
 8000c22:	f7ff fd09 	bl	8000638 <__aeabi_dmul>
 8000c26:	f000 f97f 	bl	8000f28 <__aeabi_d2uiz>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	f7ff fc8a 	bl	8000544 <__aeabi_ui2d>
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <__aeabi_d2ulz+0x38>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f7ff fd00 	bl	8000638 <__aeabi_dmul>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	4639      	mov	r1, r7
 8000c40:	f7ff fb42 	bl	80002c8 <__aeabi_dsub>
 8000c44:	f000 f970 	bl	8000f28 <__aeabi_d2uiz>
 8000c48:	4621      	mov	r1, r4
 8000c4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c4c:	3df00000 	.word	0x3df00000
 8000c50:	41f00000 	.word	0x41f00000

08000c54 <__udivmoddi4>:
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	9d08      	ldr	r5, [sp, #32]
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	468e      	mov	lr, r1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d14d      	bne.n	8000cfe <__udivmoddi4+0xaa>
 8000c62:	428a      	cmp	r2, r1
 8000c64:	4694      	mov	ip, r2
 8000c66:	d969      	bls.n	8000d3c <__udivmoddi4+0xe8>
 8000c68:	fab2 f282 	clz	r2, r2
 8000c6c:	b152      	cbz	r2, 8000c84 <__udivmoddi4+0x30>
 8000c6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c72:	f1c2 0120 	rsb	r1, r2, #32
 8000c76:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c82:	4094      	lsls	r4, r2
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	0c21      	lsrs	r1, r4, #16
 8000c8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c8e:	fa1f f78c 	uxth.w	r7, ip
 8000c92:	fb08 e316 	mls	r3, r8, r6, lr
 8000c96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9a:	fb06 f107 	mul.w	r1, r6, r7
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x64>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000caa:	f080 811f 	bcs.w	8000eec <__udivmoddi4+0x298>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 811c 	bls.w	8000eec <__udivmoddi4+0x298>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 f707 	mul.w	r7, r0, r7
 8000ccc:	42a7      	cmp	r7, r4
 8000cce:	d90a      	bls.n	8000ce6 <__udivmoddi4+0x92>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd8:	f080 810a 	bcs.w	8000ef0 <__udivmoddi4+0x29c>
 8000cdc:	42a7      	cmp	r7, r4
 8000cde:	f240 8107 	bls.w	8000ef0 <__udivmoddi4+0x29c>
 8000ce2:	4464      	add	r4, ip
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	1be4      	subs	r4, r4, r7
 8000cec:	2600      	movs	r6, #0
 8000cee:	b11d      	cbz	r5, 8000cf8 <__udivmoddi4+0xa4>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xc2>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80ef 	beq.w	8000ee6 <__udivmoddi4+0x292>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x160>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd4>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80f9 	bhi.w	8000f1a <__udivmoddi4+0x2c6>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	469e      	mov	lr, r3
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa4>
 8000d36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa4>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xec>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 8092 	bne.w	8000e6e <__udivmoddi4+0x21a>
 8000d4a:	eba1 010c 	sub.w	r1, r1, ip
 8000d4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	2601      	movs	r6, #1
 8000d58:	0c20      	lsrs	r0, r4, #16
 8000d5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000d62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d66:	fb0e f003 	mul.w	r0, lr, r3
 8000d6a:	4288      	cmp	r0, r1
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x12c>
 8000d6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000d72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x12a>
 8000d78:	4288      	cmp	r0, r1
 8000d7a:	f200 80cb 	bhi.w	8000f14 <__udivmoddi4+0x2c0>
 8000d7e:	4643      	mov	r3, r8
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d88:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d90:	fb0e fe00 	mul.w	lr, lr, r0
 8000d94:	45a6      	cmp	lr, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x156>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x154>
 8000da2:	45a6      	cmp	lr, r4
 8000da4:	f200 80bb 	bhi.w	8000f1e <__udivmoddi4+0x2ca>
 8000da8:	4608      	mov	r0, r1
 8000daa:	eba4 040e 	sub.w	r4, r4, lr
 8000dae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db2:	e79c      	b.n	8000cee <__udivmoddi4+0x9a>
 8000db4:	f1c6 0720 	rsb	r7, r6, #32
 8000db8:	40b3      	lsls	r3, r6
 8000dba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc2:	fa20 f407 	lsr.w	r4, r0, r7
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	431c      	orrs	r4, r3
 8000dcc:	40f9      	lsrs	r1, r7
 8000dce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd2:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dda:	0c20      	lsrs	r0, r4, #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fb09 1118 	mls	r1, r9, r8, r1
 8000de4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de8:	fb08 f00e 	mul.w	r0, r8, lr
 8000dec:	4288      	cmp	r0, r1
 8000dee:	fa02 f206 	lsl.w	r2, r2, r6
 8000df2:	d90b      	bls.n	8000e0c <__udivmoddi4+0x1b8>
 8000df4:	eb1c 0101 	adds.w	r1, ip, r1
 8000df8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dfc:	f080 8088 	bcs.w	8000f10 <__udivmoddi4+0x2bc>
 8000e00:	4288      	cmp	r0, r1
 8000e02:	f240 8085 	bls.w	8000f10 <__udivmoddi4+0x2bc>
 8000e06:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0a:	4461      	add	r1, ip
 8000e0c:	1a09      	subs	r1, r1, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e14:	fb09 1110 	mls	r1, r9, r0, r1
 8000e18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e20:	458e      	cmp	lr, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1e2>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e2c:	d26c      	bcs.n	8000f08 <__udivmoddi4+0x2b4>
 8000e2e:	458e      	cmp	lr, r1
 8000e30:	d96a      	bls.n	8000f08 <__udivmoddi4+0x2b4>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000e3e:	eba1 010e 	sub.w	r1, r1, lr
 8000e42:	42a1      	cmp	r1, r4
 8000e44:	46c8      	mov	r8, r9
 8000e46:	46a6      	mov	lr, r4
 8000e48:	d356      	bcc.n	8000ef8 <__udivmoddi4+0x2a4>
 8000e4a:	d053      	beq.n	8000ef4 <__udivmoddi4+0x2a0>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x212>
 8000e4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000e52:	eb61 010e 	sbc.w	r1, r1, lr
 8000e56:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000e5e:	40f1      	lsrs	r1, r6
 8000e60:	431f      	orrs	r7, r3
 8000e62:	e9c5 7100 	strd	r7, r1, [r5]
 8000e66:	2600      	movs	r6, #0
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	f1c2 0320 	rsb	r3, r2, #32
 8000e72:	40d8      	lsrs	r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7c:	4091      	lsls	r1, r2
 8000e7e:	4301      	orrs	r1, r0
 8000e80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e84:	fa1f fe8c 	uxth.w	lr, ip
 8000e88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e90:	0c0b      	lsrs	r3, r1, #16
 8000e92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e96:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9a:	429e      	cmp	r6, r3
 8000e9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x260>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eaa:	d22f      	bcs.n	8000f0c <__udivmoddi4+0x2b8>
 8000eac:	429e      	cmp	r6, r3
 8000eae:	d92d      	bls.n	8000f0c <__udivmoddi4+0x2b8>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1b9b      	subs	r3, r3, r6
 8000eb6:	b289      	uxth	r1, r1
 8000eb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ebc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x28a>
 8000ecc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed4:	d216      	bcs.n	8000f04 <__udivmoddi4+0x2b0>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d914      	bls.n	8000f04 <__udivmoddi4+0x2b0>
 8000eda:	3e02      	subs	r6, #2
 8000edc:	4461      	add	r1, ip
 8000ede:	1ac9      	subs	r1, r1, r3
 8000ee0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee4:	e738      	b.n	8000d58 <__udivmoddi4+0x104>
 8000ee6:	462e      	mov	r6, r5
 8000ee8:	4628      	mov	r0, r5
 8000eea:	e705      	b.n	8000cf8 <__udivmoddi4+0xa4>
 8000eec:	4606      	mov	r6, r0
 8000eee:	e6e3      	b.n	8000cb8 <__udivmoddi4+0x64>
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	e6f8      	b.n	8000ce6 <__udivmoddi4+0x92>
 8000ef4:	454b      	cmp	r3, r9
 8000ef6:	d2a9      	bcs.n	8000e4c <__udivmoddi4+0x1f8>
 8000ef8:	ebb9 0802 	subs.w	r8, r9, r2
 8000efc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f00:	3801      	subs	r0, #1
 8000f02:	e7a3      	b.n	8000e4c <__udivmoddi4+0x1f8>
 8000f04:	4646      	mov	r6, r8
 8000f06:	e7ea      	b.n	8000ede <__udivmoddi4+0x28a>
 8000f08:	4620      	mov	r0, r4
 8000f0a:	e794      	b.n	8000e36 <__udivmoddi4+0x1e2>
 8000f0c:	4640      	mov	r0, r8
 8000f0e:	e7d1      	b.n	8000eb4 <__udivmoddi4+0x260>
 8000f10:	46d0      	mov	r8, sl
 8000f12:	e77b      	b.n	8000e0c <__udivmoddi4+0x1b8>
 8000f14:	3b02      	subs	r3, #2
 8000f16:	4461      	add	r1, ip
 8000f18:	e732      	b.n	8000d80 <__udivmoddi4+0x12c>
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	e709      	b.n	8000d32 <__udivmoddi4+0xde>
 8000f1e:	4464      	add	r4, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e742      	b.n	8000daa <__udivmoddi4+0x156>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__aeabi_d2uiz>:
 8000f28:	004a      	lsls	r2, r1, #1
 8000f2a:	d211      	bcs.n	8000f50 <__aeabi_d2uiz+0x28>
 8000f2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f30:	d211      	bcs.n	8000f56 <__aeabi_d2uiz+0x2e>
 8000f32:	d50d      	bpl.n	8000f50 <__aeabi_d2uiz+0x28>
 8000f34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f3c:	d40e      	bmi.n	8000f5c <__aeabi_d2uiz+0x34>
 8000f3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000f4e:	4770      	bx	lr
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4770      	bx	lr
 8000f56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f5a:	d102      	bne.n	8000f62 <__aeabi_d2uiz+0x3a>
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	4770      	bx	lr
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	4770      	bx	lr

08000f68 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_CRC_Init+0x18>)
{
 8000f6a:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <MX_CRC_Init+0x1c>)
 8000f6e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f70:	f000 faf4 	bl	800155c <HAL_CRC_Init>
 8000f74:	b118      	cbz	r0, 8000f7e <MX_CRC_Init+0x16>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000f7a:	f000 b8f5 	b.w	8001168 <Error_Handler>
}
 8000f7e:	bd08      	pop	{r3, pc}
 8000f80:	20000cb0 	.word	0x20000cb0
 8000f84:	40023000 	.word	0x40023000

08000f88 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000f88:	6802      	ldr	r2, [r0, #0]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_CRC_MspInit+0x28>)
 8000f8c:	429a      	cmp	r2, r3
{
 8000f8e:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000f90:	d10b      	bne.n	8000faa <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_CRC_MspInit+0x2c>)
 8000f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000faa:	b002      	add	sp, #8
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023000 	.word	0x40023000
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	2214      	movs	r2, #20
{
 8000fbc:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	eb0d 0002 	add.w	r0, sp, r2
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f002 fba2 	bl	800370c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc8:	2400      	movs	r4, #0
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_GPIO_Init+0xa0>)
 8000fcc:	9401      	str	r4, [sp, #4]
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fd0:	4d22      	ldr	r5, [pc, #136]	; (800105c <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	f042 0204 	orr.w	r2, r2, #4
 8000fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fda:	f002 0204 	and.w	r2, r2, #4
 8000fde:	9201      	str	r2, [sp, #4]
 8000fe0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	9402      	str	r4, [sp, #8]
 8000fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
 8000fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fee:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ff2:	9202      	str	r2, [sp, #8]
 8000ff4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	9403      	str	r4, [sp, #12]
 8000ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffa:	f042 0201 	orr.w	r2, r2, #1
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8001000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001002:	f002 0201 	and.w	r2, r2, #1
 8001006:	9203      	str	r2, [sp, #12]
 8001008:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	9404      	str	r4, [sp, #16]
 800100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100e:	f042 0202 	orr.w	r2, r2, #2
 8001012:	631a      	str	r2, [r3, #48]	; 0x30
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800101c:	4622      	mov	r2, r4
 800101e:	4628      	mov	r0, r5
 8001020:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001024:	f000 fb7e 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001028:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001030:	a905      	add	r1, sp, #20
 8001032:	480b      	ldr	r0, [pc, #44]	; (8001060 <MX_GPIO_Init+0xa8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001036:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800103a:	f000 fa9f 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	2120      	movs	r1, #32
 8001042:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001046:	4628      	mov	r0, r5
 8001048:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800104e:	f000 fa95 	bl	800157c <HAL_GPIO_Init>

}
 8001052:	b00b      	add	sp, #44	; 0x2c
 8001054:	bd30      	pop	{r4, r5, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000
 8001060:	40020800 	.word	0x40020800

08001064 <aiInit>:

/* Array of pointer to manage the model's input/output tensors */
static ai_buffer *ai_input;
static ai_buffer *ai_output;

int aiInit(void) {
 8001064:	b508      	push	{r3, lr}
	ai_error err;

	/* Create and initialize the c-model */
	err = ai_test1_create(&test1,NULL);
 8001066:	2100      	movs	r1, #0
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <aiInit+0x10>)
 800106a:	f001 fc85 	bl	8002978 <ai_test1_create>

	return 0;
}
 800106e:	2000      	movs	r0, #0
 8001070:	bd08      	pop	{r3, pc}
 8001072:	bf00      	nop
 8001074:	20000cb8 	.word	0x20000cb8

08001078 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001078:	b510      	push	{r4, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107c:	2214      	movs	r2, #20
 800107e:	2100      	movs	r1, #0
 8001080:	a808      	add	r0, sp, #32
 8001082:	f002 fb43 	bl	800370c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001086:	2214      	movs	r2, #20
 8001088:	2100      	movs	r1, #0
 800108a:	a802      	add	r0, sp, #8
 800108c:	f002 fb3e 	bl	800370c <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <SystemClock_Config+0xa0>)
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001098:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800109c:	6411      	str	r1, [r2, #64]	; 0x40
 800109e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010a0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <SystemClock_Config+0xa4>)
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	6811      	ldr	r1, [r2, #0]
 80010ae:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80010b2:	6011      	str	r1, [r2, #0]
 80010b4:	6812      	ldr	r2, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b6:	2402      	movs	r4, #2
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
	RCC_OscInitStruct.PLL.PLLN = 180;
 80010bc:	2008      	movs	r0, #8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010be:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c2:	9201      	str	r2, [sp, #4]
	RCC_OscInitStruct.PLL.PLLN = 180;
 80010c4:	23b4      	movs	r3, #180	; 0xb4
 80010c6:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ca:	9a01      	ldr	r2, [sp, #4]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010cc:	9407      	str	r4, [sp, #28]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ce:	2101      	movs	r1, #1
 80010d0:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLP = 2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	RCC_OscInitStruct.PLL.PLLR = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d4:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80010d8:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 80010dc:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f000 fc6b 	bl	80019b8 <HAL_RCC_OscConfig>
 80010e2:	b108      	cbz	r0, 80010e8 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010e6:	e7fe      	b.n	80010e6 <SystemClock_Config+0x6e>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010e8:	f000 fb22 	bl	8001730 <HAL_PWREx_EnableOverDrive>
 80010ec:	b108      	cbz	r0, 80010f2 <SystemClock_Config+0x7a>
 80010ee:	b672      	cpsid	i
	while (1)
 80010f0:	e7fe      	b.n	80010f0 <SystemClock_Config+0x78>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	e9cd 3402 	strd	r3, r4, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010fa:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001102:	2105      	movs	r1, #5
 8001104:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001106:	e9cd 2305 	strd	r2, r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800110a:	f000 fb4b 	bl	80017a4 <HAL_RCC_ClockConfig>
 800110e:	b108      	cbz	r0, 8001114 <SystemClock_Config+0x9c>
 8001110:	b672      	cpsid	i
	while (1)
 8001112:	e7fe      	b.n	8001112 <SystemClock_Config+0x9a>
}
 8001114:	b014      	add	sp, #80	; 0x50
 8001116:	bd10      	pop	{r4, pc}
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <main>:
{
 8001120:	b513      	push	{r0, r1, r4, lr}
	__HAL_RCC_CRC_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <main+0x40>)
 8001124:	2400      	movs	r4, #0
 8001126:	9401      	str	r4, [sp, #4]
 8001128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800112a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800112e:	631a      	str	r2, [r3, #48]	; 0x30
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	9b01      	ldr	r3, [sp, #4]
	aiInit();
 800113a:	f7ff ff93 	bl	8001064 <aiInit>
	HAL_Init();
 800113e:	f000 f963 	bl	8001408 <HAL_Init>
	SystemClock_Config();
 8001142:	f7ff ff99 	bl	8001078 <SystemClock_Config>
	MX_GPIO_Init();
 8001146:	f7ff ff37 	bl	8000fb8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800114a:	f000 f8bd 	bl	80012c8 <MX_USART2_UART_Init>
	MX_CRC_Init();
 800114e:	f7ff ff0b 	bl	8000f68 <MX_CRC_Init>
	MX_TIM10_Init();
 8001152:	f000 f887 	bl	8001264 <MX_TIM10_Init>
	MX_X_CUBE_AI_Init();
 8001156:	f001 f95d 	bl	8002414 <MX_X_CUBE_AI_Init>
		  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800115a:	4b02      	ldr	r3, [pc, #8]	; (8001164 <main+0x44>)
 800115c:	6063      	str	r3, [r4, #4]
 800115e:	deff      	udf	#255	; 0xff
 8001160:	40023800 	.word	0x40023800
 8001164:	20000000 	.word	0x20000000

08001168 <Error_Handler>:
 8001168:	b672      	cpsid	i
	while (1)
 800116a:	e7fe      	b.n	800116a <Error_Handler+0x2>

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_MspInit+0x38>)
 8001170:	2100      	movs	r1, #0
 8001172:	9100      	str	r1, [sp, #0]
 8001174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800117a:	645a      	str	r2, [r3, #68]	; 0x44
 800117c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800117e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001182:	9200      	str	r2, [sp, #0]
 8001184:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	9101      	str	r1, [sp, #4]
 8001188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800118a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800119a:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119c:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800119e:	f000 b985 	b.w	80014ac <HAL_NVIC_SetPriorityGrouping>
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler>

080011aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler>

080011ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <MemManage_Handler>

080011ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler>

080011b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler>

080011b2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b2:	4770      	bx	lr

080011b4 <DebugMon_Handler>:
 80011b4:	4770      	bx	lr

080011b6 <PendSV_Handler>:
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b8:	f000 b940 	b.w	800143c <HAL_IncTick>

080011bc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80011bc:	2001      	movs	r0, #1
 80011be:	4770      	bx	lr

080011c0 <_kill>:

int _kill(int pid, int sig)
{
 80011c0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011c2:	f002 fa63 	bl	800368c <__errno>
 80011c6:	2316      	movs	r3, #22
 80011c8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
 80011ce:	bd08      	pop	{r3, pc}

080011d0 <_exit>:

void _exit (int status)
{
 80011d0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80011d2:	f002 fa5b 	bl	800368c <__errno>
 80011d6:	2316      	movs	r3, #22
 80011d8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80011da:	e7fe      	b.n	80011da <_exit+0xa>

080011dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	460d      	mov	r5, r1
 80011e0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	460e      	mov	r6, r1
 80011e4:	1b73      	subs	r3, r6, r5
 80011e6:	429c      	cmp	r4, r3
 80011e8:	dc01      	bgt.n	80011ee <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80011ea:	4620      	mov	r0, r4
 80011ec:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80011ee:	f3af 8000 	nop.w
 80011f2:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	e7f5      	b.n	80011e4 <_read+0x8>

080011f8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	4770      	bx	lr

080011fe <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80011fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001202:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001204:	2000      	movs	r0, #0
 8001206:	4770      	bx	lr

08001208 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001208:	2001      	movs	r0, #1
 800120a:	4770      	bx	lr

0800120c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800120c:	2000      	movs	r0, #0
 800120e:	4770      	bx	lr

08001210 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <_sbrk+0x30>)
 8001212:	6811      	ldr	r1, [r2, #0]
{
 8001214:	b510      	push	{r4, lr}
 8001216:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001218:	b909      	cbnz	r1, 800121e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800121a:	490a      	ldr	r1, [pc, #40]	; (8001244 <_sbrk+0x34>)
 800121c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	6810      	ldr	r0, [r2, #0]
 8001220:	4909      	ldr	r1, [pc, #36]	; (8001248 <_sbrk+0x38>)
 8001222:	4c0a      	ldr	r4, [pc, #40]	; (800124c <_sbrk+0x3c>)
 8001224:	4403      	add	r3, r0
 8001226:	1b09      	subs	r1, r1, r4
 8001228:	428b      	cmp	r3, r1
 800122a:	d906      	bls.n	800123a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800122c:	f002 fa2e 	bl	800368c <__errno>
 8001230:	230c      	movs	r3, #12
 8001232:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001234:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001238:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800123a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800123c:	e7fc      	b.n	8001238 <_sbrk+0x28>
 800123e:	bf00      	nop
 8001240:	20000cbc 	.word	0x20000cbc
 8001244:	20000e60 	.word	0x20000e60
 8001248:	20020000 	.word	0x20020000
 800124c:	00000800 	.word	0x00000800

08001250 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	4a03      	ldr	r2, [pc, #12]	; (8001260 <SystemInit+0x10>)
 8001252:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001256:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <MX_TIM10_Init>:
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001264:	480a      	ldr	r0, [pc, #40]	; (8001290 <MX_TIM10_Init+0x2c>)
  htim10.Init.Prescaler = 80-1;
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <MX_TIM10_Init+0x30>)
{
 8001268:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 80-1;
 800126a:	234f      	movs	r3, #79	; 0x4f
 800126c:	e9c0 2300 	strd	r2, r3, [r0]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 65535;
 8001270:	2300      	movs	r3, #0
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800127e:	f000 fdc9 	bl	8001e14 <HAL_TIM_Base_Init>
 8001282:	b118      	cbz	r0, 800128c <MX_TIM10_Init+0x28>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001288:	f7ff bf6e 	b.w	8001168 <Error_Handler>
}
 800128c:	bd08      	pop	{r3, pc}
 800128e:	bf00      	nop
 8001290:	20000cc0 	.word	0x20000cc0
 8001294:	40014400 	.word	0x40014400

08001298 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM10)
 8001298:	6802      	ldr	r2, [r0, #0]
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_TIM_Base_MspInit+0x28>)
 800129c:	429a      	cmp	r2, r3
{
 800129e:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM10)
 80012a0:	d10b      	bne.n	80012ba <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <HAL_TIM_Base_MspInit+0x2c>)
 80012a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012ae:	645a      	str	r2, [r3, #68]	; 0x44
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80012ba:	b002      	add	sp, #8
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40014400 	.word	0x40014400
 80012c4:	40023800 	.word	0x40023800

080012c8 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80012ca:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <MX_USART2_UART_Init+0x34>)
{
 80012cc:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 80012ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80012d2:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012da:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e2:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012e6:	f000 fe55 	bl	8001f94 <HAL_UART_Init>
 80012ea:	b118      	cbz	r0, 80012f4 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80012f0:	f7ff bf3a 	b.w	8001168 <Error_Handler>
}
 80012f4:	bd08      	pop	{r3, pc}
 80012f6:	bf00      	nop
 80012f8:	20000d08 	.word	0x20000d08
 80012fc:	40004400 	.word	0x40004400

08001300 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001300:	b510      	push	{r4, lr}
 8001302:	4604      	mov	r4, r0
 8001304:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	2214      	movs	r2, #20
 8001308:	2100      	movs	r1, #0
 800130a:	a803      	add	r0, sp, #12
 800130c:	f002 f9fe 	bl	800370c <memset>
  if(uartHandle->Instance==USART2)
 8001310:	6822      	ldr	r2, [r4, #0]
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_UART_MspInit+0x64>)
 8001314:	429a      	cmp	r2, r3
 8001316:	d122      	bne.n	800135e <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001318:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800131c:	2100      	movs	r1, #0
 800131e:	9101      	str	r1, [sp, #4]
 8001320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001324:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
 800132a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	9102      	str	r1, [sp, #8]
 8001336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001338:	f042 0201 	orr.w	r2, r2, #1
 800133c:	631a      	str	r2, [r3, #48]	; 0x30
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	220c      	movs	r2, #12
 800134a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134c:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001352:	2307      	movs	r3, #7
 8001354:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	a903      	add	r1, sp, #12
 800135a:	f000 f90f 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800135e:	b008      	add	sp, #32
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop
 8001364:	40004400 	.word	0x40004400
 8001368:	40020000 	.word	0x40020000

0800136c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001372:	490e      	ldr	r1, [pc, #56]	; (80013ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001374:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001388:	4c0b      	ldr	r4, [pc, #44]	; (80013b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001396:	f7ff ff5b 	bl	8001250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139a:	f002 f97d 	bl	8003698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139e:	f7ff febf 	bl	8001120 <main>
  bx  lr    
 80013a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	20000c94 	.word	0x20000c94
  ldr r2, =_sidata
 80013b0:	08006e7c 	.word	0x08006e7c
  ldr r2, =_sbss
 80013b4:	20000c94 	.word	0x20000c94
  ldr r4, =_ebss
 80013b8:	20000e60 	.word	0x20000e60

080013bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC_IRQHandler>
	...

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_InitTick+0x3c>)
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_InitTick+0x40>)
{
 80013c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	7818      	ldrb	r0, [r3, #0]
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80013d2:	6810      	ldr	r0, [r2, #0]
 80013d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80013d8:	f000 f8ac 	bl	8001534 <HAL_SYSTICK_Config>
 80013dc:	4604      	mov	r4, r0
 80013de:	b958      	cbnz	r0, 80013f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e0:	2d0f      	cmp	r5, #15
 80013e2:	d809      	bhi.n	80013f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e4:	4602      	mov	r2, r0
 80013e6:	4629      	mov	r1, r5
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ec:	f000 f870 	bl	80014d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_InitTick+0x44>)
 80013f2:	4620      	mov	r0, r4
 80013f4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80013f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80013f8:	2001      	movs	r0, #1
 80013fa:	e7fc      	b.n	80013f6 <HAL_InitTick+0x36>
 80013fc:	20000018 	.word	0x20000018
 8001400:	2000001c 	.word	0x2000001c
 8001404:	20000020 	.word	0x20000020

08001408 <HAL_Init>:
{
 8001408:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_Init+0x30>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001412:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800141a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001422:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f841 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff ffc8 	bl	80013c0 <HAL_InitTick>
  HAL_MspInit();
 8001430:	f7ff fe9c 	bl	800116c <HAL_MspInit>
}
 8001434:	2000      	movs	r0, #0
 8001436:	bd08      	pop	{r3, pc}
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <HAL_IncTick+0x10>)
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <HAL_IncTick+0x14>)
 8001440:	6811      	ldr	r1, [r2, #0]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	440b      	add	r3, r1
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000d4c 	.word	0x20000d4c
 8001450:	2000001c 	.word	0x2000001c

08001454 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001454:	4b01      	ldr	r3, [pc, #4]	; (800145c <HAL_GetTick+0x8>)
 8001456:	6818      	ldr	r0, [r3, #0]
}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000d4c 	.word	0x20000d4c

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b538      	push	{r3, r4, r5, lr}
 8001462:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fff6 	bl	8001454 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001468:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	bf1c      	itt	ne
 800146c:	4b05      	ldrne	r3, [pc, #20]	; (8001484 <HAL_Delay+0x24>)
 800146e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001470:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001472:	bf18      	it	ne
 8001474:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001476:	f7ff ffed 	bl	8001454 <HAL_GetTick>
 800147a:	1b43      	subs	r3, r0, r5
 800147c:	42a3      	cmp	r3, r4
 800147e:	d3fa      	bcc.n	8001476 <HAL_Delay+0x16>
  {
  }
}
 8001480:	bd38      	pop	{r3, r4, r5, pc}
 8001482:	bf00      	nop
 8001484:	2000001c 	.word	0x2000001c

08001488 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F4xx_HAL_VERSION;
}
 8001488:	4800      	ldr	r0, [pc, #0]	; (800148c <HAL_GetHalVersion+0x4>)
 800148a:	4770      	bx	lr
 800148c:	01080100 	.word	0x01080100

08001490 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001490:	4b01      	ldr	r3, [pc, #4]	; (8001498 <HAL_GetREVID+0x8>)
 8001492:	6818      	ldr	r0, [r3, #0]
}
 8001494:	0c00      	lsrs	r0, r0, #16
 8001496:	4770      	bx	lr
 8001498:	e0042000 	.word	0xe0042000

0800149c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800149c:	4b02      	ldr	r3, [pc, #8]	; (80014a8 <HAL_GetDEVID+0xc>)
 800149e:	6818      	ldr	r0, [r3, #0]
}
 80014a0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e0042000 	.word	0xe0042000

080014ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014bc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80014c8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b530      	push	{r4, r5, lr}
 80014d4:	68dc      	ldr	r4, [r3, #12]
 80014d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014da:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	2d04      	cmp	r5, #4
 80014e2:	bf28      	it	cs
 80014e4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ec:	bf8c      	ite	hi
 80014ee:	3c03      	subhi	r4, #3
 80014f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f2:	fa03 f505 	lsl.w	r5, r3, r5
 80014f6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fa:	40a3      	lsls	r3, r4
 80014fc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001502:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	bfac      	ite	ge
 800150a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	4a08      	ldrlt	r2, [pc, #32]	; (8001530 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001510:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	bfb8      	it	lt
 8001516:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	b2db      	uxtb	r3, r3
 800151c:	bfaa      	itet	ge
 800151e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001528:	bd30      	pop	{r4, r5, pc}
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00
 8001530:	e000ed14 	.word	0xe000ed14

08001534 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	3801      	subs	r0, #1
 8001536:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800153a:	d20b      	bcs.n	8001554 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	4a05      	ldr	r2, [pc, #20]	; (8001558 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	21f0      	movs	r1, #240	; 0xf0
 8001546:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001550:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001552:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001554:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800155c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800155e:	4604      	mov	r4, r0
 8001560:	b150      	cbz	r0, 8001578 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001562:	7943      	ldrb	r3, [r0, #5]
 8001564:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001568:	b913      	cbnz	r3, 8001570 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800156a:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800156c:	f7ff fd0c 	bl	8000f88 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001570:	2301      	movs	r3, #1
 8001572:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001574:	2000      	movs	r0, #0
}
 8001576:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001578:	2001      	movs	r0, #1
 800157a:	e7fc      	b.n	8001576 <HAL_CRC_Init+0x1a>

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001580:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8001720 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001584:	4a64      	ldr	r2, [pc, #400]	; (8001718 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001586:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001588:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800158a:	2401      	movs	r4, #1
 800158c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001592:	43ac      	bics	r4, r5
 8001594:	f040 80ad 	bne.w	80016f2 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001598:	684d      	ldr	r5, [r1, #4]
 800159a:	f005 0403 	and.w	r4, r5, #3
 800159e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a6:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015aa:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ac:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b0:	d834      	bhi.n	800161c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80015b2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b8:	68cf      	ldr	r7, [r1, #12]
 80015ba:	fa07 f708 	lsl.w	r7, r7, r8
 80015be:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80015c2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80015c4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c6:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ca:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80015ce:	409f      	lsls	r7, r3
 80015d0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80015d4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80015d6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015d8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015dc:	688f      	ldr	r7, [r1, #8]
 80015de:	fa07 f708 	lsl.w	r7, r7, r8
 80015e2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80015e8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	d119      	bne.n	8001620 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80015ec:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80015f0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80015f8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001600:	f04f 0e0f 	mov.w	lr, #15
 8001604:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001608:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800160c:	690f      	ldr	r7, [r1, #16]
 800160e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001612:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001616:	f8ca 7020 	str.w	r7, [sl, #32]
 800161a:	e001      	b.n	8001620 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161c:	2c03      	cmp	r4, #3
 800161e:	d1da      	bne.n	80015d6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001620:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001622:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001626:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001628:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800162a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800162e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001630:	d05f      	beq.n	80016f2 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	f04f 0a00 	mov.w	sl, #0
 8001636:	f8cd a004 	str.w	sl, [sp, #4]
 800163a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800163e:	4c37      	ldr	r4, [pc, #220]	; (800171c <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001640:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001644:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001648:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800164c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001650:	9601      	str	r6, [sp, #4]
 8001652:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001654:	f023 0603 	bic.w	r6, r3, #3
 8001658:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800165c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001660:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001664:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001668:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800166c:	270f      	movs	r7, #15
 800166e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001672:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001674:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001678:	d042      	beq.n	8001700 <HAL_GPIO_Init+0x184>
 800167a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800167e:	42a0      	cmp	r0, r4
 8001680:	d040      	beq.n	8001704 <HAL_GPIO_Init+0x188>
 8001682:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001686:	42a0      	cmp	r0, r4
 8001688:	d03e      	beq.n	8001708 <HAL_GPIO_Init+0x18c>
 800168a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800168e:	42a0      	cmp	r0, r4
 8001690:	d03c      	beq.n	800170c <HAL_GPIO_Init+0x190>
 8001692:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001696:	42a0      	cmp	r0, r4
 8001698:	d03a      	beq.n	8001710 <HAL_GPIO_Init+0x194>
 800169a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800169e:	42a0      	cmp	r0, r4
 80016a0:	d038      	beq.n	8001714 <HAL_GPIO_Init+0x198>
 80016a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80016a6:	42a0      	cmp	r0, r4
 80016a8:	bf0c      	ite	eq
 80016aa:	2406      	moveq	r4, #6
 80016ac:	2407      	movne	r4, #7
 80016ae:	fa04 f40e 	lsl.w	r4, r4, lr
 80016b2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80016b6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016bc:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80016be:	bf54      	ite	pl
 80016c0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80016c2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80016c6:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80016c8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ca:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80016cc:	bf54      	ite	pl
 80016ce:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80016d0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80016d4:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 80016d6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d8:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80016da:	bf54      	ite	pl
 80016dc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80016de:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80016e2:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016e6:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80016e8:	bf54      	ite	pl
 80016ea:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80016ec:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80016f0:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f2:	3301      	adds	r3, #1
 80016f4:	2b10      	cmp	r3, #16
 80016f6:	f47f af47 	bne.w	8001588 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80016fa:	b003      	add	sp, #12
 80016fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001700:	4654      	mov	r4, sl
 8001702:	e7d4      	b.n	80016ae <HAL_GPIO_Init+0x132>
 8001704:	2401      	movs	r4, #1
 8001706:	e7d2      	b.n	80016ae <HAL_GPIO_Init+0x132>
 8001708:	2402      	movs	r4, #2
 800170a:	e7d0      	b.n	80016ae <HAL_GPIO_Init+0x132>
 800170c:	2403      	movs	r4, #3
 800170e:	e7ce      	b.n	80016ae <HAL_GPIO_Init+0x132>
 8001710:	2404      	movs	r4, #4
 8001712:	e7cc      	b.n	80016ae <HAL_GPIO_Init+0x132>
 8001714:	2405      	movs	r4, #5
 8001716:	e7ca      	b.n	80016ae <HAL_GPIO_Init+0x132>
 8001718:	40013c00 	.word	0x40013c00
 800171c:	40020000 	.word	0x40020000
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001724:	b10a      	cbz	r2, 800172a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001726:	6181      	str	r1, [r0, #24]
  }
}
 8001728:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800172a:	0409      	lsls	r1, r1, #16
 800172c:	e7fb      	b.n	8001726 <HAL_GPIO_WritePin+0x2>
	...

08001730 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001730:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001738:	4d18      	ldr	r5, [pc, #96]	; (800179c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_PWREx_EnableOverDrive+0x70>)
 800174e:	2201      	movs	r2, #1
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001752:	f7ff fe7f 	bl	8001454 <HAL_GetTick>
 8001756:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001758:	686b      	ldr	r3, [r5, #4]
 800175a:	03da      	lsls	r2, r3, #15
 800175c:	d50b      	bpl.n	8001776 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001760:	4d0e      	ldr	r5, [pc, #56]	; (800179c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001762:	2201      	movs	r2, #1
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8001766:	f7ff fe75 	bl	8001454 <HAL_GetTick>
 800176a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800176c:	686b      	ldr	r3, [r5, #4]
 800176e:	039b      	lsls	r3, r3, #14
 8001770:	d50a      	bpl.n	8001788 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001772:	2000      	movs	r0, #0
 8001774:	e006      	b.n	8001784 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001776:	f7ff fe6d 	bl	8001454 <HAL_GetTick>
 800177a:	1b00      	subs	r0, r0, r4
 800177c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001780:	d9ea      	bls.n	8001758 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8001782:	2003      	movs	r0, #3
}
 8001784:	b003      	add	sp, #12
 8001786:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001788:	f7ff fe64 	bl	8001454 <HAL_GetTick>
 800178c:	1b00      	subs	r0, r0, r4
 800178e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001792:	d9eb      	bls.n	800176c <HAL_PWREx_EnableOverDrive+0x3c>
 8001794:	e7f5      	b.n	8001782 <HAL_PWREx_EnableOverDrive+0x52>
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40007000 	.word	0x40007000
 80017a0:	420e0000 	.word	0x420e0000

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017a8:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017aa:	4604      	mov	r4, r0
 80017ac:	b910      	cbnz	r0, 80017b4 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80017ae:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80017b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <HAL_RCC_ClockConfig+0x124>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	f002 020f 	and.w	r2, r2, #15
 80017bc:	428a      	cmp	r2, r1
 80017be:	d328      	bcc.n	8001812 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c0:	6822      	ldr	r2, [r4, #0]
 80017c2:	0797      	lsls	r7, r2, #30
 80017c4:	d42d      	bmi.n	8001822 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	07d0      	lsls	r0, r2, #31
 80017c8:	d441      	bmi.n	800184e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ca:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_RCC_ClockConfig+0x124>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	f002 020f 	and.w	r2, r2, #15
 80017d2:	42aa      	cmp	r2, r5
 80017d4:	d866      	bhi.n	80018a4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d6:	6822      	ldr	r2, [r4, #0]
 80017d8:	0751      	lsls	r1, r2, #29
 80017da:	d46c      	bmi.n	80018b6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	0713      	lsls	r3, r2, #28
 80017de:	d507      	bpl.n	80017f0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e0:	4a3a      	ldr	r2, [pc, #232]	; (80018cc <HAL_RCC_ClockConfig+0x128>)
 80017e2:	6921      	ldr	r1, [r4, #16]
 80017e4:	6893      	ldr	r3, [r2, #8]
 80017e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017f0:	f000 f89a 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80017f4:	4b35      	ldr	r3, [pc, #212]	; (80018cc <HAL_RCC_ClockConfig+0x128>)
 80017f6:	4a36      	ldr	r2, [pc, #216]	; (80018d0 <HAL_RCC_ClockConfig+0x12c>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017fe:	5cd3      	ldrb	r3, [r2, r3]
 8001800:	40d8      	lsrs	r0, r3
 8001802:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <HAL_RCC_ClockConfig+0x130>)
 8001804:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001806:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <HAL_RCC_ClockConfig+0x134>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	f7ff fdd9 	bl	80013c0 <HAL_InitTick>
  return HAL_OK;
 800180e:	2000      	movs	r0, #0
 8001810:	e7ce      	b.n	80017b0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	b2ca      	uxtb	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	428b      	cmp	r3, r1
 800181e:	d1c6      	bne.n	80017ae <HAL_RCC_ClockConfig+0xa>
 8001820:	e7ce      	b.n	80017c0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_RCC_ClockConfig+0x128>)
 8001824:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001828:	bf1e      	ittt	ne
 800182a:	6899      	ldrne	r1, [r3, #8]
 800182c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001830:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001834:	bf42      	ittt	mi
 8001836:	6899      	ldrmi	r1, [r3, #8]
 8001838:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800183c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183e:	4923      	ldr	r1, [pc, #140]	; (80018cc <HAL_RCC_ClockConfig+0x128>)
 8001840:	68a0      	ldr	r0, [r4, #8]
 8001842:	688b      	ldr	r3, [r1, #8]
 8001844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001848:	4303      	orrs	r3, r0
 800184a:	608b      	str	r3, [r1, #8]
 800184c:	e7bb      	b.n	80017c6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	6862      	ldr	r2, [r4, #4]
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_RCC_ClockConfig+0x128>)
 8001852:	2a01      	cmp	r2, #1
 8001854:	d11c      	bne.n	8001890 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	d0a7      	beq.n	80017ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4e1b      	ldr	r6, [pc, #108]	; (80018cc <HAL_RCC_ClockConfig+0x128>)
 8001860:	68b3      	ldr	r3, [r6, #8]
 8001862:	f023 0303 	bic.w	r3, r3, #3
 8001866:	4313      	orrs	r3, r2
 8001868:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800186a:	f7ff fdf3 	bl	8001454 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001872:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001874:	68b3      	ldr	r3, [r6, #8]
 8001876:	6862      	ldr	r2, [r4, #4]
 8001878:	f003 030c 	and.w	r3, r3, #12
 800187c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001880:	d0a3      	beq.n	80017ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001882:	f7ff fde7 	bl	8001454 <HAL_GetTick>
 8001886:	1bc0      	subs	r0, r0, r7
 8001888:	4540      	cmp	r0, r8
 800188a:	d9f3      	bls.n	8001874 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800188c:	2003      	movs	r0, #3
 800188e:	e78f      	b.n	80017b0 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001890:	1e91      	subs	r1, r2, #2
 8001892:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001894:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001896:	d802      	bhi.n	800189e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800189c:	e7de      	b.n	800185c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	f013 0f02 	tst.w	r3, #2
 80018a2:	e7db      	b.n	800185c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a4:	b2ea      	uxtb	r2, r5
 80018a6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	42ab      	cmp	r3, r5
 80018b0:	f47f af7d 	bne.w	80017ae <HAL_RCC_ClockConfig+0xa>
 80018b4:	e78f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b6:	4905      	ldr	r1, [pc, #20]	; (80018cc <HAL_RCC_ClockConfig+0x128>)
 80018b8:	68e0      	ldr	r0, [r4, #12]
 80018ba:	688b      	ldr	r3, [r1, #8]
 80018bc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80018c0:	4303      	orrs	r3, r0
 80018c2:	608b      	str	r3, [r1, #8]
 80018c4:	e78a      	b.n	80017dc <HAL_RCC_ClockConfig+0x38>
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	080068c4 	.word	0x080068c4
 80018d4:	20000018 	.word	0x20000018
 80018d8:	20000020 	.word	0x20000020

080018dc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80018dc:	4b01      	ldr	r3, [pc, #4]	; (80018e4 <HAL_RCC_GetHCLKFreq+0x8>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000018 	.word	0x20000018

080018e8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_RCC_GetPCLK1Freq+0x14>)
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <HAL_RCC_GetPCLK1Freq+0x18>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	4a03      	ldr	r2, [pc, #12]	; (8001904 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80018f6:	6810      	ldr	r0, [r2, #0]
}
 80018f8:	40d8      	lsrs	r0, r3
 80018fa:	4770      	bx	lr
 80018fc:	40023800 	.word	0x40023800
 8001900:	080068d4 	.word	0x080068d4
 8001904:	20000018 	.word	0x20000018

08001908 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <HAL_RCC_GetPCLK2Freq+0x14>)
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x18>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001912:	5cd3      	ldrb	r3, [r2, r3]
 8001914:	4a03      	ldr	r2, [pc, #12]	; (8001924 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001916:	6810      	ldr	r0, [r2, #0]
}
 8001918:	40d8      	lsrs	r0, r3
 800191a:	4770      	bx	lr
 800191c:	40023800 	.word	0x40023800
 8001920:	080068d4 	.word	0x080068d4
 8001924:	20000018 	.word	0x20000018

08001928 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4920      	ldr	r1, [pc, #128]	; (80019ac <HAL_RCC_GetSysClockFreq+0x84>)
{
 800192a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800192c:	688b      	ldr	r3, [r1, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b08      	cmp	r3, #8
 8001934:	d007      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x1e>
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d020      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x54>
 800193a:	481d      	ldr	r0, [pc, #116]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x88>)
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf08      	it	eq
 8001942:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001944:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001946:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001948:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001950:	bf14      	ite	ne
 8001952:	4818      	ldrne	r0, [pc, #96]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001954:	4816      	ldreq	r0, [pc, #88]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800195a:	bf18      	it	ne
 800195c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	fba1 0100 	umull	r0, r1, r1, r0
 8001966:	f7ff f93f 	bl	8000be8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_RCC_GetSysClockFreq+0x84>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001972:	3301      	adds	r3, #1
 8001974:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 8001976:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800197a:	e7e3      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800197c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197e:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001980:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001982:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001986:	bf14      	ite	ne
 8001988:	480a      	ldrne	r0, [pc, #40]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4809      	ldreq	r0, [pc, #36]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001990:	bf18      	it	ne
 8001992:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001994:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	fba1 0100 	umull	r0, r1, r1, r0
 800199c:	f7ff f924 	bl	8000be8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019a0:	4b02      	ldr	r3, [pc, #8]	; (80019ac <HAL_RCC_GetSysClockFreq+0x84>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80019a8:	e7e5      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x4e>
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	00f42400 	.word	0x00f42400
 80019b4:	007a1200 	.word	0x007a1200

080019b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019bc:	4604      	mov	r4, r0
 80019be:	2800      	cmp	r0, #0
 80019c0:	d030      	beq.n	8001a24 <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	6803      	ldr	r3, [r0, #0]
 80019c4:	07df      	lsls	r7, r3, #31
 80019c6:	d410      	bmi.n	80019ea <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	079e      	lsls	r6, r3, #30
 80019cc:	d463      	bmi.n	8001a96 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	071a      	lsls	r2, r3, #28
 80019d2:	f100 80ad 	bmi.w	8001b30 <HAL_RCC_OscConfig+0x178>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	075b      	lsls	r3, r3, #29
 80019da:	f100 80cd 	bmi.w	8001b78 <HAL_RCC_OscConfig+0x1c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019de:	69a0      	ldr	r0, [r4, #24]
 80019e0:	2800      	cmp	r0, #0
 80019e2:	f040 8135 	bne.w	8001c50 <HAL_RCC_OscConfig+0x298>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80019e6:	2000      	movs	r0, #0
 80019e8:	e034      	b.n	8001a54 <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019ea:	4b96      	ldr	r3, [pc, #600]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	f002 020c 	and.w	r2, r2, #12
 80019f2:	2a04      	cmp	r2, #4
 80019f4:	d00f      	beq.n	8001a16 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019fc:	2a08      	cmp	r2, #8
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	0255      	lsls	r5, r2, #9
 8001a04:	d407      	bmi.n	8001a16 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a0c:	2a0c      	cmp	r2, #12
 8001a0e:	d10b      	bne.n	8001a28 <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	0258      	lsls	r0, r3, #9
 8001a14:	d508      	bpl.n	8001a28 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a16:	4b8b      	ldr	r3, [pc, #556]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	0399      	lsls	r1, r3, #14
 8001a1c:	d5d4      	bpl.n	80019c8 <HAL_RCC_OscConfig+0x10>
 8001a1e:	6863      	ldr	r3, [r4, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1d1      	bne.n	80019c8 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001a24:	2001      	movs	r0, #1
 8001a26:	e015      	b.n	8001a54 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a28:	6863      	ldr	r3, [r4, #4]
 8001a2a:	4d86      	ldr	r5, [pc, #536]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
 8001a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a30:	d113      	bne.n	8001a5a <HAL_RCC_OscConfig+0xa2>
 8001a32:	682b      	ldr	r3, [r5, #0]
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fd0b 	bl	8001454 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4e81      	ldr	r6, [pc, #516]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001a40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	6833      	ldr	r3, [r6, #0]
 8001a44:	039a      	lsls	r2, r3, #14
 8001a46:	d4bf      	bmi.n	80019c8 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fd04 	bl	8001454 <HAL_GetTick>
 8001a4c:	1b40      	subs	r0, r0, r5
 8001a4e:	2864      	cmp	r0, #100	; 0x64
 8001a50:	d9f7      	bls.n	8001a42 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8001a52:	2003      	movs	r0, #3
}
 8001a54:	b002      	add	sp, #8
 8001a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a5e:	d104      	bne.n	8001a6a <HAL_RCC_OscConfig+0xb2>
 8001a60:	682b      	ldr	r3, [r5, #0]
 8001a62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a66:	602b      	str	r3, [r5, #0]
 8001a68:	e7e3      	b.n	8001a32 <HAL_RCC_OscConfig+0x7a>
 8001a6a:	682a      	ldr	r2, [r5, #0]
 8001a6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a70:	602a      	str	r2, [r5, #0]
 8001a72:	682a      	ldr	r2, [r5, #0]
 8001a74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a78:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1dd      	bne.n	8001a3a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fce9 	bl	8001454 <HAL_GetTick>
 8001a82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	039b      	lsls	r3, r3, #14
 8001a88:	d59e      	bpl.n	80019c8 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fce3 	bl	8001454 <HAL_GetTick>
 8001a8e:	1b80      	subs	r0, r0, r6
 8001a90:	2864      	cmp	r0, #100	; 0x64
 8001a92:	d9f7      	bls.n	8001a84 <HAL_RCC_OscConfig+0xcc>
 8001a94:	e7dd      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a96:	4b6b      	ldr	r3, [pc, #428]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	f012 0f0c 	tst.w	r2, #12
 8001a9e:	d00f      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001aa6:	2a08      	cmp	r2, #8
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	0257      	lsls	r7, r2, #9
 8001aae:	d507      	bpl.n	8001ac0 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ab6:	2a0c      	cmp	r2, #12
 8001ab8:	d111      	bne.n	8001ade <HAL_RCC_OscConfig+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	025e      	lsls	r6, r3, #9
 8001abe:	d40e      	bmi.n	8001ade <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac0:	4a60      	ldr	r2, [pc, #384]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
 8001ac2:	6813      	ldr	r3, [r2, #0]
 8001ac4:	079d      	lsls	r5, r3, #30
 8001ac6:	d502      	bpl.n	8001ace <HAL_RCC_OscConfig+0x116>
 8001ac8:	68e3      	ldr	r3, [r4, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d1aa      	bne.n	8001a24 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	6921      	ldr	r1, [r4, #16]
 8001ad2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ad6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ada:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001adc:	e777      	b.n	80019ce <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ade:	68e2      	ldr	r2, [r4, #12]
 8001ae0:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_OscConfig+0x290>)
 8001ae2:	b1b2      	cbz	r2, 8001b12 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fcb4 	bl	8001454 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	4d55      	ldr	r5, [pc, #340]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001aee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	0798      	lsls	r0, r3, #30
 8001af4:	d507      	bpl.n	8001b06 <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	682b      	ldr	r3, [r5, #0]
 8001af8:	6922      	ldr	r2, [r4, #16]
 8001afa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001afe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b02:	602b      	str	r3, [r5, #0]
 8001b04:	e763      	b.n	80019ce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fca5 	bl	8001454 <HAL_GetTick>
 8001b0a:	1b80      	subs	r0, r0, r6
 8001b0c:	2802      	cmp	r0, #2
 8001b0e:	d9ef      	bls.n	8001af0 <HAL_RCC_OscConfig+0x138>
 8001b10:	e79f      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001b12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b14:	f7ff fc9e 	bl	8001454 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b18:	4e4a      	ldr	r6, [pc, #296]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001b1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1c:	6833      	ldr	r3, [r6, #0]
 8001b1e:	0799      	lsls	r1, r3, #30
 8001b20:	f57f af55 	bpl.w	80019ce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b24:	f7ff fc96 	bl	8001454 <HAL_GetTick>
 8001b28:	1b40      	subs	r0, r0, r5
 8001b2a:	2802      	cmp	r0, #2
 8001b2c:	d9f6      	bls.n	8001b1c <HAL_RCC_OscConfig+0x164>
 8001b2e:	e790      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b30:	6962      	ldr	r2, [r4, #20]
 8001b32:	4b45      	ldr	r3, [pc, #276]	; (8001c48 <HAL_RCC_OscConfig+0x290>)
 8001b34:	b182      	cbz	r2, 8001b58 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 8001b36:	2201      	movs	r2, #1
 8001b38:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fc8a 	bl	8001454 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b40:	4e40      	ldr	r6, [pc, #256]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001b42:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b44:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001b46:	079f      	lsls	r7, r3, #30
 8001b48:	f53f af45 	bmi.w	80019d6 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fc82 	bl	8001454 <HAL_GetTick>
 8001b50:	1b40      	subs	r0, r0, r5
 8001b52:	2802      	cmp	r0, #2
 8001b54:	d9f6      	bls.n	8001b44 <HAL_RCC_OscConfig+0x18c>
 8001b56:	e77c      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001b58:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fc7a 	bl	8001454 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	4e38      	ldr	r6, [pc, #224]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001b62:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001b66:	0798      	lsls	r0, r3, #30
 8001b68:	f57f af35 	bpl.w	80019d6 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fc72 	bl	8001454 <HAL_GetTick>
 8001b70:	1b40      	subs	r0, r0, r5
 8001b72:	2802      	cmp	r0, #2
 8001b74:	d9f6      	bls.n	8001b64 <HAL_RCC_OscConfig+0x1ac>
 8001b76:	e76c      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
 8001b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b7c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001b80:	d128      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x21c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	9201      	str	r2, [sp, #4]
 8001b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b96:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	4d2c      	ldr	r5, [pc, #176]	; (8001c4c <HAL_RCC_OscConfig+0x294>)
 8001b9a:	682b      	ldr	r3, [r5, #0]
 8001b9c:	05d9      	lsls	r1, r3, #23
 8001b9e:	d51b      	bpl.n	8001bd8 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba0:	68a3      	ldr	r3, [r4, #8]
 8001ba2:	4d28      	ldr	r5, [pc, #160]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d127      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x240>
 8001ba8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001bb0:	f7ff fc50 	bl	8001454 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb4:	4e23      	ldr	r6, [pc, #140]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001bb6:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001bbe:	079b      	lsls	r3, r3, #30
 8001bc0:	d539      	bpl.n	8001c36 <HAL_RCC_OscConfig+0x27e>
    if(pwrclkchanged == SET)
 8001bc2:	2f00      	cmp	r7, #0
 8001bc4:	f43f af0b 	beq.w	80019de <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <HAL_RCC_OscConfig+0x28c>)
 8001bca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	e704      	b.n	80019de <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8001bd4:	2700      	movs	r7, #0
 8001bd6:	e7df      	b.n	8001b98 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001be0:	f7ff fc38 	bl	8001454 <HAL_GetTick>
 8001be4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	682b      	ldr	r3, [r5, #0]
 8001be8:	05da      	lsls	r2, r3, #23
 8001bea:	d4d9      	bmi.n	8001ba0 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bec:	f7ff fc32 	bl	8001454 <HAL_GetTick>
 8001bf0:	1b80      	subs	r0, r0, r6
 8001bf2:	2802      	cmp	r0, #2
 8001bf4:	d9f7      	bls.n	8001be6 <HAL_RCC_OscConfig+0x22e>
 8001bf6:	e72c      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d104      	bne.n	8001c06 <HAL_RCC_OscConfig+0x24e>
 8001bfc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	672b      	str	r3, [r5, #112]	; 0x70
 8001c04:	e7d0      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1f0>
 8001c06:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	672a      	str	r2, [r5, #112]	; 0x70
 8001c0e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c10:	f022 0204 	bic.w	r2, r2, #4
 8001c14:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ca      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x1f8>
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fc1b 	bl	8001454 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c22:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c26:	0798      	lsls	r0, r3, #30
 8001c28:	d5cb      	bpl.n	8001bc2 <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff fc13 	bl	8001454 <HAL_GetTick>
 8001c2e:	1b80      	subs	r0, r0, r6
 8001c30:	4540      	cmp	r0, r8
 8001c32:	d9f7      	bls.n	8001c24 <HAL_RCC_OscConfig+0x26c>
 8001c34:	e70d      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff fc0d 	bl	8001454 <HAL_GetTick>
 8001c3a:	1b40      	subs	r0, r0, r5
 8001c3c:	4540      	cmp	r0, r8
 8001c3e:	d9bd      	bls.n	8001bbc <HAL_RCC_OscConfig+0x204>
 8001c40:	e707      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	42470000 	.word	0x42470000
 8001c4c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c50:	4d3b      	ldr	r5, [pc, #236]	; (8001d40 <HAL_RCC_OscConfig+0x388>)
 8001c52:	68ab      	ldr	r3, [r5, #8]
 8001c54:	f003 030c 	and.w	r3, r3, #12
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d040      	beq.n	8001cde <HAL_RCC_OscConfig+0x326>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <HAL_RCC_OscConfig+0x38c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001c62:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c64:	d12e      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8001c66:	f7ff fbf5 	bl	8001454 <HAL_GetTick>
 8001c6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6c:	682b      	ldr	r3, [r5, #0]
 8001c6e:	0199      	lsls	r1, r3, #6
 8001c70:	d422      	bmi.n	8001cb8 <HAL_RCC_OscConfig+0x300>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c72:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c7a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c86:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001c8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c8c:	0852      	lsrs	r2, r2, #1
 8001c8e:	3a01      	subs	r2, #1
 8001c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c94:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c96:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_RCC_OscConfig+0x38c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c98:	4d29      	ldr	r5, [pc, #164]	; (8001d40 <HAL_RCC_OscConfig+0x388>)
        __HAL_RCC_PLL_ENABLE();
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fbd9 	bl	8001454 <HAL_GetTick>
 8001ca2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca4:	682b      	ldr	r3, [r5, #0]
 8001ca6:	019a      	lsls	r2, r3, #6
 8001ca8:	f53f ae9d 	bmi.w	80019e6 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fbd2 	bl	8001454 <HAL_GetTick>
 8001cb0:	1b00      	subs	r0, r0, r4
 8001cb2:	2802      	cmp	r0, #2
 8001cb4:	d9f6      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2ec>
 8001cb6:	e6cc      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff fbcc 	bl	8001454 <HAL_GetTick>
 8001cbc:	1b80      	subs	r0, r0, r6
 8001cbe:	2802      	cmp	r0, #2
 8001cc0:	d9d4      	bls.n	8001c6c <HAL_RCC_OscConfig+0x2b4>
 8001cc2:	e6c6      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fbc6 	bl	8001454 <HAL_GetTick>
 8001cc8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	f57f ae8a 	bpl.w	80019e6 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff fbbf 	bl	8001454 <HAL_GetTick>
 8001cd6:	1b00      	subs	r0, r0, r4
 8001cd8:	2802      	cmp	r0, #2
 8001cda:	d9f6      	bls.n	8001cca <HAL_RCC_OscConfig+0x312>
 8001cdc:	e6b9      	b.n	8001a52 <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cde:	2801      	cmp	r0, #1
 8001ce0:	f43f aeb8 	beq.w	8001a54 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8001ce4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce8:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cec:	4291      	cmp	r1, r2
 8001cee:	f47f ae99 	bne.w	8001a24 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf8:	428a      	cmp	r2, r1
 8001cfa:	f47f ae93 	bne.w	8001a24 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d00:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001d04:	401a      	ands	r2, r3
 8001d06:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001d0a:	f47f ae8b 	bne.w	8001a24 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d10:	0852      	lsrs	r2, r2, #1
 8001d12:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001d16:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d18:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001d1c:	f47f ae82 	bne.w	8001a24 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d26:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001d2a:	f47f ae7b 	bne.w	8001a24 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d30:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d34:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8001d38:	f43f ae55 	beq.w	80019e6 <HAL_RCC_OscConfig+0x2e>
 8001d3c:	e672      	b.n	8001a24 <HAL_RCC_OscConfig+0x6c>
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	42470000 	.word	0x42470000

08001d48 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d48:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001d4a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d4c:	4290      	cmp	r0, r2
 8001d4e:	d012      	beq.n	8001d76 <TIM_Base_SetConfig+0x2e>
 8001d50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d54:	d00f      	beq.n	8001d76 <TIM_Base_SetConfig+0x2e>
 8001d56:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d5a:	4290      	cmp	r0, r2
 8001d5c:	d00b      	beq.n	8001d76 <TIM_Base_SetConfig+0x2e>
 8001d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d62:	4290      	cmp	r0, r2
 8001d64:	d007      	beq.n	8001d76 <TIM_Base_SetConfig+0x2e>
 8001d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d6a:	4290      	cmp	r0, r2
 8001d6c:	d003      	beq.n	8001d76 <TIM_Base_SetConfig+0x2e>
 8001d6e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d72:	4290      	cmp	r0, r2
 8001d74:	d119      	bne.n	8001daa <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d76:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d7c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d7e:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <TIM_Base_SetConfig+0xc4>)
 8001d80:	4290      	cmp	r0, r2
 8001d82:	d029      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001d84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d88:	d026      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001d8a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d8e:	4290      	cmp	r0, r2
 8001d90:	d022      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d96:	4290      	cmp	r0, r2
 8001d98:	d01e      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d9e:	4290      	cmp	r0, r2
 8001da0:	d01a      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001da2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001da6:	4290      	cmp	r0, r2
 8001da8:	d016      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001daa:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <TIM_Base_SetConfig+0xc8>)
 8001dac:	4290      	cmp	r0, r2
 8001dae:	d013      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001db0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db4:	4290      	cmp	r0, r2
 8001db6:	d00f      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001db8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dbc:	4290      	cmp	r0, r2
 8001dbe:	d00b      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001dc0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001dc4:	4290      	cmp	r0, r2
 8001dc6:	d007      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001dc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dcc:	4290      	cmp	r0, r2
 8001dce:	d003      	beq.n	8001dd8 <TIM_Base_SetConfig+0x90>
 8001dd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dd4:	4290      	cmp	r0, r2
 8001dd6:	d103      	bne.n	8001de0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dde:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de0:	694a      	ldr	r2, [r1, #20]
 8001de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001de6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001de8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dea:	688b      	ldr	r3, [r1, #8]
 8001dec:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dee:	680b      	ldr	r3, [r1, #0]
 8001df0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <TIM_Base_SetConfig+0xc4>)
 8001df4:	4298      	cmp	r0, r3
 8001df6:	d003      	beq.n	8001e00 <TIM_Base_SetConfig+0xb8>
 8001df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dfc:	4298      	cmp	r0, r3
 8001dfe:	d101      	bne.n	8001e04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e00:	690b      	ldr	r3, [r1, #16]
 8001e02:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e04:	2301      	movs	r3, #1
 8001e06:	6143      	str	r3, [r0, #20]
}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40014000 	.word	0x40014000

08001e14 <HAL_TIM_Base_Init>:
{
 8001e14:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001e16:	4604      	mov	r4, r0
 8001e18:	b330      	cbz	r0, 8001e68 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e22:	b91b      	cbnz	r3, 8001e2c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e28:	f7ff fa36 	bl	8001298 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e2e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e34:	1d21      	adds	r1, r4, #4
 8001e36:	f7ff ff87 	bl	8001d48 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8001e40:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001e46:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001e4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001e4e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001e5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001e62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001e66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
 8001e6a:	e7fc      	b.n	8001e66 <HAL_TIM_Base_Init+0x52>

08001e6c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e6c:	6802      	ldr	r2, [r0, #0]
 8001e6e:	68c1      	ldr	r1, [r0, #12]
 8001e70:	6913      	ldr	r3, [r2, #16]
 8001e72:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e76:	430b      	orrs	r3, r1
{
 8001e78:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e7a:	6113      	str	r3, [r2, #16]
{
 8001e7c:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e7e:	6883      	ldr	r3, [r0, #8]
 8001e80:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001e82:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e84:	4303      	orrs	r3, r0
 8001e86:	6968      	ldr	r0, [r5, #20]
 8001e88:	4303      	orrs	r3, r0
 8001e8a:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001e8c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8001e90:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e94:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001e96:	430b      	orrs	r3, r1
 8001e98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e9a:	6953      	ldr	r3, [r2, #20]
 8001e9c:	69a9      	ldr	r1, [r5, #24]
 8001e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea2:	430b      	orrs	r3, r1
 8001ea4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <UART_SetConfig+0xb8>)
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d003      	beq.n	8001eb4 <UART_SetConfig+0x48>
 8001eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d123      	bne.n	8001efc <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001eb4:	f7ff fd28 	bl	8001908 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eb8:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001eba:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ec0:	e9d5 4600 	ldrd	r4, r6, [r5]
 8001ec4:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ec8:	d11b      	bne.n	8001f02 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001eca:	19b2      	adds	r2, r6, r6
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	415b      	adcs	r3, r3
 8001ed2:	f7fe fe89 	bl	8000be8 <__aeabi_uldivmod>
 8001ed6:	2164      	movs	r1, #100	; 0x64
 8001ed8:	fbb0 f5f1 	udiv	r5, r0, r1
 8001edc:	fb01 0315 	mls	r3, r1, r5, r0
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	3332      	adds	r3, #50	; 0x32
 8001ee4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee8:	f003 0207 	and.w	r2, r3, #7
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8001ef2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ef6:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ef8:	60a3      	str	r3, [r4, #8]
  }
}
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001efc:	f7ff fcf4 	bl	80018e8 <HAL_RCC_GetPCLK1Freq>
 8001f00:	e7da      	b.n	8001eb8 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f02:	00b2      	lsls	r2, r6, #2
 8001f04:	0fb3      	lsrs	r3, r6, #30
 8001f06:	f7fe fe6f 	bl	8000be8 <__aeabi_uldivmod>
 8001f0a:	2264      	movs	r2, #100	; 0x64
 8001f0c:	fbb0 f1f2 	udiv	r1, r0, r2
 8001f10:	fb02 0311 	mls	r3, r2, r1, r0
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	3332      	adds	r3, #50	; 0x32
 8001f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f1c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001f20:	e7ea      	b.n	8001ef8 <UART_SetConfig+0x8c>
 8001f22:	bf00      	nop
 8001f24:	40011000 	.word	0x40011000

08001f28 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	460e      	mov	r6, r1
 8001f2e:	4617      	mov	r7, r2
 8001f30:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f32:	6822      	ldr	r2, [r4, #0]
 8001f34:	6813      	ldr	r3, [r2, #0]
 8001f36:	ea36 0303 	bics.w	r3, r6, r3
 8001f3a:	d101      	bne.n	8001f40 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	e028      	b.n	8001f92 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001f40:	1c6b      	adds	r3, r5, #1
 8001f42:	d0f7      	beq.n	8001f34 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f44:	b125      	cbz	r5, 8001f50 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8001f46:	f7ff fa85 	bl	8001454 <HAL_GetTick>
 8001f4a:	1bc0      	subs	r0, r0, r7
 8001f4c:	4285      	cmp	r5, r0
 8001f4e:	d2f0      	bcs.n	8001f32 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f50:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f52:	f102 030c 	add.w	r3, r2, #12
 8001f56:	e853 3f00 	ldrex	r3, [r3]
 8001f5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f5e:	320c      	adds	r2, #12
 8001f60:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8001f64:	6821      	ldr	r1, [r4, #0]
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d1f2      	bne.n	8001f50 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f6a:	f101 0314 	add.w	r3, r1, #20
 8001f6e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f72:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f76:	f101 0014 	add.w	r0, r1, #20
 8001f7a:	e840 3200 	strex	r2, r3, [r0]
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	d1f3      	bne.n	8001f6a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8001f82:	2320      	movs	r3, #32
 8001f84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8001f88:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8001f8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8001f90:	2003      	movs	r0, #3
}
 8001f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f94 <HAL_UART_Init>:
{
 8001f94:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001f96:	4604      	mov	r4, r0
 8001f98:	b340      	cbz	r0, 8001fec <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fa2:	b91b      	cbnz	r3, 8001fac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001fa4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001fa8:	f7ff f9aa 	bl	8001300 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001fac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001fae:	2324      	movs	r3, #36	; 0x24
 8001fb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001fb4:	68d3      	ldr	r3, [r2, #12]
 8001fb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fba:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff ff55 	bl	8001e6c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fd2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fda:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fdc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001fde:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe0:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fe2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fe6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001fea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fec:	2001      	movs	r0, #1
 8001fee:	e7fc      	b.n	8001fea <HAL_UART_Init+0x56>

08001ff0 <HAL_UART_Transmit>:
{
 8001ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ff2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001ff4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8001ff8:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8001ffa:	2a20      	cmp	r2, #32
{
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002000:	d149      	bne.n	8002096 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8002002:	2900      	cmp	r1, #0
 8002004:	d045      	beq.n	8002092 <HAL_UART_Transmit+0xa2>
 8002006:	2f00      	cmp	r7, #0
 8002008:	d043      	beq.n	8002092 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800200a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800200e:	2a01      	cmp	r2, #1
 8002010:	d041      	beq.n	8002096 <HAL_UART_Transmit+0xa6>
 8002012:	2201      	movs	r2, #1
 8002014:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002018:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800201a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201c:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800201e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002022:	f7ff fa17 	bl	8001454 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002026:	68a1      	ldr	r1, [r4, #8]
 8002028:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 800202a:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800202c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002030:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8002032:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002034:	d103      	bne.n	800203e <HAL_UART_Transmit+0x4e>
 8002036:	6921      	ldr	r1, [r4, #16]
 8002038:	b909      	cbnz	r1, 800203e <HAL_UART_Transmit+0x4e>
 800203a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800203c:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 800203e:	2100      	movs	r1, #0
 8002040:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002044:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002046:	b289      	uxth	r1, r1
 8002048:	b941      	cbnz	r1, 800205c <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	4620      	mov	r0, r4
 800204e:	f7ff ff6b 	bl	8001f28 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002052:	b960      	cbnz	r0, 800206e <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002054:	2320      	movs	r3, #32
 8002056:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800205a:	e009      	b.n	8002070 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	4620      	mov	r0, r4
 8002060:	e9cd 2300 	strd	r2, r3, [sp]
 8002064:	f7ff ff60 	bl	8001f28 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800206c:	b110      	cbz	r0, 8002074 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800206e:	2003      	movs	r0, #3
}
 8002070:	b003      	add	sp, #12
 8002072:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002074:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8002076:	b94e      	cbnz	r6, 800208c <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002078:	f835 1b02 	ldrh.w	r1, [r5], #2
 800207c:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002080:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8002082:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002084:	3901      	subs	r1, #1
 8002086:	b289      	uxth	r1, r1
 8002088:	84e1      	strh	r1, [r4, #38]	; 0x26
 800208a:	e7db      	b.n	8002044 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800208c:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002090:	e7f6      	b.n	8002080 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002092:	2001      	movs	r0, #1
 8002094:	e7ec      	b.n	8002070 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002096:	2002      	movs	r0, #2
 8002098:	e7ea      	b.n	8002070 <HAL_UART_Transmit+0x80>
	...

0800209c <_put_c_driver>:
#if !defined(USE_PRINTF_FROM_TOOL)

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
 800209c:	b507      	push	{r0, r1, r2, lr}
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <_put_c_driver+0x24>)
{
 80020a0:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b13b      	cbz	r3, 80020b8 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80020a8:	4806      	ldr	r0, [pc, #24]	; (80020c4 <_put_c_driver+0x28>)
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	2201      	movs	r2, #1
 80020b0:	f10d 0107 	add.w	r1, sp, #7
 80020b4:	f7ff ff9c 	bl	8001ff0 <HAL_UART_Transmit>
    port_io_write((uint8_t *)&c, 1);
#endif
}
 80020b8:	b003      	add	sp, #12
 80020ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80020be:	bf00      	nop
 80020c0:	20000024 	.word	0x20000024
 80020c4:	20000d08 	.word	0x20000d08

080020c8 <_write>:
{
 80020c8:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 80020ca:	1e14      	subs	r4, r2, #0
 80020cc:	da0a      	bge.n	80020e4 <_write+0x1c>
 80020ce:	3801      	subs	r0, #1
 80020d0:	2801      	cmp	r0, #1
 80020d2:	d907      	bls.n	80020e4 <_write+0x1c>
    errno = EBADF;
 80020d4:	f001 fada 	bl	800368c <__errno>
 80020d8:	2309      	movs	r3, #9
 80020da:	6003      	str	r3, [r0, #0]
    return -1;
 80020dc:	f04f 34ff 	mov.w	r4, #4294967295
}
 80020e0:	4620      	mov	r0, r4
 80020e2:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <_write+0x38>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f9      	beq.n	80020e0 <_write+0x18>
 80020ec:	b2a2      	uxth	r2, r4
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <_write+0x3c>)
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	f7ff ff7c 	bl	8001ff0 <HAL_UART_Transmit>
  return (status ? count : 0);
 80020f8:	2800      	cmp	r0, #0
 80020fa:	bf18      	it	ne
 80020fc:	2400      	movne	r4, #0
 80020fe:	e7ef      	b.n	80020e0 <_write+0x18>
 8002100:	20000024 	.word	0x20000024
 8002104:	20000d08 	.word	0x20000d08

08002108 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8002108:	b40f      	push	{r0, r1, r2, r3}
 800210a:	b507      	push	{r0, r1, r2, lr}
 800210c:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800210e:	2100      	movs	r1, #0
{
 8002110:	f853 2b04 	ldr.w	r2, [r3], #4
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002114:	4804      	ldr	r0, [pc, #16]	; (8002128 <lc_print+0x20>)
  va_start(ap, fmt);
 8002116:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8002118:	f000 fa16 	bl	8002548 <vlc_print>
  va_end(ap);
}
 800211c:	b003      	add	sp, #12
 800211e:	f85d eb04 	ldr.w	lr, [sp], #4
 8002122:	b004      	add	sp, #16
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	0800209d 	.word	0x0800209d

0800212c <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 800212c:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800212e:	4d11      	ldr	r5, [pc, #68]	; (8002174 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8002130:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8002132:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8002134:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8002138:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800213c:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8002140:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8002142:	f001 facd 	bl	80036e0 <malloc>

  /* remember size */
  if (ptr) {
 8002146:	b1a0      	cbz	r0, 8002172 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8002148:	1903      	adds	r3, r0, r4
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 800214c:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800214e:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8002150:	682b      	ldr	r3, [r5, #0]
 8002152:	07db      	lsls	r3, r3, #31
 8002154:	d50c      	bpl.n	8002170 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8002156:	68eb      	ldr	r3, [r5, #12]
 8002158:	3301      	adds	r3, #1
 800215a:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 800215c:	686b      	ldr	r3, [r5, #4]
 800215e:	4423      	add	r3, r4
 8002160:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8002162:	69ab      	ldr	r3, [r5, #24]
 8002164:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8002166:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8002168:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 800216a:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 800216c:	bf88      	it	hi
 800216e:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8002170:	3004      	adds	r0, #4
}
 8002172:	bd38      	pop	{r3, r4, r5, pc}
 8002174:	20000d5c 	.word	0x20000d5c
 8002178:	efdcba98 	.word	0xefdcba98

0800217c <crcIpInit>:
 */

struct cyclesCount cyclesCount;

void crcIpInit(void)
{
 800217c:	b513      	push	{r0, r1, r4, lr}
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 800217e:	4c0a      	ldr	r4, [pc, #40]	; (80021a8 <crcIpInit+0x2c>)
 8002180:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002182:	04db      	lsls	r3, r3, #19
 8002184:	d402      	bmi.n	800218c <crcIpInit+0x10>
    LC_PRINT("W: CRC IP clock is NOT enabled\r\n");
 8002186:	4809      	ldr	r0, [pc, #36]	; (80021ac <crcIpInit+0x30>)
 8002188:	f7ff ffbe 	bl	8002108 <lc_print>

  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002196:	6323      	str	r3, [r4, #48]	; 0x30
 8002198:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800219a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	9b01      	ldr	r3, [sp, #4]
#endif
#endif
}
 80021a2:	b002      	add	sp, #8
 80021a4:	bd10      	pop	{r4, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	080063fe 	.word	0x080063fe

080021b0 <dwtCyclesToTime>:
  return port_hal_rcc_get_sys_clock_freq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 80021b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b4:	4604      	mov	r4, r0
 80021b6:	468a      	mov	sl, r1
  if (!t)
 80021b8:	4617      	mov	r7, r2
 80021ba:	b382      	cbz	r2, 800221e <dwtCyclesToTime+0x6e>
  return port_hal_rcc_get_hclk_freq();
 80021bc:	f7ff fb8e 	bl	80018dc <HAL_RCC_GetHCLKFreq>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
 80021c0:	2300      	movs	r3, #0
  return port_hal_rcc_get_hclk_freq();
 80021c2:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 80021c4:	9001      	str	r0, [sp, #4]
 80021c6:	4651      	mov	r1, sl
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7fe fd0d 	bl	8000be8 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 80021ce:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 80021d2:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 80021d4:	fba4 0106 	umull	r0, r1, r4, r6
 80021d8:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80021da:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8002224 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 80021de:	2300      	movs	r3, #0
 80021e0:	fb06 110a 	mla	r1, r6, sl, r1
 80021e4:	f7fe fd00 	bl	8000be8 <__aeabi_uldivmod>
  ms -= (s * 1000);
 80021e8:	fbab 3106 	umull	r3, r1, fp, r6
 80021ec:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80021ee:	fba4 0109 	umull	r0, r1, r4, r9
 80021f2:	9a01      	ldr	r2, [sp, #4]
 80021f4:	fb09 110a 	mla	r1, r9, sl, r1
 80021f8:	2300      	movs	r3, #0
 80021fa:	f7fe fcf5 	bl	8000be8 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 80021fe:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 8002200:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 8002202:	fbab 8909 	umull	r8, r9, fp, r9
 8002206:	eba0 0008 	sub.w	r0, r0, r8
 800220a:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 800220e:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 8002212:	1b40      	subs	r0, r0, r5
  t->us = us;
 8002214:	60f8      	str	r0, [r7, #12]
  return 0;
 8002216:	2000      	movs	r0, #0
}
 8002218:	b003      	add	sp, #12
 800221a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 800221e:	f04f 30ff 	mov.w	r0, #4294967295
 8002222:	e7f9      	b.n	8002218 <dwtCyclesToTime+0x68>
 8002224:	000f4240 	.word	0x000f4240

08002228 <getFlashCacheConf>:

#if defined(STM32L4) || defined(STM32F4)

  mconf |= MCONF_L4_F4;

  __I uint32_t acr = FLASH->ACR ;
 8002228:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <getFlashCacheConf+0x38>)
{
 800222a:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR ;
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002230:	9801      	ldr	r0, [sp, #4]

  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8002232:	9b01      	ldr	r3, [sp, #4]
 8002234:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_DCACHE;
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8002236:	9b01      	ldr	r3, [sp, #4]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002238:	f000 000f 	and.w	r0, r0, #15
    mconf |= MCONF_ART_DCACHE;
 800223c:	bf4c      	ite	mi
 800223e:	f040 2001 	orrmi.w	r0, r0, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8002242:	f040 7080 	orrpl.w	r0, r0, #16777216	; 0x1000000
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8002246:	059a      	lsls	r2, r3, #22
    mconf |= MCONF_ART_ICACHE;
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8002248:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_ICACHE;
 800224a:	bf48      	it	mi
 800224c:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8002250:	055b      	lsls	r3, r3, #21
    mconf |= MCONF_ART_PREFETCH;
 8002252:	bf48      	it	mi
 8002254:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_IC_Msk)
    mconf |= MCONF_CORE_ICACHE;
#endif

  return mconf;
}
 8002258:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800225c:	b002      	add	sp, #8
 800225e:	4770      	bx	lr
 8002260:	40023c00 	.word	0x40023c00

08002264 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8002264:	b510      	push	{r4, lr}
 8002266:	4604      	mov	r4, r0
  return port_hal_rcc_get_hclk_freq();
 8002268:	f7ff fb38 	bl	80018dc <HAL_RCC_GetHCLKFreq>
  conf->sclk = systemCoreClock();
 800226c:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_rcc_get_hclk_freq();
 800226e:	f7ff fb35 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 8002272:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8002274:	f7ff ffd8 	bl	8002228 <getFlashCacheConf>
 8002278:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 800227a:	f7ff f90f 	bl	800149c <HAL_GetDEVID>
 800227e:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8002280:	f7ff f906 	bl	8001490 <HAL_GetREVID>
 8002284:	6120      	str	r0, [r4, #16]
}
 8002286:	bd10      	pop	{r4, pc}

08002288 <systemSettingLog>:

void systemSettingLog(void)
{
 8002288:	b530      	push	{r4, r5, lr}
  /* Display ARM Complier version */

#if defined(_IS_AC6_COMPILER) && _IS_AC6_COMPILER
  LC_PRINT("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800228a:	2203      	movs	r2, #3
{
 800228c:	b089      	sub	sp, #36	; 0x24
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800228e:	2301      	movs	r3, #1
 8002290:	210a      	movs	r1, #10
 8002292:	4826      	ldr	r0, [pc, #152]	; (800232c <systemSettingLog+0xa4>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8002294:	4c26      	ldr	r4, [pc, #152]	; (8002330 <systemSettingLog+0xa8>)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8002296:	f7ff ff37 	bl	8002108 <lc_print>
  if (!conf)
 800229a:	a803      	add	r0, sp, #12
 800229c:	f7ff ffe2 	bl	8002264 <getSysConf.part.0>
  LC_PRINT("STM32 Runtime configuration...\r\n");
 80022a0:	4824      	ldr	r0, [pc, #144]	; (8002334 <systemSettingLog+0xac>)
 80022a2:	f7ff ff31 	bl	8002108 <lc_print>
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80022a6:	9906      	ldr	r1, [sp, #24]
 80022a8:	4823      	ldr	r0, [pc, #140]	; (8002338 <systemSettingLog+0xb0>)
 80022aa:	f2a1 4313 	subw	r3, r1, #1043	; 0x413
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b50      	cmp	r3, #80	; 0x50
 80022b2:	bf96      	itet	ls
 80022b4:	4a21      	ldrls	r2, [pc, #132]	; (800233c <systemSettingLog+0xb4>)
 80022b6:	4a22      	ldrhi	r2, [pc, #136]	; (8002340 <systemSettingLog+0xb8>)
 80022b8:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 80022bc:	9b07      	ldr	r3, [sp, #28]
 80022be:	f7ff ff23 	bl	8002108 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <systemSettingLog+0xbc>)
 80022c4:	2104      	movs	r1, #4
 80022c6:	1d5a      	adds	r2, r3, #5
 80022c8:	f103 000a 	add.w	r0, r3, #10
 80022cc:	f7ff ff1c 	bl	8002108 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 80022d0:	f7ff f8da 	bl	8001488 <HAL_GetHalVersion>
 80022d4:	4601      	mov	r1, r0
 80022d6:	481c      	ldr	r0, [pc, #112]	; (8002348 <systemSettingLog+0xc0>)
 80022d8:	f7ff ff16 	bl	8002108 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80022dc:	9903      	ldr	r1, [sp, #12]
 80022de:	481b      	ldr	r0, [pc, #108]	; (800234c <systemSettingLog+0xc4>)
 80022e0:	fb91 f1f4 	sdiv	r1, r1, r4
 80022e4:	f7ff ff10 	bl	8002108 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 80022e8:	9904      	ldr	r1, [sp, #16]
 80022ea:	4819      	ldr	r0, [pc, #100]	; (8002350 <systemSettingLog+0xc8>)
 80022ec:	fb91 f1f4 	sdiv	r1, r1, r4
 80022f0:	f7ff ff0a 	bl	8002108 <lc_print>
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif
#endif

#if defined(STM32F4) || defined(STM32L4)
  uint32_t acr = FLASH->ACR;
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <systemSettingLog+0xcc>)
    return "False";
 80022f6:	4818      	ldr	r0, [pc, #96]	; (8002358 <systemSettingLog+0xd0>)
  uint32_t acr = FLASH->ACR;
 80022f8:	6819      	ldr	r1, [r3, #0]
    return "False";
 80022fa:	1d44      	adds	r4, r0, #5
 80022fc:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002300:	bf14      	ite	ne
 8002302:	4602      	movne	r2, r0
 8002304:	4622      	moveq	r2, r4
 8002306:	f411 7f00 	tst.w	r1, #512	; 0x200
 800230a:	bf14      	ite	ne
 800230c:	4603      	movne	r3, r0
 800230e:	4623      	moveq	r3, r4
 8002310:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8002314:	bf18      	it	ne
 8002316:	4604      	movne	r4, r0
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8002318:	f001 050f 	and.w	r5, r1, #15
 800231c:	e9cd 4500 	strd	r4, r5, [sp]
 8002320:	30ed      	adds	r0, #237	; 0xed
 8002322:	f7ff fef1 	bl	8002108 <lc_print>
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8002326:	b009      	add	sp, #36	; 0x24
 8002328:	bd30      	pop	{r4, r5, pc}
 800232a:	bf00      	nop
 800232c:	08006432 	.word	0x08006432
 8002330:	000f4240 	.word	0x000f4240
 8002334:	0800644f 	.word	0x0800644f
 8002338:	08006470 	.word	0x08006470
 800233c:	080068dc 	.word	0x080068dc
 8002340:	0800641f 	.word	0x0800641f
 8002344:	080064a1 	.word	0x080064a1
 8002348:	080064c9 	.word	0x080064c9
 800234c:	080064e2 	.word	0x080064e2
 8002350:	080064fb 	.word	0x080064fb
 8002354:	40023c00 	.word	0x40023c00
 8002358:	08006427 	.word	0x08006427

0800235c <dwtIpInit>:

#if !defined(HAS_DEDICATED_PERF_COUNTER)
#if USE_SYSTICK_ONLY == 0

__STATIC_INLINE void dwtIpInit(void) {
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <dwtIpInit+0x20>)
 800235e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002366:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <dwtIpInit+0x24>)
 800236c:	2200      	movs	r2, #0
 800236e:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //| DWT_CTRL_CPIEVTENA_Msk;
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00
 8002380:	e0001000 	.word	0xe0001000

08002384 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8002384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 8002386:	4c20      	ldr	r4, [pc, #128]	; (8002408 <aiValidationInit+0x84>)

__STATIC_FORCEINLINE void dwtReset(void) {
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8002388:	4e20      	ldr	r6, [pc, #128]	; (800240c <aiValidationInit+0x88>)
 800238a:	f104 008b 	add.w	r0, r4, #139	; 0x8b
 800238e:	f7ff febb 	bl	8002108 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8002392:	2300      	movs	r3, #0
 8002394:	2207      	movs	r2, #7
 8002396:	f104 0191 	add.w	r1, r4, #145	; 0x91
 800239a:	f104 009f 	add.w	r0, r4, #159	; 0x9f
 800239e:	f7ff feb3 	bl	8002108 <lc_print>
 80023a2:	2500      	movs	r5, #0
  LC_PRINT("#\r\n");
 80023a4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80023a8:	f7ff feae 	bl	8002108 <lc_print>

  systemSettingLog();
 80023ac:	f7ff ff6c 	bl	8002288 <systemSettingLog>

  crcIpInit();
 80023b0:	f7ff fee4 	bl	800217c <crcIpInit>
  cyclesCount.count_start = SysTick->VAL;
#else
  struct dwtTime t;
  uint32_t st;

  dwtIpInit();
 80023b4:	f7ff ffd2 	bl	800235c <dwtIpInit>
  dwtReset();
  HAL_Delay(100);
 80023b8:	2064      	movs	r0, #100	; 0x64
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80023ba:	6075      	str	r5, [r6, #4]
  HAL_Delay(100);
 80023bc:	f7ff f850 	bl	8001460 <HAL_Delay>
  return DWT->CYCCNT;
 80023c0:	6870      	ldr	r0, [r6, #4]
  st = dwtGetCycles();
  dwtCyclesToTime(st/100, &t);
 80023c2:	466a      	mov	r2, sp
 80023c4:	2664      	movs	r6, #100	; 0x64
 80023c6:	4629      	mov	r1, r5
 80023c8:	fbb0 f0f6 	udiv	r0, r0, r6
 80023cc:	f7ff fef0 	bl	80021b0 <dwtCyclesToTime>

#if USE_CORE_CLOCK_ONLY == 1
  LC_PRINT(" Timestamp    : DWT only (HAL_Delay(1)=%d.%03d ms)\r\n",
      t.s * 100 + t.ms, t.us);
#else
  LC_PRINT(" Timestamp    : SysTick + DWT (HAL_Delay(1)=%d.%03d ms)\r\n",
 80023d0:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 80023d4:	9a03      	ldr	r2, [sp, #12]
 80023d6:	fb06 3101 	mla	r1, r6, r1, r3
 80023da:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80023de:	f7ff fe93 	bl	8002108 <lc_print>
      t.s * 100 + t.ms, t.us);
  dwtCyclesToTime(UINT32_MAX, &t);
 80023e2:	466a      	mov	r2, sp
 80023e4:	2100      	movs	r1, #0
 80023e6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ea:	f7ff fee1 	bl	80021b0 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 80023ee:	9a01      	ldr	r2, [sp, #4]
 80023f0:	9b02      	ldr	r3, [sp, #8]
 80023f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023f6:	fb01 3302 	mla	r3, r1, r2, r3
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <aiValidationInit+0x8c>)
 80023fc:	6013      	str	r3, [r2, #0]
#endif
  dwtIpInit();
 80023fe:	f7ff ffad 	bl	800235c <dwtIpInit>
  cyclesCounterInit();

  return 0;
}
 8002402:	4628      	mov	r0, r5
 8002404:	b004      	add	sp, #16
 8002406:	bd70      	pop	{r4, r5, r6, pc}
 8002408:	080065c7 	.word	0x080065c7
 800240c:	e0001000 	.word	0xe0001000
 8002410:	20000d50 	.word	0x20000d50

08002414 <MX_X_CUBE_AI_Init>:
ai_handle data_activations0[] = {pool0};

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8002414:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8002416:	f7fe ff57 	bl	80012c8 <MX_USART2_UART_Init>
    aiValidationInit();
    /* USER CODE BEGIN 5 */
    /* USER CODE END 5 */
}
 800241a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 800241e:	f7ff bfb1 	b.w	8002384 <aiValidationInit>

08002422 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8002422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8002426:	6896      	ldr	r6, [r2, #8]
{
 8002428:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 800242a:	2500      	movs	r5, #0
  if (specifier->flags & FLAG_IS_SIGNED) {
 800242c:	f016 0304 	ands.w	r3, r6, #4
{
 8002430:	4614      	mov	r4, r2
  buf[idx--] = 0;
 8002432:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8002436:	d028      	beq.n	800248a <_write_number+0x68>
    if ((int64_t)number < 0) {
 8002438:	42a9      	cmp	r1, r5
 800243a:	da07      	bge.n	800244c <_write_number+0x2a>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 800243c:	6813      	ldr	r3, [r2, #0]
      number = -number;
 800243e:	4240      	negs	r0, r0
      specifier->width -= 1;
 8002440:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8002444:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8002448:	6013      	str	r3, [r2, #0]
      sign_neg = '-';
 800244a:	252d      	movs	r5, #45	; 0x2d
 800244c:	f016 0f08 	tst.w	r6, #8
 8002450:	bf14      	ite	ne
 8002452:	f04f 0841 	movne.w	r8, #65	; 0x41
 8002456:	f04f 0861 	moveq.w	r8, #97	; 0x61
 800245a:	f10d 093e 	add.w	r9, sp, #62	; 0x3e
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800245e:	273e      	movs	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8002460:	f006 0a10 	and.w	sl, r6, #16
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8002464:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8002468:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 800246c:	f1ba 0f00 	cmp.w	sl, #0
 8002470:	d032      	beq.n	80024d8 <_write_number+0xb6>
      chr = number & 0x0F;
 8002472:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8002476:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8002478:	2b09      	cmp	r3, #9
      t = number >> 4;
 800247a:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 800247e:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8002482:	d906      	bls.n	8002492 <_write_number+0x70>
 8002484:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8002486:	b2db      	uxtb	r3, r3
 8002488:	e004      	b.n	8002494 <_write_number+0x72>
  char sign_neg = 0;
 800248a:	461d      	mov	r5, r3
 800248c:	e7de      	b.n	800244c <_write_number+0x2a>
    }
    number = t;
    buf[idx--] = chr;
 800248e:	4617      	mov	r7, r2
 8002490:	e7ea      	b.n	8002468 <_write_number+0x46>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8002492:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8002494:	f809 3901 	strb.w	r3, [r9], #-1
    count++;
  } while (number);
 8002498:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 800249c:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 80024a0:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 80024a4:	d1f3      	bne.n	800248e <_write_number+0x6c>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 80024a6:	f006 0101 	and.w	r1, r6, #1
 80024aa:	b14d      	cbz	r5, 80024c0 <_write_number+0x9e>
 80024ac:	b941      	cbnz	r1, 80024c0 <_write_number+0x9e>
    buf[idx--] = sign_neg;
 80024ae:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80024b2:	eb0d 0203 	add.w	r2, sp, r3
    count++;
 80024b6:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 80024ba:	f802 5c40 	strb.w	r5, [r2, #-64]
 80024be:	1eba      	subs	r2, r7, #2
 80024c0:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	bf14      	ite	ne
 80024c6:	2130      	movne	r1, #48	; 0x30
 80024c8:	2120      	moveq	r1, #32
 80024ca:	f006 0602 	and.w	r6, r6, #2
 80024ce:	455b      	cmp	r3, fp
 80024d0:	dd13      	ble.n	80024fa <_write_number+0xd8>
 80024d2:	b166      	cbz	r6, 80024ee <_write_number+0xcc>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 80024d4:	b9a5      	cbnz	r5, 8002500 <_write_number+0xde>
 80024d6:	e01b      	b.n	8002510 <_write_number+0xee>
      t = number / 10;
 80024d8:	2300      	movs	r3, #0
 80024da:	220a      	movs	r2, #10
 80024dc:	f7fe fb84 	bl	8000be8 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 80024e0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80024e4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80024e8:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 80024ec:	e7cb      	b.n	8002486 <_write_number+0x64>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 80024ee:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 80024f2:	f10b 0b01 	add.w	fp, fp, #1
 80024f6:	3a01      	subs	r2, #1
 80024f8:	e7e9      	b.n	80024ce <_write_number+0xac>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 80024fa:	b14d      	cbz	r5, 8002510 <_write_number+0xee>
 80024fc:	455b      	cmp	r3, fp
 80024fe:	d107      	bne.n	8002510 <_write_number+0xee>
    buf[idx--] = sign_neg;
 8002500:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8002504:	446b      	add	r3, sp
    count++;
 8002506:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 800250a:	f803 5c40 	strb.w	r5, [r3, #-64]
 800250e:	3a01      	subs	r2, #1
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8002510:	eb0d 0602 	add.w	r6, sp, r2
 8002514:	2500      	movs	r5, #0
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8002516:	68e3      	ldr	r3, [r4, #12]
 8002518:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800251c:	6920      	ldr	r0, [r4, #16]
  for(int i = 0; i < count; i++) {
 800251e:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8002520:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8002522:	45ab      	cmp	fp, r5
 8002524:	d1f7      	bne.n	8002516 <_write_number+0xf4>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8002526:	68a3      	ldr	r3, [r4, #8]
 8002528:	079b      	lsls	r3, r3, #30
 800252a:	d408      	bmi.n	800253e <_write_number+0x11c>
      _WRITE_C(' ');
    }
  }

  return count;
}
 800252c:	4628      	mov	r0, r5
 800252e:	b011      	add	sp, #68	; 0x44
 8002530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8002534:	68e3      	ldr	r3, [r4, #12]
 8002536:	6920      	ldr	r0, [r4, #16]
 8002538:	2120      	movs	r1, #32
 800253a:	4798      	blx	r3
 800253c:	3501      	adds	r5, #1
    while (count < specifier->width) {
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	42ab      	cmp	r3, r5
 8002542:	dcf7      	bgt.n	8002534 <_write_number+0x112>
 8002544:	e7f2      	b.n	800252c <_write_number+0x10a>
	...

08002548 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8002548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800254c:	ed2d 8b02 	vpush	{d8}
  double mul = 1.0;
 8002550:	ed9f 8b8f 	vldr	d8, [pc, #572]	; 8002790 <vlc_print+0x248>
{
 8002554:	b09d      	sub	sp, #116	; 0x74
 8002556:	4682      	mov	sl, r0
 8002558:	468b      	mov	fp, r1
 800255a:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 800255c:	2500      	movs	r5, #0
  return *(*fmtP)++;
 800255e:	4613      	mov	r3, r2
 8002560:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002564:	9304      	str	r3, [sp, #16]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8002566:	b929      	cbnz	r1, 8002574 <vlc_print+0x2c>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8002568:	4628      	mov	r0, r5
 800256a:	b01d      	add	sp, #116	; 0x74
 800256c:	ecbd 8b02 	vpop	{d8}
 8002570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8002574:	290a      	cmp	r1, #10
 8002576:	d103      	bne.n	8002580 <vlc_print+0x38>
      putc_fct(user, c);
 8002578:	4658      	mov	r0, fp
 800257a:	47d0      	blx	sl
      count++;
 800257c:	3501      	adds	r5, #1
 800257e:	e0c2      	b.n	8002706 <vlc_print+0x1be>
    else if (c == '%')
 8002580:	2925      	cmp	r1, #37	; 0x25
 8002582:	d1f9      	bne.n	8002578 <vlc_print+0x30>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8002584:	2300      	movs	r3, #0
 8002586:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800258a:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 800258e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	469e      	mov	lr, r3
 8002596:	461a      	mov	r2, r3
 8002598:	469c      	mov	ip, r3
 800259a:	4618      	mov	r0, r3
      bool has_precision = false;
 800259c:	461f      	mov	r7, r3
 800259e:	f04f 080a 	mov.w	r8, #10
  return *(*fmtP)++;
 80025a2:	9e04      	ldr	r6, [sp, #16]
 80025a4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80025a8:	9604      	str	r6, [sp, #16]
        if (!c)
 80025aa:	2900      	cmp	r1, #0
 80025ac:	f000 81d0 	beq.w	8002950 <vlc_print+0x408>
        else if (c == '0')
 80025b0:	2930      	cmp	r1, #48	; 0x30
 80025b2:	d114      	bne.n	80025de <vlc_print+0x96>
          if (!specifier.width && !specifier.precision) {
 80025b4:	ea50 0102 	orrs.w	r1, r0, r2
 80025b8:	d107      	bne.n	80025ca <vlc_print+0x82>
            specifier.flags |= FLAG_ZERO_EXTEND;
 80025ba:	9b00      	ldr	r3, [sp, #0]
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	460a      	mov	r2, r1
 80025c4:	4608      	mov	r0, r1
 80025c6:	2301      	movs	r3, #1
 80025c8:	e7eb      	b.n	80025a2 <vlc_print+0x5a>
          } else if (has_precision) {
 80025ca:	b11f      	cbz	r7, 80025d4 <vlc_print+0x8c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80025cc:	fb08 f202 	mul.w	r2, r8, r2
 80025d0:	46be      	mov	lr, r7
 80025d2:	e7e6      	b.n	80025a2 <vlc_print+0x5a>
            specifier.width = specifier.width * 10 + (c - '0');
 80025d4:	fb08 f000 	mul.w	r0, r8, r0
            specifier.width = specifier.width * 10 + (c - '0');
 80025d8:	f04f 0c01 	mov.w	ip, #1
 80025dc:	e7e1      	b.n	80025a2 <vlc_print+0x5a>
        else if (c == '-')
 80025de:	292d      	cmp	r1, #45	; 0x2d
 80025e0:	d104      	bne.n	80025ec <vlc_print+0xa4>
          specifier.flags |= FLAG_NEG_PAD;
 80025e2:	9b00      	ldr	r3, [sp, #0]
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	e7ec      	b.n	80025c6 <vlc_print+0x7e>
        else if (c == '.')
 80025ec:	292e      	cmp	r1, #46	; 0x2e
 80025ee:	f000 81bd 	beq.w	800296c <vlc_print+0x424>
        else if ((c >= '1') && (c <= '9'))
 80025f2:	f1a1 0631 	sub.w	r6, r1, #49	; 0x31
 80025f6:	2e08      	cmp	r6, #8
 80025f8:	d807      	bhi.n	800260a <vlc_print+0xc2>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80025fa:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 80025fc:	b117      	cbz	r7, 8002604 <vlc_print+0xbc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80025fe:	fb08 1202 	mla	r2, r8, r2, r1
 8002602:	e7e5      	b.n	80025d0 <vlc_print+0x88>
            specifier.width = specifier.width * 10 + (c - '0');
 8002604:	fb08 1000 	mla	r0, r8, r0, r1
 8002608:	e7e6      	b.n	80025d8 <vlc_print+0x90>
        else if (c == 'l')
 800260a:	296c      	cmp	r1, #108	; 0x6c
 800260c:	d0c9      	beq.n	80025a2 <vlc_print+0x5a>
 800260e:	f1bc 0f00 	cmp.w	ip, #0
 8002612:	d000      	beq.n	8002616 <vlc_print+0xce>
 8002614:	9007      	str	r0, [sp, #28]
 8002616:	f1be 0f00 	cmp.w	lr, #0
 800261a:	d000      	beq.n	800261e <vlc_print+0xd6>
 800261c:	9208      	str	r2, [sp, #32]
 800261e:	b10b      	cbz	r3, 8002624 <vlc_print+0xdc>
 8002620:	9b00      	ldr	r3, [sp, #0]
 8002622:	9309      	str	r3, [sp, #36]	; 0x24
          switch(c)
 8002624:	2978      	cmp	r1, #120	; 0x78
 8002626:	d809      	bhi.n	800263c <vlc_print+0xf4>
 8002628:	2962      	cmp	r1, #98	; 0x62
 800262a:	d813      	bhi.n	8002654 <vlc_print+0x10c>
 800262c:	2946      	cmp	r1, #70	; 0x46
 800262e:	f000 80b5 	beq.w	800279c <vlc_print+0x254>
 8002632:	2958      	cmp	r1, #88	; 0x58
 8002634:	f000 808b 	beq.w	800274e <vlc_print+0x206>
 8002638:	2925      	cmp	r1, #37	; 0x25
 800263a:	d09d      	beq.n	8002578 <vlc_print+0x30>
        putc_fct(user, '<');
 800263c:	213c      	movs	r1, #60	; 0x3c
 800263e:	4658      	mov	r0, fp
 8002640:	47d0      	blx	sl
        putc_fct(user, '!');
 8002642:	2121      	movs	r1, #33	; 0x21
 8002644:	4658      	mov	r0, fp
 8002646:	47d0      	blx	sl
        putc_fct(user, '>');
 8002648:	213e      	movs	r1, #62	; 0x3e
 800264a:	4658      	mov	r0, fp
 800264c:	47d0      	blx	sl
        va_arg(vl, signed long);
 800264e:	3404      	adds	r4, #4
        count += 3;
 8002650:	3503      	adds	r5, #3
        error = false;
 8002652:	e058      	b.n	8002706 <vlc_print+0x1be>
          switch(c)
 8002654:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8002658:	2b15      	cmp	r3, #21
 800265a:	d8ef      	bhi.n	800263c <vlc_print+0xf4>
 800265c:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <vlc_print+0x11c>)
 800265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002662:	bf00      	nop
 8002664:	080026bd 	.word	0x080026bd
 8002668:	0800276f 	.word	0x0800276f
 800266c:	0800263d 	.word	0x0800263d
 8002670:	0800279d 	.word	0x0800279d
 8002674:	0800263d 	.word	0x0800263d
 8002678:	0800263d 	.word	0x0800263d
 800267c:	0800276f 	.word	0x0800276f
 8002680:	0800263d 	.word	0x0800263d
 8002684:	0800263d 	.word	0x0800263d
 8002688:	0800263d 	.word	0x0800263d
 800268c:	0800263d 	.word	0x0800263d
 8002690:	0800263d 	.word	0x0800263d
 8002694:	0800263d 	.word	0x0800263d
 8002698:	08002743 	.word	0x08002743
 800269c:	0800263d 	.word	0x0800263d
 80026a0:	0800263d 	.word	0x0800263d
 80026a4:	080026c5 	.word	0x080026c5
 80026a8:	0800263d 	.word	0x0800263d
 80026ac:	08002777 	.word	0x08002777
 80026b0:	0800263d 	.word	0x0800263d
 80026b4:	0800263d 	.word	0x0800263d
 80026b8:	08002757 	.word	0x08002757
            t = (char)va_arg(vl, signed int);
 80026bc:	f854 1b04 	ldr.w	r1, [r4], #4
            putc_fct(user, t);
 80026c0:	b2c9      	uxtb	r1, r1
 80026c2:	e759      	b.n	8002578 <vlc_print+0x30>
            if (!str) str = "(null)";
 80026c4:	4b34      	ldr	r3, [pc, #208]	; (8002798 <vlc_print+0x250>)
            str = va_arg(vl, char*);
 80026c6:	f854 8b04 	ldr.w	r8, [r4], #4
            if (!str) str = "(null)";
 80026ca:	f1b8 0f00 	cmp.w	r8, #0
 80026ce:	bf08      	it	eq
 80026d0:	4698      	moveq	r8, r3
  int len = strlen(str);
 80026d2:	4640      	mov	r0, r8
 80026d4:	f7fd fd9c 	bl	8000210 <strlen>
  if (specifier->precision) {
 80026d8:	9b08      	ldr	r3, [sp, #32]
  int len = strlen(str);
 80026da:	4607      	mov	r7, r0
  if (specifier->precision) {
 80026dc:	b113      	cbz	r3, 80026e4 <vlc_print+0x19c>
    len = (len > specifier->precision)?specifier->precision:len;
 80026de:	4298      	cmp	r0, r3
 80026e0:	bfa8      	it	ge
 80026e2:	461f      	movge	r7, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 80026e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80026e6:	f016 0602 	ands.w	r6, r6, #2
 80026ea:	d013      	beq.n	8002714 <vlc_print+0x1cc>
  int count = 0;
 80026ec:	2600      	movs	r6, #0
 80026ee:	46c1      	mov	r9, r8
  for (int i = 0; i < len; i++) {
 80026f0:	eba9 0308 	sub.w	r3, r9, r8
 80026f4:	429f      	cmp	r7, r3
 80026f6:	dc12      	bgt.n	800271e <vlc_print+0x1d6>
  if (specifier->flags & FLAG_NEG_PAD) {
 80026f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026fa:	2f00      	cmp	r7, #0
 80026fc:	bfa8      	it	ge
 80026fe:	19f6      	addge	r6, r6, r7
 8002700:	079b      	lsls	r3, r3, #30
 8002702:	d41c      	bmi.n	800273e <vlc_print+0x1f6>
            count += _write_string(str, &specifier);
 8002704:	4435      	add	r5, r6
  for(int i = 0; i < count; i++) {
 8002706:	9a04      	ldr	r2, [sp, #16]
 8002708:	e729      	b.n	800255e <vlc_print+0x16>
      _WRITE_C(' ');
 800270a:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 800270e:	2120      	movs	r1, #32
 8002710:	4798      	blx	r3
 8002712:	3601      	adds	r6, #1
    for(int i = len; i < specifier->width; i++) {
 8002714:	9a07      	ldr	r2, [sp, #28]
 8002716:	19bb      	adds	r3, r7, r6
 8002718:	429a      	cmp	r2, r3
 800271a:	dcf6      	bgt.n	800270a <vlc_print+0x1c2>
 800271c:	e7e7      	b.n	80026ee <vlc_print+0x1a6>
    _WRITE_C(*str++);
 800271e:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8002722:	f819 1b01 	ldrb.w	r1, [r9], #1
 8002726:	4798      	blx	r3
  for (int i = 0; i < len; i++) {
 8002728:	e7e2      	b.n	80026f0 <vlc_print+0x1a8>
      _WRITE_C(' ');
 800272a:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 800272e:	2120      	movs	r1, #32
 8002730:	4798      	blx	r3
 8002732:	3601      	adds	r6, #1
    for(int i = len; i < specifier->width; i++) {
 8002734:	9a07      	ldr	r2, [sp, #28]
 8002736:	19bb      	adds	r3, r7, r6
 8002738:	429a      	cmp	r2, r3
 800273a:	dcf6      	bgt.n	800272a <vlc_print+0x1e2>
 800273c:	e7e2      	b.n	8002704 <vlc_print+0x1bc>
 800273e:	1bbf      	subs	r7, r7, r6
 8002740:	e7f8      	b.n	8002734 <vlc_print+0x1ec>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8002742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.width = 8;
 800274a:	2308      	movs	r3, #8
 800274c:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_CAPS;
 800274e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002750:	f043 0308 	orr.w	r3, r3, #8
 8002754:	9309      	str	r3, [sp, #36]	; 0x24
            specifier.flags |= FLAG_HEX;
 8002756:	9b09      	ldr	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8002758:	f854 0b04 	ldr.w	r0, [r4], #4
            specifier.flags |= FLAG_HEX;
 800275c:	f043 0310 	orr.w	r3, r3, #16
            count += _write_number(val, &specifier);
 8002760:	aa07      	add	r2, sp, #28
 8002762:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8002764:	9309      	str	r3, [sp, #36]	; 0x24
            count += _write_number(val, &specifier);
 8002766:	f7ff fe5c 	bl	8002422 <_write_number>
 800276a:	4405      	add	r5, r0
            break;
 800276c:	e7cb      	b.n	8002706 <vlc_print+0x1be>
            specifier.flags |= FLAG_IS_SIGNED;
 800276e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	9309      	str	r3, [sp, #36]	; 0x24
              val = va_arg(vl, unsigned int);
 8002776:	6820      	ldr	r0, [r4, #0]
            if (c == 'u')
 8002778:	2975      	cmp	r1, #117	; 0x75
              val = va_arg(vl, unsigned int);
 800277a:	bf0c      	ite	eq
 800277c:	2100      	moveq	r1, #0
                val = va_arg(vl, signed long);
 800277e:	17c1      	asrne	r1, r0, #31
            count += _write_number(val, &specifier);
 8002780:	aa07      	add	r2, sp, #28
 8002782:	f7ff fe4e 	bl	8002422 <_write_number>
              val = va_arg(vl, unsigned int);
 8002786:	1d26      	adds	r6, r4, #4
            count += _write_number(val, &specifier);
 8002788:	4405      	add	r5, r0
            break;
 800278a:	4634      	mov	r4, r6
 800278c:	e7bb      	b.n	8002706 <vlc_print+0x1be>
 800278e:	bf00      	nop
 8002790:	00000000 	.word	0x00000000
 8002794:	3ff00000 	.word	0x3ff00000
 8002798:	08006a20 	.word	0x08006a20
            dbl = va_arg(vl, double);
 800279c:	3407      	adds	r4, #7
 800279e:	f024 0407 	bic.w	r4, r4, #7
 80027a2:	ecb4 7b02 	vldmia	r4!, {d7}
            if (specifier.precision == 0)
 80027a6:	9b08      	ldr	r3, [sp, #32]
            dbl = va_arg(vl, double);
 80027a8:	ed8d 7b00 	vstr	d7, [sp]
            if (specifier.precision == 0)
 80027ac:	b90b      	cbnz	r3, 80027b2 <vlc_print+0x26a>
              specifier.precision = 6;
 80027ae:	2306      	movs	r3, #6
 80027b0:	9308      	str	r3, [sp, #32]
  for (int i=0;i <specifier->precision; i++)
 80027b2:	9e08      	ldr	r6, [sp, #32]
  double mul = 1.0;
 80027b4:	ec59 8b18 	vmov	r8, r9, d8
  for (int i=0;i <specifier->precision; i++)
 80027b8:	2700      	movs	r7, #0
 80027ba:	42b7      	cmp	r7, r6
    mul *= 10;
 80027bc:	f04f 0200 	mov.w	r2, #0
  for (int i=0;i <specifier->precision; i++)
 80027c0:	f2c0 80b1 	blt.w	8002926 <vlc_print+0x3de>
  if (is_signed)
 80027c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80027c8:	2300      	movs	r3, #0
 80027ca:	f7fe f9a7 	bl	8000b1c <__aeabi_dcmplt>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	f000 80b2 	beq.w	8002938 <vlc_print+0x3f0>
    number = -number;
 80027d4:	9b00      	ldr	r3, [sp, #0]
 80027d6:	9302      	str	r3, [sp, #8]
 80027d8:	9b01      	ldr	r3, [sp, #4]
 80027da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80027de:	9303      	str	r3, [sp, #12]
  number += (half_ / mul);
 80027e0:	4642      	mov	r2, r8
 80027e2:	464b      	mov	r3, r9
 80027e4:	4962      	ldr	r1, [pc, #392]	; (8002970 <vlc_print+0x428>)
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe f850 	bl	800088c <__aeabi_ddiv>
 80027ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80027f0:	f7fd fd6c 	bl	80002cc <__adddf3>
  val = (uint64_t)(number * mul);
 80027f4:	4642      	mov	r2, r8
 80027f6:	464b      	mov	r3, r9
 80027f8:	f7fd ff1e 	bl	8000638 <__aeabi_dmul>
 80027fc:	f7fe fa0c 	bl	8000c18 <__aeabi_d2ulz>
  uint32_t count = 0;
 8002800:	2700      	movs	r7, #0
  val = (uint64_t)(number * mul);
 8002802:	4602      	mov	r2, r0
  uint32_t idx = sizeof(buf) - 1;
 8002804:	f04f 083f 	mov.w	r8, #63	; 0x3f
    uint64_t t = val / 10;
 8002808:	4691      	mov	r9, r2
 800280a:	2300      	movs	r3, #0
 800280c:	220a      	movs	r2, #10
 800280e:	4648      	mov	r0, r9
 8002810:	9105      	str	r1, [sp, #20]
 8002812:	f7fe f9e9 	bl	8000be8 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8002816:	f109 0330 	add.w	r3, r9, #48	; 0x30
    uint64_t t = val / 10;
 800281a:	4602      	mov	r2, r0
    chr = (val - t * 10) + '0';
 800281c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002820:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
    buf[idx--] = chr;
 8002824:	f108 0370 	add.w	r3, r8, #112	; 0x70
 8002828:	446b      	add	r3, sp
 800282a:	f108 3cff 	add.w	ip, r8, #4294967295
 800282e:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8002832:	1c7b      	adds	r3, r7, #1
    if (count == specifier->precision) {
 8002834:	429e      	cmp	r6, r3
      buf[idx--] = '.';
 8002836:	bf01      	itttt	eq
 8002838:	f10c 0370 	addeq.w	r3, ip, #112	; 0x70
 800283c:	eb0d 0c03 	addeq.w	ip, sp, r3
 8002840:	232e      	moveq	r3, #46	; 0x2e
 8002842:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
    count++;
 8002846:	bf18      	it	ne
 8002848:	461f      	movne	r7, r3
  } while (val);
 800284a:	9b05      	ldr	r3, [sp, #20]
      buf[idx--] = '.';
 800284c:	bf06      	itte	eq
 800284e:	f1a8 0802 	subeq.w	r8, r8, #2
      count++;
 8002852:	3702      	addeq	r7, #2
    buf[idx--] = chr;
 8002854:	46e0      	movne	r8, ip
  } while (val);
 8002856:	f1b9 0f0a 	cmp.w	r9, #10
 800285a:	f173 0300 	sbcs.w	r3, r3, #0
 800285e:	d2d3      	bcs.n	8002808 <vlc_print+0x2c0>
    buf[idx--] = '0';
 8002860:	42be      	cmp	r6, r7
 8002862:	f1c6 0001 	rsb	r0, r6, #1
 8002866:	4438      	add	r0, r7
 8002868:	f04f 0130 	mov.w	r1, #48	; 0x30
 800286c:	bf38      	it	cc
 800286e:	2001      	movcc	r0, #1
 8002870:	eba6 0907 	sub.w	r9, r6, r7
 8002874:	eb0d 0301 	add.w	r3, sp, r1
 8002878:	bf38      	it	cc
 800287a:	f04f 0900 	movcc.w	r9, #0
 800287e:	4440      	add	r0, r8
 8002880:	4418      	add	r0, r3
 8002882:	464a      	mov	r2, r9
 8002884:	f000 ff42 	bl	800370c <memset>
 8002888:	1bbb      	subs	r3, r7, r6
 800288a:	42be      	cmp	r6, r7
 800288c:	bf38      	it	cc
 800288e:	2300      	movcc	r3, #0
 8002890:	444f      	add	r7, r9
  if (count == specifier->precision) {
 8002892:	42be      	cmp	r6, r7
 8002894:	4498      	add	r8, r3
 8002896:	f106 0601 	add.w	r6, r6, #1
 800289a:	d108      	bne.n	80028ae <vlc_print+0x366>
    buf[idx--] = '.';
 800289c:	f108 0370 	add.w	r3, r8, #112	; 0x70
 80028a0:	446b      	add	r3, sp
 80028a2:	222e      	movs	r2, #46	; 0x2e
 80028a4:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80028a8:	4637      	mov	r7, r6
    buf[idx--] = '.';
 80028aa:	f108 38ff 	add.w	r8, r8, #4294967295
  if (count == specifier->precision + 1)
 80028ae:	42be      	cmp	r6, r7
 80028b0:	d108      	bne.n	80028c4 <vlc_print+0x37c>
    buf[idx--] = '0';
 80028b2:	f108 0370 	add.w	r3, r8, #112	; 0x70
 80028b6:	446b      	add	r3, sp
 80028b8:	2230      	movs	r2, #48	; 0x30
 80028ba:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80028be:	3701      	adds	r7, #1
    buf[idx--] = '0';
 80028c0:	f108 38ff 	add.w	r8, r8, #4294967295
  if (is_signed) {
 80028c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2300      	movs	r3, #0
 80028cc:	f7fe f926 	bl	8000b1c <__aeabi_dcmplt>
 80028d0:	b140      	cbz	r0, 80028e4 <vlc_print+0x39c>
    buf[idx--] = '-';
 80028d2:	f108 0370 	add.w	r3, r8, #112	; 0x70
 80028d6:	446b      	add	r3, sp
 80028d8:	222d      	movs	r2, #45	; 0x2d
 80028da:	f803 2c40 	strb.w	r2, [r3, #-64]
    count++;
 80028de:	3701      	adds	r7, #1
    buf[idx--] = '-';
 80028e0:	f108 38ff 	add.w	r8, r8, #4294967295
  while (count < specifier->width) {
 80028e4:	f8dd 901c 	ldr.w	r9, [sp, #28]
    buf[idx--] = ' ';
 80028e8:	454f      	cmp	r7, r9
 80028ea:	f1c9 0001 	rsb	r0, r9, #1
 80028ee:	4438      	add	r0, r7
 80028f0:	bf88      	it	hi
 80028f2:	2001      	movhi	r0, #1
 80028f4:	eba9 0607 	sub.w	r6, r9, r7
 80028f8:	ab0c      	add	r3, sp, #48	; 0x30
 80028fa:	bf88      	it	hi
 80028fc:	2600      	movhi	r6, #0
 80028fe:	4440      	add	r0, r8
 8002900:	4632      	mov	r2, r6
 8002902:	4418      	add	r0, r3
 8002904:	2120      	movs	r1, #32
 8002906:	f000 ff01 	bl	800370c <memset>
  for(int i = 0; i < count; i++) {
 800290a:	eba7 0309 	sub.w	r3, r7, r9
 800290e:	454f      	cmp	r7, r9
 8002910:	bf88      	it	hi
 8002912:	2300      	movhi	r3, #0
 8002914:	4498      	add	r8, r3
 8002916:	ab0c      	add	r3, sp, #48	; 0x30
 8002918:	4437      	add	r7, r6
 800291a:	4498      	add	r8, r3
 800291c:	2600      	movs	r6, #0
 800291e:	42b7      	cmp	r7, r6
 8002920:	d10f      	bne.n	8002942 <vlc_print+0x3fa>
            count += _write_double(dbl, &specifier);
 8002922:	443d      	add	r5, r7
            break;
 8002924:	e6ef      	b.n	8002706 <vlc_print+0x1be>
    mul *= 10;
 8002926:	4640      	mov	r0, r8
 8002928:	4649      	mov	r1, r9
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <vlc_print+0x42c>)
 800292c:	f7fd fe84 	bl	8000638 <__aeabi_dmul>
  for (int i=0;i <specifier->precision; i++)
 8002930:	3701      	adds	r7, #1
    mul *= 10;
 8002932:	4680      	mov	r8, r0
 8002934:	4689      	mov	r9, r1
  for (int i=0;i <specifier->precision; i++)
 8002936:	e740      	b.n	80027ba <vlc_print+0x272>
 8002938:	ed9d 7b00 	vldr	d7, [sp]
 800293c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002940:	e74e      	b.n	80027e0 <vlc_print+0x298>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8002942:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	; 0x28
 8002946:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 800294a:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 800294c:	3601      	adds	r6, #1
 800294e:	e7e6      	b.n	800291e <vlc_print+0x3d6>
 8002950:	f1bc 0f00 	cmp.w	ip, #0
 8002954:	d000      	beq.n	8002958 <vlc_print+0x410>
 8002956:	9007      	str	r0, [sp, #28]
 8002958:	f1be 0f00 	cmp.w	lr, #0
 800295c:	d000      	beq.n	8002960 <vlc_print+0x418>
 800295e:	9208      	str	r2, [sp, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f43f ae6b 	beq.w	800263c <vlc_print+0xf4>
 8002966:	9b00      	ldr	r3, [sp, #0]
 8002968:	9309      	str	r3, [sp, #36]	; 0x24
 800296a:	e667      	b.n	800263c <vlc_print+0xf4>
          has_precision = true;
 800296c:	2701      	movs	r7, #1
 800296e:	e618      	b.n	80025a2 <vlc_print+0x5a>
 8002970:	3fe00000 	.word	0x3fe00000
 8002974:	40240000 	.word	0x40240000

08002978 <ai_test1_create>:
}

AI_API_ENTRY
ai_error ai_test1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002978:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800297a:	2305      	movs	r3, #5
 800297c:	2200      	movs	r2, #0
 800297e:	e9cd 3200 	strd	r3, r2, [sp]
 8002982:	4a03      	ldr	r2, [pc, #12]	; (8002990 <ai_test1_create+0x18>)
 8002984:	2301      	movs	r3, #1
 8002986:	f000 f837 	bl	80029f8 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800298a:	b003      	add	sp, #12
 800298c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002990:	20000a4c 	.word	0x20000a4c

08002994 <ai_version_get>:
 8002994:	0212      	lsls	r2, r2, #8
 8002996:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800299a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800299e:	4770      	bx	lr

080029a0 <ai_array_get_byte_size>:
 80029a0:	b319      	cbz	r1, 80029ea <ai_array_get_byte_size+0x4a>
 80029a2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80029a6:	fb03 f101 	mul.w	r1, r3, r1
 80029aa:	3107      	adds	r1, #7
 80029ac:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80029b0:	f021 0307 	bic.w	r3, r1, #7
 80029b4:	2a04      	cmp	r2, #4
 80029b6:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80029ba:	fa23 f101 	lsr.w	r1, r3, r1
 80029be:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80029c2:	d00b      	beq.n	80029dc <ai_array_get_byte_size+0x3c>
 80029c4:	2a08      	cmp	r2, #8
 80029c6:	d002      	beq.n	80029ce <ai_array_get_byte_size+0x2e>
 80029c8:	3107      	adds	r1, #7
 80029ca:	08c8      	lsrs	r0, r1, #3
 80029cc:	4770      	bx	lr
 80029ce:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80029d2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80029d6:	3107      	adds	r1, #7
 80029d8:	08c8      	lsrs	r0, r1, #3
 80029da:	4770      	bx	lr
 80029dc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80029e0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80029e4:	3107      	adds	r1, #7
 80029e6:	08c8      	lsrs	r0, r1, #3
 80029e8:	4770      	bx	lr
 80029ea:	4608      	mov	r0, r1
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <_ai_platform_acquire_crc>:
 80029f0:	2001      	movs	r0, #1
 80029f2:	4770      	bx	lr

080029f4 <_ai_platform_release_crc>:
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <ai_platform_network_create>:
 80029f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029fc:	b083      	sub	sp, #12
 80029fe:	4606      	mov	r6, r0
 8002a00:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8002a04:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8002a08:	4615      	mov	r5, r2
 8002a0a:	461f      	mov	r7, r3
 8002a0c:	f7ff fff0 	bl	80029f0 <_ai_platform_acquire_crc>
 8002a10:	b188      	cbz	r0, 8002a36 <ai_platform_network_create+0x3e>
 8002a12:	4a5d      	ldr	r2, [pc, #372]	; (8002b88 <ai_platform_network_create+0x190>)
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002a1a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002a1e:	4603      	mov	r3, r0
 8002a20:	d00e      	beq.n	8002a40 <ai_platform_network_create+0x48>
 8002a22:	4a5a      	ldr	r2, [pc, #360]	; (8002b8c <ai_platform_network_create+0x194>)
 8002a24:	2118      	movs	r1, #24
 8002a26:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8002a2a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8002a2e:	2918      	cmp	r1, #24
 8002a30:	d018      	beq.n	8002a64 <ai_platform_network_create+0x6c>
 8002a32:	f7ff ffdf 	bl	80029f4 <_ai_platform_release_crc>
 8002a36:	f244 1033 	movw	r0, #16691	; 0x4133
 8002a3a:	b003      	add	sp, #12
 8002a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a40:	4a53      	ldr	r2, [pc, #332]	; (8002b90 <ai_platform_network_create+0x198>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	6091      	str	r1, [r2, #8]
 8002a46:	2114      	movs	r1, #20
 8002a48:	e001      	b.n	8002a4e <ai_platform_network_create+0x56>
 8002a4a:	3901      	subs	r1, #1
 8002a4c:	d002      	beq.n	8002a54 <ai_platform_network_create+0x5c>
 8002a4e:	6894      	ldr	r4, [r2, #8]
 8002a50:	2c00      	cmp	r4, #0
 8002a52:	d1fa      	bne.n	8002a4a <ai_platform_network_create+0x52>
 8002a54:	4a4e      	ldr	r2, [pc, #312]	; (8002b90 <ai_platform_network_create+0x198>)
 8002a56:	6891      	ldr	r1, [r2, #8]
 8002a58:	b911      	cbnz	r1, 8002a60 <ai_platform_network_create+0x68>
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	3201      	adds	r2, #1
 8002a5e:	d008      	beq.n	8002a72 <ai_platform_network_create+0x7a>
 8002a60:	4618      	mov	r0, r3
 8002a62:	e7e6      	b.n	8002a32 <ai_platform_network_create+0x3a>
 8002a64:	2101      	movs	r1, #1
 8002a66:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8002a6a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8002a6e:	2900      	cmp	r1, #0
 8002a70:	d1fb      	bne.n	8002a6a <ai_platform_network_create+0x72>
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ffbe 	bl	80029f4 <_ai_platform_release_crc>
 8002a78:	f7ff ffba 	bl	80029f0 <_ai_platform_acquire_crc>
 8002a7c:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <ai_platform_network_create+0x190>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a88:	d010      	beq.n	8002aac <ai_platform_network_create+0xb4>
 8002a8a:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <ai_platform_network_create+0x194>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8002a92:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8002a96:	2900      	cmp	r1, #0
 8002a98:	d1fb      	bne.n	8002a92 <ai_platform_network_create+0x9a>
 8002a9a:	4a3e      	ldr	r2, [pc, #248]	; (8002b94 <ai_platform_network_create+0x19c>)
 8002a9c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8002aa0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8002aa4:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <ai_platform_network_create+0x1a0>)
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d00c      	beq.n	8002ac4 <ai_platform_network_create+0xcc>
 8002aaa:	e7fe      	b.n	8002aaa <ai_platform_network_create+0xb2>
 8002aac:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <ai_platform_network_create+0x198>)
 8002aae:	2301      	movs	r3, #1
 8002ab0:	6093      	str	r3, [r2, #8]
 8002ab2:	6893      	ldr	r3, [r2, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1fc      	bne.n	8002ab2 <ai_platform_network_create+0xba>
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <ai_platform_network_create+0x19c>)
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <ai_platform_network_create+0x1a0>)
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d122      	bne.n	8002b0a <ai_platform_network_create+0x112>
 8002ac4:	f7ff ff96 	bl	80029f4 <_ai_platform_release_crc>
 8002ac8:	b38e      	cbz	r6, 8002b2e <ai_platform_network_create+0x136>
 8002aca:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <ai_platform_network_create+0x1a4>)
 8002acc:	602b      	str	r3, [r5, #0]
 8002ace:	6035      	str	r5, [r6, #0]
 8002ad0:	f000 f868 	bl	8002ba4 <core_init>
 8002ad4:	b1d0      	cbz	r0, 8002b0c <ai_platform_network_create+0x114>
 8002ad6:	f7ff ff8b 	bl	80029f0 <_ai_platform_acquire_crc>
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <ai_platform_network_create+0x190>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae6:	d025      	beq.n	8002b34 <ai_platform_network_create+0x13c>
 8002ae8:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <ai_platform_network_create+0x194>)
 8002aea:	2301      	movs	r3, #1
 8002aec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002af0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1fb      	bne.n	8002af0 <ai_platform_network_create+0xf8>
 8002af8:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <ai_platform_network_create+0x19c>)
 8002afa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8002afe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <ai_platform_network_create+0x1a0>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d022      	beq.n	8002b4e <ai_platform_network_create+0x156>
 8002b08:	e7fe      	b.n	8002b08 <ai_platform_network_create+0x110>
 8002b0a:	e7fe      	b.n	8002b0a <ai_platform_network_create+0x112>
 8002b0c:	2430      	movs	r4, #48	; 0x30
 8002b0e:	2300      	movs	r3, #0
 8002b10:	6033      	str	r3, [r6, #0]
 8002b12:	2610      	movs	r6, #16
 8002b14:	464a      	mov	r2, r9
 8002b16:	4641      	mov	r1, r8
 8002b18:	4638      	mov	r0, r7
 8002b1a:	f7ff ff3b 	bl	8002994 <ai_version_get>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2000      	movs	r0, #0
 8002b22:	f364 0007 	bfi	r0, r4, #0, #8
 8002b26:	64ab      	str	r3, [r5, #72]	; 0x48
 8002b28:	f366 201f 	bfi	r0, r6, #8, #24
 8002b2c:	e785      	b.n	8002a3a <ai_platform_network_create+0x42>
 8002b2e:	f241 0010 	movw	r0, #4112	; 0x1010
 8002b32:	e782      	b.n	8002a3a <ai_platform_network_create+0x42>
 8002b34:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <ai_platform_network_create+0x198>)
 8002b36:	2301      	movs	r3, #1
 8002b38:	6093      	str	r3, [r2, #8]
 8002b3a:	6893      	ldr	r3, [r2, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1fc      	bne.n	8002b3a <ai_platform_network_create+0x142>
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <ai_platform_network_create+0x19c>)
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <ai_platform_network_create+0x1a0>)
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d000      	beq.n	8002b4e <ai_platform_network_create+0x156>
 8002b4c:	e7fe      	b.n	8002b4c <ai_platform_network_create+0x154>
 8002b4e:	f7ff ff51 	bl	80029f4 <_ai_platform_release_crc>
 8002b52:	2200      	movs	r2, #0
 8002b54:	4641      	mov	r1, r8
 8002b56:	4638      	mov	r0, r7
 8002b58:	f7ff ff1c 	bl	8002994 <ai_version_get>
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4604      	mov	r4, r0
 8002b60:	2105      	movs	r1, #5
 8002b62:	2001      	movs	r0, #1
 8002b64:	f7ff ff16 	bl	8002994 <ai_version_get>
 8002b68:	4284      	cmp	r4, r0
 8002b6a:	d001      	beq.n	8002b70 <ai_platform_network_create+0x178>
 8002b6c:	2401      	movs	r4, #1
 8002b6e:	e7ce      	b.n	8002b0e <ai_platform_network_create+0x116>
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <ai_platform_network_create+0x1a8>)
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	a801      	add	r0, sp, #4
 8002b76:	f000 fc3b 	bl	80033f0 <ai_check_custom_types>
 8002b7a:	b110      	cbz	r0, 8002b82 <ai_platform_network_create+0x18a>
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	4634      	mov	r4, r6
 8002b80:	e7c8      	b.n	8002b14 <ai_platform_network_create+0x11c>
 8002b82:	2402      	movs	r4, #2
 8002b84:	e7c3      	b.n	8002b0e <ai_platform_network_create+0x116>
 8002b86:	bf00      	nop
 8002b88:	e0042000 	.word	0xe0042000
 8002b8c:	58024000 	.word	0x58024000
 8002b90:	40023000 	.word	0x40023000
 8002b94:	f407a5c2 	.word	0xf407a5c2
 8002b98:	b5e8b5cd 	.word	0xb5e8b5cd
 8002b9c:	a1c00100 	.word	0xa1c00100
 8002ba0:	84048403 	.word	0x84048403

08002ba4 <core_init>:
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	4770      	bx	lr

08002ba8 <forward_dense>:
 8002ba8:	6983      	ldr	r3, [r0, #24]
 8002baa:	881a      	ldrh	r2, [r3, #0]
 8002bac:	2a00      	cmp	r2, #0
 8002bae:	f000 8181 	beq.w	8002eb4 <forward_dense+0x30c>
 8002bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb6:	ed2d 8b02 	vpush	{d8}
 8002bba:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8002bbe:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8002bc2:	b095      	sub	sp, #84	; 0x54
 8002bc4:	b105      	cbz	r5, 8002bc8 <forward_dense+0x20>
 8002bc6:	682d      	ldr	r5, [r5, #0]
 8002bc8:	2a01      	cmp	r2, #1
 8002bca:	f000 828f 	beq.w	80030ec <forward_dense+0x544>
 8002bce:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8002bd2:	b106      	cbz	r6, 8002bd6 <forward_dense+0x2e>
 8002bd4:	6836      	ldr	r6, [r6, #0]
 8002bd6:	2a02      	cmp	r2, #2
 8002bd8:	f000 816e 	beq.w	8002eb8 <forward_dense+0x310>
 8002bdc:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8002be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8274 	beq.w	80030d0 <forward_dense+0x528>
 8002be8:	4619      	mov	r1, r3
 8002bea:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8002bee:	6809      	ldr	r1, [r1, #0]
 8002bf0:	910d      	str	r1, [sp, #52]	; 0x34
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	f240 826e 	bls.w	80030d4 <forward_dense+0x52c>
 8002bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bfe:	460b      	mov	r3, r1
 8002c00:	68e8      	ldr	r0, [r5, #12]
 8002c02:	68f7      	ldr	r7, [r6, #12]
 8002c04:	6840      	ldr	r0, [r0, #4]
 8002c06:	6999      	ldr	r1, [r3, #24]
 8002c08:	9013      	str	r0, [sp, #76]	; 0x4c
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	680b      	ldr	r3, [r1, #0]
 8002c0e:	9012      	str	r0, [sp, #72]	; 0x48
 8002c10:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8002c14:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8002c18:	fb00 f404 	mul.w	r4, r0, r4
 8002c1c:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8002c20:	fa4e f000 	asr.w	r0, lr, r0
 8002c24:	2a03      	cmp	r2, #3
 8002c26:	9010      	str	r0, [sp, #64]	; 0x40
 8002c28:	f000 825d 	beq.w	80030e6 <forward_dense+0x53e>
 8002c2c:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8002c30:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8002c34:	2a00      	cmp	r2, #0
 8002c36:	f000 8246 	beq.w	80030c6 <forward_dense+0x51e>
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	2a00      	cmp	r2, #0
 8002c3e:	f000 8242 	beq.w	80030c6 <forward_dense+0x51e>
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8002c48:	f000 822c 	beq.w	80030a4 <forward_dense+0x4fc>
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	f000 8229 	beq.w	80030a4 <forward_dense+0x4fc>
 8002c52:	f04f 0b00 	mov.w	fp, #0
 8002c56:	69b2      	ldr	r2, [r6, #24]
 8002c58:	69ab      	ldr	r3, [r5, #24]
 8002c5a:	6891      	ldr	r1, [r2, #8]
 8002c5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	6952      	ldr	r2, [r2, #20]
 8002c62:	9106      	str	r1, [sp, #24]
 8002c64:	fb07 f404 	mul.w	r4, r7, r4
 8002c68:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8002c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002c6e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8002c72:	4281      	cmp	r1, r0
 8002c74:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8002c78:	900e      	str	r0, [sp, #56]	; 0x38
 8002c7a:	940c      	str	r4, [sp, #48]	; 0x30
 8002c7c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8002c80:	f080 8113 	bcs.w	8002eaa <forward_dense+0x302>
 8002c84:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8002c86:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8002ed4 <forward_dense+0x32c>
 8002c8a:	f021 0201 	bic.w	r2, r1, #1
 8002c8e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002c92:	9204      	str	r2, [sp, #16]
 8002c94:	f001 0201 	and.w	r2, r1, #1
 8002c98:	08c8      	lsrs	r0, r1, #3
 8002c9a:	9208      	str	r2, [sp, #32]
 8002c9c:	008a      	lsls	r2, r1, #2
 8002c9e:	f001 0a07 	and.w	sl, r1, #7
 8002ca2:	920f      	str	r2, [sp, #60]	; 0x3c
 8002ca4:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8002ca8:	3320      	adds	r3, #32
 8002caa:	465c      	mov	r4, fp
 8002cac:	9007      	str	r0, [sp, #28]
 8002cae:	46cb      	mov	fp, r9
 8002cb0:	9205      	str	r2, [sp, #20]
 8002cb2:	9302      	str	r3, [sp, #8]
 8002cb4:	46c1      	mov	r9, r8
 8002cb6:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8002cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	3b20      	subs	r3, #32
 8002cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8002cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002cc8:	b10b      	cbz	r3, 8002cce <forward_dense+0x126>
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2c00      	cmp	r4, #0
 8002cd0:	f000 81da 	beq.w	8003088 <forward_dense+0x4e0>
 8002cd4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002cd6:	2904      	cmp	r1, #4
 8002cd8:	9906      	ldr	r1, [sp, #24]
 8002cda:	f000 80fd 	beq.w	8002ed8 <forward_dense+0x330>
 8002cde:	4549      	cmp	r1, r9
 8002ce0:	f080 80d2 	bcs.w	8002e88 <forward_dense+0x2e0>
 8002ce4:	460f      	mov	r7, r1
 8002ce6:	9907      	ldr	r1, [sp, #28]
 8002ce8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8002cec:	f8dd a014 	ldr.w	sl, [sp, #20]
 8002cf0:	1c4e      	adds	r6, r1, #1
 8002cf2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8002cf6:	4694      	mov	ip, r2
 8002cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002cfa:	468e      	mov	lr, r1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80de 	beq.w	8002ebe <forward_dense+0x316>
 8002d02:	ecf3 2a01 	vldmia	r3!, {s5}
 8002d06:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002ed4 <forward_dense+0x32c>
 8002d0a:	f1be 0f00 	cmp.w	lr, #0
 8002d0e:	f000 80de 	beq.w	8002ece <forward_dense+0x326>
 8002d12:	f10c 0108 	add.w	r1, ip, #8
 8002d16:	4640      	mov	r0, r8
 8002d18:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8002d1c:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8002d20:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8002d24:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8002d28:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8002d2c:	ed10 5a04 	vldr	s10, [r0, #-16]
 8002d30:	ed50 5a03 	vldr	s11, [r0, #-12]
 8002d34:	ed10 6a02 	vldr	s12, [r0, #-8]
 8002d38:	ed50 6a01 	vldr	s13, [r0, #-4]
 8002d3c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002d40:	edd5 7a00 	vldr	s15, [r5]
 8002d44:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8002d48:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002d4c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8002d50:	ed95 3a00 	vldr	s6, [r5]
 8002d54:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8002d58:	eee3 7a23 	vfma.f32	s15, s6, s7
 8002d5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002d60:	3108      	adds	r1, #8
 8002d62:	edd5 3a00 	vldr	s7, [r5]
 8002d66:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8002d6a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8002d6e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002d72:	3020      	adds	r0, #32
 8002d74:	ed95 4a00 	vldr	s8, [r5]
 8002d78:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8002d7c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002d80:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002d84:	edd5 4a00 	vldr	s9, [r5]
 8002d88:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8002d8c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8002d90:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002d94:	ed95 5a00 	vldr	s10, [r5]
 8002d98:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8002d9c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002da0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002da4:	edd5 5a00 	vldr	s11, [r5]
 8002da8:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8002dac:	eee5 7a86 	vfma.f32	s15, s11, s12
 8002db0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002db4:	428e      	cmp	r6, r1
 8002db6:	ed95 6a00 	vldr	s12, [r5]
 8002dba:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002dbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc2:	d1a9      	bne.n	8002d18 <forward_dense+0x170>
 8002dc4:	f1a6 0108 	sub.w	r1, r6, #8
 8002dc8:	4650      	mov	r0, sl
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	d04a      	beq.n	8002e64 <forward_dense+0x2bc>
 8002dce:	780d      	ldrb	r5, [r1, #0]
 8002dd0:	edd0 6a00 	vldr	s13, [r0]
 8002dd4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002dd8:	edd5 7a00 	vldr	s15, [r5]
 8002ddc:	2a01      	cmp	r2, #1
 8002dde:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002de2:	d03f      	beq.n	8002e64 <forward_dense+0x2bc>
 8002de4:	784d      	ldrb	r5, [r1, #1]
 8002de6:	edd0 6a01 	vldr	s13, [r0, #4]
 8002dea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002dee:	edd5 7a00 	vldr	s15, [r5]
 8002df2:	2a02      	cmp	r2, #2
 8002df4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002df8:	d034      	beq.n	8002e64 <forward_dense+0x2bc>
 8002dfa:	788d      	ldrb	r5, [r1, #2]
 8002dfc:	edd0 6a02 	vldr	s13, [r0, #8]
 8002e00:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002e04:	edd5 7a00 	vldr	s15, [r5]
 8002e08:	2a03      	cmp	r2, #3
 8002e0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002e0e:	d029      	beq.n	8002e64 <forward_dense+0x2bc>
 8002e10:	78cd      	ldrb	r5, [r1, #3]
 8002e12:	edd0 6a03 	vldr	s13, [r0, #12]
 8002e16:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002e1a:	edd5 7a00 	vldr	s15, [r5]
 8002e1e:	2a04      	cmp	r2, #4
 8002e20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002e24:	d01e      	beq.n	8002e64 <forward_dense+0x2bc>
 8002e26:	790d      	ldrb	r5, [r1, #4]
 8002e28:	edd0 6a04 	vldr	s13, [r0, #16]
 8002e2c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002e30:	edd5 7a00 	vldr	s15, [r5]
 8002e34:	2a05      	cmp	r2, #5
 8002e36:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002e3a:	d013      	beq.n	8002e64 <forward_dense+0x2bc>
 8002e3c:	794d      	ldrb	r5, [r1, #5]
 8002e3e:	edd0 6a05 	vldr	s13, [r0, #20]
 8002e42:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002e46:	edd5 7a00 	vldr	s15, [r5]
 8002e4a:	2a06      	cmp	r2, #6
 8002e4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002e50:	d008      	beq.n	8002e64 <forward_dense+0x2bc>
 8002e52:	7989      	ldrb	r1, [r1, #6]
 8002e54:	edd0 7a06 	vldr	s15, [r0, #24]
 8002e58:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8002e5c:	edd1 6a00 	vldr	s13, [r1]
 8002e60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002e64:	44dc      	add	ip, fp
 8002e66:	445e      	add	r6, fp
 8002e68:	ee32 7a87 	vadd.f32	s14, s5, s14
 8002e6c:	eca7 7a01 	vstmia	r7!, {s14}
 8002e70:	454f      	cmp	r7, r9
 8002e72:	f4ff af43 	bcc.w	8002cfc <forward_dense+0x154>
 8002e76:	9a06      	ldr	r2, [sp, #24]
 8002e78:	eba9 0302 	sub.w	r3, r9, r2
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	3304      	adds	r3, #4
 8002e84:	18d3      	adds	r3, r2, r3
 8002e86:	9306      	str	r3, [sp, #24]
 8002e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e8a:	9a05      	ldr	r2, [sp, #20]
 8002e8c:	4499      	add	r9, r3
 8002e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e90:	441a      	add	r2, r3
 8002e92:	9205      	str	r2, [sp, #20]
 8002e94:	9a02      	ldr	r2, [sp, #8]
 8002e96:	441a      	add	r2, r3
 8002e98:	9202      	str	r2, [sp, #8]
 8002e9a:	9a04      	ldr	r2, [sp, #16]
 8002e9c:	441a      	add	r2, r3
 8002e9e:	9204      	str	r2, [sp, #16]
 8002ea0:	9b06      	ldr	r3, [sp, #24]
 8002ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	f4ff af08 	bcc.w	8002cba <forward_dense+0x112>
 8002eaa:	b015      	add	sp, #84	; 0x54
 8002eac:	ecbd 8b02 	vpop	{d8}
 8002eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb4:	6853      	ldr	r3, [r2, #4]
 8002eb6:	deff      	udf	#255	; 0xff
 8002eb8:	2300      	movs	r3, #0
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	deff      	udf	#255	; 0xff
 8002ebe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002ed4 <forward_dense+0x32c>
 8002ec2:	eef0 2a48 	vmov.f32	s5, s16
 8002ec6:	f1be 0f00 	cmp.w	lr, #0
 8002eca:	f47f af22 	bne.w	8002d12 <forward_dense+0x16a>
 8002ece:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002ed0:	4661      	mov	r1, ip
 8002ed2:	e77a      	b.n	8002dca <forward_dense+0x222>
 8002ed4:	00000000 	.word	0x00000000
 8002ed8:	4549      	cmp	r1, r9
 8002eda:	d2d5      	bcs.n	8002e88 <forward_dense+0x2e0>
 8002edc:	9807      	ldr	r0, [sp, #28]
 8002ede:	9103      	str	r1, [sp, #12]
 8002ee0:	9904      	ldr	r1, [sp, #16]
 8002ee2:	f100 0c01 	add.w	ip, r0, #1
 8002ee6:	3901      	subs	r1, #1
 8002ee8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8002eec:	9109      	str	r1, [sp, #36]	; 0x24
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80b2 	beq.w	8003058 <forward_dense+0x4b0>
 8002ef4:	9907      	ldr	r1, [sp, #28]
 8002ef6:	ecf3 2a01 	vldmia	r3!, {s5}
 8002efa:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8002ed4 <forward_dense+0x32c>
 8002efe:	2900      	cmp	r1, #0
 8002f00:	f000 80b2 	beq.w	8003068 <forward_dense+0x4c0>
 8002f04:	9902      	ldr	r1, [sp, #8]
 8002f06:	1d10      	adds	r0, r2, #4
 8002f08:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8002f0c:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8002f10:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8002f14:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8002f18:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8002f1c:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8002f20:	ed11 5a04 	vldr	s10, [r1, #-16]
 8002f24:	ed51 5a03 	vldr	s11, [r1, #-12]
 8002f28:	ed11 6a02 	vldr	s12, [r1, #-8]
 8002f2c:	ed51 6a01 	vldr	s13, [r1, #-4]
 8002f30:	f006 070f 	and.w	r7, r6, #15
 8002f34:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8002f38:	edd7 7a00 	vldr	s15, [r7]
 8002f3c:	0936      	lsrs	r6, r6, #4
 8002f3e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8002f42:	ed96 3a00 	vldr	s6, [r6]
 8002f46:	ee67 7a82 	vmul.f32	s15, s15, s4
 8002f4a:	092e      	lsrs	r6, r5, #4
 8002f4c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8002f50:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8002f54:	f005 050f 	and.w	r5, r5, #15
 8002f58:	edd6 3a00 	vldr	s7, [r6]
 8002f5c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8002f60:	eee3 7a84 	vfma.f32	s15, s7, s8
 8002f64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002f68:	0937      	lsrs	r7, r6, #4
 8002f6a:	ed95 4a00 	vldr	s8, [r5]
 8002f6e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8002f72:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002f76:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8002f7a:	f006 060f 	and.w	r6, r6, #15
 8002f7e:	edd7 4a00 	vldr	s9, [r7]
 8002f82:	eee4 7a85 	vfma.f32	s15, s9, s10
 8002f86:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8002f8a:	3004      	adds	r0, #4
 8002f8c:	ed96 5a00 	vldr	s10, [r6]
 8002f90:	092e      	lsrs	r6, r5, #4
 8002f92:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002f96:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8002f9a:	f005 050f 	and.w	r5, r5, #15
 8002f9e:	edd6 5a00 	vldr	s11, [r6]
 8002fa2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8002fa6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002faa:	4584      	cmp	ip, r0
 8002fac:	ed95 6a00 	vldr	s12, [r5]
 8002fb0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002fb4:	f101 0120 	add.w	r1, r1, #32
 8002fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fbc:	d1a4      	bne.n	8002f08 <forward_dense+0x360>
 8002fbe:	f8dd e014 	ldr.w	lr, [sp, #20]
 8002fc2:	f1ac 0804 	sub.w	r8, ip, #4
 8002fc6:	9904      	ldr	r1, [sp, #16]
 8002fc8:	458e      	cmp	lr, r1
 8002fca:	d22a      	bcs.n	8003022 <forward_dense+0x47a>
 8002fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002fce:	eba1 070e 	sub.w	r7, r1, lr
 8002fd2:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8002fd6:	f10e 0008 	add.w	r0, lr, #8
 8002fda:	f108 36ff 	add.w	r6, r8, #4294967295
 8002fde:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8002fe2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002fe6:	ed50 5a01 	vldr	s11, [r0, #-4]
 8002fea:	ed50 6a02 	vldr	s13, [r0, #-8]
 8002fee:	f001 050f 	and.w	r5, r1, #15
 8002ff2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8002ff6:	edd5 7a00 	vldr	s15, [r5]
 8002ffa:	0909      	lsrs	r1, r1, #4
 8002ffc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003000:	ed91 6a00 	vldr	s12, [r1]
 8003004:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003008:	42b7      	cmp	r7, r6
 800300a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800300e:	f100 0008 	add.w	r0, r0, #8
 8003012:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003016:	d1e4      	bne.n	8002fe2 <forward_dense+0x43a>
 8003018:	f10a 0a01 	add.w	sl, sl, #1
 800301c:	44d0      	add	r8, sl
 800301e:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8003022:	9908      	ldr	r1, [sp, #32]
 8003024:	b321      	cbz	r1, 8003070 <forward_dense+0x4c8>
 8003026:	f898 1000 	ldrb.w	r1, [r8]
 800302a:	edde 7a00 	vldr	s15, [lr]
 800302e:	0909      	lsrs	r1, r1, #4
 8003030:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003034:	edd1 6a00 	vldr	s13, [r1]
 8003038:	9903      	ldr	r1, [sp, #12]
 800303a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800303e:	445a      	add	r2, fp
 8003040:	44dc      	add	ip, fp
 8003042:	ee72 2a87 	vadd.f32	s5, s5, s14
 8003046:	ece1 2a01 	vstmia	r1!, {s5}
 800304a:	4589      	cmp	r9, r1
 800304c:	9103      	str	r1, [sp, #12]
 800304e:	f67f af12 	bls.w	8002e76 <forward_dense+0x2ce>
 8003052:	2b00      	cmp	r3, #0
 8003054:	f47f af4e 	bne.w	8002ef4 <forward_dense+0x34c>
 8003058:	9907      	ldr	r1, [sp, #28]
 800305a:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8002ed4 <forward_dense+0x32c>
 800305e:	eef0 2a48 	vmov.f32	s5, s16
 8003062:	2900      	cmp	r1, #0
 8003064:	f47f af4e 	bne.w	8002f04 <forward_dense+0x35c>
 8003068:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800306c:	4690      	mov	r8, r2
 800306e:	e7aa      	b.n	8002fc6 <forward_dense+0x41e>
 8003070:	9903      	ldr	r1, [sp, #12]
 8003072:	ee32 7a87 	vadd.f32	s14, s5, s14
 8003076:	445a      	add	r2, fp
 8003078:	eca1 7a01 	vstmia	r1!, {s14}
 800307c:	4549      	cmp	r1, r9
 800307e:	9103      	str	r1, [sp, #12]
 8003080:	44dc      	add	ip, fp
 8003082:	f4ff af34 	bcc.w	8002eee <forward_dense+0x346>
 8003086:	e6f6      	b.n	8002e76 <forward_dense+0x2ce>
 8003088:	9912      	ldr	r1, [sp, #72]	; 0x48
 800308a:	9d06      	ldr	r5, [sp, #24]
 800308c:	9101      	str	r1, [sp, #4]
 800308e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003090:	9100      	str	r1, [sp, #0]
 8003092:	4628      	mov	r0, r5
 8003094:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003096:	f000 f9d5 	bl	8003444 <lite_dense_if32of32wf32>
 800309a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800309c:	462b      	mov	r3, r5
 800309e:	4413      	add	r3, r2
 80030a0:	9306      	str	r3, [sp, #24]
 80030a2:	e6f1      	b.n	8002e88 <forward_dense+0x2e0>
 80030a4:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80030a8:	f1b9 0f00 	cmp.w	r9, #0
 80030ac:	d016      	beq.n	80030dc <forward_dense+0x534>
 80030ae:	e9d9 0100 	ldrd	r0, r1, [r9]
 80030b2:	f7ff fc75 	bl	80029a0 <ai_array_get_byte_size>
 80030b6:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80030ba:	4602      	mov	r2, r0
 80030bc:	4641      	mov	r1, r8
 80030be:	4658      	mov	r0, fp
 80030c0:	f000 fb16 	bl	80036f0 <memcpy>
 80030c4:	e5c7      	b.n	8002c56 <forward_dense+0xae>
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d00a      	beq.n	80030e0 <forward_dense+0x538>
 80030ca:	f04f 0900 	mov.w	r9, #0
 80030ce:	e5bd      	b.n	8002c4c <forward_dense+0xa4>
 80030d0:	930d      	str	r3, [sp, #52]	; 0x34
 80030d2:	e595      	b.n	8002c00 <forward_dense+0x58>
 80030d4:	2300      	movs	r3, #0
 80030d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80030d8:	460b      	mov	r3, r1
 80030da:	e591      	b.n	8002c00 <forward_dense+0x58>
 80030dc:	46c3      	mov	fp, r8
 80030de:	e5ba      	b.n	8002c56 <forward_dense+0xae>
 80030e0:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80030e4:	e5b7      	b.n	8002c56 <forward_dense+0xae>
 80030e6:	2300      	movs	r3, #0
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	deff      	udf	#255	; 0xff
 80030ec:	2300      	movs	r3, #0
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	deff      	udf	#255	; 0xff
 80030f2:	bf00      	nop

080030f4 <forward_sigmoid>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	ed2d 8b02 	vpush	{d8}
 80030fa:	6982      	ldr	r2, [r0, #24]
 80030fc:	8813      	ldrh	r3, [r2, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03b      	beq.n	800317a <forward_sigmoid+0x86>
 8003102:	6852      	ldr	r2, [r2, #4]
 8003104:	6854      	ldr	r4, [r2, #4]
 8003106:	b104      	cbz	r4, 800310a <forward_sigmoid+0x16>
 8003108:	6824      	ldr	r4, [r4, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d034      	beq.n	8003178 <forward_sigmoid+0x84>
 800310e:	6915      	ldr	r5, [r2, #16]
 8003110:	b105      	cbz	r5, 8003114 <forward_sigmoid+0x20>
 8003112:	682d      	ldr	r5, [r5, #0]
 8003114:	68a3      	ldr	r3, [r4, #8]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	d031      	beq.n	800317e <forward_sigmoid+0x8a>
 800311a:	68e0      	ldr	r0, [r4, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003122:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003126:	4298      	cmp	r0, r3
 8003128:	fb01 f202 	mul.w	r2, r1, r2
 800312c:	d1f9      	bne.n	8003122 <forward_sigmoid+0x2e>
 800312e:	69a7      	ldr	r7, [r4, #24]
 8003130:	69a9      	ldr	r1, [r5, #24]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	688e      	ldr	r6, [r1, #8]
 8003136:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800313a:	3a01      	subs	r2, #1
 800313c:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8003140:	42ab      	cmp	r3, r5
 8003142:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8003146:	d814      	bhi.n	8003172 <forward_sigmoid+0x7e>
 8003148:	3504      	adds	r5, #4
 800314a:	3604      	adds	r6, #4
 800314c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003150:	462c      	mov	r4, r5
 8003152:	ed35 0a01 	vldmdb	r5!, {s0}
 8003156:	eeb1 0a40 	vneg.f32	s0, s0
 800315a:	f002 ffdd 	bl	8006118 <expf>
 800315e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8003162:	3c08      	subs	r4, #8
 8003164:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8003168:	ed66 7a01 	vstmdb	r6!, {s15}
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	42a3      	cmp	r3, r4
 8003170:	d9ee      	bls.n	8003150 <forward_sigmoid+0x5c>
 8003172:	ecbd 8b02 	vpop	{d8}
 8003176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003178:	2300      	movs	r3, #0
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	deff      	udf	#255	; 0xff
 800317e:	69ab      	ldr	r3, [r5, #24]
 8003180:	69a7      	ldr	r7, [r4, #24]
 8003182:	689e      	ldr	r6, [r3, #8]
 8003184:	68bd      	ldr	r5, [r7, #8]
 8003186:	e7df      	b.n	8003148 <forward_sigmoid+0x54>

08003188 <forward_relu>:
 8003188:	6982      	ldr	r2, [r0, #24]
 800318a:	8813      	ldrh	r3, [r2, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d05b      	beq.n	8003248 <forward_relu+0xc0>
 8003190:	6851      	ldr	r1, [r2, #4]
 8003192:	684a      	ldr	r2, [r1, #4]
 8003194:	b102      	cbz	r2, 8003198 <forward_relu+0x10>
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	f000 8123 	beq.w	80033e4 <forward_relu+0x25c>
 800319e:	b470      	push	{r4, r5, r6}
 80031a0:	6909      	ldr	r1, [r1, #16]
 80031a2:	b101      	cbz	r1, 80031a6 <forward_relu+0x1e>
 80031a4:	6809      	ldr	r1, [r1, #0]
 80031a6:	69c6      	ldr	r6, [r0, #28]
 80031a8:	2e00      	cmp	r6, #0
 80031aa:	f000 8097 	beq.w	80032dc <forward_relu+0x154>
 80031ae:	6873      	ldr	r3, [r6, #4]
 80031b0:	6988      	ldr	r0, [r1, #24]
 80031b2:	6991      	ldr	r1, [r2, #24]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	f000 80c1 	beq.w	800333c <forward_relu+0x1b4>
 80031ba:	6893      	ldr	r3, [r2, #8]
 80031bc:	6880      	ldr	r0, [r0, #8]
 80031be:	688c      	ldr	r4, [r1, #8]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f000 80f2 	beq.w	80033aa <forward_relu+0x222>
 80031c6:	68d5      	ldr	r5, [r2, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80031ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80031d2:	42ab      	cmp	r3, r5
 80031d4:	fb01 f202 	mul.w	r2, r1, r2
 80031d8:	d1f9      	bne.n	80031ce <forward_relu+0x46>
 80031da:	68b3      	ldr	r3, [r6, #8]
 80031dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80031e0:	edd3 6a00 	vldr	s13, [r3]
 80031e4:	ed93 6a01 	vldr	s12, [r3, #4]
 80031e8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80031ec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80031f0:	3a01      	subs	r2, #1
 80031f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80031fa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80031fe:	d425      	bmi.n	800324c <forward_relu+0xc4>
 8003200:	429c      	cmp	r4, r3
 8003202:	d81f      	bhi.n	8003244 <forward_relu+0xbc>
 8003204:	1d1a      	adds	r2, r3, #4
 8003206:	1d01      	adds	r1, r0, #4
 8003208:	e00d      	b.n	8003226 <forward_relu+0x9e>
 800320a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	db03      	blt.n	800321c <forward_relu+0x94>
 8003214:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003218:	ee67 7a86 	vmul.f32	s15, s15, s12
 800321c:	3b08      	subs	r3, #8
 800321e:	429c      	cmp	r4, r3
 8003220:	ed61 7a01 	vstmdb	r1!, {s15}
 8003224:	d80e      	bhi.n	8003244 <forward_relu+0xbc>
 8003226:	4613      	mov	r3, r2
 8003228:	ed72 7a01 	vldmdb	r2!, {s15}
 800322c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	d9e9      	bls.n	800320a <forward_relu+0x82>
 8003236:	3b08      	subs	r3, #8
 8003238:	eef0 7a47 	vmov.f32	s15, s14
 800323c:	429c      	cmp	r4, r3
 800323e:	ed61 7a01 	vstmdb	r1!, {s15}
 8003242:	d9f0      	bls.n	8003226 <forward_relu+0x9e>
 8003244:	bc70      	pop	{r4, r5, r6}
 8003246:	4770      	bx	lr
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	deff      	udf	#255	; 0xff
 800324c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8003250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003254:	d11f      	bne.n	8003296 <forward_relu+0x10e>
 8003256:	429c      	cmp	r4, r3
 8003258:	d8f4      	bhi.n	8003244 <forward_relu+0xbc>
 800325a:	1b1c      	subs	r4, r3, r4
 800325c:	f024 0403 	bic.w	r4, r4, #3
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	2500      	movs	r5, #0
 8003264:	1b1b      	subs	r3, r3, r4
 8003266:	1d01      	adds	r1, r0, #4
 8003268:	ed72 7a01 	vldmdb	r2!, {s15}
 800326c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003274:	dc0a      	bgt.n	800328c <forward_relu+0x104>
 8003276:	429a      	cmp	r2, r3
 8003278:	f841 5d04 	str.w	r5, [r1, #-4]!
 800327c:	d0e2      	beq.n	8003244 <forward_relu+0xbc>
 800327e:	ed72 7a01 	vldmdb	r2!, {s15}
 8003282:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328a:	ddf4      	ble.n	8003276 <forward_relu+0xee>
 800328c:	429a      	cmp	r2, r3
 800328e:	ed61 7a01 	vstmdb	r1!, {s15}
 8003292:	d1e9      	bne.n	8003268 <forward_relu+0xe0>
 8003294:	e7d6      	b.n	8003244 <forward_relu+0xbc>
 8003296:	429c      	cmp	r4, r3
 8003298:	d8d4      	bhi.n	8003244 <forward_relu+0xbc>
 800329a:	1b1c      	subs	r4, r3, r4
 800329c:	f024 0403 	bic.w	r4, r4, #3
 80032a0:	1d1a      	adds	r2, r3, #4
 80032a2:	1d01      	adds	r1, r0, #4
 80032a4:	1b1b      	subs	r3, r3, r4
 80032a6:	ed72 7a01 	vldmdb	r2!, {s15}
 80032aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80032ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b2:	db0e      	blt.n	80032d2 <forward_relu+0x14a>
 80032b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80032b8:	4293      	cmp	r3, r2
 80032ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80032be:	ed61 7a01 	vstmdb	r1!, {s15}
 80032c2:	d0bf      	beq.n	8003244 <forward_relu+0xbc>
 80032c4:	ed72 7a01 	vldmdb	r2!, {s15}
 80032c8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80032cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d0:	daf0      	bge.n	80032b4 <forward_relu+0x12c>
 80032d2:	4293      	cmp	r3, r2
 80032d4:	ed61 7a01 	vstmdb	r1!, {s15}
 80032d8:	d1e5      	bne.n	80032a6 <forward_relu+0x11e>
 80032da:	e7b3      	b.n	8003244 <forward_relu+0xbc>
 80032dc:	6893      	ldr	r3, [r2, #8]
 80032de:	6989      	ldr	r1, [r1, #24]
 80032e0:	6990      	ldr	r0, [r2, #24]
 80032e2:	6889      	ldr	r1, [r1, #8]
 80032e4:	6884      	ldr	r4, [r0, #8]
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	d075      	beq.n	80033d6 <forward_relu+0x24e>
 80032ea:	68d5      	ldr	r5, [r2, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80032f2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80032f6:	429d      	cmp	r5, r3
 80032f8:	fb00 f202 	mul.w	r2, r0, r2
 80032fc:	d1f9      	bne.n	80032f2 <forward_relu+0x16a>
 80032fe:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8003302:	3b01      	subs	r3, #1
 8003304:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8003308:	4294      	cmp	r4, r2
 800330a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800330e:	d899      	bhi.n	8003244 <forward_relu+0xbc>
 8003310:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80033ec <forward_relu+0x264>
 8003314:	3204      	adds	r2, #4
 8003316:	3104      	adds	r1, #4
 8003318:	4613      	mov	r3, r2
 800331a:	ed72 7a01 	vldmdb	r2!, {s15}
 800331e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003326:	f1a3 0308 	sub.w	r3, r3, #8
 800332a:	bfb8      	it	lt
 800332c:	eef0 7a47 	vmovlt.f32	s15, s14
 8003330:	429c      	cmp	r4, r3
 8003332:	ed61 7a01 	vstmdb	r1!, {s15}
 8003336:	d9ef      	bls.n	8003318 <forward_relu+0x190>
 8003338:	bc70      	pop	{r4, r5, r6}
 800333a:	4770      	bx	lr
 800333c:	688c      	ldr	r4, [r1, #8]
 800333e:	6891      	ldr	r1, [r2, #8]
 8003340:	6880      	ldr	r0, [r0, #8]
 8003342:	0a09      	lsrs	r1, r1, #8
 8003344:	d049      	beq.n	80033da <forward_relu+0x252>
 8003346:	68d5      	ldr	r5, [r2, #12]
 8003348:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800334c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003350:	42aa      	cmp	r2, r5
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	d1f9      	bne.n	800334c <forward_relu+0x1c4>
 8003358:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800335c:	3a01      	subs	r2, #1
 800335e:	68b1      	ldr	r1, [r6, #8]
 8003360:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003364:	429c      	cmp	r4, r3
 8003366:	ed91 7a00 	vldr	s14, [r1]
 800336a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800336e:	f63f af69 	bhi.w	8003244 <forward_relu+0xbc>
 8003372:	2500      	movs	r5, #0
 8003374:	3304      	adds	r3, #4
 8003376:	1d02      	adds	r2, r0, #4
 8003378:	ed53 7a01 	vldr	s15, [r3, #-4]
 800337c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	f1a3 0104 	sub.w	r1, r3, #4
 8003388:	f1a3 0308 	sub.w	r3, r3, #8
 800338c:	d406      	bmi.n	800339c <forward_relu+0x214>
 800338e:	429c      	cmp	r4, r3
 8003390:	f842 5d04 	str.w	r5, [r2, #-4]!
 8003394:	f63f af56 	bhi.w	8003244 <forward_relu+0xbc>
 8003398:	460b      	mov	r3, r1
 800339a:	e7ed      	b.n	8003378 <forward_relu+0x1f0>
 800339c:	429c      	cmp	r4, r3
 800339e:	ed62 7a01 	vstmdb	r2!, {s15}
 80033a2:	f63f af4f 	bhi.w	8003244 <forward_relu+0xbc>
 80033a6:	460b      	mov	r3, r1
 80033a8:	e7e6      	b.n	8003378 <forward_relu+0x1f0>
 80033aa:	68b3      	ldr	r3, [r6, #8]
 80033ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80033b0:	edd3 6a00 	vldr	s13, [r3]
 80033b4:	ed93 6a01 	vldr	s12, [r3, #4]
 80033b8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	d401      	bmi.n	80033c6 <forward_relu+0x23e>
 80033c2:	4623      	mov	r3, r4
 80033c4:	e71e      	b.n	8003204 <forward_relu+0x7c>
 80033c6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	4623      	mov	r3, r4
 80033d0:	f47f af63 	bne.w	800329a <forward_relu+0x112>
 80033d4:	e741      	b.n	800325a <forward_relu+0xd2>
 80033d6:	4622      	mov	r2, r4
 80033d8:	e79a      	b.n	8003310 <forward_relu+0x188>
 80033da:	68b2      	ldr	r2, [r6, #8]
 80033dc:	4623      	mov	r3, r4
 80033de:	ed92 7a00 	vldr	s14, [r2]
 80033e2:	e7c6      	b.n	8003372 <forward_relu+0x1ea>
 80033e4:	2300      	movs	r3, #0
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	deff      	udf	#255	; 0xff
 80033ea:	bf00      	nop
 80033ec:	00000000 	.word	0x00000000

080033f0 <ai_check_custom_types>:
 80033f0:	b082      	sub	sp, #8
 80033f2:	4b13      	ldr	r3, [pc, #76]	; (8003440 <ai_check_custom_types+0x50>)
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	b118      	cbz	r0, 8003400 <ai_check_custom_types+0x10>
 80033f8:	7803      	ldrb	r3, [r0, #0]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d002      	beq.n	8003404 <ai_check_custom_types+0x14>
 80033fe:	2000      	movs	r0, #0
 8003400:	b002      	add	sp, #8
 8003402:	4770      	bx	lr
 8003404:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <ai_check_custom_types+0x26>
 800340c:	2001      	movs	r0, #1
 800340e:	f080 0001 	eor.w	r0, r0, #1
 8003412:	b002      	add	sp, #8
 8003414:	4770      	bx	lr
 8003416:	7842      	ldrb	r2, [r0, #1]
 8003418:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800341c:	429a      	cmp	r2, r3
 800341e:	f100 0001 	add.w	r0, r0, #1
 8003422:	d1f3      	bne.n	800340c <ai_check_custom_types+0x1c>
 8003424:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003428:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800342c:	429a      	cmp	r2, r3
 800342e:	d1ed      	bne.n	800340c <ai_check_custom_types+0x1c>
 8003430:	7842      	ldrb	r2, [r0, #1]
 8003432:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003436:	429a      	cmp	r2, r3
 8003438:	d1e8      	bne.n	800340c <ai_check_custom_types+0x1c>
 800343a:	2000      	movs	r0, #0
 800343c:	e7e7      	b.n	800340e <ai_check_custom_types+0x1e>
 800343e:	bf00      	nop
 8003440:	84048403 	.word	0x84048403

08003444 <lite_dense_if32of32wf32>:
 8003444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003448:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800344c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8003450:	4287      	cmp	r7, r0
 8003452:	f240 8106 	bls.w	8003662 <lite_dense_if32of32wf32+0x21e>
 8003456:	f1a6 0810 	sub.w	r8, r6, #16
 800345a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800345e:	f108 0801 	add.w	r8, r8, #1
 8003462:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8003466:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800346a:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800346e:	4605      	mov	r5, r0
 8003470:	f006 0a0f 	and.w	sl, r6, #15
 8003474:	2e0f      	cmp	r6, #15
 8003476:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003688 <lite_dense_if32of32wf32+0x244>
 800347a:	f240 8101 	bls.w	8003680 <lite_dense_if32of32wf32+0x23c>
 800347e:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8003482:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8003486:	46b6      	mov	lr, r6
 8003488:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800348c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8003490:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8003494:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8003498:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800349c:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 80034a0:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 80034a4:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 80034a8:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 80034ac:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80034b0:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80034b4:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80034b8:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80034bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80034c0:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80034c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80034c8:	f1ae 0e10 	sub.w	lr, lr, #16
 80034cc:	f1be 0f0f 	cmp.w	lr, #15
 80034d0:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 80034d4:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 80034d8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80034dc:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80034e0:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80034e4:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80034e8:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80034ec:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80034f0:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 80034f4:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 80034f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80034fc:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8003500:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8003504:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003508:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800350c:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8003510:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003514:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8003518:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800351c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003520:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8003524:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8003528:	eee5 7a25 	vfma.f32	s15, s10, s11
 800352c:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8003530:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8003534:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003538:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800353c:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8003540:	eee1 7a21 	vfma.f32	s15, s2, s3
 8003544:	eee2 7a22 	vfma.f32	s15, s4, s5
 8003548:	eee3 7a23 	vfma.f32	s15, s6, s7
 800354c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003550:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003554:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355c:	d894      	bhi.n	8003488 <lite_dense_if32of32wf32+0x44>
 800355e:	eb02 0e0b 	add.w	lr, r2, fp
 8003562:	4654      	mov	r4, sl
 8003564:	46c4      	mov	ip, r8
 8003566:	2c00      	cmp	r4, #0
 8003568:	d075      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 800356a:	eddc 6a00 	vldr	s13, [ip]
 800356e:	edde 7a00 	vldr	s15, [lr]
 8003572:	2c01      	cmp	r4, #1
 8003574:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003578:	d06d      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 800357a:	eddc 6a01 	vldr	s13, [ip, #4]
 800357e:	edde 7a01 	vldr	s15, [lr, #4]
 8003582:	2c02      	cmp	r4, #2
 8003584:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003588:	d065      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 800358a:	eddc 6a02 	vldr	s13, [ip, #8]
 800358e:	edde 7a02 	vldr	s15, [lr, #8]
 8003592:	2c03      	cmp	r4, #3
 8003594:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003598:	d05d      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 800359a:	eddc 6a03 	vldr	s13, [ip, #12]
 800359e:	edde 7a03 	vldr	s15, [lr, #12]
 80035a2:	2c04      	cmp	r4, #4
 80035a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80035a8:	d055      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 80035aa:	eddc 6a04 	vldr	s13, [ip, #16]
 80035ae:	edde 7a04 	vldr	s15, [lr, #16]
 80035b2:	2c05      	cmp	r4, #5
 80035b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80035b8:	d04d      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 80035ba:	eddc 6a05 	vldr	s13, [ip, #20]
 80035be:	edde 7a05 	vldr	s15, [lr, #20]
 80035c2:	2c06      	cmp	r4, #6
 80035c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80035c8:	d045      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 80035ca:	eddc 6a06 	vldr	s13, [ip, #24]
 80035ce:	edde 7a06 	vldr	s15, [lr, #24]
 80035d2:	2c07      	cmp	r4, #7
 80035d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80035d8:	d03d      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 80035da:	eddc 6a07 	vldr	s13, [ip, #28]
 80035de:	edde 7a07 	vldr	s15, [lr, #28]
 80035e2:	2c08      	cmp	r4, #8
 80035e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80035e8:	d035      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 80035ea:	eddc 6a08 	vldr	s13, [ip, #32]
 80035ee:	edde 7a08 	vldr	s15, [lr, #32]
 80035f2:	2c09      	cmp	r4, #9
 80035f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80035f8:	d02d      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 80035fa:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80035fe:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8003602:	2c0a      	cmp	r4, #10
 8003604:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003608:	d025      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 800360a:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800360e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8003612:	2c0b      	cmp	r4, #11
 8003614:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003618:	d01d      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 800361a:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800361e:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8003622:	2c0c      	cmp	r4, #12
 8003624:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003628:	d015      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 800362a:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800362e:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8003632:	3c0d      	subs	r4, #13
 8003634:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003638:	d00d      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 800363a:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800363e:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8003642:	2c01      	cmp	r4, #1
 8003644:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003648:	d005      	beq.n	8003656 <lite_dense_if32of32wf32+0x212>
 800364a:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800364e:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8003652:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003656:	444a      	add	r2, r9
 8003658:	eca5 7a01 	vstmia	r5!, {s14}
 800365c:	42af      	cmp	r7, r5
 800365e:	f63f af09 	bhi.w	8003474 <lite_dense_if32of32wf32+0x30>
 8003662:	b15b      	cbz	r3, 800367c <lite_dense_if32of32wf32+0x238>
 8003664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003666:	b14a      	cbz	r2, 800367c <lite_dense_if32of32wf32+0x238>
 8003668:	edd0 7a00 	vldr	s15, [r0]
 800366c:	ecb3 7a01 	vldmia	r3!, {s14}
 8003670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003674:	ece0 7a01 	vstmia	r0!, {s15}
 8003678:	4287      	cmp	r7, r0
 800367a:	d1f5      	bne.n	8003668 <lite_dense_if32of32wf32+0x224>
 800367c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003680:	4634      	mov	r4, r6
 8003682:	4696      	mov	lr, r2
 8003684:	468c      	mov	ip, r1
 8003686:	e76e      	b.n	8003566 <lite_dense_if32of32wf32+0x122>
 8003688:	00000000 	.word	0x00000000

0800368c <__errno>:
 800368c:	4b01      	ldr	r3, [pc, #4]	; (8003694 <__errno+0x8>)
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000ac4 	.word	0x20000ac4

08003698 <__libc_init_array>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	4d0d      	ldr	r5, [pc, #52]	; (80036d0 <__libc_init_array+0x38>)
 800369c:	4c0d      	ldr	r4, [pc, #52]	; (80036d4 <__libc_init_array+0x3c>)
 800369e:	1b64      	subs	r4, r4, r5
 80036a0:	10a4      	asrs	r4, r4, #2
 80036a2:	2600      	movs	r6, #0
 80036a4:	42a6      	cmp	r6, r4
 80036a6:	d109      	bne.n	80036bc <__libc_init_array+0x24>
 80036a8:	4d0b      	ldr	r5, [pc, #44]	; (80036d8 <__libc_init_array+0x40>)
 80036aa:	4c0c      	ldr	r4, [pc, #48]	; (80036dc <__libc_init_array+0x44>)
 80036ac:	f002 fe68 	bl	8006380 <_init>
 80036b0:	1b64      	subs	r4, r4, r5
 80036b2:	10a4      	asrs	r4, r4, #2
 80036b4:	2600      	movs	r6, #0
 80036b6:	42a6      	cmp	r6, r4
 80036b8:	d105      	bne.n	80036c6 <__libc_init_array+0x2e>
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
 80036bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c0:	4798      	blx	r3
 80036c2:	3601      	adds	r6, #1
 80036c4:	e7ee      	b.n	80036a4 <__libc_init_array+0xc>
 80036c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ca:	4798      	blx	r3
 80036cc:	3601      	adds	r6, #1
 80036ce:	e7f2      	b.n	80036b6 <__libc_init_array+0x1e>
 80036d0:	08006e74 	.word	0x08006e74
 80036d4:	08006e74 	.word	0x08006e74
 80036d8:	08006e74 	.word	0x08006e74
 80036dc:	08006e78 	.word	0x08006e78

080036e0 <malloc>:
 80036e0:	4b02      	ldr	r3, [pc, #8]	; (80036ec <malloc+0xc>)
 80036e2:	4601      	mov	r1, r0
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	f000 b885 	b.w	80037f4 <_malloc_r>
 80036ea:	bf00      	nop
 80036ec:	20000ac4 	.word	0x20000ac4

080036f0 <memcpy>:
 80036f0:	440a      	add	r2, r1
 80036f2:	4291      	cmp	r1, r2
 80036f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036f8:	d100      	bne.n	80036fc <memcpy+0xc>
 80036fa:	4770      	bx	lr
 80036fc:	b510      	push	{r4, lr}
 80036fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003706:	4291      	cmp	r1, r2
 8003708:	d1f9      	bne.n	80036fe <memcpy+0xe>
 800370a:	bd10      	pop	{r4, pc}

0800370c <memset>:
 800370c:	4402      	add	r2, r0
 800370e:	4603      	mov	r3, r0
 8003710:	4293      	cmp	r3, r2
 8003712:	d100      	bne.n	8003716 <memset+0xa>
 8003714:	4770      	bx	lr
 8003716:	f803 1b01 	strb.w	r1, [r3], #1
 800371a:	e7f9      	b.n	8003710 <memset+0x4>

0800371c <_free_r>:
 800371c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800371e:	2900      	cmp	r1, #0
 8003720:	d044      	beq.n	80037ac <_free_r+0x90>
 8003722:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003726:	9001      	str	r0, [sp, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f1a1 0404 	sub.w	r4, r1, #4
 800372e:	bfb8      	it	lt
 8003730:	18e4      	addlt	r4, r4, r3
 8003732:	f001 fbcb 	bl	8004ecc <__malloc_lock>
 8003736:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <_free_r+0x94>)
 8003738:	9801      	ldr	r0, [sp, #4]
 800373a:	6813      	ldr	r3, [r2, #0]
 800373c:	b933      	cbnz	r3, 800374c <_free_r+0x30>
 800373e:	6063      	str	r3, [r4, #4]
 8003740:	6014      	str	r4, [r2, #0]
 8003742:	b003      	add	sp, #12
 8003744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003748:	f001 bbc6 	b.w	8004ed8 <__malloc_unlock>
 800374c:	42a3      	cmp	r3, r4
 800374e:	d908      	bls.n	8003762 <_free_r+0x46>
 8003750:	6825      	ldr	r5, [r4, #0]
 8003752:	1961      	adds	r1, r4, r5
 8003754:	428b      	cmp	r3, r1
 8003756:	bf01      	itttt	eq
 8003758:	6819      	ldreq	r1, [r3, #0]
 800375a:	685b      	ldreq	r3, [r3, #4]
 800375c:	1949      	addeq	r1, r1, r5
 800375e:	6021      	streq	r1, [r4, #0]
 8003760:	e7ed      	b.n	800373e <_free_r+0x22>
 8003762:	461a      	mov	r2, r3
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	b10b      	cbz	r3, 800376c <_free_r+0x50>
 8003768:	42a3      	cmp	r3, r4
 800376a:	d9fa      	bls.n	8003762 <_free_r+0x46>
 800376c:	6811      	ldr	r1, [r2, #0]
 800376e:	1855      	adds	r5, r2, r1
 8003770:	42a5      	cmp	r5, r4
 8003772:	d10b      	bne.n	800378c <_free_r+0x70>
 8003774:	6824      	ldr	r4, [r4, #0]
 8003776:	4421      	add	r1, r4
 8003778:	1854      	adds	r4, r2, r1
 800377a:	42a3      	cmp	r3, r4
 800377c:	6011      	str	r1, [r2, #0]
 800377e:	d1e0      	bne.n	8003742 <_free_r+0x26>
 8003780:	681c      	ldr	r4, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	6053      	str	r3, [r2, #4]
 8003786:	4421      	add	r1, r4
 8003788:	6011      	str	r1, [r2, #0]
 800378a:	e7da      	b.n	8003742 <_free_r+0x26>
 800378c:	d902      	bls.n	8003794 <_free_r+0x78>
 800378e:	230c      	movs	r3, #12
 8003790:	6003      	str	r3, [r0, #0]
 8003792:	e7d6      	b.n	8003742 <_free_r+0x26>
 8003794:	6825      	ldr	r5, [r4, #0]
 8003796:	1961      	adds	r1, r4, r5
 8003798:	428b      	cmp	r3, r1
 800379a:	bf04      	itt	eq
 800379c:	6819      	ldreq	r1, [r3, #0]
 800379e:	685b      	ldreq	r3, [r3, #4]
 80037a0:	6063      	str	r3, [r4, #4]
 80037a2:	bf04      	itt	eq
 80037a4:	1949      	addeq	r1, r1, r5
 80037a6:	6021      	streq	r1, [r4, #0]
 80037a8:	6054      	str	r4, [r2, #4]
 80037aa:	e7ca      	b.n	8003742 <_free_r+0x26>
 80037ac:	b003      	add	sp, #12
 80037ae:	bd30      	pop	{r4, r5, pc}
 80037b0:	20000e50 	.word	0x20000e50

080037b4 <sbrk_aligned>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	4e0e      	ldr	r6, [pc, #56]	; (80037f0 <sbrk_aligned+0x3c>)
 80037b8:	460c      	mov	r4, r1
 80037ba:	6831      	ldr	r1, [r6, #0]
 80037bc:	4605      	mov	r5, r0
 80037be:	b911      	cbnz	r1, 80037c6 <sbrk_aligned+0x12>
 80037c0:	f000 fcf6 	bl	80041b0 <_sbrk_r>
 80037c4:	6030      	str	r0, [r6, #0]
 80037c6:	4621      	mov	r1, r4
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 fcf1 	bl	80041b0 <_sbrk_r>
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	d00a      	beq.n	80037e8 <sbrk_aligned+0x34>
 80037d2:	1cc4      	adds	r4, r0, #3
 80037d4:	f024 0403 	bic.w	r4, r4, #3
 80037d8:	42a0      	cmp	r0, r4
 80037da:	d007      	beq.n	80037ec <sbrk_aligned+0x38>
 80037dc:	1a21      	subs	r1, r4, r0
 80037de:	4628      	mov	r0, r5
 80037e0:	f000 fce6 	bl	80041b0 <_sbrk_r>
 80037e4:	3001      	adds	r0, #1
 80037e6:	d101      	bne.n	80037ec <sbrk_aligned+0x38>
 80037e8:	f04f 34ff 	mov.w	r4, #4294967295
 80037ec:	4620      	mov	r0, r4
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	20000e54 	.word	0x20000e54

080037f4 <_malloc_r>:
 80037f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f8:	1ccd      	adds	r5, r1, #3
 80037fa:	f025 0503 	bic.w	r5, r5, #3
 80037fe:	3508      	adds	r5, #8
 8003800:	2d0c      	cmp	r5, #12
 8003802:	bf38      	it	cc
 8003804:	250c      	movcc	r5, #12
 8003806:	2d00      	cmp	r5, #0
 8003808:	4607      	mov	r7, r0
 800380a:	db01      	blt.n	8003810 <_malloc_r+0x1c>
 800380c:	42a9      	cmp	r1, r5
 800380e:	d905      	bls.n	800381c <_malloc_r+0x28>
 8003810:	230c      	movs	r3, #12
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	2600      	movs	r6, #0
 8003816:	4630      	mov	r0, r6
 8003818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800381c:	4e2e      	ldr	r6, [pc, #184]	; (80038d8 <_malloc_r+0xe4>)
 800381e:	f001 fb55 	bl	8004ecc <__malloc_lock>
 8003822:	6833      	ldr	r3, [r6, #0]
 8003824:	461c      	mov	r4, r3
 8003826:	bb34      	cbnz	r4, 8003876 <_malloc_r+0x82>
 8003828:	4629      	mov	r1, r5
 800382a:	4638      	mov	r0, r7
 800382c:	f7ff ffc2 	bl	80037b4 <sbrk_aligned>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	4604      	mov	r4, r0
 8003834:	d14d      	bne.n	80038d2 <_malloc_r+0xde>
 8003836:	6834      	ldr	r4, [r6, #0]
 8003838:	4626      	mov	r6, r4
 800383a:	2e00      	cmp	r6, #0
 800383c:	d140      	bne.n	80038c0 <_malloc_r+0xcc>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	4631      	mov	r1, r6
 8003842:	4638      	mov	r0, r7
 8003844:	eb04 0803 	add.w	r8, r4, r3
 8003848:	f000 fcb2 	bl	80041b0 <_sbrk_r>
 800384c:	4580      	cmp	r8, r0
 800384e:	d13a      	bne.n	80038c6 <_malloc_r+0xd2>
 8003850:	6821      	ldr	r1, [r4, #0]
 8003852:	3503      	adds	r5, #3
 8003854:	1a6d      	subs	r5, r5, r1
 8003856:	f025 0503 	bic.w	r5, r5, #3
 800385a:	3508      	adds	r5, #8
 800385c:	2d0c      	cmp	r5, #12
 800385e:	bf38      	it	cc
 8003860:	250c      	movcc	r5, #12
 8003862:	4629      	mov	r1, r5
 8003864:	4638      	mov	r0, r7
 8003866:	f7ff ffa5 	bl	80037b4 <sbrk_aligned>
 800386a:	3001      	adds	r0, #1
 800386c:	d02b      	beq.n	80038c6 <_malloc_r+0xd2>
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	442b      	add	r3, r5
 8003872:	6023      	str	r3, [r4, #0]
 8003874:	e00e      	b.n	8003894 <_malloc_r+0xa0>
 8003876:	6822      	ldr	r2, [r4, #0]
 8003878:	1b52      	subs	r2, r2, r5
 800387a:	d41e      	bmi.n	80038ba <_malloc_r+0xc6>
 800387c:	2a0b      	cmp	r2, #11
 800387e:	d916      	bls.n	80038ae <_malloc_r+0xba>
 8003880:	1961      	adds	r1, r4, r5
 8003882:	42a3      	cmp	r3, r4
 8003884:	6025      	str	r5, [r4, #0]
 8003886:	bf18      	it	ne
 8003888:	6059      	strne	r1, [r3, #4]
 800388a:	6863      	ldr	r3, [r4, #4]
 800388c:	bf08      	it	eq
 800388e:	6031      	streq	r1, [r6, #0]
 8003890:	5162      	str	r2, [r4, r5]
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	4638      	mov	r0, r7
 8003896:	f104 060b 	add.w	r6, r4, #11
 800389a:	f001 fb1d 	bl	8004ed8 <__malloc_unlock>
 800389e:	f026 0607 	bic.w	r6, r6, #7
 80038a2:	1d23      	adds	r3, r4, #4
 80038a4:	1af2      	subs	r2, r6, r3
 80038a6:	d0b6      	beq.n	8003816 <_malloc_r+0x22>
 80038a8:	1b9b      	subs	r3, r3, r6
 80038aa:	50a3      	str	r3, [r4, r2]
 80038ac:	e7b3      	b.n	8003816 <_malloc_r+0x22>
 80038ae:	6862      	ldr	r2, [r4, #4]
 80038b0:	42a3      	cmp	r3, r4
 80038b2:	bf0c      	ite	eq
 80038b4:	6032      	streq	r2, [r6, #0]
 80038b6:	605a      	strne	r2, [r3, #4]
 80038b8:	e7ec      	b.n	8003894 <_malloc_r+0xa0>
 80038ba:	4623      	mov	r3, r4
 80038bc:	6864      	ldr	r4, [r4, #4]
 80038be:	e7b2      	b.n	8003826 <_malloc_r+0x32>
 80038c0:	4634      	mov	r4, r6
 80038c2:	6876      	ldr	r6, [r6, #4]
 80038c4:	e7b9      	b.n	800383a <_malloc_r+0x46>
 80038c6:	230c      	movs	r3, #12
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4638      	mov	r0, r7
 80038cc:	f001 fb04 	bl	8004ed8 <__malloc_unlock>
 80038d0:	e7a1      	b.n	8003816 <_malloc_r+0x22>
 80038d2:	6025      	str	r5, [r4, #0]
 80038d4:	e7de      	b.n	8003894 <_malloc_r+0xa0>
 80038d6:	bf00      	nop
 80038d8:	20000e50 	.word	0x20000e50

080038dc <__cvt>:
 80038dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038e0:	ec55 4b10 	vmov	r4, r5, d0
 80038e4:	2d00      	cmp	r5, #0
 80038e6:	460e      	mov	r6, r1
 80038e8:	4619      	mov	r1, r3
 80038ea:	462b      	mov	r3, r5
 80038ec:	bfbb      	ittet	lt
 80038ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80038f2:	461d      	movlt	r5, r3
 80038f4:	2300      	movge	r3, #0
 80038f6:	232d      	movlt	r3, #45	; 0x2d
 80038f8:	700b      	strb	r3, [r1, #0]
 80038fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003900:	4691      	mov	r9, r2
 8003902:	f023 0820 	bic.w	r8, r3, #32
 8003906:	bfbc      	itt	lt
 8003908:	4622      	movlt	r2, r4
 800390a:	4614      	movlt	r4, r2
 800390c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003910:	d005      	beq.n	800391e <__cvt+0x42>
 8003912:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003916:	d100      	bne.n	800391a <__cvt+0x3e>
 8003918:	3601      	adds	r6, #1
 800391a:	2102      	movs	r1, #2
 800391c:	e000      	b.n	8003920 <__cvt+0x44>
 800391e:	2103      	movs	r1, #3
 8003920:	ab03      	add	r3, sp, #12
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	ab02      	add	r3, sp, #8
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	ec45 4b10 	vmov	d0, r4, r5
 800392c:	4653      	mov	r3, sl
 800392e:	4632      	mov	r2, r6
 8003930:	f000 fcda 	bl	80042e8 <_dtoa_r>
 8003934:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003938:	4607      	mov	r7, r0
 800393a:	d102      	bne.n	8003942 <__cvt+0x66>
 800393c:	f019 0f01 	tst.w	r9, #1
 8003940:	d022      	beq.n	8003988 <__cvt+0xac>
 8003942:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003946:	eb07 0906 	add.w	r9, r7, r6
 800394a:	d110      	bne.n	800396e <__cvt+0x92>
 800394c:	783b      	ldrb	r3, [r7, #0]
 800394e:	2b30      	cmp	r3, #48	; 0x30
 8003950:	d10a      	bne.n	8003968 <__cvt+0x8c>
 8003952:	2200      	movs	r2, #0
 8003954:	2300      	movs	r3, #0
 8003956:	4620      	mov	r0, r4
 8003958:	4629      	mov	r1, r5
 800395a:	f7fd f8d5 	bl	8000b08 <__aeabi_dcmpeq>
 800395e:	b918      	cbnz	r0, 8003968 <__cvt+0x8c>
 8003960:	f1c6 0601 	rsb	r6, r6, #1
 8003964:	f8ca 6000 	str.w	r6, [sl]
 8003968:	f8da 3000 	ldr.w	r3, [sl]
 800396c:	4499      	add	r9, r3
 800396e:	2200      	movs	r2, #0
 8003970:	2300      	movs	r3, #0
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f7fd f8c7 	bl	8000b08 <__aeabi_dcmpeq>
 800397a:	b108      	cbz	r0, 8003980 <__cvt+0xa4>
 800397c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003980:	2230      	movs	r2, #48	; 0x30
 8003982:	9b03      	ldr	r3, [sp, #12]
 8003984:	454b      	cmp	r3, r9
 8003986:	d307      	bcc.n	8003998 <__cvt+0xbc>
 8003988:	9b03      	ldr	r3, [sp, #12]
 800398a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800398c:	1bdb      	subs	r3, r3, r7
 800398e:	4638      	mov	r0, r7
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	b004      	add	sp, #16
 8003994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003998:	1c59      	adds	r1, r3, #1
 800399a:	9103      	str	r1, [sp, #12]
 800399c:	701a      	strb	r2, [r3, #0]
 800399e:	e7f0      	b.n	8003982 <__cvt+0xa6>

080039a0 <__exponent>:
 80039a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039a2:	4603      	mov	r3, r0
 80039a4:	2900      	cmp	r1, #0
 80039a6:	bfb8      	it	lt
 80039a8:	4249      	neglt	r1, r1
 80039aa:	f803 2b02 	strb.w	r2, [r3], #2
 80039ae:	bfb4      	ite	lt
 80039b0:	222d      	movlt	r2, #45	; 0x2d
 80039b2:	222b      	movge	r2, #43	; 0x2b
 80039b4:	2909      	cmp	r1, #9
 80039b6:	7042      	strb	r2, [r0, #1]
 80039b8:	dd2a      	ble.n	8003a10 <__exponent+0x70>
 80039ba:	f10d 0407 	add.w	r4, sp, #7
 80039be:	46a4      	mov	ip, r4
 80039c0:	270a      	movs	r7, #10
 80039c2:	46a6      	mov	lr, r4
 80039c4:	460a      	mov	r2, r1
 80039c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80039ca:	fb07 1516 	mls	r5, r7, r6, r1
 80039ce:	3530      	adds	r5, #48	; 0x30
 80039d0:	2a63      	cmp	r2, #99	; 0x63
 80039d2:	f104 34ff 	add.w	r4, r4, #4294967295
 80039d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80039da:	4631      	mov	r1, r6
 80039dc:	dcf1      	bgt.n	80039c2 <__exponent+0x22>
 80039de:	3130      	adds	r1, #48	; 0x30
 80039e0:	f1ae 0502 	sub.w	r5, lr, #2
 80039e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80039e8:	1c44      	adds	r4, r0, #1
 80039ea:	4629      	mov	r1, r5
 80039ec:	4561      	cmp	r1, ip
 80039ee:	d30a      	bcc.n	8003a06 <__exponent+0x66>
 80039f0:	f10d 0209 	add.w	r2, sp, #9
 80039f4:	eba2 020e 	sub.w	r2, r2, lr
 80039f8:	4565      	cmp	r5, ip
 80039fa:	bf88      	it	hi
 80039fc:	2200      	movhi	r2, #0
 80039fe:	4413      	add	r3, r2
 8003a00:	1a18      	subs	r0, r3, r0
 8003a02:	b003      	add	sp, #12
 8003a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a0e:	e7ed      	b.n	80039ec <__exponent+0x4c>
 8003a10:	2330      	movs	r3, #48	; 0x30
 8003a12:	3130      	adds	r1, #48	; 0x30
 8003a14:	7083      	strb	r3, [r0, #2]
 8003a16:	70c1      	strb	r1, [r0, #3]
 8003a18:	1d03      	adds	r3, r0, #4
 8003a1a:	e7f1      	b.n	8003a00 <__exponent+0x60>

08003a1c <_printf_float>:
 8003a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a20:	ed2d 8b02 	vpush	{d8}
 8003a24:	b08d      	sub	sp, #52	; 0x34
 8003a26:	460c      	mov	r4, r1
 8003a28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003a2c:	4616      	mov	r6, r2
 8003a2e:	461f      	mov	r7, r3
 8003a30:	4605      	mov	r5, r0
 8003a32:	f001 fa47 	bl	8004ec4 <_localeconv_r>
 8003a36:	f8d0 a000 	ldr.w	sl, [r0]
 8003a3a:	4650      	mov	r0, sl
 8003a3c:	f7fc fbe8 	bl	8000210 <strlen>
 8003a40:	2300      	movs	r3, #0
 8003a42:	930a      	str	r3, [sp, #40]	; 0x28
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	9305      	str	r3, [sp, #20]
 8003a48:	f8d8 3000 	ldr.w	r3, [r8]
 8003a4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003a50:	3307      	adds	r3, #7
 8003a52:	f023 0307 	bic.w	r3, r3, #7
 8003a56:	f103 0208 	add.w	r2, r3, #8
 8003a5a:	f8c8 2000 	str.w	r2, [r8]
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003a6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a6e:	9307      	str	r3, [sp, #28]
 8003a70:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a74:	ee08 0a10 	vmov	s16, r0
 8003a78:	4b9f      	ldr	r3, [pc, #636]	; (8003cf8 <_printf_float+0x2dc>)
 8003a7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a82:	f7fd f873 	bl	8000b6c <__aeabi_dcmpun>
 8003a86:	bb88      	cbnz	r0, 8003aec <_printf_float+0xd0>
 8003a88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a8c:	4b9a      	ldr	r3, [pc, #616]	; (8003cf8 <_printf_float+0x2dc>)
 8003a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a92:	f7fd f84d 	bl	8000b30 <__aeabi_dcmple>
 8003a96:	bb48      	cbnz	r0, 8003aec <_printf_float+0xd0>
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	f7fd f83c 	bl	8000b1c <__aeabi_dcmplt>
 8003aa4:	b110      	cbz	r0, 8003aac <_printf_float+0x90>
 8003aa6:	232d      	movs	r3, #45	; 0x2d
 8003aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aac:	4b93      	ldr	r3, [pc, #588]	; (8003cfc <_printf_float+0x2e0>)
 8003aae:	4894      	ldr	r0, [pc, #592]	; (8003d00 <_printf_float+0x2e4>)
 8003ab0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003ab4:	bf94      	ite	ls
 8003ab6:	4698      	movls	r8, r3
 8003ab8:	4680      	movhi	r8, r0
 8003aba:	2303      	movs	r3, #3
 8003abc:	6123      	str	r3, [r4, #16]
 8003abe:	9b05      	ldr	r3, [sp, #20]
 8003ac0:	f023 0204 	bic.w	r2, r3, #4
 8003ac4:	6022      	str	r2, [r4, #0]
 8003ac6:	f04f 0900 	mov.w	r9, #0
 8003aca:	9700      	str	r7, [sp, #0]
 8003acc:	4633      	mov	r3, r6
 8003ace:	aa0b      	add	r2, sp, #44	; 0x2c
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f000 f9d8 	bl	8003e88 <_printf_common>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	f040 8090 	bne.w	8003bfe <_printf_float+0x1e2>
 8003ade:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae2:	b00d      	add	sp, #52	; 0x34
 8003ae4:	ecbd 8b02 	vpop	{d8}
 8003ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aec:	4642      	mov	r2, r8
 8003aee:	464b      	mov	r3, r9
 8003af0:	4640      	mov	r0, r8
 8003af2:	4649      	mov	r1, r9
 8003af4:	f7fd f83a 	bl	8000b6c <__aeabi_dcmpun>
 8003af8:	b140      	cbz	r0, 8003b0c <_printf_float+0xf0>
 8003afa:	464b      	mov	r3, r9
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bfbc      	itt	lt
 8003b00:	232d      	movlt	r3, #45	; 0x2d
 8003b02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b06:	487f      	ldr	r0, [pc, #508]	; (8003d04 <_printf_float+0x2e8>)
 8003b08:	4b7f      	ldr	r3, [pc, #508]	; (8003d08 <_printf_float+0x2ec>)
 8003b0a:	e7d1      	b.n	8003ab0 <_printf_float+0x94>
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b12:	9206      	str	r2, [sp, #24]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	d13f      	bne.n	8003b98 <_printf_float+0x17c>
 8003b18:	2306      	movs	r3, #6
 8003b1a:	6063      	str	r3, [r4, #4]
 8003b1c:	9b05      	ldr	r3, [sp, #20]
 8003b1e:	6861      	ldr	r1, [r4, #4]
 8003b20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b24:	2300      	movs	r3, #0
 8003b26:	9303      	str	r3, [sp, #12]
 8003b28:	ab0a      	add	r3, sp, #40	; 0x28
 8003b2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003b2e:	ab09      	add	r3, sp, #36	; 0x24
 8003b30:	ec49 8b10 	vmov	d0, r8, r9
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6022      	str	r2, [r4, #0]
 8003b38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f7ff fecd 	bl	80038dc <__cvt>
 8003b42:	9b06      	ldr	r3, [sp, #24]
 8003b44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b46:	2b47      	cmp	r3, #71	; 0x47
 8003b48:	4680      	mov	r8, r0
 8003b4a:	d108      	bne.n	8003b5e <_printf_float+0x142>
 8003b4c:	1cc8      	adds	r0, r1, #3
 8003b4e:	db02      	blt.n	8003b56 <_printf_float+0x13a>
 8003b50:	6863      	ldr	r3, [r4, #4]
 8003b52:	4299      	cmp	r1, r3
 8003b54:	dd41      	ble.n	8003bda <_printf_float+0x1be>
 8003b56:	f1ab 0b02 	sub.w	fp, fp, #2
 8003b5a:	fa5f fb8b 	uxtb.w	fp, fp
 8003b5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b62:	d820      	bhi.n	8003ba6 <_printf_float+0x18a>
 8003b64:	3901      	subs	r1, #1
 8003b66:	465a      	mov	r2, fp
 8003b68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b6c:	9109      	str	r1, [sp, #36]	; 0x24
 8003b6e:	f7ff ff17 	bl	80039a0 <__exponent>
 8003b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b74:	1813      	adds	r3, r2, r0
 8003b76:	2a01      	cmp	r2, #1
 8003b78:	4681      	mov	r9, r0
 8003b7a:	6123      	str	r3, [r4, #16]
 8003b7c:	dc02      	bgt.n	8003b84 <_printf_float+0x168>
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	07d2      	lsls	r2, r2, #31
 8003b82:	d501      	bpl.n	8003b88 <_printf_float+0x16c>
 8003b84:	3301      	adds	r3, #1
 8003b86:	6123      	str	r3, [r4, #16]
 8003b88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d09c      	beq.n	8003aca <_printf_float+0xae>
 8003b90:	232d      	movs	r3, #45	; 0x2d
 8003b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b96:	e798      	b.n	8003aca <_printf_float+0xae>
 8003b98:	9a06      	ldr	r2, [sp, #24]
 8003b9a:	2a47      	cmp	r2, #71	; 0x47
 8003b9c:	d1be      	bne.n	8003b1c <_printf_float+0x100>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1bc      	bne.n	8003b1c <_printf_float+0x100>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e7b9      	b.n	8003b1a <_printf_float+0xfe>
 8003ba6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003baa:	d118      	bne.n	8003bde <_printf_float+0x1c2>
 8003bac:	2900      	cmp	r1, #0
 8003bae:	6863      	ldr	r3, [r4, #4]
 8003bb0:	dd0b      	ble.n	8003bca <_printf_float+0x1ae>
 8003bb2:	6121      	str	r1, [r4, #16]
 8003bb4:	b913      	cbnz	r3, 8003bbc <_printf_float+0x1a0>
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	07d0      	lsls	r0, r2, #31
 8003bba:	d502      	bpl.n	8003bc2 <_printf_float+0x1a6>
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	440b      	add	r3, r1
 8003bc0:	6123      	str	r3, [r4, #16]
 8003bc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8003bc4:	f04f 0900 	mov.w	r9, #0
 8003bc8:	e7de      	b.n	8003b88 <_printf_float+0x16c>
 8003bca:	b913      	cbnz	r3, 8003bd2 <_printf_float+0x1b6>
 8003bcc:	6822      	ldr	r2, [r4, #0]
 8003bce:	07d2      	lsls	r2, r2, #31
 8003bd0:	d501      	bpl.n	8003bd6 <_printf_float+0x1ba>
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	e7f4      	b.n	8003bc0 <_printf_float+0x1a4>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e7f2      	b.n	8003bc0 <_printf_float+0x1a4>
 8003bda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003be0:	4299      	cmp	r1, r3
 8003be2:	db05      	blt.n	8003bf0 <_printf_float+0x1d4>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	6121      	str	r1, [r4, #16]
 8003be8:	07d8      	lsls	r0, r3, #31
 8003bea:	d5ea      	bpl.n	8003bc2 <_printf_float+0x1a6>
 8003bec:	1c4b      	adds	r3, r1, #1
 8003bee:	e7e7      	b.n	8003bc0 <_printf_float+0x1a4>
 8003bf0:	2900      	cmp	r1, #0
 8003bf2:	bfd4      	ite	le
 8003bf4:	f1c1 0202 	rsble	r2, r1, #2
 8003bf8:	2201      	movgt	r2, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	e7e0      	b.n	8003bc0 <_printf_float+0x1a4>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	055a      	lsls	r2, r3, #21
 8003c02:	d407      	bmi.n	8003c14 <_printf_float+0x1f8>
 8003c04:	6923      	ldr	r3, [r4, #16]
 8003c06:	4642      	mov	r2, r8
 8003c08:	4631      	mov	r1, r6
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	47b8      	blx	r7
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d12c      	bne.n	8003c6c <_printf_float+0x250>
 8003c12:	e764      	b.n	8003ade <_printf_float+0xc2>
 8003c14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c18:	f240 80e0 	bls.w	8003ddc <_printf_float+0x3c0>
 8003c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c20:	2200      	movs	r2, #0
 8003c22:	2300      	movs	r3, #0
 8003c24:	f7fc ff70 	bl	8000b08 <__aeabi_dcmpeq>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d034      	beq.n	8003c96 <_printf_float+0x27a>
 8003c2c:	4a37      	ldr	r2, [pc, #220]	; (8003d0c <_printf_float+0x2f0>)
 8003c2e:	2301      	movs	r3, #1
 8003c30:	4631      	mov	r1, r6
 8003c32:	4628      	mov	r0, r5
 8003c34:	47b8      	blx	r7
 8003c36:	3001      	adds	r0, #1
 8003c38:	f43f af51 	beq.w	8003ade <_printf_float+0xc2>
 8003c3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c40:	429a      	cmp	r2, r3
 8003c42:	db02      	blt.n	8003c4a <_printf_float+0x22e>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	07d8      	lsls	r0, r3, #31
 8003c48:	d510      	bpl.n	8003c6c <_printf_float+0x250>
 8003c4a:	ee18 3a10 	vmov	r3, s16
 8003c4e:	4652      	mov	r2, sl
 8003c50:	4631      	mov	r1, r6
 8003c52:	4628      	mov	r0, r5
 8003c54:	47b8      	blx	r7
 8003c56:	3001      	adds	r0, #1
 8003c58:	f43f af41 	beq.w	8003ade <_printf_float+0xc2>
 8003c5c:	f04f 0800 	mov.w	r8, #0
 8003c60:	f104 091a 	add.w	r9, r4, #26
 8003c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	4543      	cmp	r3, r8
 8003c6a:	dc09      	bgt.n	8003c80 <_printf_float+0x264>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	079b      	lsls	r3, r3, #30
 8003c70:	f100 8105 	bmi.w	8003e7e <_printf_float+0x462>
 8003c74:	68e0      	ldr	r0, [r4, #12]
 8003c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c78:	4298      	cmp	r0, r3
 8003c7a:	bfb8      	it	lt
 8003c7c:	4618      	movlt	r0, r3
 8003c7e:	e730      	b.n	8003ae2 <_printf_float+0xc6>
 8003c80:	2301      	movs	r3, #1
 8003c82:	464a      	mov	r2, r9
 8003c84:	4631      	mov	r1, r6
 8003c86:	4628      	mov	r0, r5
 8003c88:	47b8      	blx	r7
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	f43f af27 	beq.w	8003ade <_printf_float+0xc2>
 8003c90:	f108 0801 	add.w	r8, r8, #1
 8003c94:	e7e6      	b.n	8003c64 <_printf_float+0x248>
 8003c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dc39      	bgt.n	8003d10 <_printf_float+0x2f4>
 8003c9c:	4a1b      	ldr	r2, [pc, #108]	; (8003d0c <_printf_float+0x2f0>)
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4631      	mov	r1, r6
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	47b8      	blx	r7
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	f43f af19 	beq.w	8003ade <_printf_float+0xc2>
 8003cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	d102      	bne.n	8003cba <_printf_float+0x29e>
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	07d9      	lsls	r1, r3, #31
 8003cb8:	d5d8      	bpl.n	8003c6c <_printf_float+0x250>
 8003cba:	ee18 3a10 	vmov	r3, s16
 8003cbe:	4652      	mov	r2, sl
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	47b8      	blx	r7
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	f43f af09 	beq.w	8003ade <_printf_float+0xc2>
 8003ccc:	f04f 0900 	mov.w	r9, #0
 8003cd0:	f104 0a1a 	add.w	sl, r4, #26
 8003cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cd6:	425b      	negs	r3, r3
 8003cd8:	454b      	cmp	r3, r9
 8003cda:	dc01      	bgt.n	8003ce0 <_printf_float+0x2c4>
 8003cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cde:	e792      	b.n	8003c06 <_printf_float+0x1ea>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	4652      	mov	r2, sl
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	47b8      	blx	r7
 8003cea:	3001      	adds	r0, #1
 8003cec:	f43f aef7 	beq.w	8003ade <_printf_float+0xc2>
 8003cf0:	f109 0901 	add.w	r9, r9, #1
 8003cf4:	e7ee      	b.n	8003cd4 <_printf_float+0x2b8>
 8003cf6:	bf00      	nop
 8003cf8:	7fefffff 	.word	0x7fefffff
 8003cfc:	08006a7c 	.word	0x08006a7c
 8003d00:	08006a80 	.word	0x08006a80
 8003d04:	08006a88 	.word	0x08006a88
 8003d08:	08006a84 	.word	0x08006a84
 8003d0c:	08006a8c 	.word	0x08006a8c
 8003d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d14:	429a      	cmp	r2, r3
 8003d16:	bfa8      	it	ge
 8003d18:	461a      	movge	r2, r3
 8003d1a:	2a00      	cmp	r2, #0
 8003d1c:	4691      	mov	r9, r2
 8003d1e:	dc37      	bgt.n	8003d90 <_printf_float+0x374>
 8003d20:	f04f 0b00 	mov.w	fp, #0
 8003d24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d28:	f104 021a 	add.w	r2, r4, #26
 8003d2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d2e:	9305      	str	r3, [sp, #20]
 8003d30:	eba3 0309 	sub.w	r3, r3, r9
 8003d34:	455b      	cmp	r3, fp
 8003d36:	dc33      	bgt.n	8003da0 <_printf_float+0x384>
 8003d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	db3b      	blt.n	8003db8 <_printf_float+0x39c>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	07da      	lsls	r2, r3, #31
 8003d44:	d438      	bmi.n	8003db8 <_printf_float+0x39c>
 8003d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d48:	9a05      	ldr	r2, [sp, #20]
 8003d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d4c:	1a9a      	subs	r2, r3, r2
 8003d4e:	eba3 0901 	sub.w	r9, r3, r1
 8003d52:	4591      	cmp	r9, r2
 8003d54:	bfa8      	it	ge
 8003d56:	4691      	movge	r9, r2
 8003d58:	f1b9 0f00 	cmp.w	r9, #0
 8003d5c:	dc35      	bgt.n	8003dca <_printf_float+0x3ae>
 8003d5e:	f04f 0800 	mov.w	r8, #0
 8003d62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d66:	f104 0a1a 	add.w	sl, r4, #26
 8003d6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	eba3 0309 	sub.w	r3, r3, r9
 8003d74:	4543      	cmp	r3, r8
 8003d76:	f77f af79 	ble.w	8003c6c <_printf_float+0x250>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4652      	mov	r2, sl
 8003d7e:	4631      	mov	r1, r6
 8003d80:	4628      	mov	r0, r5
 8003d82:	47b8      	blx	r7
 8003d84:	3001      	adds	r0, #1
 8003d86:	f43f aeaa 	beq.w	8003ade <_printf_float+0xc2>
 8003d8a:	f108 0801 	add.w	r8, r8, #1
 8003d8e:	e7ec      	b.n	8003d6a <_printf_float+0x34e>
 8003d90:	4613      	mov	r3, r2
 8003d92:	4631      	mov	r1, r6
 8003d94:	4642      	mov	r2, r8
 8003d96:	4628      	mov	r0, r5
 8003d98:	47b8      	blx	r7
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	d1c0      	bne.n	8003d20 <_printf_float+0x304>
 8003d9e:	e69e      	b.n	8003ade <_printf_float+0xc2>
 8003da0:	2301      	movs	r3, #1
 8003da2:	4631      	mov	r1, r6
 8003da4:	4628      	mov	r0, r5
 8003da6:	9205      	str	r2, [sp, #20]
 8003da8:	47b8      	blx	r7
 8003daa:	3001      	adds	r0, #1
 8003dac:	f43f ae97 	beq.w	8003ade <_printf_float+0xc2>
 8003db0:	9a05      	ldr	r2, [sp, #20]
 8003db2:	f10b 0b01 	add.w	fp, fp, #1
 8003db6:	e7b9      	b.n	8003d2c <_printf_float+0x310>
 8003db8:	ee18 3a10 	vmov	r3, s16
 8003dbc:	4652      	mov	r2, sl
 8003dbe:	4631      	mov	r1, r6
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	47b8      	blx	r7
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d1be      	bne.n	8003d46 <_printf_float+0x32a>
 8003dc8:	e689      	b.n	8003ade <_printf_float+0xc2>
 8003dca:	9a05      	ldr	r2, [sp, #20]
 8003dcc:	464b      	mov	r3, r9
 8003dce:	4442      	add	r2, r8
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	47b8      	blx	r7
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d1c1      	bne.n	8003d5e <_printf_float+0x342>
 8003dda:	e680      	b.n	8003ade <_printf_float+0xc2>
 8003ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dde:	2a01      	cmp	r2, #1
 8003de0:	dc01      	bgt.n	8003de6 <_printf_float+0x3ca>
 8003de2:	07db      	lsls	r3, r3, #31
 8003de4:	d538      	bpl.n	8003e58 <_printf_float+0x43c>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4642      	mov	r2, r8
 8003dea:	4631      	mov	r1, r6
 8003dec:	4628      	mov	r0, r5
 8003dee:	47b8      	blx	r7
 8003df0:	3001      	adds	r0, #1
 8003df2:	f43f ae74 	beq.w	8003ade <_printf_float+0xc2>
 8003df6:	ee18 3a10 	vmov	r3, s16
 8003dfa:	4652      	mov	r2, sl
 8003dfc:	4631      	mov	r1, r6
 8003dfe:	4628      	mov	r0, r5
 8003e00:	47b8      	blx	r7
 8003e02:	3001      	adds	r0, #1
 8003e04:	f43f ae6b 	beq.w	8003ade <_printf_float+0xc2>
 8003e08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f7fc fe7a 	bl	8000b08 <__aeabi_dcmpeq>
 8003e14:	b9d8      	cbnz	r0, 8003e4e <_printf_float+0x432>
 8003e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e18:	f108 0201 	add.w	r2, r8, #1
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4628      	mov	r0, r5
 8003e22:	47b8      	blx	r7
 8003e24:	3001      	adds	r0, #1
 8003e26:	d10e      	bne.n	8003e46 <_printf_float+0x42a>
 8003e28:	e659      	b.n	8003ade <_printf_float+0xc2>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4652      	mov	r2, sl
 8003e2e:	4631      	mov	r1, r6
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b8      	blx	r7
 8003e34:	3001      	adds	r0, #1
 8003e36:	f43f ae52 	beq.w	8003ade <_printf_float+0xc2>
 8003e3a:	f108 0801 	add.w	r8, r8, #1
 8003e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4543      	cmp	r3, r8
 8003e44:	dcf1      	bgt.n	8003e2a <_printf_float+0x40e>
 8003e46:	464b      	mov	r3, r9
 8003e48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e4c:	e6dc      	b.n	8003c08 <_printf_float+0x1ec>
 8003e4e:	f04f 0800 	mov.w	r8, #0
 8003e52:	f104 0a1a 	add.w	sl, r4, #26
 8003e56:	e7f2      	b.n	8003e3e <_printf_float+0x422>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	4642      	mov	r2, r8
 8003e5c:	e7df      	b.n	8003e1e <_printf_float+0x402>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	464a      	mov	r2, r9
 8003e62:	4631      	mov	r1, r6
 8003e64:	4628      	mov	r0, r5
 8003e66:	47b8      	blx	r7
 8003e68:	3001      	adds	r0, #1
 8003e6a:	f43f ae38 	beq.w	8003ade <_printf_float+0xc2>
 8003e6e:	f108 0801 	add.w	r8, r8, #1
 8003e72:	68e3      	ldr	r3, [r4, #12]
 8003e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e76:	1a5b      	subs	r3, r3, r1
 8003e78:	4543      	cmp	r3, r8
 8003e7a:	dcf0      	bgt.n	8003e5e <_printf_float+0x442>
 8003e7c:	e6fa      	b.n	8003c74 <_printf_float+0x258>
 8003e7e:	f04f 0800 	mov.w	r8, #0
 8003e82:	f104 0919 	add.w	r9, r4, #25
 8003e86:	e7f4      	b.n	8003e72 <_printf_float+0x456>

08003e88 <_printf_common>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	4616      	mov	r6, r2
 8003e8e:	4699      	mov	r9, r3
 8003e90:	688a      	ldr	r2, [r1, #8]
 8003e92:	690b      	ldr	r3, [r1, #16]
 8003e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bfb8      	it	lt
 8003e9c:	4613      	movlt	r3, r2
 8003e9e:	6033      	str	r3, [r6, #0]
 8003ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	b10a      	cbz	r2, 8003eae <_printf_common+0x26>
 8003eaa:	3301      	adds	r3, #1
 8003eac:	6033      	str	r3, [r6, #0]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	0699      	lsls	r1, r3, #26
 8003eb2:	bf42      	ittt	mi
 8003eb4:	6833      	ldrmi	r3, [r6, #0]
 8003eb6:	3302      	addmi	r3, #2
 8003eb8:	6033      	strmi	r3, [r6, #0]
 8003eba:	6825      	ldr	r5, [r4, #0]
 8003ebc:	f015 0506 	ands.w	r5, r5, #6
 8003ec0:	d106      	bne.n	8003ed0 <_printf_common+0x48>
 8003ec2:	f104 0a19 	add.w	sl, r4, #25
 8003ec6:	68e3      	ldr	r3, [r4, #12]
 8003ec8:	6832      	ldr	r2, [r6, #0]
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	dc26      	bgt.n	8003f1e <_printf_common+0x96>
 8003ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ed4:	1e13      	subs	r3, r2, #0
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	bf18      	it	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	0692      	lsls	r2, r2, #26
 8003ede:	d42b      	bmi.n	8003f38 <_printf_common+0xb0>
 8003ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	47c0      	blx	r8
 8003eea:	3001      	adds	r0, #1
 8003eec:	d01e      	beq.n	8003f2c <_printf_common+0xa4>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	68e5      	ldr	r5, [r4, #12]
 8003ef2:	6832      	ldr	r2, [r6, #0]
 8003ef4:	f003 0306 	and.w	r3, r3, #6
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	bf08      	it	eq
 8003efc:	1aad      	subeq	r5, r5, r2
 8003efe:	68a3      	ldr	r3, [r4, #8]
 8003f00:	6922      	ldr	r2, [r4, #16]
 8003f02:	bf0c      	ite	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	2500      	movne	r5, #0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bfc4      	itt	gt
 8003f0e:	1a9b      	subgt	r3, r3, r2
 8003f10:	18ed      	addgt	r5, r5, r3
 8003f12:	2600      	movs	r6, #0
 8003f14:	341a      	adds	r4, #26
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	d11a      	bne.n	8003f50 <_printf_common+0xc8>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e008      	b.n	8003f30 <_printf_common+0xa8>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4652      	mov	r2, sl
 8003f22:	4649      	mov	r1, r9
 8003f24:	4638      	mov	r0, r7
 8003f26:	47c0      	blx	r8
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_printf_common+0xac>
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7c6      	b.n	8003ec6 <_printf_common+0x3e>
 8003f38:	18e1      	adds	r1, r4, r3
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	2030      	movs	r0, #48	; 0x30
 8003f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f42:	4422      	add	r2, r4
 8003f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f4c:	3302      	adds	r3, #2
 8003f4e:	e7c7      	b.n	8003ee0 <_printf_common+0x58>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4622      	mov	r2, r4
 8003f54:	4649      	mov	r1, r9
 8003f56:	4638      	mov	r0, r7
 8003f58:	47c0      	blx	r8
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0e6      	beq.n	8003f2c <_printf_common+0xa4>
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7d9      	b.n	8003f16 <_printf_common+0x8e>
	...

08003f64 <_printf_i>:
 8003f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	7e0f      	ldrb	r7, [r1, #24]
 8003f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f6c:	2f78      	cmp	r7, #120	; 0x78
 8003f6e:	4691      	mov	r9, r2
 8003f70:	4680      	mov	r8, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	469a      	mov	sl, r3
 8003f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f7a:	d807      	bhi.n	8003f8c <_printf_i+0x28>
 8003f7c:	2f62      	cmp	r7, #98	; 0x62
 8003f7e:	d80a      	bhi.n	8003f96 <_printf_i+0x32>
 8003f80:	2f00      	cmp	r7, #0
 8003f82:	f000 80d8 	beq.w	8004136 <_printf_i+0x1d2>
 8003f86:	2f58      	cmp	r7, #88	; 0x58
 8003f88:	f000 80a3 	beq.w	80040d2 <_printf_i+0x16e>
 8003f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f94:	e03a      	b.n	800400c <_printf_i+0xa8>
 8003f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f9a:	2b15      	cmp	r3, #21
 8003f9c:	d8f6      	bhi.n	8003f8c <_printf_i+0x28>
 8003f9e:	a101      	add	r1, pc, #4	; (adr r1, 8003fa4 <_printf_i+0x40>)
 8003fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fa4:	08003ffd 	.word	0x08003ffd
 8003fa8:	08004011 	.word	0x08004011
 8003fac:	08003f8d 	.word	0x08003f8d
 8003fb0:	08003f8d 	.word	0x08003f8d
 8003fb4:	08003f8d 	.word	0x08003f8d
 8003fb8:	08003f8d 	.word	0x08003f8d
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08003f8d 	.word	0x08003f8d
 8003fc4:	08003f8d 	.word	0x08003f8d
 8003fc8:	08003f8d 	.word	0x08003f8d
 8003fcc:	08003f8d 	.word	0x08003f8d
 8003fd0:	0800411d 	.word	0x0800411d
 8003fd4:	08004041 	.word	0x08004041
 8003fd8:	080040ff 	.word	0x080040ff
 8003fdc:	08003f8d 	.word	0x08003f8d
 8003fe0:	08003f8d 	.word	0x08003f8d
 8003fe4:	0800413f 	.word	0x0800413f
 8003fe8:	08003f8d 	.word	0x08003f8d
 8003fec:	08004041 	.word	0x08004041
 8003ff0:	08003f8d 	.word	0x08003f8d
 8003ff4:	08003f8d 	.word	0x08003f8d
 8003ff8:	08004107 	.word	0x08004107
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	602a      	str	r2, [r5, #0]
 8004004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800400c:	2301      	movs	r3, #1
 800400e:	e0a3      	b.n	8004158 <_printf_i+0x1f4>
 8004010:	6820      	ldr	r0, [r4, #0]
 8004012:	6829      	ldr	r1, [r5, #0]
 8004014:	0606      	lsls	r6, r0, #24
 8004016:	f101 0304 	add.w	r3, r1, #4
 800401a:	d50a      	bpl.n	8004032 <_printf_i+0xce>
 800401c:	680e      	ldr	r6, [r1, #0]
 800401e:	602b      	str	r3, [r5, #0]
 8004020:	2e00      	cmp	r6, #0
 8004022:	da03      	bge.n	800402c <_printf_i+0xc8>
 8004024:	232d      	movs	r3, #45	; 0x2d
 8004026:	4276      	negs	r6, r6
 8004028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800402c:	485e      	ldr	r0, [pc, #376]	; (80041a8 <_printf_i+0x244>)
 800402e:	230a      	movs	r3, #10
 8004030:	e019      	b.n	8004066 <_printf_i+0x102>
 8004032:	680e      	ldr	r6, [r1, #0]
 8004034:	602b      	str	r3, [r5, #0]
 8004036:	f010 0f40 	tst.w	r0, #64	; 0x40
 800403a:	bf18      	it	ne
 800403c:	b236      	sxthne	r6, r6
 800403e:	e7ef      	b.n	8004020 <_printf_i+0xbc>
 8004040:	682b      	ldr	r3, [r5, #0]
 8004042:	6820      	ldr	r0, [r4, #0]
 8004044:	1d19      	adds	r1, r3, #4
 8004046:	6029      	str	r1, [r5, #0]
 8004048:	0601      	lsls	r1, r0, #24
 800404a:	d501      	bpl.n	8004050 <_printf_i+0xec>
 800404c:	681e      	ldr	r6, [r3, #0]
 800404e:	e002      	b.n	8004056 <_printf_i+0xf2>
 8004050:	0646      	lsls	r6, r0, #25
 8004052:	d5fb      	bpl.n	800404c <_printf_i+0xe8>
 8004054:	881e      	ldrh	r6, [r3, #0]
 8004056:	4854      	ldr	r0, [pc, #336]	; (80041a8 <_printf_i+0x244>)
 8004058:	2f6f      	cmp	r7, #111	; 0x6f
 800405a:	bf0c      	ite	eq
 800405c:	2308      	moveq	r3, #8
 800405e:	230a      	movne	r3, #10
 8004060:	2100      	movs	r1, #0
 8004062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004066:	6865      	ldr	r5, [r4, #4]
 8004068:	60a5      	str	r5, [r4, #8]
 800406a:	2d00      	cmp	r5, #0
 800406c:	bfa2      	ittt	ge
 800406e:	6821      	ldrge	r1, [r4, #0]
 8004070:	f021 0104 	bicge.w	r1, r1, #4
 8004074:	6021      	strge	r1, [r4, #0]
 8004076:	b90e      	cbnz	r6, 800407c <_printf_i+0x118>
 8004078:	2d00      	cmp	r5, #0
 800407a:	d04d      	beq.n	8004118 <_printf_i+0x1b4>
 800407c:	4615      	mov	r5, r2
 800407e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004082:	fb03 6711 	mls	r7, r3, r1, r6
 8004086:	5dc7      	ldrb	r7, [r0, r7]
 8004088:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800408c:	4637      	mov	r7, r6
 800408e:	42bb      	cmp	r3, r7
 8004090:	460e      	mov	r6, r1
 8004092:	d9f4      	bls.n	800407e <_printf_i+0x11a>
 8004094:	2b08      	cmp	r3, #8
 8004096:	d10b      	bne.n	80040b0 <_printf_i+0x14c>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	07de      	lsls	r6, r3, #31
 800409c:	d508      	bpl.n	80040b0 <_printf_i+0x14c>
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	6861      	ldr	r1, [r4, #4]
 80040a2:	4299      	cmp	r1, r3
 80040a4:	bfde      	ittt	le
 80040a6:	2330      	movle	r3, #48	; 0x30
 80040a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040b0:	1b52      	subs	r2, r2, r5
 80040b2:	6122      	str	r2, [r4, #16]
 80040b4:	f8cd a000 	str.w	sl, [sp]
 80040b8:	464b      	mov	r3, r9
 80040ba:	aa03      	add	r2, sp, #12
 80040bc:	4621      	mov	r1, r4
 80040be:	4640      	mov	r0, r8
 80040c0:	f7ff fee2 	bl	8003e88 <_printf_common>
 80040c4:	3001      	adds	r0, #1
 80040c6:	d14c      	bne.n	8004162 <_printf_i+0x1fe>
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	b004      	add	sp, #16
 80040ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d2:	4835      	ldr	r0, [pc, #212]	; (80041a8 <_printf_i+0x244>)
 80040d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040d8:	6829      	ldr	r1, [r5, #0]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80040e0:	6029      	str	r1, [r5, #0]
 80040e2:	061d      	lsls	r5, r3, #24
 80040e4:	d514      	bpl.n	8004110 <_printf_i+0x1ac>
 80040e6:	07df      	lsls	r7, r3, #31
 80040e8:	bf44      	itt	mi
 80040ea:	f043 0320 	orrmi.w	r3, r3, #32
 80040ee:	6023      	strmi	r3, [r4, #0]
 80040f0:	b91e      	cbnz	r6, 80040fa <_printf_i+0x196>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	f023 0320 	bic.w	r3, r3, #32
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	2310      	movs	r3, #16
 80040fc:	e7b0      	b.n	8004060 <_printf_i+0xfc>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f043 0320 	orr.w	r3, r3, #32
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	2378      	movs	r3, #120	; 0x78
 8004108:	4828      	ldr	r0, [pc, #160]	; (80041ac <_printf_i+0x248>)
 800410a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800410e:	e7e3      	b.n	80040d8 <_printf_i+0x174>
 8004110:	0659      	lsls	r1, r3, #25
 8004112:	bf48      	it	mi
 8004114:	b2b6      	uxthmi	r6, r6
 8004116:	e7e6      	b.n	80040e6 <_printf_i+0x182>
 8004118:	4615      	mov	r5, r2
 800411a:	e7bb      	b.n	8004094 <_printf_i+0x130>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	6826      	ldr	r6, [r4, #0]
 8004120:	6961      	ldr	r1, [r4, #20]
 8004122:	1d18      	adds	r0, r3, #4
 8004124:	6028      	str	r0, [r5, #0]
 8004126:	0635      	lsls	r5, r6, #24
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	d501      	bpl.n	8004130 <_printf_i+0x1cc>
 800412c:	6019      	str	r1, [r3, #0]
 800412e:	e002      	b.n	8004136 <_printf_i+0x1d2>
 8004130:	0670      	lsls	r0, r6, #25
 8004132:	d5fb      	bpl.n	800412c <_printf_i+0x1c8>
 8004134:	8019      	strh	r1, [r3, #0]
 8004136:	2300      	movs	r3, #0
 8004138:	6123      	str	r3, [r4, #16]
 800413a:	4615      	mov	r5, r2
 800413c:	e7ba      	b.n	80040b4 <_printf_i+0x150>
 800413e:	682b      	ldr	r3, [r5, #0]
 8004140:	1d1a      	adds	r2, r3, #4
 8004142:	602a      	str	r2, [r5, #0]
 8004144:	681d      	ldr	r5, [r3, #0]
 8004146:	6862      	ldr	r2, [r4, #4]
 8004148:	2100      	movs	r1, #0
 800414a:	4628      	mov	r0, r5
 800414c:	f7fc f868 	bl	8000220 <memchr>
 8004150:	b108      	cbz	r0, 8004156 <_printf_i+0x1f2>
 8004152:	1b40      	subs	r0, r0, r5
 8004154:	6060      	str	r0, [r4, #4]
 8004156:	6863      	ldr	r3, [r4, #4]
 8004158:	6123      	str	r3, [r4, #16]
 800415a:	2300      	movs	r3, #0
 800415c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004160:	e7a8      	b.n	80040b4 <_printf_i+0x150>
 8004162:	6923      	ldr	r3, [r4, #16]
 8004164:	462a      	mov	r2, r5
 8004166:	4649      	mov	r1, r9
 8004168:	4640      	mov	r0, r8
 800416a:	47d0      	blx	sl
 800416c:	3001      	adds	r0, #1
 800416e:	d0ab      	beq.n	80040c8 <_printf_i+0x164>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	079b      	lsls	r3, r3, #30
 8004174:	d413      	bmi.n	800419e <_printf_i+0x23a>
 8004176:	68e0      	ldr	r0, [r4, #12]
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	4298      	cmp	r0, r3
 800417c:	bfb8      	it	lt
 800417e:	4618      	movlt	r0, r3
 8004180:	e7a4      	b.n	80040cc <_printf_i+0x168>
 8004182:	2301      	movs	r3, #1
 8004184:	4632      	mov	r2, r6
 8004186:	4649      	mov	r1, r9
 8004188:	4640      	mov	r0, r8
 800418a:	47d0      	blx	sl
 800418c:	3001      	adds	r0, #1
 800418e:	d09b      	beq.n	80040c8 <_printf_i+0x164>
 8004190:	3501      	adds	r5, #1
 8004192:	68e3      	ldr	r3, [r4, #12]
 8004194:	9903      	ldr	r1, [sp, #12]
 8004196:	1a5b      	subs	r3, r3, r1
 8004198:	42ab      	cmp	r3, r5
 800419a:	dcf2      	bgt.n	8004182 <_printf_i+0x21e>
 800419c:	e7eb      	b.n	8004176 <_printf_i+0x212>
 800419e:	2500      	movs	r5, #0
 80041a0:	f104 0619 	add.w	r6, r4, #25
 80041a4:	e7f5      	b.n	8004192 <_printf_i+0x22e>
 80041a6:	bf00      	nop
 80041a8:	08006a8e 	.word	0x08006a8e
 80041ac:	08006a9f 	.word	0x08006a9f

080041b0 <_sbrk_r>:
 80041b0:	b538      	push	{r3, r4, r5, lr}
 80041b2:	4d06      	ldr	r5, [pc, #24]	; (80041cc <_sbrk_r+0x1c>)
 80041b4:	2300      	movs	r3, #0
 80041b6:	4604      	mov	r4, r0
 80041b8:	4608      	mov	r0, r1
 80041ba:	602b      	str	r3, [r5, #0]
 80041bc:	f7fd f828 	bl	8001210 <_sbrk>
 80041c0:	1c43      	adds	r3, r0, #1
 80041c2:	d102      	bne.n	80041ca <_sbrk_r+0x1a>
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	b103      	cbz	r3, 80041ca <_sbrk_r+0x1a>
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	bd38      	pop	{r3, r4, r5, pc}
 80041cc:	20000e58 	.word	0x20000e58

080041d0 <quorem>:
 80041d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	6903      	ldr	r3, [r0, #16]
 80041d6:	690c      	ldr	r4, [r1, #16]
 80041d8:	42a3      	cmp	r3, r4
 80041da:	4607      	mov	r7, r0
 80041dc:	f2c0 8081 	blt.w	80042e2 <quorem+0x112>
 80041e0:	3c01      	subs	r4, #1
 80041e2:	f101 0814 	add.w	r8, r1, #20
 80041e6:	f100 0514 	add.w	r5, r0, #20
 80041ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80041f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041f8:	3301      	adds	r3, #1
 80041fa:	429a      	cmp	r2, r3
 80041fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004200:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004204:	fbb2 f6f3 	udiv	r6, r2, r3
 8004208:	d331      	bcc.n	800426e <quorem+0x9e>
 800420a:	f04f 0e00 	mov.w	lr, #0
 800420e:	4640      	mov	r0, r8
 8004210:	46ac      	mov	ip, r5
 8004212:	46f2      	mov	sl, lr
 8004214:	f850 2b04 	ldr.w	r2, [r0], #4
 8004218:	b293      	uxth	r3, r2
 800421a:	fb06 e303 	mla	r3, r6, r3, lr
 800421e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004222:	b29b      	uxth	r3, r3
 8004224:	ebaa 0303 	sub.w	r3, sl, r3
 8004228:	f8dc a000 	ldr.w	sl, [ip]
 800422c:	0c12      	lsrs	r2, r2, #16
 800422e:	fa13 f38a 	uxtah	r3, r3, sl
 8004232:	fb06 e202 	mla	r2, r6, r2, lr
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	9b00      	ldr	r3, [sp, #0]
 800423a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800423e:	b292      	uxth	r2, r2
 8004240:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004244:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004248:	f8bd 3000 	ldrh.w	r3, [sp]
 800424c:	4581      	cmp	r9, r0
 800424e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004252:	f84c 3b04 	str.w	r3, [ip], #4
 8004256:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800425a:	d2db      	bcs.n	8004214 <quorem+0x44>
 800425c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004260:	b92b      	cbnz	r3, 800426e <quorem+0x9e>
 8004262:	9b01      	ldr	r3, [sp, #4]
 8004264:	3b04      	subs	r3, #4
 8004266:	429d      	cmp	r5, r3
 8004268:	461a      	mov	r2, r3
 800426a:	d32e      	bcc.n	80042ca <quorem+0xfa>
 800426c:	613c      	str	r4, [r7, #16]
 800426e:	4638      	mov	r0, r7
 8004270:	f001 f8ba 	bl	80053e8 <__mcmp>
 8004274:	2800      	cmp	r0, #0
 8004276:	db24      	blt.n	80042c2 <quorem+0xf2>
 8004278:	3601      	adds	r6, #1
 800427a:	4628      	mov	r0, r5
 800427c:	f04f 0c00 	mov.w	ip, #0
 8004280:	f858 2b04 	ldr.w	r2, [r8], #4
 8004284:	f8d0 e000 	ldr.w	lr, [r0]
 8004288:	b293      	uxth	r3, r2
 800428a:	ebac 0303 	sub.w	r3, ip, r3
 800428e:	0c12      	lsrs	r2, r2, #16
 8004290:	fa13 f38e 	uxtah	r3, r3, lr
 8004294:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800429c:	b29b      	uxth	r3, r3
 800429e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042a2:	45c1      	cmp	r9, r8
 80042a4:	f840 3b04 	str.w	r3, [r0], #4
 80042a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80042ac:	d2e8      	bcs.n	8004280 <quorem+0xb0>
 80042ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042b6:	b922      	cbnz	r2, 80042c2 <quorem+0xf2>
 80042b8:	3b04      	subs	r3, #4
 80042ba:	429d      	cmp	r5, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	d30a      	bcc.n	80042d6 <quorem+0x106>
 80042c0:	613c      	str	r4, [r7, #16]
 80042c2:	4630      	mov	r0, r6
 80042c4:	b003      	add	sp, #12
 80042c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	3b04      	subs	r3, #4
 80042ce:	2a00      	cmp	r2, #0
 80042d0:	d1cc      	bne.n	800426c <quorem+0x9c>
 80042d2:	3c01      	subs	r4, #1
 80042d4:	e7c7      	b.n	8004266 <quorem+0x96>
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	3b04      	subs	r3, #4
 80042da:	2a00      	cmp	r2, #0
 80042dc:	d1f0      	bne.n	80042c0 <quorem+0xf0>
 80042de:	3c01      	subs	r4, #1
 80042e0:	e7eb      	b.n	80042ba <quorem+0xea>
 80042e2:	2000      	movs	r0, #0
 80042e4:	e7ee      	b.n	80042c4 <quorem+0xf4>
	...

080042e8 <_dtoa_r>:
 80042e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	ed2d 8b04 	vpush	{d8-d9}
 80042f0:	ec57 6b10 	vmov	r6, r7, d0
 80042f4:	b093      	sub	sp, #76	; 0x4c
 80042f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80042f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80042fc:	9106      	str	r1, [sp, #24]
 80042fe:	ee10 aa10 	vmov	sl, s0
 8004302:	4604      	mov	r4, r0
 8004304:	9209      	str	r2, [sp, #36]	; 0x24
 8004306:	930c      	str	r3, [sp, #48]	; 0x30
 8004308:	46bb      	mov	fp, r7
 800430a:	b975      	cbnz	r5, 800432a <_dtoa_r+0x42>
 800430c:	2010      	movs	r0, #16
 800430e:	f7fd ff0d 	bl	800212c <__wrap_malloc>
 8004312:	4602      	mov	r2, r0
 8004314:	6260      	str	r0, [r4, #36]	; 0x24
 8004316:	b920      	cbnz	r0, 8004322 <_dtoa_r+0x3a>
 8004318:	4ba7      	ldr	r3, [pc, #668]	; (80045b8 <_dtoa_r+0x2d0>)
 800431a:	21ea      	movs	r1, #234	; 0xea
 800431c:	48a7      	ldr	r0, [pc, #668]	; (80045bc <_dtoa_r+0x2d4>)
 800431e:	f001 f97b 	bl	8005618 <__assert_func>
 8004322:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004326:	6005      	str	r5, [r0, #0]
 8004328:	60c5      	str	r5, [r0, #12]
 800432a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800432c:	6819      	ldr	r1, [r3, #0]
 800432e:	b151      	cbz	r1, 8004346 <_dtoa_r+0x5e>
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	604a      	str	r2, [r1, #4]
 8004334:	2301      	movs	r3, #1
 8004336:	4093      	lsls	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
 800433a:	4620      	mov	r0, r4
 800433c:	f000 fe12 	bl	8004f64 <_Bfree>
 8004340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	1e3b      	subs	r3, r7, #0
 8004348:	bfaa      	itet	ge
 800434a:	2300      	movge	r3, #0
 800434c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004350:	f8c8 3000 	strge.w	r3, [r8]
 8004354:	4b9a      	ldr	r3, [pc, #616]	; (80045c0 <_dtoa_r+0x2d8>)
 8004356:	bfbc      	itt	lt
 8004358:	2201      	movlt	r2, #1
 800435a:	f8c8 2000 	strlt.w	r2, [r8]
 800435e:	ea33 030b 	bics.w	r3, r3, fp
 8004362:	d11b      	bne.n	800439c <_dtoa_r+0xb4>
 8004364:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004366:	f242 730f 	movw	r3, #9999	; 0x270f
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004370:	4333      	orrs	r3, r6
 8004372:	f000 8592 	beq.w	8004e9a <_dtoa_r+0xbb2>
 8004376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004378:	b963      	cbnz	r3, 8004394 <_dtoa_r+0xac>
 800437a:	4b92      	ldr	r3, [pc, #584]	; (80045c4 <_dtoa_r+0x2dc>)
 800437c:	e022      	b.n	80043c4 <_dtoa_r+0xdc>
 800437e:	4b92      	ldr	r3, [pc, #584]	; (80045c8 <_dtoa_r+0x2e0>)
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	3308      	adds	r3, #8
 8004384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	9801      	ldr	r0, [sp, #4]
 800438a:	b013      	add	sp, #76	; 0x4c
 800438c:	ecbd 8b04 	vpop	{d8-d9}
 8004390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004394:	4b8b      	ldr	r3, [pc, #556]	; (80045c4 <_dtoa_r+0x2dc>)
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	3303      	adds	r3, #3
 800439a:	e7f3      	b.n	8004384 <_dtoa_r+0x9c>
 800439c:	2200      	movs	r2, #0
 800439e:	2300      	movs	r3, #0
 80043a0:	4650      	mov	r0, sl
 80043a2:	4659      	mov	r1, fp
 80043a4:	f7fc fbb0 	bl	8000b08 <__aeabi_dcmpeq>
 80043a8:	ec4b ab19 	vmov	d9, sl, fp
 80043ac:	4680      	mov	r8, r0
 80043ae:	b158      	cbz	r0, 80043c8 <_dtoa_r+0xe0>
 80043b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043b2:	2301      	movs	r3, #1
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 856b 	beq.w	8004e94 <_dtoa_r+0xbac>
 80043be:	4883      	ldr	r0, [pc, #524]	; (80045cc <_dtoa_r+0x2e4>)
 80043c0:	6018      	str	r0, [r3, #0]
 80043c2:	1e43      	subs	r3, r0, #1
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	e7df      	b.n	8004388 <_dtoa_r+0xa0>
 80043c8:	ec4b ab10 	vmov	d0, sl, fp
 80043cc:	aa10      	add	r2, sp, #64	; 0x40
 80043ce:	a911      	add	r1, sp, #68	; 0x44
 80043d0:	4620      	mov	r0, r4
 80043d2:	f001 f8af 	bl	8005534 <__d2b>
 80043d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80043da:	ee08 0a10 	vmov	s16, r0
 80043de:	2d00      	cmp	r5, #0
 80043e0:	f000 8084 	beq.w	80044ec <_dtoa_r+0x204>
 80043e4:	ee19 3a90 	vmov	r3, s19
 80043e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80043f0:	4656      	mov	r6, sl
 80043f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80043f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80043fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80043fe:	4b74      	ldr	r3, [pc, #464]	; (80045d0 <_dtoa_r+0x2e8>)
 8004400:	2200      	movs	r2, #0
 8004402:	4630      	mov	r0, r6
 8004404:	4639      	mov	r1, r7
 8004406:	f7fb ff5f 	bl	80002c8 <__aeabi_dsub>
 800440a:	a365      	add	r3, pc, #404	; (adr r3, 80045a0 <_dtoa_r+0x2b8>)
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f7fc f912 	bl	8000638 <__aeabi_dmul>
 8004414:	a364      	add	r3, pc, #400	; (adr r3, 80045a8 <_dtoa_r+0x2c0>)
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f7fb ff57 	bl	80002cc <__adddf3>
 800441e:	4606      	mov	r6, r0
 8004420:	4628      	mov	r0, r5
 8004422:	460f      	mov	r7, r1
 8004424:	f7fc f89e 	bl	8000564 <__aeabi_i2d>
 8004428:	a361      	add	r3, pc, #388	; (adr r3, 80045b0 <_dtoa_r+0x2c8>)
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f7fc f903 	bl	8000638 <__aeabi_dmul>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4630      	mov	r0, r6
 8004438:	4639      	mov	r1, r7
 800443a:	f7fb ff47 	bl	80002cc <__adddf3>
 800443e:	4606      	mov	r6, r0
 8004440:	460f      	mov	r7, r1
 8004442:	f7fc fba9 	bl	8000b98 <__aeabi_d2iz>
 8004446:	2200      	movs	r2, #0
 8004448:	9000      	str	r0, [sp, #0]
 800444a:	2300      	movs	r3, #0
 800444c:	4630      	mov	r0, r6
 800444e:	4639      	mov	r1, r7
 8004450:	f7fc fb64 	bl	8000b1c <__aeabi_dcmplt>
 8004454:	b150      	cbz	r0, 800446c <_dtoa_r+0x184>
 8004456:	9800      	ldr	r0, [sp, #0]
 8004458:	f7fc f884 	bl	8000564 <__aeabi_i2d>
 800445c:	4632      	mov	r2, r6
 800445e:	463b      	mov	r3, r7
 8004460:	f7fc fb52 	bl	8000b08 <__aeabi_dcmpeq>
 8004464:	b910      	cbnz	r0, 800446c <_dtoa_r+0x184>
 8004466:	9b00      	ldr	r3, [sp, #0]
 8004468:	3b01      	subs	r3, #1
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	9b00      	ldr	r3, [sp, #0]
 800446e:	2b16      	cmp	r3, #22
 8004470:	d85a      	bhi.n	8004528 <_dtoa_r+0x240>
 8004472:	9a00      	ldr	r2, [sp, #0]
 8004474:	4b57      	ldr	r3, [pc, #348]	; (80045d4 <_dtoa_r+0x2ec>)
 8004476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	ec51 0b19 	vmov	r0, r1, d9
 8004482:	f7fc fb4b 	bl	8000b1c <__aeabi_dcmplt>
 8004486:	2800      	cmp	r0, #0
 8004488:	d050      	beq.n	800452c <_dtoa_r+0x244>
 800448a:	9b00      	ldr	r3, [sp, #0]
 800448c:	3b01      	subs	r3, #1
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	2300      	movs	r3, #0
 8004492:	930b      	str	r3, [sp, #44]	; 0x2c
 8004494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004496:	1b5d      	subs	r5, r3, r5
 8004498:	1e6b      	subs	r3, r5, #1
 800449a:	9305      	str	r3, [sp, #20]
 800449c:	bf45      	ittet	mi
 800449e:	f1c5 0301 	rsbmi	r3, r5, #1
 80044a2:	9304      	strmi	r3, [sp, #16]
 80044a4:	2300      	movpl	r3, #0
 80044a6:	2300      	movmi	r3, #0
 80044a8:	bf4c      	ite	mi
 80044aa:	9305      	strmi	r3, [sp, #20]
 80044ac:	9304      	strpl	r3, [sp, #16]
 80044ae:	9b00      	ldr	r3, [sp, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	db3d      	blt.n	8004530 <_dtoa_r+0x248>
 80044b4:	9b05      	ldr	r3, [sp, #20]
 80044b6:	9a00      	ldr	r2, [sp, #0]
 80044b8:	920a      	str	r2, [sp, #40]	; 0x28
 80044ba:	4413      	add	r3, r2
 80044bc:	9305      	str	r3, [sp, #20]
 80044be:	2300      	movs	r3, #0
 80044c0:	9307      	str	r3, [sp, #28]
 80044c2:	9b06      	ldr	r3, [sp, #24]
 80044c4:	2b09      	cmp	r3, #9
 80044c6:	f200 8089 	bhi.w	80045dc <_dtoa_r+0x2f4>
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	bfc4      	itt	gt
 80044ce:	3b04      	subgt	r3, #4
 80044d0:	9306      	strgt	r3, [sp, #24]
 80044d2:	9b06      	ldr	r3, [sp, #24]
 80044d4:	f1a3 0302 	sub.w	r3, r3, #2
 80044d8:	bfcc      	ite	gt
 80044da:	2500      	movgt	r5, #0
 80044dc:	2501      	movle	r5, #1
 80044de:	2b03      	cmp	r3, #3
 80044e0:	f200 8087 	bhi.w	80045f2 <_dtoa_r+0x30a>
 80044e4:	e8df f003 	tbb	[pc, r3]
 80044e8:	59383a2d 	.word	0x59383a2d
 80044ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80044f0:	441d      	add	r5, r3
 80044f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	bfc1      	itttt	gt
 80044fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80044fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004502:	fa0b f303 	lslgt.w	r3, fp, r3
 8004506:	fa26 f000 	lsrgt.w	r0, r6, r0
 800450a:	bfda      	itte	le
 800450c:	f1c3 0320 	rsble	r3, r3, #32
 8004510:	fa06 f003 	lslle.w	r0, r6, r3
 8004514:	4318      	orrgt	r0, r3
 8004516:	f7fc f815 	bl	8000544 <__aeabi_ui2d>
 800451a:	2301      	movs	r3, #1
 800451c:	4606      	mov	r6, r0
 800451e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004522:	3d01      	subs	r5, #1
 8004524:	930e      	str	r3, [sp, #56]	; 0x38
 8004526:	e76a      	b.n	80043fe <_dtoa_r+0x116>
 8004528:	2301      	movs	r3, #1
 800452a:	e7b2      	b.n	8004492 <_dtoa_r+0x1aa>
 800452c:	900b      	str	r0, [sp, #44]	; 0x2c
 800452e:	e7b1      	b.n	8004494 <_dtoa_r+0x1ac>
 8004530:	9b04      	ldr	r3, [sp, #16]
 8004532:	9a00      	ldr	r2, [sp, #0]
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	9304      	str	r3, [sp, #16]
 8004538:	4253      	negs	r3, r2
 800453a:	9307      	str	r3, [sp, #28]
 800453c:	2300      	movs	r3, #0
 800453e:	930a      	str	r3, [sp, #40]	; 0x28
 8004540:	e7bf      	b.n	80044c2 <_dtoa_r+0x1da>
 8004542:	2300      	movs	r3, #0
 8004544:	9308      	str	r3, [sp, #32]
 8004546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	dc55      	bgt.n	80045f8 <_dtoa_r+0x310>
 800454c:	2301      	movs	r3, #1
 800454e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004552:	461a      	mov	r2, r3
 8004554:	9209      	str	r2, [sp, #36]	; 0x24
 8004556:	e00c      	b.n	8004572 <_dtoa_r+0x28a>
 8004558:	2301      	movs	r3, #1
 800455a:	e7f3      	b.n	8004544 <_dtoa_r+0x25c>
 800455c:	2300      	movs	r3, #0
 800455e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004560:	9308      	str	r3, [sp, #32]
 8004562:	9b00      	ldr	r3, [sp, #0]
 8004564:	4413      	add	r3, r2
 8004566:	9302      	str	r3, [sp, #8]
 8004568:	3301      	adds	r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	9303      	str	r3, [sp, #12]
 800456e:	bfb8      	it	lt
 8004570:	2301      	movlt	r3, #1
 8004572:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004574:	2200      	movs	r2, #0
 8004576:	6042      	str	r2, [r0, #4]
 8004578:	2204      	movs	r2, #4
 800457a:	f102 0614 	add.w	r6, r2, #20
 800457e:	429e      	cmp	r6, r3
 8004580:	6841      	ldr	r1, [r0, #4]
 8004582:	d93d      	bls.n	8004600 <_dtoa_r+0x318>
 8004584:	4620      	mov	r0, r4
 8004586:	f000 fcad 	bl	8004ee4 <_Balloc>
 800458a:	9001      	str	r0, [sp, #4]
 800458c:	2800      	cmp	r0, #0
 800458e:	d13b      	bne.n	8004608 <_dtoa_r+0x320>
 8004590:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <_dtoa_r+0x2f0>)
 8004592:	4602      	mov	r2, r0
 8004594:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004598:	e6c0      	b.n	800431c <_dtoa_r+0x34>
 800459a:	2301      	movs	r3, #1
 800459c:	e7df      	b.n	800455e <_dtoa_r+0x276>
 800459e:	bf00      	nop
 80045a0:	636f4361 	.word	0x636f4361
 80045a4:	3fd287a7 	.word	0x3fd287a7
 80045a8:	8b60c8b3 	.word	0x8b60c8b3
 80045ac:	3fc68a28 	.word	0x3fc68a28
 80045b0:	509f79fb 	.word	0x509f79fb
 80045b4:	3fd34413 	.word	0x3fd34413
 80045b8:	08006abd 	.word	0x08006abd
 80045bc:	08006ad4 	.word	0x08006ad4
 80045c0:	7ff00000 	.word	0x7ff00000
 80045c4:	08006ab9 	.word	0x08006ab9
 80045c8:	08006ab0 	.word	0x08006ab0
 80045cc:	08006a8d 	.word	0x08006a8d
 80045d0:	3ff80000 	.word	0x3ff80000
 80045d4:	08006bc8 	.word	0x08006bc8
 80045d8:	08006b2f 	.word	0x08006b2f
 80045dc:	2501      	movs	r5, #1
 80045de:	2300      	movs	r3, #0
 80045e0:	9306      	str	r3, [sp, #24]
 80045e2:	9508      	str	r5, [sp, #32]
 80045e4:	f04f 33ff 	mov.w	r3, #4294967295
 80045e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2312      	movs	r3, #18
 80045f0:	e7b0      	b.n	8004554 <_dtoa_r+0x26c>
 80045f2:	2301      	movs	r3, #1
 80045f4:	9308      	str	r3, [sp, #32]
 80045f6:	e7f5      	b.n	80045e4 <_dtoa_r+0x2fc>
 80045f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80045fe:	e7b8      	b.n	8004572 <_dtoa_r+0x28a>
 8004600:	3101      	adds	r1, #1
 8004602:	6041      	str	r1, [r0, #4]
 8004604:	0052      	lsls	r2, r2, #1
 8004606:	e7b8      	b.n	800457a <_dtoa_r+0x292>
 8004608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800460a:	9a01      	ldr	r2, [sp, #4]
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	9b03      	ldr	r3, [sp, #12]
 8004610:	2b0e      	cmp	r3, #14
 8004612:	f200 809d 	bhi.w	8004750 <_dtoa_r+0x468>
 8004616:	2d00      	cmp	r5, #0
 8004618:	f000 809a 	beq.w	8004750 <_dtoa_r+0x468>
 800461c:	9b00      	ldr	r3, [sp, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	dd32      	ble.n	8004688 <_dtoa_r+0x3a0>
 8004622:	4ab7      	ldr	r2, [pc, #732]	; (8004900 <_dtoa_r+0x618>)
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800462c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004630:	9b00      	ldr	r3, [sp, #0]
 8004632:	05d8      	lsls	r0, r3, #23
 8004634:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004638:	d516      	bpl.n	8004668 <_dtoa_r+0x380>
 800463a:	4bb2      	ldr	r3, [pc, #712]	; (8004904 <_dtoa_r+0x61c>)
 800463c:	ec51 0b19 	vmov	r0, r1, d9
 8004640:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004644:	f7fc f922 	bl	800088c <__aeabi_ddiv>
 8004648:	f007 070f 	and.w	r7, r7, #15
 800464c:	4682      	mov	sl, r0
 800464e:	468b      	mov	fp, r1
 8004650:	2503      	movs	r5, #3
 8004652:	4eac      	ldr	r6, [pc, #688]	; (8004904 <_dtoa_r+0x61c>)
 8004654:	b957      	cbnz	r7, 800466c <_dtoa_r+0x384>
 8004656:	4642      	mov	r2, r8
 8004658:	464b      	mov	r3, r9
 800465a:	4650      	mov	r0, sl
 800465c:	4659      	mov	r1, fp
 800465e:	f7fc f915 	bl	800088c <__aeabi_ddiv>
 8004662:	4682      	mov	sl, r0
 8004664:	468b      	mov	fp, r1
 8004666:	e028      	b.n	80046ba <_dtoa_r+0x3d2>
 8004668:	2502      	movs	r5, #2
 800466a:	e7f2      	b.n	8004652 <_dtoa_r+0x36a>
 800466c:	07f9      	lsls	r1, r7, #31
 800466e:	d508      	bpl.n	8004682 <_dtoa_r+0x39a>
 8004670:	4640      	mov	r0, r8
 8004672:	4649      	mov	r1, r9
 8004674:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004678:	f7fb ffde 	bl	8000638 <__aeabi_dmul>
 800467c:	3501      	adds	r5, #1
 800467e:	4680      	mov	r8, r0
 8004680:	4689      	mov	r9, r1
 8004682:	107f      	asrs	r7, r7, #1
 8004684:	3608      	adds	r6, #8
 8004686:	e7e5      	b.n	8004654 <_dtoa_r+0x36c>
 8004688:	f000 809b 	beq.w	80047c2 <_dtoa_r+0x4da>
 800468c:	9b00      	ldr	r3, [sp, #0]
 800468e:	4f9d      	ldr	r7, [pc, #628]	; (8004904 <_dtoa_r+0x61c>)
 8004690:	425e      	negs	r6, r3
 8004692:	4b9b      	ldr	r3, [pc, #620]	; (8004900 <_dtoa_r+0x618>)
 8004694:	f006 020f 	and.w	r2, r6, #15
 8004698:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	ec51 0b19 	vmov	r0, r1, d9
 80046a4:	f7fb ffc8 	bl	8000638 <__aeabi_dmul>
 80046a8:	1136      	asrs	r6, r6, #4
 80046aa:	4682      	mov	sl, r0
 80046ac:	468b      	mov	fp, r1
 80046ae:	2300      	movs	r3, #0
 80046b0:	2502      	movs	r5, #2
 80046b2:	2e00      	cmp	r6, #0
 80046b4:	d17a      	bne.n	80047ac <_dtoa_r+0x4c4>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1d3      	bne.n	8004662 <_dtoa_r+0x37a>
 80046ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8082 	beq.w	80047c6 <_dtoa_r+0x4de>
 80046c2:	4b91      	ldr	r3, [pc, #580]	; (8004908 <_dtoa_r+0x620>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	4650      	mov	r0, sl
 80046c8:	4659      	mov	r1, fp
 80046ca:	f7fc fa27 	bl	8000b1c <__aeabi_dcmplt>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d079      	beq.n	80047c6 <_dtoa_r+0x4de>
 80046d2:	9b03      	ldr	r3, [sp, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d076      	beq.n	80047c6 <_dtoa_r+0x4de>
 80046d8:	9b02      	ldr	r3, [sp, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	dd36      	ble.n	800474c <_dtoa_r+0x464>
 80046de:	9b00      	ldr	r3, [sp, #0]
 80046e0:	4650      	mov	r0, sl
 80046e2:	4659      	mov	r1, fp
 80046e4:	1e5f      	subs	r7, r3, #1
 80046e6:	2200      	movs	r2, #0
 80046e8:	4b88      	ldr	r3, [pc, #544]	; (800490c <_dtoa_r+0x624>)
 80046ea:	f7fb ffa5 	bl	8000638 <__aeabi_dmul>
 80046ee:	9e02      	ldr	r6, [sp, #8]
 80046f0:	4682      	mov	sl, r0
 80046f2:	468b      	mov	fp, r1
 80046f4:	3501      	adds	r5, #1
 80046f6:	4628      	mov	r0, r5
 80046f8:	f7fb ff34 	bl	8000564 <__aeabi_i2d>
 80046fc:	4652      	mov	r2, sl
 80046fe:	465b      	mov	r3, fp
 8004700:	f7fb ff9a 	bl	8000638 <__aeabi_dmul>
 8004704:	4b82      	ldr	r3, [pc, #520]	; (8004910 <_dtoa_r+0x628>)
 8004706:	2200      	movs	r2, #0
 8004708:	f7fb fde0 	bl	80002cc <__adddf3>
 800470c:	46d0      	mov	r8, sl
 800470e:	46d9      	mov	r9, fp
 8004710:	4682      	mov	sl, r0
 8004712:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004716:	2e00      	cmp	r6, #0
 8004718:	d158      	bne.n	80047cc <_dtoa_r+0x4e4>
 800471a:	4b7e      	ldr	r3, [pc, #504]	; (8004914 <_dtoa_r+0x62c>)
 800471c:	2200      	movs	r2, #0
 800471e:	4640      	mov	r0, r8
 8004720:	4649      	mov	r1, r9
 8004722:	f7fb fdd1 	bl	80002c8 <__aeabi_dsub>
 8004726:	4652      	mov	r2, sl
 8004728:	465b      	mov	r3, fp
 800472a:	4680      	mov	r8, r0
 800472c:	4689      	mov	r9, r1
 800472e:	f7fc fa13 	bl	8000b58 <__aeabi_dcmpgt>
 8004732:	2800      	cmp	r0, #0
 8004734:	f040 8295 	bne.w	8004c62 <_dtoa_r+0x97a>
 8004738:	4652      	mov	r2, sl
 800473a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800473e:	4640      	mov	r0, r8
 8004740:	4649      	mov	r1, r9
 8004742:	f7fc f9eb 	bl	8000b1c <__aeabi_dcmplt>
 8004746:	2800      	cmp	r0, #0
 8004748:	f040 8289 	bne.w	8004c5e <_dtoa_r+0x976>
 800474c:	ec5b ab19 	vmov	sl, fp, d9
 8004750:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004752:	2b00      	cmp	r3, #0
 8004754:	f2c0 8148 	blt.w	80049e8 <_dtoa_r+0x700>
 8004758:	9a00      	ldr	r2, [sp, #0]
 800475a:	2a0e      	cmp	r2, #14
 800475c:	f300 8144 	bgt.w	80049e8 <_dtoa_r+0x700>
 8004760:	4b67      	ldr	r3, [pc, #412]	; (8004900 <_dtoa_r+0x618>)
 8004762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004766:	e9d3 8900 	ldrd	r8, r9, [r3]
 800476a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	f280 80d5 	bge.w	800491c <_dtoa_r+0x634>
 8004772:	9b03      	ldr	r3, [sp, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f300 80d1 	bgt.w	800491c <_dtoa_r+0x634>
 800477a:	f040 826f 	bne.w	8004c5c <_dtoa_r+0x974>
 800477e:	4b65      	ldr	r3, [pc, #404]	; (8004914 <_dtoa_r+0x62c>)
 8004780:	2200      	movs	r2, #0
 8004782:	4640      	mov	r0, r8
 8004784:	4649      	mov	r1, r9
 8004786:	f7fb ff57 	bl	8000638 <__aeabi_dmul>
 800478a:	4652      	mov	r2, sl
 800478c:	465b      	mov	r3, fp
 800478e:	f7fc f9d9 	bl	8000b44 <__aeabi_dcmpge>
 8004792:	9e03      	ldr	r6, [sp, #12]
 8004794:	4637      	mov	r7, r6
 8004796:	2800      	cmp	r0, #0
 8004798:	f040 8245 	bne.w	8004c26 <_dtoa_r+0x93e>
 800479c:	9d01      	ldr	r5, [sp, #4]
 800479e:	2331      	movs	r3, #49	; 0x31
 80047a0:	f805 3b01 	strb.w	r3, [r5], #1
 80047a4:	9b00      	ldr	r3, [sp, #0]
 80047a6:	3301      	adds	r3, #1
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	e240      	b.n	8004c2e <_dtoa_r+0x946>
 80047ac:	07f2      	lsls	r2, r6, #31
 80047ae:	d505      	bpl.n	80047bc <_dtoa_r+0x4d4>
 80047b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b4:	f7fb ff40 	bl	8000638 <__aeabi_dmul>
 80047b8:	3501      	adds	r5, #1
 80047ba:	2301      	movs	r3, #1
 80047bc:	1076      	asrs	r6, r6, #1
 80047be:	3708      	adds	r7, #8
 80047c0:	e777      	b.n	80046b2 <_dtoa_r+0x3ca>
 80047c2:	2502      	movs	r5, #2
 80047c4:	e779      	b.n	80046ba <_dtoa_r+0x3d2>
 80047c6:	9f00      	ldr	r7, [sp, #0]
 80047c8:	9e03      	ldr	r6, [sp, #12]
 80047ca:	e794      	b.n	80046f6 <_dtoa_r+0x40e>
 80047cc:	9901      	ldr	r1, [sp, #4]
 80047ce:	4b4c      	ldr	r3, [pc, #304]	; (8004900 <_dtoa_r+0x618>)
 80047d0:	4431      	add	r1, r6
 80047d2:	910d      	str	r1, [sp, #52]	; 0x34
 80047d4:	9908      	ldr	r1, [sp, #32]
 80047d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80047da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80047de:	2900      	cmp	r1, #0
 80047e0:	d043      	beq.n	800486a <_dtoa_r+0x582>
 80047e2:	494d      	ldr	r1, [pc, #308]	; (8004918 <_dtoa_r+0x630>)
 80047e4:	2000      	movs	r0, #0
 80047e6:	f7fc f851 	bl	800088c <__aeabi_ddiv>
 80047ea:	4652      	mov	r2, sl
 80047ec:	465b      	mov	r3, fp
 80047ee:	f7fb fd6b 	bl	80002c8 <__aeabi_dsub>
 80047f2:	9d01      	ldr	r5, [sp, #4]
 80047f4:	4682      	mov	sl, r0
 80047f6:	468b      	mov	fp, r1
 80047f8:	4649      	mov	r1, r9
 80047fa:	4640      	mov	r0, r8
 80047fc:	f7fc f9cc 	bl	8000b98 <__aeabi_d2iz>
 8004800:	4606      	mov	r6, r0
 8004802:	f7fb feaf 	bl	8000564 <__aeabi_i2d>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4640      	mov	r0, r8
 800480c:	4649      	mov	r1, r9
 800480e:	f7fb fd5b 	bl	80002c8 <__aeabi_dsub>
 8004812:	3630      	adds	r6, #48	; 0x30
 8004814:	f805 6b01 	strb.w	r6, [r5], #1
 8004818:	4652      	mov	r2, sl
 800481a:	465b      	mov	r3, fp
 800481c:	4680      	mov	r8, r0
 800481e:	4689      	mov	r9, r1
 8004820:	f7fc f97c 	bl	8000b1c <__aeabi_dcmplt>
 8004824:	2800      	cmp	r0, #0
 8004826:	d163      	bne.n	80048f0 <_dtoa_r+0x608>
 8004828:	4642      	mov	r2, r8
 800482a:	464b      	mov	r3, r9
 800482c:	4936      	ldr	r1, [pc, #216]	; (8004908 <_dtoa_r+0x620>)
 800482e:	2000      	movs	r0, #0
 8004830:	f7fb fd4a 	bl	80002c8 <__aeabi_dsub>
 8004834:	4652      	mov	r2, sl
 8004836:	465b      	mov	r3, fp
 8004838:	f7fc f970 	bl	8000b1c <__aeabi_dcmplt>
 800483c:	2800      	cmp	r0, #0
 800483e:	f040 80b5 	bne.w	80049ac <_dtoa_r+0x6c4>
 8004842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004844:	429d      	cmp	r5, r3
 8004846:	d081      	beq.n	800474c <_dtoa_r+0x464>
 8004848:	4b30      	ldr	r3, [pc, #192]	; (800490c <_dtoa_r+0x624>)
 800484a:	2200      	movs	r2, #0
 800484c:	4650      	mov	r0, sl
 800484e:	4659      	mov	r1, fp
 8004850:	f7fb fef2 	bl	8000638 <__aeabi_dmul>
 8004854:	4b2d      	ldr	r3, [pc, #180]	; (800490c <_dtoa_r+0x624>)
 8004856:	4682      	mov	sl, r0
 8004858:	468b      	mov	fp, r1
 800485a:	4640      	mov	r0, r8
 800485c:	4649      	mov	r1, r9
 800485e:	2200      	movs	r2, #0
 8004860:	f7fb feea 	bl	8000638 <__aeabi_dmul>
 8004864:	4680      	mov	r8, r0
 8004866:	4689      	mov	r9, r1
 8004868:	e7c6      	b.n	80047f8 <_dtoa_r+0x510>
 800486a:	4650      	mov	r0, sl
 800486c:	4659      	mov	r1, fp
 800486e:	f7fb fee3 	bl	8000638 <__aeabi_dmul>
 8004872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004874:	9d01      	ldr	r5, [sp, #4]
 8004876:	930f      	str	r3, [sp, #60]	; 0x3c
 8004878:	4682      	mov	sl, r0
 800487a:	468b      	mov	fp, r1
 800487c:	4649      	mov	r1, r9
 800487e:	4640      	mov	r0, r8
 8004880:	f7fc f98a 	bl	8000b98 <__aeabi_d2iz>
 8004884:	4606      	mov	r6, r0
 8004886:	f7fb fe6d 	bl	8000564 <__aeabi_i2d>
 800488a:	3630      	adds	r6, #48	; 0x30
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4640      	mov	r0, r8
 8004892:	4649      	mov	r1, r9
 8004894:	f7fb fd18 	bl	80002c8 <__aeabi_dsub>
 8004898:	f805 6b01 	strb.w	r6, [r5], #1
 800489c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800489e:	429d      	cmp	r5, r3
 80048a0:	4680      	mov	r8, r0
 80048a2:	4689      	mov	r9, r1
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	d124      	bne.n	80048f4 <_dtoa_r+0x60c>
 80048aa:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <_dtoa_r+0x630>)
 80048ac:	4650      	mov	r0, sl
 80048ae:	4659      	mov	r1, fp
 80048b0:	f7fb fd0c 	bl	80002cc <__adddf3>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4640      	mov	r0, r8
 80048ba:	4649      	mov	r1, r9
 80048bc:	f7fc f94c 	bl	8000b58 <__aeabi_dcmpgt>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d173      	bne.n	80049ac <_dtoa_r+0x6c4>
 80048c4:	4652      	mov	r2, sl
 80048c6:	465b      	mov	r3, fp
 80048c8:	4913      	ldr	r1, [pc, #76]	; (8004918 <_dtoa_r+0x630>)
 80048ca:	2000      	movs	r0, #0
 80048cc:	f7fb fcfc 	bl	80002c8 <__aeabi_dsub>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4640      	mov	r0, r8
 80048d6:	4649      	mov	r1, r9
 80048d8:	f7fc f920 	bl	8000b1c <__aeabi_dcmplt>
 80048dc:	2800      	cmp	r0, #0
 80048de:	f43f af35 	beq.w	800474c <_dtoa_r+0x464>
 80048e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80048e4:	1e6b      	subs	r3, r5, #1
 80048e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80048e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80048ec:	2b30      	cmp	r3, #48	; 0x30
 80048ee:	d0f8      	beq.n	80048e2 <_dtoa_r+0x5fa>
 80048f0:	9700      	str	r7, [sp, #0]
 80048f2:	e049      	b.n	8004988 <_dtoa_r+0x6a0>
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <_dtoa_r+0x624>)
 80048f6:	f7fb fe9f 	bl	8000638 <__aeabi_dmul>
 80048fa:	4680      	mov	r8, r0
 80048fc:	4689      	mov	r9, r1
 80048fe:	e7bd      	b.n	800487c <_dtoa_r+0x594>
 8004900:	08006bc8 	.word	0x08006bc8
 8004904:	08006ba0 	.word	0x08006ba0
 8004908:	3ff00000 	.word	0x3ff00000
 800490c:	40240000 	.word	0x40240000
 8004910:	401c0000 	.word	0x401c0000
 8004914:	40140000 	.word	0x40140000
 8004918:	3fe00000 	.word	0x3fe00000
 800491c:	9d01      	ldr	r5, [sp, #4]
 800491e:	4656      	mov	r6, sl
 8004920:	465f      	mov	r7, fp
 8004922:	4642      	mov	r2, r8
 8004924:	464b      	mov	r3, r9
 8004926:	4630      	mov	r0, r6
 8004928:	4639      	mov	r1, r7
 800492a:	f7fb ffaf 	bl	800088c <__aeabi_ddiv>
 800492e:	f7fc f933 	bl	8000b98 <__aeabi_d2iz>
 8004932:	4682      	mov	sl, r0
 8004934:	f7fb fe16 	bl	8000564 <__aeabi_i2d>
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	f7fb fe7c 	bl	8000638 <__aeabi_dmul>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4630      	mov	r0, r6
 8004946:	4639      	mov	r1, r7
 8004948:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800494c:	f7fb fcbc 	bl	80002c8 <__aeabi_dsub>
 8004950:	f805 6b01 	strb.w	r6, [r5], #1
 8004954:	9e01      	ldr	r6, [sp, #4]
 8004956:	9f03      	ldr	r7, [sp, #12]
 8004958:	1bae      	subs	r6, r5, r6
 800495a:	42b7      	cmp	r7, r6
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	d135      	bne.n	80049ce <_dtoa_r+0x6e6>
 8004962:	f7fb fcb3 	bl	80002cc <__adddf3>
 8004966:	4642      	mov	r2, r8
 8004968:	464b      	mov	r3, r9
 800496a:	4606      	mov	r6, r0
 800496c:	460f      	mov	r7, r1
 800496e:	f7fc f8f3 	bl	8000b58 <__aeabi_dcmpgt>
 8004972:	b9d0      	cbnz	r0, 80049aa <_dtoa_r+0x6c2>
 8004974:	4642      	mov	r2, r8
 8004976:	464b      	mov	r3, r9
 8004978:	4630      	mov	r0, r6
 800497a:	4639      	mov	r1, r7
 800497c:	f7fc f8c4 	bl	8000b08 <__aeabi_dcmpeq>
 8004980:	b110      	cbz	r0, 8004988 <_dtoa_r+0x6a0>
 8004982:	f01a 0f01 	tst.w	sl, #1
 8004986:	d110      	bne.n	80049aa <_dtoa_r+0x6c2>
 8004988:	4620      	mov	r0, r4
 800498a:	ee18 1a10 	vmov	r1, s16
 800498e:	f000 fae9 	bl	8004f64 <_Bfree>
 8004992:	2300      	movs	r3, #0
 8004994:	9800      	ldr	r0, [sp, #0]
 8004996:	702b      	strb	r3, [r5, #0]
 8004998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800499a:	3001      	adds	r0, #1
 800499c:	6018      	str	r0, [r3, #0]
 800499e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f43f acf1 	beq.w	8004388 <_dtoa_r+0xa0>
 80049a6:	601d      	str	r5, [r3, #0]
 80049a8:	e4ee      	b.n	8004388 <_dtoa_r+0xa0>
 80049aa:	9f00      	ldr	r7, [sp, #0]
 80049ac:	462b      	mov	r3, r5
 80049ae:	461d      	mov	r5, r3
 80049b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049b4:	2a39      	cmp	r2, #57	; 0x39
 80049b6:	d106      	bne.n	80049c6 <_dtoa_r+0x6de>
 80049b8:	9a01      	ldr	r2, [sp, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d1f7      	bne.n	80049ae <_dtoa_r+0x6c6>
 80049be:	9901      	ldr	r1, [sp, #4]
 80049c0:	2230      	movs	r2, #48	; 0x30
 80049c2:	3701      	adds	r7, #1
 80049c4:	700a      	strb	r2, [r1, #0]
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	3201      	adds	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	e790      	b.n	80048f0 <_dtoa_r+0x608>
 80049ce:	4ba6      	ldr	r3, [pc, #664]	; (8004c68 <_dtoa_r+0x980>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	f7fb fe31 	bl	8000638 <__aeabi_dmul>
 80049d6:	2200      	movs	r2, #0
 80049d8:	2300      	movs	r3, #0
 80049da:	4606      	mov	r6, r0
 80049dc:	460f      	mov	r7, r1
 80049de:	f7fc f893 	bl	8000b08 <__aeabi_dcmpeq>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d09d      	beq.n	8004922 <_dtoa_r+0x63a>
 80049e6:	e7cf      	b.n	8004988 <_dtoa_r+0x6a0>
 80049e8:	9a08      	ldr	r2, [sp, #32]
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	f000 80d7 	beq.w	8004b9e <_dtoa_r+0x8b6>
 80049f0:	9a06      	ldr	r2, [sp, #24]
 80049f2:	2a01      	cmp	r2, #1
 80049f4:	f300 80ba 	bgt.w	8004b6c <_dtoa_r+0x884>
 80049f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049fa:	2a00      	cmp	r2, #0
 80049fc:	f000 80b2 	beq.w	8004b64 <_dtoa_r+0x87c>
 8004a00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a04:	9e07      	ldr	r6, [sp, #28]
 8004a06:	9d04      	ldr	r5, [sp, #16]
 8004a08:	9a04      	ldr	r2, [sp, #16]
 8004a0a:	441a      	add	r2, r3
 8004a0c:	9204      	str	r2, [sp, #16]
 8004a0e:	9a05      	ldr	r2, [sp, #20]
 8004a10:	2101      	movs	r1, #1
 8004a12:	441a      	add	r2, r3
 8004a14:	4620      	mov	r0, r4
 8004a16:	9205      	str	r2, [sp, #20]
 8004a18:	f000 fb5c 	bl	80050d4 <__i2b>
 8004a1c:	4607      	mov	r7, r0
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	dd0c      	ble.n	8004a3c <_dtoa_r+0x754>
 8004a22:	9b05      	ldr	r3, [sp, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dd09      	ble.n	8004a3c <_dtoa_r+0x754>
 8004a28:	42ab      	cmp	r3, r5
 8004a2a:	9a04      	ldr	r2, [sp, #16]
 8004a2c:	bfa8      	it	ge
 8004a2e:	462b      	movge	r3, r5
 8004a30:	1ad2      	subs	r2, r2, r3
 8004a32:	9204      	str	r2, [sp, #16]
 8004a34:	9a05      	ldr	r2, [sp, #20]
 8004a36:	1aed      	subs	r5, r5, r3
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	9b07      	ldr	r3, [sp, #28]
 8004a3e:	b31b      	cbz	r3, 8004a88 <_dtoa_r+0x7a0>
 8004a40:	9b08      	ldr	r3, [sp, #32]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80af 	beq.w	8004ba6 <_dtoa_r+0x8be>
 8004a48:	2e00      	cmp	r6, #0
 8004a4a:	dd13      	ble.n	8004a74 <_dtoa_r+0x78c>
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	4632      	mov	r2, r6
 8004a50:	4620      	mov	r0, r4
 8004a52:	f000 fbff 	bl	8005254 <__pow5mult>
 8004a56:	ee18 2a10 	vmov	r2, s16
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	4607      	mov	r7, r0
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f000 fb4e 	bl	8005100 <__multiply>
 8004a64:	ee18 1a10 	vmov	r1, s16
 8004a68:	4680      	mov	r8, r0
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f000 fa7a 	bl	8004f64 <_Bfree>
 8004a70:	ee08 8a10 	vmov	s16, r8
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	1b9a      	subs	r2, r3, r6
 8004a78:	d006      	beq.n	8004a88 <_dtoa_r+0x7a0>
 8004a7a:	ee18 1a10 	vmov	r1, s16
 8004a7e:	4620      	mov	r0, r4
 8004a80:	f000 fbe8 	bl	8005254 <__pow5mult>
 8004a84:	ee08 0a10 	vmov	s16, r0
 8004a88:	2101      	movs	r1, #1
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f000 fb22 	bl	80050d4 <__i2b>
 8004a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	4606      	mov	r6, r0
 8004a96:	f340 8088 	ble.w	8004baa <_dtoa_r+0x8c2>
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	4601      	mov	r1, r0
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f000 fbd8 	bl	8005254 <__pow5mult>
 8004aa4:	9b06      	ldr	r3, [sp, #24]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	4606      	mov	r6, r0
 8004aaa:	f340 8081 	ble.w	8004bb0 <_dtoa_r+0x8c8>
 8004aae:	f04f 0800 	mov.w	r8, #0
 8004ab2:	6933      	ldr	r3, [r6, #16]
 8004ab4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ab8:	6918      	ldr	r0, [r3, #16]
 8004aba:	f000 fabb 	bl	8005034 <__hi0bits>
 8004abe:	f1c0 0020 	rsb	r0, r0, #32
 8004ac2:	9b05      	ldr	r3, [sp, #20]
 8004ac4:	4418      	add	r0, r3
 8004ac6:	f010 001f 	ands.w	r0, r0, #31
 8004aca:	f000 8092 	beq.w	8004bf2 <_dtoa_r+0x90a>
 8004ace:	f1c0 0320 	rsb	r3, r0, #32
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	f340 808a 	ble.w	8004bec <_dtoa_r+0x904>
 8004ad8:	f1c0 001c 	rsb	r0, r0, #28
 8004adc:	9b04      	ldr	r3, [sp, #16]
 8004ade:	4403      	add	r3, r0
 8004ae0:	9304      	str	r3, [sp, #16]
 8004ae2:	9b05      	ldr	r3, [sp, #20]
 8004ae4:	4403      	add	r3, r0
 8004ae6:	4405      	add	r5, r0
 8004ae8:	9305      	str	r3, [sp, #20]
 8004aea:	9b04      	ldr	r3, [sp, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	dd07      	ble.n	8004b00 <_dtoa_r+0x818>
 8004af0:	ee18 1a10 	vmov	r1, s16
 8004af4:	461a      	mov	r2, r3
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 fc06 	bl	8005308 <__lshift>
 8004afc:	ee08 0a10 	vmov	s16, r0
 8004b00:	9b05      	ldr	r3, [sp, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	dd05      	ble.n	8004b12 <_dtoa_r+0x82a>
 8004b06:	4631      	mov	r1, r6
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f000 fbfc 	bl	8005308 <__lshift>
 8004b10:	4606      	mov	r6, r0
 8004b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d06e      	beq.n	8004bf6 <_dtoa_r+0x90e>
 8004b18:	ee18 0a10 	vmov	r0, s16
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	f000 fc63 	bl	80053e8 <__mcmp>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	da67      	bge.n	8004bf6 <_dtoa_r+0x90e>
 8004b26:	9b00      	ldr	r3, [sp, #0]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	ee18 1a10 	vmov	r1, s16
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	220a      	movs	r2, #10
 8004b32:	2300      	movs	r3, #0
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 fa37 	bl	8004fa8 <__multadd>
 8004b3a:	9b08      	ldr	r3, [sp, #32]
 8004b3c:	ee08 0a10 	vmov	s16, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 81b1 	beq.w	8004ea8 <_dtoa_r+0xbc0>
 8004b46:	2300      	movs	r3, #0
 8004b48:	4639      	mov	r1, r7
 8004b4a:	220a      	movs	r2, #10
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f000 fa2b 	bl	8004fa8 <__multadd>
 8004b52:	9b02      	ldr	r3, [sp, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	4607      	mov	r7, r0
 8004b58:	f300 808e 	bgt.w	8004c78 <_dtoa_r+0x990>
 8004b5c:	9b06      	ldr	r3, [sp, #24]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	dc51      	bgt.n	8004c06 <_dtoa_r+0x91e>
 8004b62:	e089      	b.n	8004c78 <_dtoa_r+0x990>
 8004b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b6a:	e74b      	b.n	8004a04 <_dtoa_r+0x71c>
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	1e5e      	subs	r6, r3, #1
 8004b70:	9b07      	ldr	r3, [sp, #28]
 8004b72:	42b3      	cmp	r3, r6
 8004b74:	bfbf      	itttt	lt
 8004b76:	9b07      	ldrlt	r3, [sp, #28]
 8004b78:	9607      	strlt	r6, [sp, #28]
 8004b7a:	1af2      	sublt	r2, r6, r3
 8004b7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004b7e:	bfb6      	itet	lt
 8004b80:	189b      	addlt	r3, r3, r2
 8004b82:	1b9e      	subge	r6, r3, r6
 8004b84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	bfb8      	it	lt
 8004b8a:	2600      	movlt	r6, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bfb7      	itett	lt
 8004b90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004b94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004b98:	1a9d      	sublt	r5, r3, r2
 8004b9a:	2300      	movlt	r3, #0
 8004b9c:	e734      	b.n	8004a08 <_dtoa_r+0x720>
 8004b9e:	9e07      	ldr	r6, [sp, #28]
 8004ba0:	9d04      	ldr	r5, [sp, #16]
 8004ba2:	9f08      	ldr	r7, [sp, #32]
 8004ba4:	e73b      	b.n	8004a1e <_dtoa_r+0x736>
 8004ba6:	9a07      	ldr	r2, [sp, #28]
 8004ba8:	e767      	b.n	8004a7a <_dtoa_r+0x792>
 8004baa:	9b06      	ldr	r3, [sp, #24]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	dc18      	bgt.n	8004be2 <_dtoa_r+0x8fa>
 8004bb0:	f1ba 0f00 	cmp.w	sl, #0
 8004bb4:	d115      	bne.n	8004be2 <_dtoa_r+0x8fa>
 8004bb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004bba:	b993      	cbnz	r3, 8004be2 <_dtoa_r+0x8fa>
 8004bbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004bc0:	0d1b      	lsrs	r3, r3, #20
 8004bc2:	051b      	lsls	r3, r3, #20
 8004bc4:	b183      	cbz	r3, 8004be8 <_dtoa_r+0x900>
 8004bc6:	9b04      	ldr	r3, [sp, #16]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	9304      	str	r3, [sp, #16]
 8004bcc:	9b05      	ldr	r3, [sp, #20]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	9305      	str	r3, [sp, #20]
 8004bd2:	f04f 0801 	mov.w	r8, #1
 8004bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f47f af6a 	bne.w	8004ab2 <_dtoa_r+0x7ca>
 8004bde:	2001      	movs	r0, #1
 8004be0:	e76f      	b.n	8004ac2 <_dtoa_r+0x7da>
 8004be2:	f04f 0800 	mov.w	r8, #0
 8004be6:	e7f6      	b.n	8004bd6 <_dtoa_r+0x8ee>
 8004be8:	4698      	mov	r8, r3
 8004bea:	e7f4      	b.n	8004bd6 <_dtoa_r+0x8ee>
 8004bec:	f43f af7d 	beq.w	8004aea <_dtoa_r+0x802>
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	301c      	adds	r0, #28
 8004bf4:	e772      	b.n	8004adc <_dtoa_r+0x7f4>
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	dc37      	bgt.n	8004c6c <_dtoa_r+0x984>
 8004bfc:	9b06      	ldr	r3, [sp, #24]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	dd34      	ble.n	8004c6c <_dtoa_r+0x984>
 8004c02:	9b03      	ldr	r3, [sp, #12]
 8004c04:	9302      	str	r3, [sp, #8]
 8004c06:	9b02      	ldr	r3, [sp, #8]
 8004c08:	b96b      	cbnz	r3, 8004c26 <_dtoa_r+0x93e>
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	2205      	movs	r2, #5
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f000 f9ca 	bl	8004fa8 <__multadd>
 8004c14:	4601      	mov	r1, r0
 8004c16:	4606      	mov	r6, r0
 8004c18:	ee18 0a10 	vmov	r0, s16
 8004c1c:	f000 fbe4 	bl	80053e8 <__mcmp>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	f73f adbb 	bgt.w	800479c <_dtoa_r+0x4b4>
 8004c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c28:	9d01      	ldr	r5, [sp, #4]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	f04f 0800 	mov.w	r8, #0
 8004c32:	4631      	mov	r1, r6
 8004c34:	4620      	mov	r0, r4
 8004c36:	f000 f995 	bl	8004f64 <_Bfree>
 8004c3a:	2f00      	cmp	r7, #0
 8004c3c:	f43f aea4 	beq.w	8004988 <_dtoa_r+0x6a0>
 8004c40:	f1b8 0f00 	cmp.w	r8, #0
 8004c44:	d005      	beq.n	8004c52 <_dtoa_r+0x96a>
 8004c46:	45b8      	cmp	r8, r7
 8004c48:	d003      	beq.n	8004c52 <_dtoa_r+0x96a>
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f000 f989 	bl	8004f64 <_Bfree>
 8004c52:	4639      	mov	r1, r7
 8004c54:	4620      	mov	r0, r4
 8004c56:	f000 f985 	bl	8004f64 <_Bfree>
 8004c5a:	e695      	b.n	8004988 <_dtoa_r+0x6a0>
 8004c5c:	2600      	movs	r6, #0
 8004c5e:	4637      	mov	r7, r6
 8004c60:	e7e1      	b.n	8004c26 <_dtoa_r+0x93e>
 8004c62:	9700      	str	r7, [sp, #0]
 8004c64:	4637      	mov	r7, r6
 8004c66:	e599      	b.n	800479c <_dtoa_r+0x4b4>
 8004c68:	40240000 	.word	0x40240000
 8004c6c:	9b08      	ldr	r3, [sp, #32]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80ca 	beq.w	8004e08 <_dtoa_r+0xb20>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	9302      	str	r3, [sp, #8]
 8004c78:	2d00      	cmp	r5, #0
 8004c7a:	dd05      	ble.n	8004c88 <_dtoa_r+0x9a0>
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	462a      	mov	r2, r5
 8004c80:	4620      	mov	r0, r4
 8004c82:	f000 fb41 	bl	8005308 <__lshift>
 8004c86:	4607      	mov	r7, r0
 8004c88:	f1b8 0f00 	cmp.w	r8, #0
 8004c8c:	d05b      	beq.n	8004d46 <_dtoa_r+0xa5e>
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4620      	mov	r0, r4
 8004c92:	f000 f927 	bl	8004ee4 <_Balloc>
 8004c96:	4605      	mov	r5, r0
 8004c98:	b928      	cbnz	r0, 8004ca6 <_dtoa_r+0x9be>
 8004c9a:	4b87      	ldr	r3, [pc, #540]	; (8004eb8 <_dtoa_r+0xbd0>)
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ca2:	f7ff bb3b 	b.w	800431c <_dtoa_r+0x34>
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	3202      	adds	r2, #2
 8004caa:	0092      	lsls	r2, r2, #2
 8004cac:	f107 010c 	add.w	r1, r7, #12
 8004cb0:	300c      	adds	r0, #12
 8004cb2:	f7fe fd1d 	bl	80036f0 <memcpy>
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f000 fb24 	bl	8005308 <__lshift>
 8004cc0:	9b01      	ldr	r3, [sp, #4]
 8004cc2:	f103 0901 	add.w	r9, r3, #1
 8004cc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004cca:	4413      	add	r3, r2
 8004ccc:	9305      	str	r3, [sp, #20]
 8004cce:	f00a 0301 	and.w	r3, sl, #1
 8004cd2:	46b8      	mov	r8, r7
 8004cd4:	9304      	str	r3, [sp, #16]
 8004cd6:	4607      	mov	r7, r0
 8004cd8:	4631      	mov	r1, r6
 8004cda:	ee18 0a10 	vmov	r0, s16
 8004cde:	f7ff fa77 	bl	80041d0 <quorem>
 8004ce2:	4641      	mov	r1, r8
 8004ce4:	9002      	str	r0, [sp, #8]
 8004ce6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004cea:	ee18 0a10 	vmov	r0, s16
 8004cee:	f000 fb7b 	bl	80053e8 <__mcmp>
 8004cf2:	463a      	mov	r2, r7
 8004cf4:	9003      	str	r0, [sp, #12]
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f000 fb91 	bl	8005420 <__mdiff>
 8004cfe:	68c2      	ldr	r2, [r0, #12]
 8004d00:	f109 3bff 	add.w	fp, r9, #4294967295
 8004d04:	4605      	mov	r5, r0
 8004d06:	bb02      	cbnz	r2, 8004d4a <_dtoa_r+0xa62>
 8004d08:	4601      	mov	r1, r0
 8004d0a:	ee18 0a10 	vmov	r0, s16
 8004d0e:	f000 fb6b 	bl	80053e8 <__mcmp>
 8004d12:	4602      	mov	r2, r0
 8004d14:	4629      	mov	r1, r5
 8004d16:	4620      	mov	r0, r4
 8004d18:	9207      	str	r2, [sp, #28]
 8004d1a:	f000 f923 	bl	8004f64 <_Bfree>
 8004d1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004d22:	ea43 0102 	orr.w	r1, r3, r2
 8004d26:	9b04      	ldr	r3, [sp, #16]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	464d      	mov	r5, r9
 8004d2c:	d10f      	bne.n	8004d4e <_dtoa_r+0xa66>
 8004d2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004d32:	d02a      	beq.n	8004d8a <_dtoa_r+0xaa2>
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	dd02      	ble.n	8004d40 <_dtoa_r+0xa58>
 8004d3a:	9b02      	ldr	r3, [sp, #8]
 8004d3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004d40:	f88b a000 	strb.w	sl, [fp]
 8004d44:	e775      	b.n	8004c32 <_dtoa_r+0x94a>
 8004d46:	4638      	mov	r0, r7
 8004d48:	e7ba      	b.n	8004cc0 <_dtoa_r+0x9d8>
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	e7e2      	b.n	8004d14 <_dtoa_r+0xa2c>
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	db04      	blt.n	8004d5e <_dtoa_r+0xa76>
 8004d54:	9906      	ldr	r1, [sp, #24]
 8004d56:	430b      	orrs	r3, r1
 8004d58:	9904      	ldr	r1, [sp, #16]
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	d122      	bne.n	8004da4 <_dtoa_r+0xabc>
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	ddee      	ble.n	8004d40 <_dtoa_r+0xa58>
 8004d62:	ee18 1a10 	vmov	r1, s16
 8004d66:	2201      	movs	r2, #1
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 facd 	bl	8005308 <__lshift>
 8004d6e:	4631      	mov	r1, r6
 8004d70:	ee08 0a10 	vmov	s16, r0
 8004d74:	f000 fb38 	bl	80053e8 <__mcmp>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	dc03      	bgt.n	8004d84 <_dtoa_r+0xa9c>
 8004d7c:	d1e0      	bne.n	8004d40 <_dtoa_r+0xa58>
 8004d7e:	f01a 0f01 	tst.w	sl, #1
 8004d82:	d0dd      	beq.n	8004d40 <_dtoa_r+0xa58>
 8004d84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004d88:	d1d7      	bne.n	8004d3a <_dtoa_r+0xa52>
 8004d8a:	2339      	movs	r3, #57	; 0x39
 8004d8c:	f88b 3000 	strb.w	r3, [fp]
 8004d90:	462b      	mov	r3, r5
 8004d92:	461d      	mov	r5, r3
 8004d94:	3b01      	subs	r3, #1
 8004d96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004d9a:	2a39      	cmp	r2, #57	; 0x39
 8004d9c:	d071      	beq.n	8004e82 <_dtoa_r+0xb9a>
 8004d9e:	3201      	adds	r2, #1
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	e746      	b.n	8004c32 <_dtoa_r+0x94a>
 8004da4:	2a00      	cmp	r2, #0
 8004da6:	dd07      	ble.n	8004db8 <_dtoa_r+0xad0>
 8004da8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004dac:	d0ed      	beq.n	8004d8a <_dtoa_r+0xaa2>
 8004dae:	f10a 0301 	add.w	r3, sl, #1
 8004db2:	f88b 3000 	strb.w	r3, [fp]
 8004db6:	e73c      	b.n	8004c32 <_dtoa_r+0x94a>
 8004db8:	9b05      	ldr	r3, [sp, #20]
 8004dba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004dbe:	4599      	cmp	r9, r3
 8004dc0:	d047      	beq.n	8004e52 <_dtoa_r+0xb6a>
 8004dc2:	ee18 1a10 	vmov	r1, s16
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	220a      	movs	r2, #10
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f000 f8ec 	bl	8004fa8 <__multadd>
 8004dd0:	45b8      	cmp	r8, r7
 8004dd2:	ee08 0a10 	vmov	s16, r0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	f04f 020a 	mov.w	r2, #10
 8004dde:	4641      	mov	r1, r8
 8004de0:	4620      	mov	r0, r4
 8004de2:	d106      	bne.n	8004df2 <_dtoa_r+0xb0a>
 8004de4:	f000 f8e0 	bl	8004fa8 <__multadd>
 8004de8:	4680      	mov	r8, r0
 8004dea:	4607      	mov	r7, r0
 8004dec:	f109 0901 	add.w	r9, r9, #1
 8004df0:	e772      	b.n	8004cd8 <_dtoa_r+0x9f0>
 8004df2:	f000 f8d9 	bl	8004fa8 <__multadd>
 8004df6:	4639      	mov	r1, r7
 8004df8:	4680      	mov	r8, r0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	220a      	movs	r2, #10
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f000 f8d2 	bl	8004fa8 <__multadd>
 8004e04:	4607      	mov	r7, r0
 8004e06:	e7f1      	b.n	8004dec <_dtoa_r+0xb04>
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	9302      	str	r3, [sp, #8]
 8004e0c:	9d01      	ldr	r5, [sp, #4]
 8004e0e:	ee18 0a10 	vmov	r0, s16
 8004e12:	4631      	mov	r1, r6
 8004e14:	f7ff f9dc 	bl	80041d0 <quorem>
 8004e18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004e1c:	9b01      	ldr	r3, [sp, #4]
 8004e1e:	f805 ab01 	strb.w	sl, [r5], #1
 8004e22:	1aea      	subs	r2, r5, r3
 8004e24:	9b02      	ldr	r3, [sp, #8]
 8004e26:	4293      	cmp	r3, r2
 8004e28:	dd09      	ble.n	8004e3e <_dtoa_r+0xb56>
 8004e2a:	ee18 1a10 	vmov	r1, s16
 8004e2e:	2300      	movs	r3, #0
 8004e30:	220a      	movs	r2, #10
 8004e32:	4620      	mov	r0, r4
 8004e34:	f000 f8b8 	bl	8004fa8 <__multadd>
 8004e38:	ee08 0a10 	vmov	s16, r0
 8004e3c:	e7e7      	b.n	8004e0e <_dtoa_r+0xb26>
 8004e3e:	9b02      	ldr	r3, [sp, #8]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bfc8      	it	gt
 8004e44:	461d      	movgt	r5, r3
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	bfd8      	it	le
 8004e4a:	2501      	movle	r5, #1
 8004e4c:	441d      	add	r5, r3
 8004e4e:	f04f 0800 	mov.w	r8, #0
 8004e52:	ee18 1a10 	vmov	r1, s16
 8004e56:	2201      	movs	r2, #1
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f000 fa55 	bl	8005308 <__lshift>
 8004e5e:	4631      	mov	r1, r6
 8004e60:	ee08 0a10 	vmov	s16, r0
 8004e64:	f000 fac0 	bl	80053e8 <__mcmp>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	dc91      	bgt.n	8004d90 <_dtoa_r+0xaa8>
 8004e6c:	d102      	bne.n	8004e74 <_dtoa_r+0xb8c>
 8004e6e:	f01a 0f01 	tst.w	sl, #1
 8004e72:	d18d      	bne.n	8004d90 <_dtoa_r+0xaa8>
 8004e74:	462b      	mov	r3, r5
 8004e76:	461d      	mov	r5, r3
 8004e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e7c:	2a30      	cmp	r2, #48	; 0x30
 8004e7e:	d0fa      	beq.n	8004e76 <_dtoa_r+0xb8e>
 8004e80:	e6d7      	b.n	8004c32 <_dtoa_r+0x94a>
 8004e82:	9a01      	ldr	r2, [sp, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d184      	bne.n	8004d92 <_dtoa_r+0xaaa>
 8004e88:	9b00      	ldr	r3, [sp, #0]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	2331      	movs	r3, #49	; 0x31
 8004e90:	7013      	strb	r3, [r2, #0]
 8004e92:	e6ce      	b.n	8004c32 <_dtoa_r+0x94a>
 8004e94:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <_dtoa_r+0xbd4>)
 8004e96:	f7ff ba95 	b.w	80043c4 <_dtoa_r+0xdc>
 8004e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f47f aa6e 	bne.w	800437e <_dtoa_r+0x96>
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <_dtoa_r+0xbd8>)
 8004ea4:	f7ff ba8e 	b.w	80043c4 <_dtoa_r+0xdc>
 8004ea8:	9b02      	ldr	r3, [sp, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	dcae      	bgt.n	8004e0c <_dtoa_r+0xb24>
 8004eae:	9b06      	ldr	r3, [sp, #24]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	f73f aea8 	bgt.w	8004c06 <_dtoa_r+0x91e>
 8004eb6:	e7a9      	b.n	8004e0c <_dtoa_r+0xb24>
 8004eb8:	08006b2f 	.word	0x08006b2f
 8004ebc:	08006a8c 	.word	0x08006a8c
 8004ec0:	08006ab0 	.word	0x08006ab0

08004ec4 <_localeconv_r>:
 8004ec4:	4800      	ldr	r0, [pc, #0]	; (8004ec8 <_localeconv_r+0x4>)
 8004ec6:	4770      	bx	lr
 8004ec8:	20000c18 	.word	0x20000c18

08004ecc <__malloc_lock>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	; (8004ed4 <__malloc_lock+0x8>)
 8004ece:	f000 bbd4 	b.w	800567a <__retarget_lock_acquire_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	20000e5c 	.word	0x20000e5c

08004ed8 <__malloc_unlock>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <__malloc_unlock+0x8>)
 8004eda:	f000 bbcf 	b.w	800567c <__retarget_lock_release_recursive>
 8004ede:	bf00      	nop
 8004ee0:	20000e5c 	.word	0x20000e5c

08004ee4 <_Balloc>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ee8:	4604      	mov	r4, r0
 8004eea:	460d      	mov	r5, r1
 8004eec:	b976      	cbnz	r6, 8004f0c <_Balloc+0x28>
 8004eee:	2010      	movs	r0, #16
 8004ef0:	f7fd f91c 	bl	800212c <__wrap_malloc>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6260      	str	r0, [r4, #36]	; 0x24
 8004ef8:	b920      	cbnz	r0, 8004f04 <_Balloc+0x20>
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <_Balloc+0x78>)
 8004efc:	4818      	ldr	r0, [pc, #96]	; (8004f60 <_Balloc+0x7c>)
 8004efe:	2166      	movs	r1, #102	; 0x66
 8004f00:	f000 fb8a 	bl	8005618 <__assert_func>
 8004f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f08:	6006      	str	r6, [r0, #0]
 8004f0a:	60c6      	str	r6, [r0, #12]
 8004f0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f0e:	68f3      	ldr	r3, [r6, #12]
 8004f10:	b183      	cbz	r3, 8004f34 <_Balloc+0x50>
 8004f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f1a:	b9b8      	cbnz	r0, 8004f4c <_Balloc+0x68>
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	fa01 f605 	lsl.w	r6, r1, r5
 8004f22:	1d72      	adds	r2, r6, #5
 8004f24:	0092      	lsls	r2, r2, #2
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 fb60 	bl	80055ec <_calloc_r>
 8004f2c:	b160      	cbz	r0, 8004f48 <_Balloc+0x64>
 8004f2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f32:	e00e      	b.n	8004f52 <_Balloc+0x6e>
 8004f34:	2221      	movs	r2, #33	; 0x21
 8004f36:	2104      	movs	r1, #4
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 fb57 	bl	80055ec <_calloc_r>
 8004f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f40:	60f0      	str	r0, [r6, #12]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e4      	bne.n	8004f12 <_Balloc+0x2e>
 8004f48:	2000      	movs	r0, #0
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	6802      	ldr	r2, [r0, #0]
 8004f4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f52:	2300      	movs	r3, #0
 8004f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f58:	e7f7      	b.n	8004f4a <_Balloc+0x66>
 8004f5a:	bf00      	nop
 8004f5c:	08006abd 	.word	0x08006abd
 8004f60:	08006b40 	.word	0x08006b40

08004f64 <_Bfree>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f68:	4605      	mov	r5, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	b976      	cbnz	r6, 8004f8c <_Bfree+0x28>
 8004f6e:	2010      	movs	r0, #16
 8004f70:	f7fd f8dc 	bl	800212c <__wrap_malloc>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6268      	str	r0, [r5, #36]	; 0x24
 8004f78:	b920      	cbnz	r0, 8004f84 <_Bfree+0x20>
 8004f7a:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <_Bfree+0x3c>)
 8004f7c:	4809      	ldr	r0, [pc, #36]	; (8004fa4 <_Bfree+0x40>)
 8004f7e:	218a      	movs	r1, #138	; 0x8a
 8004f80:	f000 fb4a 	bl	8005618 <__assert_func>
 8004f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f88:	6006      	str	r6, [r0, #0]
 8004f8a:	60c6      	str	r6, [r0, #12]
 8004f8c:	b13c      	cbz	r4, 8004f9e <_Bfree+0x3a>
 8004f8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f90:	6862      	ldr	r2, [r4, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f98:	6021      	str	r1, [r4, #0]
 8004f9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	08006abd 	.word	0x08006abd
 8004fa4:	08006b40 	.word	0x08006b40

08004fa8 <__multadd>:
 8004fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fac:	690d      	ldr	r5, [r1, #16]
 8004fae:	4607      	mov	r7, r0
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	461e      	mov	r6, r3
 8004fb4:	f101 0c14 	add.w	ip, r1, #20
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f8dc 3000 	ldr.w	r3, [ip]
 8004fbe:	b299      	uxth	r1, r3
 8004fc0:	fb02 6101 	mla	r1, r2, r1, r6
 8004fc4:	0c1e      	lsrs	r6, r3, #16
 8004fc6:	0c0b      	lsrs	r3, r1, #16
 8004fc8:	fb02 3306 	mla	r3, r2, r6, r3
 8004fcc:	b289      	uxth	r1, r1
 8004fce:	3001      	adds	r0, #1
 8004fd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fd4:	4285      	cmp	r5, r0
 8004fd6:	f84c 1b04 	str.w	r1, [ip], #4
 8004fda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004fde:	dcec      	bgt.n	8004fba <__multadd+0x12>
 8004fe0:	b30e      	cbz	r6, 8005026 <__multadd+0x7e>
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	42ab      	cmp	r3, r5
 8004fe6:	dc19      	bgt.n	800501c <__multadd+0x74>
 8004fe8:	6861      	ldr	r1, [r4, #4]
 8004fea:	4638      	mov	r0, r7
 8004fec:	3101      	adds	r1, #1
 8004fee:	f7ff ff79 	bl	8004ee4 <_Balloc>
 8004ff2:	4680      	mov	r8, r0
 8004ff4:	b928      	cbnz	r0, 8005002 <__multadd+0x5a>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <__multadd+0x84>)
 8004ffa:	480d      	ldr	r0, [pc, #52]	; (8005030 <__multadd+0x88>)
 8004ffc:	21b5      	movs	r1, #181	; 0xb5
 8004ffe:	f000 fb0b 	bl	8005618 <__assert_func>
 8005002:	6922      	ldr	r2, [r4, #16]
 8005004:	3202      	adds	r2, #2
 8005006:	f104 010c 	add.w	r1, r4, #12
 800500a:	0092      	lsls	r2, r2, #2
 800500c:	300c      	adds	r0, #12
 800500e:	f7fe fb6f 	bl	80036f0 <memcpy>
 8005012:	4621      	mov	r1, r4
 8005014:	4638      	mov	r0, r7
 8005016:	f7ff ffa5 	bl	8004f64 <_Bfree>
 800501a:	4644      	mov	r4, r8
 800501c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005020:	3501      	adds	r5, #1
 8005022:	615e      	str	r6, [r3, #20]
 8005024:	6125      	str	r5, [r4, #16]
 8005026:	4620      	mov	r0, r4
 8005028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800502c:	08006b2f 	.word	0x08006b2f
 8005030:	08006b40 	.word	0x08006b40

08005034 <__hi0bits>:
 8005034:	0c03      	lsrs	r3, r0, #16
 8005036:	041b      	lsls	r3, r3, #16
 8005038:	b9d3      	cbnz	r3, 8005070 <__hi0bits+0x3c>
 800503a:	0400      	lsls	r0, r0, #16
 800503c:	2310      	movs	r3, #16
 800503e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005042:	bf04      	itt	eq
 8005044:	0200      	lsleq	r0, r0, #8
 8005046:	3308      	addeq	r3, #8
 8005048:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800504c:	bf04      	itt	eq
 800504e:	0100      	lsleq	r0, r0, #4
 8005050:	3304      	addeq	r3, #4
 8005052:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005056:	bf04      	itt	eq
 8005058:	0080      	lsleq	r0, r0, #2
 800505a:	3302      	addeq	r3, #2
 800505c:	2800      	cmp	r0, #0
 800505e:	db05      	blt.n	800506c <__hi0bits+0x38>
 8005060:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005064:	f103 0301 	add.w	r3, r3, #1
 8005068:	bf08      	it	eq
 800506a:	2320      	moveq	r3, #32
 800506c:	4618      	mov	r0, r3
 800506e:	4770      	bx	lr
 8005070:	2300      	movs	r3, #0
 8005072:	e7e4      	b.n	800503e <__hi0bits+0xa>

08005074 <__lo0bits>:
 8005074:	6803      	ldr	r3, [r0, #0]
 8005076:	f013 0207 	ands.w	r2, r3, #7
 800507a:	4601      	mov	r1, r0
 800507c:	d00b      	beq.n	8005096 <__lo0bits+0x22>
 800507e:	07da      	lsls	r2, r3, #31
 8005080:	d423      	bmi.n	80050ca <__lo0bits+0x56>
 8005082:	0798      	lsls	r0, r3, #30
 8005084:	bf49      	itett	mi
 8005086:	085b      	lsrmi	r3, r3, #1
 8005088:	089b      	lsrpl	r3, r3, #2
 800508a:	2001      	movmi	r0, #1
 800508c:	600b      	strmi	r3, [r1, #0]
 800508e:	bf5c      	itt	pl
 8005090:	600b      	strpl	r3, [r1, #0]
 8005092:	2002      	movpl	r0, #2
 8005094:	4770      	bx	lr
 8005096:	b298      	uxth	r0, r3
 8005098:	b9a8      	cbnz	r0, 80050c6 <__lo0bits+0x52>
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	2010      	movs	r0, #16
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	b90a      	cbnz	r2, 80050a6 <__lo0bits+0x32>
 80050a2:	3008      	adds	r0, #8
 80050a4:	0a1b      	lsrs	r3, r3, #8
 80050a6:	071a      	lsls	r2, r3, #28
 80050a8:	bf04      	itt	eq
 80050aa:	091b      	lsreq	r3, r3, #4
 80050ac:	3004      	addeq	r0, #4
 80050ae:	079a      	lsls	r2, r3, #30
 80050b0:	bf04      	itt	eq
 80050b2:	089b      	lsreq	r3, r3, #2
 80050b4:	3002      	addeq	r0, #2
 80050b6:	07da      	lsls	r2, r3, #31
 80050b8:	d403      	bmi.n	80050c2 <__lo0bits+0x4e>
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	f100 0001 	add.w	r0, r0, #1
 80050c0:	d005      	beq.n	80050ce <__lo0bits+0x5a>
 80050c2:	600b      	str	r3, [r1, #0]
 80050c4:	4770      	bx	lr
 80050c6:	4610      	mov	r0, r2
 80050c8:	e7e9      	b.n	800509e <__lo0bits+0x2a>
 80050ca:	2000      	movs	r0, #0
 80050cc:	4770      	bx	lr
 80050ce:	2020      	movs	r0, #32
 80050d0:	4770      	bx	lr
	...

080050d4 <__i2b>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	460c      	mov	r4, r1
 80050d8:	2101      	movs	r1, #1
 80050da:	f7ff ff03 	bl	8004ee4 <_Balloc>
 80050de:	4602      	mov	r2, r0
 80050e0:	b928      	cbnz	r0, 80050ee <__i2b+0x1a>
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <__i2b+0x24>)
 80050e4:	4805      	ldr	r0, [pc, #20]	; (80050fc <__i2b+0x28>)
 80050e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80050ea:	f000 fa95 	bl	8005618 <__assert_func>
 80050ee:	2301      	movs	r3, #1
 80050f0:	6144      	str	r4, [r0, #20]
 80050f2:	6103      	str	r3, [r0, #16]
 80050f4:	bd10      	pop	{r4, pc}
 80050f6:	bf00      	nop
 80050f8:	08006b2f 	.word	0x08006b2f
 80050fc:	08006b40 	.word	0x08006b40

08005100 <__multiply>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	4691      	mov	r9, r2
 8005106:	690a      	ldr	r2, [r1, #16]
 8005108:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800510c:	429a      	cmp	r2, r3
 800510e:	bfb8      	it	lt
 8005110:	460b      	movlt	r3, r1
 8005112:	460c      	mov	r4, r1
 8005114:	bfbc      	itt	lt
 8005116:	464c      	movlt	r4, r9
 8005118:	4699      	movlt	r9, r3
 800511a:	6927      	ldr	r7, [r4, #16]
 800511c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005120:	68a3      	ldr	r3, [r4, #8]
 8005122:	6861      	ldr	r1, [r4, #4]
 8005124:	eb07 060a 	add.w	r6, r7, sl
 8005128:	42b3      	cmp	r3, r6
 800512a:	b085      	sub	sp, #20
 800512c:	bfb8      	it	lt
 800512e:	3101      	addlt	r1, #1
 8005130:	f7ff fed8 	bl	8004ee4 <_Balloc>
 8005134:	b930      	cbnz	r0, 8005144 <__multiply+0x44>
 8005136:	4602      	mov	r2, r0
 8005138:	4b44      	ldr	r3, [pc, #272]	; (800524c <__multiply+0x14c>)
 800513a:	4845      	ldr	r0, [pc, #276]	; (8005250 <__multiply+0x150>)
 800513c:	f240 115d 	movw	r1, #349	; 0x15d
 8005140:	f000 fa6a 	bl	8005618 <__assert_func>
 8005144:	f100 0514 	add.w	r5, r0, #20
 8005148:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800514c:	462b      	mov	r3, r5
 800514e:	2200      	movs	r2, #0
 8005150:	4543      	cmp	r3, r8
 8005152:	d321      	bcc.n	8005198 <__multiply+0x98>
 8005154:	f104 0314 	add.w	r3, r4, #20
 8005158:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800515c:	f109 0314 	add.w	r3, r9, #20
 8005160:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005164:	9202      	str	r2, [sp, #8]
 8005166:	1b3a      	subs	r2, r7, r4
 8005168:	3a15      	subs	r2, #21
 800516a:	f022 0203 	bic.w	r2, r2, #3
 800516e:	3204      	adds	r2, #4
 8005170:	f104 0115 	add.w	r1, r4, #21
 8005174:	428f      	cmp	r7, r1
 8005176:	bf38      	it	cc
 8005178:	2204      	movcc	r2, #4
 800517a:	9201      	str	r2, [sp, #4]
 800517c:	9a02      	ldr	r2, [sp, #8]
 800517e:	9303      	str	r3, [sp, #12]
 8005180:	429a      	cmp	r2, r3
 8005182:	d80c      	bhi.n	800519e <__multiply+0x9e>
 8005184:	2e00      	cmp	r6, #0
 8005186:	dd03      	ble.n	8005190 <__multiply+0x90>
 8005188:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800518c:	2b00      	cmp	r3, #0
 800518e:	d05a      	beq.n	8005246 <__multiply+0x146>
 8005190:	6106      	str	r6, [r0, #16]
 8005192:	b005      	add	sp, #20
 8005194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005198:	f843 2b04 	str.w	r2, [r3], #4
 800519c:	e7d8      	b.n	8005150 <__multiply+0x50>
 800519e:	f8b3 a000 	ldrh.w	sl, [r3]
 80051a2:	f1ba 0f00 	cmp.w	sl, #0
 80051a6:	d024      	beq.n	80051f2 <__multiply+0xf2>
 80051a8:	f104 0e14 	add.w	lr, r4, #20
 80051ac:	46a9      	mov	r9, r5
 80051ae:	f04f 0c00 	mov.w	ip, #0
 80051b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80051b6:	f8d9 1000 	ldr.w	r1, [r9]
 80051ba:	fa1f fb82 	uxth.w	fp, r2
 80051be:	b289      	uxth	r1, r1
 80051c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80051c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80051c8:	f8d9 2000 	ldr.w	r2, [r9]
 80051cc:	4461      	add	r1, ip
 80051ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80051d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80051da:	b289      	uxth	r1, r1
 80051dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051e0:	4577      	cmp	r7, lr
 80051e2:	f849 1b04 	str.w	r1, [r9], #4
 80051e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051ea:	d8e2      	bhi.n	80051b2 <__multiply+0xb2>
 80051ec:	9a01      	ldr	r2, [sp, #4]
 80051ee:	f845 c002 	str.w	ip, [r5, r2]
 80051f2:	9a03      	ldr	r2, [sp, #12]
 80051f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80051f8:	3304      	adds	r3, #4
 80051fa:	f1b9 0f00 	cmp.w	r9, #0
 80051fe:	d020      	beq.n	8005242 <__multiply+0x142>
 8005200:	6829      	ldr	r1, [r5, #0]
 8005202:	f104 0c14 	add.w	ip, r4, #20
 8005206:	46ae      	mov	lr, r5
 8005208:	f04f 0a00 	mov.w	sl, #0
 800520c:	f8bc b000 	ldrh.w	fp, [ip]
 8005210:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005214:	fb09 220b 	mla	r2, r9, fp, r2
 8005218:	4492      	add	sl, r2
 800521a:	b289      	uxth	r1, r1
 800521c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005220:	f84e 1b04 	str.w	r1, [lr], #4
 8005224:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005228:	f8be 1000 	ldrh.w	r1, [lr]
 800522c:	0c12      	lsrs	r2, r2, #16
 800522e:	fb09 1102 	mla	r1, r9, r2, r1
 8005232:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005236:	4567      	cmp	r7, ip
 8005238:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800523c:	d8e6      	bhi.n	800520c <__multiply+0x10c>
 800523e:	9a01      	ldr	r2, [sp, #4]
 8005240:	50a9      	str	r1, [r5, r2]
 8005242:	3504      	adds	r5, #4
 8005244:	e79a      	b.n	800517c <__multiply+0x7c>
 8005246:	3e01      	subs	r6, #1
 8005248:	e79c      	b.n	8005184 <__multiply+0x84>
 800524a:	bf00      	nop
 800524c:	08006b2f 	.word	0x08006b2f
 8005250:	08006b40 	.word	0x08006b40

08005254 <__pow5mult>:
 8005254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005258:	4615      	mov	r5, r2
 800525a:	f012 0203 	ands.w	r2, r2, #3
 800525e:	4606      	mov	r6, r0
 8005260:	460f      	mov	r7, r1
 8005262:	d007      	beq.n	8005274 <__pow5mult+0x20>
 8005264:	4c25      	ldr	r4, [pc, #148]	; (80052fc <__pow5mult+0xa8>)
 8005266:	3a01      	subs	r2, #1
 8005268:	2300      	movs	r3, #0
 800526a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800526e:	f7ff fe9b 	bl	8004fa8 <__multadd>
 8005272:	4607      	mov	r7, r0
 8005274:	10ad      	asrs	r5, r5, #2
 8005276:	d03d      	beq.n	80052f4 <__pow5mult+0xa0>
 8005278:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800527a:	b97c      	cbnz	r4, 800529c <__pow5mult+0x48>
 800527c:	2010      	movs	r0, #16
 800527e:	f7fc ff55 	bl	800212c <__wrap_malloc>
 8005282:	4602      	mov	r2, r0
 8005284:	6270      	str	r0, [r6, #36]	; 0x24
 8005286:	b928      	cbnz	r0, 8005294 <__pow5mult+0x40>
 8005288:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <__pow5mult+0xac>)
 800528a:	481e      	ldr	r0, [pc, #120]	; (8005304 <__pow5mult+0xb0>)
 800528c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005290:	f000 f9c2 	bl	8005618 <__assert_func>
 8005294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005298:	6004      	str	r4, [r0, #0]
 800529a:	60c4      	str	r4, [r0, #12]
 800529c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80052a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80052a4:	b94c      	cbnz	r4, 80052ba <__pow5mult+0x66>
 80052a6:	f240 2171 	movw	r1, #625	; 0x271
 80052aa:	4630      	mov	r0, r6
 80052ac:	f7ff ff12 	bl	80050d4 <__i2b>
 80052b0:	2300      	movs	r3, #0
 80052b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80052b6:	4604      	mov	r4, r0
 80052b8:	6003      	str	r3, [r0, #0]
 80052ba:	f04f 0900 	mov.w	r9, #0
 80052be:	07eb      	lsls	r3, r5, #31
 80052c0:	d50a      	bpl.n	80052d8 <__pow5mult+0x84>
 80052c2:	4639      	mov	r1, r7
 80052c4:	4622      	mov	r2, r4
 80052c6:	4630      	mov	r0, r6
 80052c8:	f7ff ff1a 	bl	8005100 <__multiply>
 80052cc:	4639      	mov	r1, r7
 80052ce:	4680      	mov	r8, r0
 80052d0:	4630      	mov	r0, r6
 80052d2:	f7ff fe47 	bl	8004f64 <_Bfree>
 80052d6:	4647      	mov	r7, r8
 80052d8:	106d      	asrs	r5, r5, #1
 80052da:	d00b      	beq.n	80052f4 <__pow5mult+0xa0>
 80052dc:	6820      	ldr	r0, [r4, #0]
 80052de:	b938      	cbnz	r0, 80052f0 <__pow5mult+0x9c>
 80052e0:	4622      	mov	r2, r4
 80052e2:	4621      	mov	r1, r4
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7ff ff0b 	bl	8005100 <__multiply>
 80052ea:	6020      	str	r0, [r4, #0]
 80052ec:	f8c0 9000 	str.w	r9, [r0]
 80052f0:	4604      	mov	r4, r0
 80052f2:	e7e4      	b.n	80052be <__pow5mult+0x6a>
 80052f4:	4638      	mov	r0, r7
 80052f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052fa:	bf00      	nop
 80052fc:	08006c90 	.word	0x08006c90
 8005300:	08006abd 	.word	0x08006abd
 8005304:	08006b40 	.word	0x08006b40

08005308 <__lshift>:
 8005308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800530c:	460c      	mov	r4, r1
 800530e:	6849      	ldr	r1, [r1, #4]
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005316:	68a3      	ldr	r3, [r4, #8]
 8005318:	4607      	mov	r7, r0
 800531a:	4691      	mov	r9, r2
 800531c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005320:	f108 0601 	add.w	r6, r8, #1
 8005324:	42b3      	cmp	r3, r6
 8005326:	db0b      	blt.n	8005340 <__lshift+0x38>
 8005328:	4638      	mov	r0, r7
 800532a:	f7ff fddb 	bl	8004ee4 <_Balloc>
 800532e:	4605      	mov	r5, r0
 8005330:	b948      	cbnz	r0, 8005346 <__lshift+0x3e>
 8005332:	4602      	mov	r2, r0
 8005334:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <__lshift+0xd8>)
 8005336:	482b      	ldr	r0, [pc, #172]	; (80053e4 <__lshift+0xdc>)
 8005338:	f240 11d9 	movw	r1, #473	; 0x1d9
 800533c:	f000 f96c 	bl	8005618 <__assert_func>
 8005340:	3101      	adds	r1, #1
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	e7ee      	b.n	8005324 <__lshift+0x1c>
 8005346:	2300      	movs	r3, #0
 8005348:	f100 0114 	add.w	r1, r0, #20
 800534c:	f100 0210 	add.w	r2, r0, #16
 8005350:	4618      	mov	r0, r3
 8005352:	4553      	cmp	r3, sl
 8005354:	db37      	blt.n	80053c6 <__lshift+0xbe>
 8005356:	6920      	ldr	r0, [r4, #16]
 8005358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800535c:	f104 0314 	add.w	r3, r4, #20
 8005360:	f019 091f 	ands.w	r9, r9, #31
 8005364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005368:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800536c:	d02f      	beq.n	80053ce <__lshift+0xc6>
 800536e:	f1c9 0e20 	rsb	lr, r9, #32
 8005372:	468a      	mov	sl, r1
 8005374:	f04f 0c00 	mov.w	ip, #0
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	fa02 f209 	lsl.w	r2, r2, r9
 800537e:	ea42 020c 	orr.w	r2, r2, ip
 8005382:	f84a 2b04 	str.w	r2, [sl], #4
 8005386:	f853 2b04 	ldr.w	r2, [r3], #4
 800538a:	4298      	cmp	r0, r3
 800538c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005390:	d8f2      	bhi.n	8005378 <__lshift+0x70>
 8005392:	1b03      	subs	r3, r0, r4
 8005394:	3b15      	subs	r3, #21
 8005396:	f023 0303 	bic.w	r3, r3, #3
 800539a:	3304      	adds	r3, #4
 800539c:	f104 0215 	add.w	r2, r4, #21
 80053a0:	4290      	cmp	r0, r2
 80053a2:	bf38      	it	cc
 80053a4:	2304      	movcc	r3, #4
 80053a6:	f841 c003 	str.w	ip, [r1, r3]
 80053aa:	f1bc 0f00 	cmp.w	ip, #0
 80053ae:	d001      	beq.n	80053b4 <__lshift+0xac>
 80053b0:	f108 0602 	add.w	r6, r8, #2
 80053b4:	3e01      	subs	r6, #1
 80053b6:	4638      	mov	r0, r7
 80053b8:	612e      	str	r6, [r5, #16]
 80053ba:	4621      	mov	r1, r4
 80053bc:	f7ff fdd2 	bl	8004f64 <_Bfree>
 80053c0:	4628      	mov	r0, r5
 80053c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80053ca:	3301      	adds	r3, #1
 80053cc:	e7c1      	b.n	8005352 <__lshift+0x4a>
 80053ce:	3904      	subs	r1, #4
 80053d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80053d8:	4298      	cmp	r0, r3
 80053da:	d8f9      	bhi.n	80053d0 <__lshift+0xc8>
 80053dc:	e7ea      	b.n	80053b4 <__lshift+0xac>
 80053de:	bf00      	nop
 80053e0:	08006b2f 	.word	0x08006b2f
 80053e4:	08006b40 	.word	0x08006b40

080053e8 <__mcmp>:
 80053e8:	b530      	push	{r4, r5, lr}
 80053ea:	6902      	ldr	r2, [r0, #16]
 80053ec:	690c      	ldr	r4, [r1, #16]
 80053ee:	1b12      	subs	r2, r2, r4
 80053f0:	d10e      	bne.n	8005410 <__mcmp+0x28>
 80053f2:	f100 0314 	add.w	r3, r0, #20
 80053f6:	3114      	adds	r1, #20
 80053f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80053fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005400:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005404:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005408:	42a5      	cmp	r5, r4
 800540a:	d003      	beq.n	8005414 <__mcmp+0x2c>
 800540c:	d305      	bcc.n	800541a <__mcmp+0x32>
 800540e:	2201      	movs	r2, #1
 8005410:	4610      	mov	r0, r2
 8005412:	bd30      	pop	{r4, r5, pc}
 8005414:	4283      	cmp	r3, r0
 8005416:	d3f3      	bcc.n	8005400 <__mcmp+0x18>
 8005418:	e7fa      	b.n	8005410 <__mcmp+0x28>
 800541a:	f04f 32ff 	mov.w	r2, #4294967295
 800541e:	e7f7      	b.n	8005410 <__mcmp+0x28>

08005420 <__mdiff>:
 8005420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005424:	460c      	mov	r4, r1
 8005426:	4606      	mov	r6, r0
 8005428:	4611      	mov	r1, r2
 800542a:	4620      	mov	r0, r4
 800542c:	4690      	mov	r8, r2
 800542e:	f7ff ffdb 	bl	80053e8 <__mcmp>
 8005432:	1e05      	subs	r5, r0, #0
 8005434:	d110      	bne.n	8005458 <__mdiff+0x38>
 8005436:	4629      	mov	r1, r5
 8005438:	4630      	mov	r0, r6
 800543a:	f7ff fd53 	bl	8004ee4 <_Balloc>
 800543e:	b930      	cbnz	r0, 800544e <__mdiff+0x2e>
 8005440:	4b3a      	ldr	r3, [pc, #232]	; (800552c <__mdiff+0x10c>)
 8005442:	4602      	mov	r2, r0
 8005444:	f240 2132 	movw	r1, #562	; 0x232
 8005448:	4839      	ldr	r0, [pc, #228]	; (8005530 <__mdiff+0x110>)
 800544a:	f000 f8e5 	bl	8005618 <__assert_func>
 800544e:	2301      	movs	r3, #1
 8005450:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	bfa4      	itt	ge
 800545a:	4643      	movge	r3, r8
 800545c:	46a0      	movge	r8, r4
 800545e:	4630      	mov	r0, r6
 8005460:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005464:	bfa6      	itte	ge
 8005466:	461c      	movge	r4, r3
 8005468:	2500      	movge	r5, #0
 800546a:	2501      	movlt	r5, #1
 800546c:	f7ff fd3a 	bl	8004ee4 <_Balloc>
 8005470:	b920      	cbnz	r0, 800547c <__mdiff+0x5c>
 8005472:	4b2e      	ldr	r3, [pc, #184]	; (800552c <__mdiff+0x10c>)
 8005474:	4602      	mov	r2, r0
 8005476:	f44f 7110 	mov.w	r1, #576	; 0x240
 800547a:	e7e5      	b.n	8005448 <__mdiff+0x28>
 800547c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005480:	6926      	ldr	r6, [r4, #16]
 8005482:	60c5      	str	r5, [r0, #12]
 8005484:	f104 0914 	add.w	r9, r4, #20
 8005488:	f108 0514 	add.w	r5, r8, #20
 800548c:	f100 0e14 	add.w	lr, r0, #20
 8005490:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005494:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005498:	f108 0210 	add.w	r2, r8, #16
 800549c:	46f2      	mov	sl, lr
 800549e:	2100      	movs	r1, #0
 80054a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80054a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80054a8:	fa1f f883 	uxth.w	r8, r3
 80054ac:	fa11 f18b 	uxtah	r1, r1, fp
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	eba1 0808 	sub.w	r8, r1, r8
 80054b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80054ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80054be:	fa1f f888 	uxth.w	r8, r8
 80054c2:	1419      	asrs	r1, r3, #16
 80054c4:	454e      	cmp	r6, r9
 80054c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80054ca:	f84a 3b04 	str.w	r3, [sl], #4
 80054ce:	d8e7      	bhi.n	80054a0 <__mdiff+0x80>
 80054d0:	1b33      	subs	r3, r6, r4
 80054d2:	3b15      	subs	r3, #21
 80054d4:	f023 0303 	bic.w	r3, r3, #3
 80054d8:	3304      	adds	r3, #4
 80054da:	3415      	adds	r4, #21
 80054dc:	42a6      	cmp	r6, r4
 80054de:	bf38      	it	cc
 80054e0:	2304      	movcc	r3, #4
 80054e2:	441d      	add	r5, r3
 80054e4:	4473      	add	r3, lr
 80054e6:	469e      	mov	lr, r3
 80054e8:	462e      	mov	r6, r5
 80054ea:	4566      	cmp	r6, ip
 80054ec:	d30e      	bcc.n	800550c <__mdiff+0xec>
 80054ee:	f10c 0203 	add.w	r2, ip, #3
 80054f2:	1b52      	subs	r2, r2, r5
 80054f4:	f022 0203 	bic.w	r2, r2, #3
 80054f8:	3d03      	subs	r5, #3
 80054fa:	45ac      	cmp	ip, r5
 80054fc:	bf38      	it	cc
 80054fe:	2200      	movcc	r2, #0
 8005500:	441a      	add	r2, r3
 8005502:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005506:	b17b      	cbz	r3, 8005528 <__mdiff+0x108>
 8005508:	6107      	str	r7, [r0, #16]
 800550a:	e7a3      	b.n	8005454 <__mdiff+0x34>
 800550c:	f856 8b04 	ldr.w	r8, [r6], #4
 8005510:	fa11 f288 	uxtah	r2, r1, r8
 8005514:	1414      	asrs	r4, r2, #16
 8005516:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800551a:	b292      	uxth	r2, r2
 800551c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005520:	f84e 2b04 	str.w	r2, [lr], #4
 8005524:	1421      	asrs	r1, r4, #16
 8005526:	e7e0      	b.n	80054ea <__mdiff+0xca>
 8005528:	3f01      	subs	r7, #1
 800552a:	e7ea      	b.n	8005502 <__mdiff+0xe2>
 800552c:	08006b2f 	.word	0x08006b2f
 8005530:	08006b40 	.word	0x08006b40

08005534 <__d2b>:
 8005534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005538:	4689      	mov	r9, r1
 800553a:	2101      	movs	r1, #1
 800553c:	ec57 6b10 	vmov	r6, r7, d0
 8005540:	4690      	mov	r8, r2
 8005542:	f7ff fccf 	bl	8004ee4 <_Balloc>
 8005546:	4604      	mov	r4, r0
 8005548:	b930      	cbnz	r0, 8005558 <__d2b+0x24>
 800554a:	4602      	mov	r2, r0
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <__d2b+0xb0>)
 800554e:	4826      	ldr	r0, [pc, #152]	; (80055e8 <__d2b+0xb4>)
 8005550:	f240 310a 	movw	r1, #778	; 0x30a
 8005554:	f000 f860 	bl	8005618 <__assert_func>
 8005558:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800555c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005560:	bb35      	cbnz	r5, 80055b0 <__d2b+0x7c>
 8005562:	2e00      	cmp	r6, #0
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	d028      	beq.n	80055ba <__d2b+0x86>
 8005568:	4668      	mov	r0, sp
 800556a:	9600      	str	r6, [sp, #0]
 800556c:	f7ff fd82 	bl	8005074 <__lo0bits>
 8005570:	9900      	ldr	r1, [sp, #0]
 8005572:	b300      	cbz	r0, 80055b6 <__d2b+0x82>
 8005574:	9a01      	ldr	r2, [sp, #4]
 8005576:	f1c0 0320 	rsb	r3, r0, #32
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	430b      	orrs	r3, r1
 8005580:	40c2      	lsrs	r2, r0
 8005582:	6163      	str	r3, [r4, #20]
 8005584:	9201      	str	r2, [sp, #4]
 8005586:	9b01      	ldr	r3, [sp, #4]
 8005588:	61a3      	str	r3, [r4, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf14      	ite	ne
 800558e:	2202      	movne	r2, #2
 8005590:	2201      	moveq	r2, #1
 8005592:	6122      	str	r2, [r4, #16]
 8005594:	b1d5      	cbz	r5, 80055cc <__d2b+0x98>
 8005596:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800559a:	4405      	add	r5, r0
 800559c:	f8c9 5000 	str.w	r5, [r9]
 80055a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80055a4:	f8c8 0000 	str.w	r0, [r8]
 80055a8:	4620      	mov	r0, r4
 80055aa:	b003      	add	sp, #12
 80055ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055b4:	e7d5      	b.n	8005562 <__d2b+0x2e>
 80055b6:	6161      	str	r1, [r4, #20]
 80055b8:	e7e5      	b.n	8005586 <__d2b+0x52>
 80055ba:	a801      	add	r0, sp, #4
 80055bc:	f7ff fd5a 	bl	8005074 <__lo0bits>
 80055c0:	9b01      	ldr	r3, [sp, #4]
 80055c2:	6163      	str	r3, [r4, #20]
 80055c4:	2201      	movs	r2, #1
 80055c6:	6122      	str	r2, [r4, #16]
 80055c8:	3020      	adds	r0, #32
 80055ca:	e7e3      	b.n	8005594 <__d2b+0x60>
 80055cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055d4:	f8c9 0000 	str.w	r0, [r9]
 80055d8:	6918      	ldr	r0, [r3, #16]
 80055da:	f7ff fd2b 	bl	8005034 <__hi0bits>
 80055de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80055e2:	e7df      	b.n	80055a4 <__d2b+0x70>
 80055e4:	08006b2f 	.word	0x08006b2f
 80055e8:	08006b40 	.word	0x08006b40

080055ec <_calloc_r>:
 80055ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ee:	fba1 2402 	umull	r2, r4, r1, r2
 80055f2:	b94c      	cbnz	r4, 8005608 <_calloc_r+0x1c>
 80055f4:	4611      	mov	r1, r2
 80055f6:	9201      	str	r2, [sp, #4]
 80055f8:	f7fe f8fc 	bl	80037f4 <_malloc_r>
 80055fc:	9a01      	ldr	r2, [sp, #4]
 80055fe:	4605      	mov	r5, r0
 8005600:	b930      	cbnz	r0, 8005610 <_calloc_r+0x24>
 8005602:	4628      	mov	r0, r5
 8005604:	b003      	add	sp, #12
 8005606:	bd30      	pop	{r4, r5, pc}
 8005608:	220c      	movs	r2, #12
 800560a:	6002      	str	r2, [r0, #0]
 800560c:	2500      	movs	r5, #0
 800560e:	e7f8      	b.n	8005602 <_calloc_r+0x16>
 8005610:	4621      	mov	r1, r4
 8005612:	f7fe f87b 	bl	800370c <memset>
 8005616:	e7f4      	b.n	8005602 <_calloc_r+0x16>

08005618 <__assert_func>:
 8005618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800561a:	4614      	mov	r4, r2
 800561c:	461a      	mov	r2, r3
 800561e:	4b09      	ldr	r3, [pc, #36]	; (8005644 <__assert_func+0x2c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4605      	mov	r5, r0
 8005624:	68d8      	ldr	r0, [r3, #12]
 8005626:	b14c      	cbz	r4, 800563c <__assert_func+0x24>
 8005628:	4b07      	ldr	r3, [pc, #28]	; (8005648 <__assert_func+0x30>)
 800562a:	9100      	str	r1, [sp, #0]
 800562c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005630:	4906      	ldr	r1, [pc, #24]	; (800564c <__assert_func+0x34>)
 8005632:	462b      	mov	r3, r5
 8005634:	f000 f80e 	bl	8005654 <fiprintf>
 8005638:	f000 fa5a 	bl	8005af0 <abort>
 800563c:	4b04      	ldr	r3, [pc, #16]	; (8005650 <__assert_func+0x38>)
 800563e:	461c      	mov	r4, r3
 8005640:	e7f3      	b.n	800562a <__assert_func+0x12>
 8005642:	bf00      	nop
 8005644:	20000ac4 	.word	0x20000ac4
 8005648:	08006c9c 	.word	0x08006c9c
 800564c:	08006ca9 	.word	0x08006ca9
 8005650:	08006cd7 	.word	0x08006cd7

08005654 <fiprintf>:
 8005654:	b40e      	push	{r1, r2, r3}
 8005656:	b503      	push	{r0, r1, lr}
 8005658:	4601      	mov	r1, r0
 800565a:	ab03      	add	r3, sp, #12
 800565c:	4805      	ldr	r0, [pc, #20]	; (8005674 <fiprintf+0x20>)
 800565e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005662:	6800      	ldr	r0, [r0, #0]
 8005664:	9301      	str	r3, [sp, #4]
 8005666:	f000 f845 	bl	80056f4 <_vfiprintf_r>
 800566a:	b002      	add	sp, #8
 800566c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005670:	b003      	add	sp, #12
 8005672:	4770      	bx	lr
 8005674:	20000ac4 	.word	0x20000ac4

08005678 <__retarget_lock_init_recursive>:
 8005678:	4770      	bx	lr

0800567a <__retarget_lock_acquire_recursive>:
 800567a:	4770      	bx	lr

0800567c <__retarget_lock_release_recursive>:
 800567c:	4770      	bx	lr

0800567e <__ascii_mbtowc>:
 800567e:	b082      	sub	sp, #8
 8005680:	b901      	cbnz	r1, 8005684 <__ascii_mbtowc+0x6>
 8005682:	a901      	add	r1, sp, #4
 8005684:	b142      	cbz	r2, 8005698 <__ascii_mbtowc+0x1a>
 8005686:	b14b      	cbz	r3, 800569c <__ascii_mbtowc+0x1e>
 8005688:	7813      	ldrb	r3, [r2, #0]
 800568a:	600b      	str	r3, [r1, #0]
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	1e10      	subs	r0, r2, #0
 8005690:	bf18      	it	ne
 8005692:	2001      	movne	r0, #1
 8005694:	b002      	add	sp, #8
 8005696:	4770      	bx	lr
 8005698:	4610      	mov	r0, r2
 800569a:	e7fb      	b.n	8005694 <__ascii_mbtowc+0x16>
 800569c:	f06f 0001 	mvn.w	r0, #1
 80056a0:	e7f8      	b.n	8005694 <__ascii_mbtowc+0x16>

080056a2 <__sfputc_r>:
 80056a2:	6893      	ldr	r3, [r2, #8]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	b410      	push	{r4}
 80056aa:	6093      	str	r3, [r2, #8]
 80056ac:	da08      	bge.n	80056c0 <__sfputc_r+0x1e>
 80056ae:	6994      	ldr	r4, [r2, #24]
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	db01      	blt.n	80056b8 <__sfputc_r+0x16>
 80056b4:	290a      	cmp	r1, #10
 80056b6:	d103      	bne.n	80056c0 <__sfputc_r+0x1e>
 80056b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056bc:	f000 b94a 	b.w	8005954 <__swbuf_r>
 80056c0:	6813      	ldr	r3, [r2, #0]
 80056c2:	1c58      	adds	r0, r3, #1
 80056c4:	6010      	str	r0, [r2, #0]
 80056c6:	7019      	strb	r1, [r3, #0]
 80056c8:	4608      	mov	r0, r1
 80056ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <__sfputs_r>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	4606      	mov	r6, r0
 80056d4:	460f      	mov	r7, r1
 80056d6:	4614      	mov	r4, r2
 80056d8:	18d5      	adds	r5, r2, r3
 80056da:	42ac      	cmp	r4, r5
 80056dc:	d101      	bne.n	80056e2 <__sfputs_r+0x12>
 80056de:	2000      	movs	r0, #0
 80056e0:	e007      	b.n	80056f2 <__sfputs_r+0x22>
 80056e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e6:	463a      	mov	r2, r7
 80056e8:	4630      	mov	r0, r6
 80056ea:	f7ff ffda 	bl	80056a2 <__sfputc_r>
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	d1f3      	bne.n	80056da <__sfputs_r+0xa>
 80056f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080056f4 <_vfiprintf_r>:
 80056f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f8:	460d      	mov	r5, r1
 80056fa:	b09d      	sub	sp, #116	; 0x74
 80056fc:	4614      	mov	r4, r2
 80056fe:	4698      	mov	r8, r3
 8005700:	4606      	mov	r6, r0
 8005702:	b118      	cbz	r0, 800570c <_vfiprintf_r+0x18>
 8005704:	6983      	ldr	r3, [r0, #24]
 8005706:	b90b      	cbnz	r3, 800570c <_vfiprintf_r+0x18>
 8005708:	f000 fb14 	bl	8005d34 <__sinit>
 800570c:	4b89      	ldr	r3, [pc, #548]	; (8005934 <_vfiprintf_r+0x240>)
 800570e:	429d      	cmp	r5, r3
 8005710:	d11b      	bne.n	800574a <_vfiprintf_r+0x56>
 8005712:	6875      	ldr	r5, [r6, #4]
 8005714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005716:	07d9      	lsls	r1, r3, #31
 8005718:	d405      	bmi.n	8005726 <_vfiprintf_r+0x32>
 800571a:	89ab      	ldrh	r3, [r5, #12]
 800571c:	059a      	lsls	r2, r3, #22
 800571e:	d402      	bmi.n	8005726 <_vfiprintf_r+0x32>
 8005720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005722:	f7ff ffaa 	bl	800567a <__retarget_lock_acquire_recursive>
 8005726:	89ab      	ldrh	r3, [r5, #12]
 8005728:	071b      	lsls	r3, r3, #28
 800572a:	d501      	bpl.n	8005730 <_vfiprintf_r+0x3c>
 800572c:	692b      	ldr	r3, [r5, #16]
 800572e:	b9eb      	cbnz	r3, 800576c <_vfiprintf_r+0x78>
 8005730:	4629      	mov	r1, r5
 8005732:	4630      	mov	r0, r6
 8005734:	f000 f96e 	bl	8005a14 <__swsetup_r>
 8005738:	b1c0      	cbz	r0, 800576c <_vfiprintf_r+0x78>
 800573a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800573c:	07dc      	lsls	r4, r3, #31
 800573e:	d50e      	bpl.n	800575e <_vfiprintf_r+0x6a>
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	b01d      	add	sp, #116	; 0x74
 8005746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800574a:	4b7b      	ldr	r3, [pc, #492]	; (8005938 <_vfiprintf_r+0x244>)
 800574c:	429d      	cmp	r5, r3
 800574e:	d101      	bne.n	8005754 <_vfiprintf_r+0x60>
 8005750:	68b5      	ldr	r5, [r6, #8]
 8005752:	e7df      	b.n	8005714 <_vfiprintf_r+0x20>
 8005754:	4b79      	ldr	r3, [pc, #484]	; (800593c <_vfiprintf_r+0x248>)
 8005756:	429d      	cmp	r5, r3
 8005758:	bf08      	it	eq
 800575a:	68f5      	ldreq	r5, [r6, #12]
 800575c:	e7da      	b.n	8005714 <_vfiprintf_r+0x20>
 800575e:	89ab      	ldrh	r3, [r5, #12]
 8005760:	0598      	lsls	r0, r3, #22
 8005762:	d4ed      	bmi.n	8005740 <_vfiprintf_r+0x4c>
 8005764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005766:	f7ff ff89 	bl	800567c <__retarget_lock_release_recursive>
 800576a:	e7e9      	b.n	8005740 <_vfiprintf_r+0x4c>
 800576c:	2300      	movs	r3, #0
 800576e:	9309      	str	r3, [sp, #36]	; 0x24
 8005770:	2320      	movs	r3, #32
 8005772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005776:	f8cd 800c 	str.w	r8, [sp, #12]
 800577a:	2330      	movs	r3, #48	; 0x30
 800577c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005940 <_vfiprintf_r+0x24c>
 8005780:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005784:	f04f 0901 	mov.w	r9, #1
 8005788:	4623      	mov	r3, r4
 800578a:	469a      	mov	sl, r3
 800578c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005790:	b10a      	cbz	r2, 8005796 <_vfiprintf_r+0xa2>
 8005792:	2a25      	cmp	r2, #37	; 0x25
 8005794:	d1f9      	bne.n	800578a <_vfiprintf_r+0x96>
 8005796:	ebba 0b04 	subs.w	fp, sl, r4
 800579a:	d00b      	beq.n	80057b4 <_vfiprintf_r+0xc0>
 800579c:	465b      	mov	r3, fp
 800579e:	4622      	mov	r2, r4
 80057a0:	4629      	mov	r1, r5
 80057a2:	4630      	mov	r0, r6
 80057a4:	f7ff ff94 	bl	80056d0 <__sfputs_r>
 80057a8:	3001      	adds	r0, #1
 80057aa:	f000 80aa 	beq.w	8005902 <_vfiprintf_r+0x20e>
 80057ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057b0:	445a      	add	r2, fp
 80057b2:	9209      	str	r2, [sp, #36]	; 0x24
 80057b4:	f89a 3000 	ldrb.w	r3, [sl]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80a2 	beq.w	8005902 <_vfiprintf_r+0x20e>
 80057be:	2300      	movs	r3, #0
 80057c0:	f04f 32ff 	mov.w	r2, #4294967295
 80057c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057c8:	f10a 0a01 	add.w	sl, sl, #1
 80057cc:	9304      	str	r3, [sp, #16]
 80057ce:	9307      	str	r3, [sp, #28]
 80057d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057d4:	931a      	str	r3, [sp, #104]	; 0x68
 80057d6:	4654      	mov	r4, sl
 80057d8:	2205      	movs	r2, #5
 80057da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057de:	4858      	ldr	r0, [pc, #352]	; (8005940 <_vfiprintf_r+0x24c>)
 80057e0:	f7fa fd1e 	bl	8000220 <memchr>
 80057e4:	9a04      	ldr	r2, [sp, #16]
 80057e6:	b9d8      	cbnz	r0, 8005820 <_vfiprintf_r+0x12c>
 80057e8:	06d1      	lsls	r1, r2, #27
 80057ea:	bf44      	itt	mi
 80057ec:	2320      	movmi	r3, #32
 80057ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057f2:	0713      	lsls	r3, r2, #28
 80057f4:	bf44      	itt	mi
 80057f6:	232b      	movmi	r3, #43	; 0x2b
 80057f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005800:	2b2a      	cmp	r3, #42	; 0x2a
 8005802:	d015      	beq.n	8005830 <_vfiprintf_r+0x13c>
 8005804:	9a07      	ldr	r2, [sp, #28]
 8005806:	4654      	mov	r4, sl
 8005808:	2000      	movs	r0, #0
 800580a:	f04f 0c0a 	mov.w	ip, #10
 800580e:	4621      	mov	r1, r4
 8005810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005814:	3b30      	subs	r3, #48	; 0x30
 8005816:	2b09      	cmp	r3, #9
 8005818:	d94e      	bls.n	80058b8 <_vfiprintf_r+0x1c4>
 800581a:	b1b0      	cbz	r0, 800584a <_vfiprintf_r+0x156>
 800581c:	9207      	str	r2, [sp, #28]
 800581e:	e014      	b.n	800584a <_vfiprintf_r+0x156>
 8005820:	eba0 0308 	sub.w	r3, r0, r8
 8005824:	fa09 f303 	lsl.w	r3, r9, r3
 8005828:	4313      	orrs	r3, r2
 800582a:	9304      	str	r3, [sp, #16]
 800582c:	46a2      	mov	sl, r4
 800582e:	e7d2      	b.n	80057d6 <_vfiprintf_r+0xe2>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	1d19      	adds	r1, r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	9103      	str	r1, [sp, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	bfbb      	ittet	lt
 800583c:	425b      	neglt	r3, r3
 800583e:	f042 0202 	orrlt.w	r2, r2, #2
 8005842:	9307      	strge	r3, [sp, #28]
 8005844:	9307      	strlt	r3, [sp, #28]
 8005846:	bfb8      	it	lt
 8005848:	9204      	strlt	r2, [sp, #16]
 800584a:	7823      	ldrb	r3, [r4, #0]
 800584c:	2b2e      	cmp	r3, #46	; 0x2e
 800584e:	d10c      	bne.n	800586a <_vfiprintf_r+0x176>
 8005850:	7863      	ldrb	r3, [r4, #1]
 8005852:	2b2a      	cmp	r3, #42	; 0x2a
 8005854:	d135      	bne.n	80058c2 <_vfiprintf_r+0x1ce>
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	1d1a      	adds	r2, r3, #4
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	9203      	str	r2, [sp, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	bfb8      	it	lt
 8005862:	f04f 33ff 	movlt.w	r3, #4294967295
 8005866:	3402      	adds	r4, #2
 8005868:	9305      	str	r3, [sp, #20]
 800586a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005950 <_vfiprintf_r+0x25c>
 800586e:	7821      	ldrb	r1, [r4, #0]
 8005870:	2203      	movs	r2, #3
 8005872:	4650      	mov	r0, sl
 8005874:	f7fa fcd4 	bl	8000220 <memchr>
 8005878:	b140      	cbz	r0, 800588c <_vfiprintf_r+0x198>
 800587a:	2340      	movs	r3, #64	; 0x40
 800587c:	eba0 000a 	sub.w	r0, r0, sl
 8005880:	fa03 f000 	lsl.w	r0, r3, r0
 8005884:	9b04      	ldr	r3, [sp, #16]
 8005886:	4303      	orrs	r3, r0
 8005888:	3401      	adds	r4, #1
 800588a:	9304      	str	r3, [sp, #16]
 800588c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005890:	482c      	ldr	r0, [pc, #176]	; (8005944 <_vfiprintf_r+0x250>)
 8005892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005896:	2206      	movs	r2, #6
 8005898:	f7fa fcc2 	bl	8000220 <memchr>
 800589c:	2800      	cmp	r0, #0
 800589e:	d03f      	beq.n	8005920 <_vfiprintf_r+0x22c>
 80058a0:	4b29      	ldr	r3, [pc, #164]	; (8005948 <_vfiprintf_r+0x254>)
 80058a2:	bb1b      	cbnz	r3, 80058ec <_vfiprintf_r+0x1f8>
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	3307      	adds	r3, #7
 80058a8:	f023 0307 	bic.w	r3, r3, #7
 80058ac:	3308      	adds	r3, #8
 80058ae:	9303      	str	r3, [sp, #12]
 80058b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b2:	443b      	add	r3, r7
 80058b4:	9309      	str	r3, [sp, #36]	; 0x24
 80058b6:	e767      	b.n	8005788 <_vfiprintf_r+0x94>
 80058b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80058bc:	460c      	mov	r4, r1
 80058be:	2001      	movs	r0, #1
 80058c0:	e7a5      	b.n	800580e <_vfiprintf_r+0x11a>
 80058c2:	2300      	movs	r3, #0
 80058c4:	3401      	adds	r4, #1
 80058c6:	9305      	str	r3, [sp, #20]
 80058c8:	4619      	mov	r1, r3
 80058ca:	f04f 0c0a 	mov.w	ip, #10
 80058ce:	4620      	mov	r0, r4
 80058d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058d4:	3a30      	subs	r2, #48	; 0x30
 80058d6:	2a09      	cmp	r2, #9
 80058d8:	d903      	bls.n	80058e2 <_vfiprintf_r+0x1ee>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0c5      	beq.n	800586a <_vfiprintf_r+0x176>
 80058de:	9105      	str	r1, [sp, #20]
 80058e0:	e7c3      	b.n	800586a <_vfiprintf_r+0x176>
 80058e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80058e6:	4604      	mov	r4, r0
 80058e8:	2301      	movs	r3, #1
 80058ea:	e7f0      	b.n	80058ce <_vfiprintf_r+0x1da>
 80058ec:	ab03      	add	r3, sp, #12
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	462a      	mov	r2, r5
 80058f2:	4b16      	ldr	r3, [pc, #88]	; (800594c <_vfiprintf_r+0x258>)
 80058f4:	a904      	add	r1, sp, #16
 80058f6:	4630      	mov	r0, r6
 80058f8:	f7fe f890 	bl	8003a1c <_printf_float>
 80058fc:	4607      	mov	r7, r0
 80058fe:	1c78      	adds	r0, r7, #1
 8005900:	d1d6      	bne.n	80058b0 <_vfiprintf_r+0x1bc>
 8005902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005904:	07d9      	lsls	r1, r3, #31
 8005906:	d405      	bmi.n	8005914 <_vfiprintf_r+0x220>
 8005908:	89ab      	ldrh	r3, [r5, #12]
 800590a:	059a      	lsls	r2, r3, #22
 800590c:	d402      	bmi.n	8005914 <_vfiprintf_r+0x220>
 800590e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005910:	f7ff feb4 	bl	800567c <__retarget_lock_release_recursive>
 8005914:	89ab      	ldrh	r3, [r5, #12]
 8005916:	065b      	lsls	r3, r3, #25
 8005918:	f53f af12 	bmi.w	8005740 <_vfiprintf_r+0x4c>
 800591c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800591e:	e711      	b.n	8005744 <_vfiprintf_r+0x50>
 8005920:	ab03      	add	r3, sp, #12
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	462a      	mov	r2, r5
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <_vfiprintf_r+0x258>)
 8005928:	a904      	add	r1, sp, #16
 800592a:	4630      	mov	r0, r6
 800592c:	f7fe fb1a 	bl	8003f64 <_printf_i>
 8005930:	e7e4      	b.n	80058fc <_vfiprintf_r+0x208>
 8005932:	bf00      	nop
 8005934:	08006e14 	.word	0x08006e14
 8005938:	08006e34 	.word	0x08006e34
 800593c:	08006df4 	.word	0x08006df4
 8005940:	08006ce2 	.word	0x08006ce2
 8005944:	08006cec 	.word	0x08006cec
 8005948:	08003a1d 	.word	0x08003a1d
 800594c:	080056d1 	.word	0x080056d1
 8005950:	08006ce8 	.word	0x08006ce8

08005954 <__swbuf_r>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	460e      	mov	r6, r1
 8005958:	4614      	mov	r4, r2
 800595a:	4605      	mov	r5, r0
 800595c:	b118      	cbz	r0, 8005966 <__swbuf_r+0x12>
 800595e:	6983      	ldr	r3, [r0, #24]
 8005960:	b90b      	cbnz	r3, 8005966 <__swbuf_r+0x12>
 8005962:	f000 f9e7 	bl	8005d34 <__sinit>
 8005966:	4b21      	ldr	r3, [pc, #132]	; (80059ec <__swbuf_r+0x98>)
 8005968:	429c      	cmp	r4, r3
 800596a:	d12b      	bne.n	80059c4 <__swbuf_r+0x70>
 800596c:	686c      	ldr	r4, [r5, #4]
 800596e:	69a3      	ldr	r3, [r4, #24]
 8005970:	60a3      	str	r3, [r4, #8]
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	071a      	lsls	r2, r3, #28
 8005976:	d52f      	bpl.n	80059d8 <__swbuf_r+0x84>
 8005978:	6923      	ldr	r3, [r4, #16]
 800597a:	b36b      	cbz	r3, 80059d8 <__swbuf_r+0x84>
 800597c:	6923      	ldr	r3, [r4, #16]
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	1ac0      	subs	r0, r0, r3
 8005982:	6963      	ldr	r3, [r4, #20]
 8005984:	b2f6      	uxtb	r6, r6
 8005986:	4283      	cmp	r3, r0
 8005988:	4637      	mov	r7, r6
 800598a:	dc04      	bgt.n	8005996 <__swbuf_r+0x42>
 800598c:	4621      	mov	r1, r4
 800598e:	4628      	mov	r0, r5
 8005990:	f000 f93c 	bl	8005c0c <_fflush_r>
 8005994:	bb30      	cbnz	r0, 80059e4 <__swbuf_r+0x90>
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	3b01      	subs	r3, #1
 800599a:	60a3      	str	r3, [r4, #8]
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	6022      	str	r2, [r4, #0]
 80059a2:	701e      	strb	r6, [r3, #0]
 80059a4:	6963      	ldr	r3, [r4, #20]
 80059a6:	3001      	adds	r0, #1
 80059a8:	4283      	cmp	r3, r0
 80059aa:	d004      	beq.n	80059b6 <__swbuf_r+0x62>
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	07db      	lsls	r3, r3, #31
 80059b0:	d506      	bpl.n	80059c0 <__swbuf_r+0x6c>
 80059b2:	2e0a      	cmp	r6, #10
 80059b4:	d104      	bne.n	80059c0 <__swbuf_r+0x6c>
 80059b6:	4621      	mov	r1, r4
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 f927 	bl	8005c0c <_fflush_r>
 80059be:	b988      	cbnz	r0, 80059e4 <__swbuf_r+0x90>
 80059c0:	4638      	mov	r0, r7
 80059c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059c4:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <__swbuf_r+0x9c>)
 80059c6:	429c      	cmp	r4, r3
 80059c8:	d101      	bne.n	80059ce <__swbuf_r+0x7a>
 80059ca:	68ac      	ldr	r4, [r5, #8]
 80059cc:	e7cf      	b.n	800596e <__swbuf_r+0x1a>
 80059ce:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <__swbuf_r+0xa0>)
 80059d0:	429c      	cmp	r4, r3
 80059d2:	bf08      	it	eq
 80059d4:	68ec      	ldreq	r4, [r5, #12]
 80059d6:	e7ca      	b.n	800596e <__swbuf_r+0x1a>
 80059d8:	4621      	mov	r1, r4
 80059da:	4628      	mov	r0, r5
 80059dc:	f000 f81a 	bl	8005a14 <__swsetup_r>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d0cb      	beq.n	800597c <__swbuf_r+0x28>
 80059e4:	f04f 37ff 	mov.w	r7, #4294967295
 80059e8:	e7ea      	b.n	80059c0 <__swbuf_r+0x6c>
 80059ea:	bf00      	nop
 80059ec:	08006e14 	.word	0x08006e14
 80059f0:	08006e34 	.word	0x08006e34
 80059f4:	08006df4 	.word	0x08006df4

080059f8 <__ascii_wctomb>:
 80059f8:	b149      	cbz	r1, 8005a0e <__ascii_wctomb+0x16>
 80059fa:	2aff      	cmp	r2, #255	; 0xff
 80059fc:	bf85      	ittet	hi
 80059fe:	238a      	movhi	r3, #138	; 0x8a
 8005a00:	6003      	strhi	r3, [r0, #0]
 8005a02:	700a      	strbls	r2, [r1, #0]
 8005a04:	f04f 30ff 	movhi.w	r0, #4294967295
 8005a08:	bf98      	it	ls
 8005a0a:	2001      	movls	r0, #1
 8005a0c:	4770      	bx	lr
 8005a0e:	4608      	mov	r0, r1
 8005a10:	4770      	bx	lr
	...

08005a14 <__swsetup_r>:
 8005a14:	4b32      	ldr	r3, [pc, #200]	; (8005ae0 <__swsetup_r+0xcc>)
 8005a16:	b570      	push	{r4, r5, r6, lr}
 8005a18:	681d      	ldr	r5, [r3, #0]
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	b125      	cbz	r5, 8005a2a <__swsetup_r+0x16>
 8005a20:	69ab      	ldr	r3, [r5, #24]
 8005a22:	b913      	cbnz	r3, 8005a2a <__swsetup_r+0x16>
 8005a24:	4628      	mov	r0, r5
 8005a26:	f000 f985 	bl	8005d34 <__sinit>
 8005a2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ae4 <__swsetup_r+0xd0>)
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	d10f      	bne.n	8005a50 <__swsetup_r+0x3c>
 8005a30:	686c      	ldr	r4, [r5, #4]
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a38:	0719      	lsls	r1, r3, #28
 8005a3a:	d42c      	bmi.n	8005a96 <__swsetup_r+0x82>
 8005a3c:	06dd      	lsls	r5, r3, #27
 8005a3e:	d411      	bmi.n	8005a64 <__swsetup_r+0x50>
 8005a40:	2309      	movs	r3, #9
 8005a42:	6033      	str	r3, [r6, #0]
 8005a44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4e:	e03e      	b.n	8005ace <__swsetup_r+0xba>
 8005a50:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <__swsetup_r+0xd4>)
 8005a52:	429c      	cmp	r4, r3
 8005a54:	d101      	bne.n	8005a5a <__swsetup_r+0x46>
 8005a56:	68ac      	ldr	r4, [r5, #8]
 8005a58:	e7eb      	b.n	8005a32 <__swsetup_r+0x1e>
 8005a5a:	4b24      	ldr	r3, [pc, #144]	; (8005aec <__swsetup_r+0xd8>)
 8005a5c:	429c      	cmp	r4, r3
 8005a5e:	bf08      	it	eq
 8005a60:	68ec      	ldreq	r4, [r5, #12]
 8005a62:	e7e6      	b.n	8005a32 <__swsetup_r+0x1e>
 8005a64:	0758      	lsls	r0, r3, #29
 8005a66:	d512      	bpl.n	8005a8e <__swsetup_r+0x7a>
 8005a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a6a:	b141      	cbz	r1, 8005a7e <__swsetup_r+0x6a>
 8005a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a70:	4299      	cmp	r1, r3
 8005a72:	d002      	beq.n	8005a7a <__swsetup_r+0x66>
 8005a74:	4630      	mov	r0, r6
 8005a76:	f7fd fe51 	bl	800371c <_free_r>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a84:	81a3      	strh	r3, [r4, #12]
 8005a86:	2300      	movs	r3, #0
 8005a88:	6063      	str	r3, [r4, #4]
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f043 0308 	orr.w	r3, r3, #8
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	6923      	ldr	r3, [r4, #16]
 8005a98:	b94b      	cbnz	r3, 8005aae <__swsetup_r+0x9a>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa4:	d003      	beq.n	8005aae <__swsetup_r+0x9a>
 8005aa6:	4621      	mov	r1, r4
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f000 fa05 	bl	8005eb8 <__smakebuf_r>
 8005aae:	89a0      	ldrh	r0, [r4, #12]
 8005ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ab4:	f010 0301 	ands.w	r3, r0, #1
 8005ab8:	d00a      	beq.n	8005ad0 <__swsetup_r+0xbc>
 8005aba:	2300      	movs	r3, #0
 8005abc:	60a3      	str	r3, [r4, #8]
 8005abe:	6963      	ldr	r3, [r4, #20]
 8005ac0:	425b      	negs	r3, r3
 8005ac2:	61a3      	str	r3, [r4, #24]
 8005ac4:	6923      	ldr	r3, [r4, #16]
 8005ac6:	b943      	cbnz	r3, 8005ada <__swsetup_r+0xc6>
 8005ac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005acc:	d1ba      	bne.n	8005a44 <__swsetup_r+0x30>
 8005ace:	bd70      	pop	{r4, r5, r6, pc}
 8005ad0:	0781      	lsls	r1, r0, #30
 8005ad2:	bf58      	it	pl
 8005ad4:	6963      	ldrpl	r3, [r4, #20]
 8005ad6:	60a3      	str	r3, [r4, #8]
 8005ad8:	e7f4      	b.n	8005ac4 <__swsetup_r+0xb0>
 8005ada:	2000      	movs	r0, #0
 8005adc:	e7f7      	b.n	8005ace <__swsetup_r+0xba>
 8005ade:	bf00      	nop
 8005ae0:	20000ac4 	.word	0x20000ac4
 8005ae4:	08006e14 	.word	0x08006e14
 8005ae8:	08006e34 	.word	0x08006e34
 8005aec:	08006df4 	.word	0x08006df4

08005af0 <abort>:
 8005af0:	b508      	push	{r3, lr}
 8005af2:	2006      	movs	r0, #6
 8005af4:	f000 fa48 	bl	8005f88 <raise>
 8005af8:	2001      	movs	r0, #1
 8005afa:	f7fb fb69 	bl	80011d0 <_exit>
	...

08005b00 <__sflush_r>:
 8005b00:	898a      	ldrh	r2, [r1, #12]
 8005b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b06:	4605      	mov	r5, r0
 8005b08:	0710      	lsls	r0, r2, #28
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	d458      	bmi.n	8005bc0 <__sflush_r+0xc0>
 8005b0e:	684b      	ldr	r3, [r1, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	dc05      	bgt.n	8005b20 <__sflush_r+0x20>
 8005b14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	dc02      	bgt.n	8005b20 <__sflush_r+0x20>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b22:	2e00      	cmp	r6, #0
 8005b24:	d0f9      	beq.n	8005b1a <__sflush_r+0x1a>
 8005b26:	2300      	movs	r3, #0
 8005b28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b2c:	682f      	ldr	r7, [r5, #0]
 8005b2e:	602b      	str	r3, [r5, #0]
 8005b30:	d032      	beq.n	8005b98 <__sflush_r+0x98>
 8005b32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b34:	89a3      	ldrh	r3, [r4, #12]
 8005b36:	075a      	lsls	r2, r3, #29
 8005b38:	d505      	bpl.n	8005b46 <__sflush_r+0x46>
 8005b3a:	6863      	ldr	r3, [r4, #4]
 8005b3c:	1ac0      	subs	r0, r0, r3
 8005b3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b40:	b10b      	cbz	r3, 8005b46 <__sflush_r+0x46>
 8005b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b44:	1ac0      	subs	r0, r0, r3
 8005b46:	2300      	movs	r3, #0
 8005b48:	4602      	mov	r2, r0
 8005b4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b4c:	6a21      	ldr	r1, [r4, #32]
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b0      	blx	r6
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	d106      	bne.n	8005b66 <__sflush_r+0x66>
 8005b58:	6829      	ldr	r1, [r5, #0]
 8005b5a:	291d      	cmp	r1, #29
 8005b5c:	d82c      	bhi.n	8005bb8 <__sflush_r+0xb8>
 8005b5e:	4a2a      	ldr	r2, [pc, #168]	; (8005c08 <__sflush_r+0x108>)
 8005b60:	40ca      	lsrs	r2, r1
 8005b62:	07d6      	lsls	r6, r2, #31
 8005b64:	d528      	bpl.n	8005bb8 <__sflush_r+0xb8>
 8005b66:	2200      	movs	r2, #0
 8005b68:	6062      	str	r2, [r4, #4]
 8005b6a:	04d9      	lsls	r1, r3, #19
 8005b6c:	6922      	ldr	r2, [r4, #16]
 8005b6e:	6022      	str	r2, [r4, #0]
 8005b70:	d504      	bpl.n	8005b7c <__sflush_r+0x7c>
 8005b72:	1c42      	adds	r2, r0, #1
 8005b74:	d101      	bne.n	8005b7a <__sflush_r+0x7a>
 8005b76:	682b      	ldr	r3, [r5, #0]
 8005b78:	b903      	cbnz	r3, 8005b7c <__sflush_r+0x7c>
 8005b7a:	6560      	str	r0, [r4, #84]	; 0x54
 8005b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b7e:	602f      	str	r7, [r5, #0]
 8005b80:	2900      	cmp	r1, #0
 8005b82:	d0ca      	beq.n	8005b1a <__sflush_r+0x1a>
 8005b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b88:	4299      	cmp	r1, r3
 8005b8a:	d002      	beq.n	8005b92 <__sflush_r+0x92>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	f7fd fdc5 	bl	800371c <_free_r>
 8005b92:	2000      	movs	r0, #0
 8005b94:	6360      	str	r0, [r4, #52]	; 0x34
 8005b96:	e7c1      	b.n	8005b1c <__sflush_r+0x1c>
 8005b98:	6a21      	ldr	r1, [r4, #32]
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	47b0      	blx	r6
 8005ba0:	1c41      	adds	r1, r0, #1
 8005ba2:	d1c7      	bne.n	8005b34 <__sflush_r+0x34>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0c4      	beq.n	8005b34 <__sflush_r+0x34>
 8005baa:	2b1d      	cmp	r3, #29
 8005bac:	d001      	beq.n	8005bb2 <__sflush_r+0xb2>
 8005bae:	2b16      	cmp	r3, #22
 8005bb0:	d101      	bne.n	8005bb6 <__sflush_r+0xb6>
 8005bb2:	602f      	str	r7, [r5, #0]
 8005bb4:	e7b1      	b.n	8005b1a <__sflush_r+0x1a>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bbc:	81a3      	strh	r3, [r4, #12]
 8005bbe:	e7ad      	b.n	8005b1c <__sflush_r+0x1c>
 8005bc0:	690f      	ldr	r7, [r1, #16]
 8005bc2:	2f00      	cmp	r7, #0
 8005bc4:	d0a9      	beq.n	8005b1a <__sflush_r+0x1a>
 8005bc6:	0793      	lsls	r3, r2, #30
 8005bc8:	680e      	ldr	r6, [r1, #0]
 8005bca:	bf08      	it	eq
 8005bcc:	694b      	ldreq	r3, [r1, #20]
 8005bce:	600f      	str	r7, [r1, #0]
 8005bd0:	bf18      	it	ne
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	eba6 0807 	sub.w	r8, r6, r7
 8005bd8:	608b      	str	r3, [r1, #8]
 8005bda:	f1b8 0f00 	cmp.w	r8, #0
 8005bde:	dd9c      	ble.n	8005b1a <__sflush_r+0x1a>
 8005be0:	6a21      	ldr	r1, [r4, #32]
 8005be2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005be4:	4643      	mov	r3, r8
 8005be6:	463a      	mov	r2, r7
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b0      	blx	r6
 8005bec:	2800      	cmp	r0, #0
 8005bee:	dc06      	bgt.n	8005bfe <__sflush_r+0xfe>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf6:	81a3      	strh	r3, [r4, #12]
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	e78e      	b.n	8005b1c <__sflush_r+0x1c>
 8005bfe:	4407      	add	r7, r0
 8005c00:	eba8 0800 	sub.w	r8, r8, r0
 8005c04:	e7e9      	b.n	8005bda <__sflush_r+0xda>
 8005c06:	bf00      	nop
 8005c08:	20400001 	.word	0x20400001

08005c0c <_fflush_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	690b      	ldr	r3, [r1, #16]
 8005c10:	4605      	mov	r5, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	b913      	cbnz	r3, 8005c1c <_fflush_r+0x10>
 8005c16:	2500      	movs	r5, #0
 8005c18:	4628      	mov	r0, r5
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	b118      	cbz	r0, 8005c26 <_fflush_r+0x1a>
 8005c1e:	6983      	ldr	r3, [r0, #24]
 8005c20:	b90b      	cbnz	r3, 8005c26 <_fflush_r+0x1a>
 8005c22:	f000 f887 	bl	8005d34 <__sinit>
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <_fflush_r+0x6c>)
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	d11b      	bne.n	8005c64 <_fflush_r+0x58>
 8005c2c:	686c      	ldr	r4, [r5, #4]
 8005c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0ef      	beq.n	8005c16 <_fflush_r+0xa>
 8005c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c38:	07d0      	lsls	r0, r2, #31
 8005c3a:	d404      	bmi.n	8005c46 <_fflush_r+0x3a>
 8005c3c:	0599      	lsls	r1, r3, #22
 8005c3e:	d402      	bmi.n	8005c46 <_fflush_r+0x3a>
 8005c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c42:	f7ff fd1a 	bl	800567a <__retarget_lock_acquire_recursive>
 8005c46:	4628      	mov	r0, r5
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f7ff ff59 	bl	8005b00 <__sflush_r>
 8005c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c50:	07da      	lsls	r2, r3, #31
 8005c52:	4605      	mov	r5, r0
 8005c54:	d4e0      	bmi.n	8005c18 <_fflush_r+0xc>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	059b      	lsls	r3, r3, #22
 8005c5a:	d4dd      	bmi.n	8005c18 <_fflush_r+0xc>
 8005c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5e:	f7ff fd0d 	bl	800567c <__retarget_lock_release_recursive>
 8005c62:	e7d9      	b.n	8005c18 <_fflush_r+0xc>
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <_fflush_r+0x70>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	d101      	bne.n	8005c6e <_fflush_r+0x62>
 8005c6a:	68ac      	ldr	r4, [r5, #8]
 8005c6c:	e7df      	b.n	8005c2e <_fflush_r+0x22>
 8005c6e:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <_fflush_r+0x74>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	bf08      	it	eq
 8005c74:	68ec      	ldreq	r4, [r5, #12]
 8005c76:	e7da      	b.n	8005c2e <_fflush_r+0x22>
 8005c78:	08006e14 	.word	0x08006e14
 8005c7c:	08006e34 	.word	0x08006e34
 8005c80:	08006df4 	.word	0x08006df4

08005c84 <std>:
 8005c84:	2300      	movs	r3, #0
 8005c86:	b510      	push	{r4, lr}
 8005c88:	4604      	mov	r4, r0
 8005c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c92:	6083      	str	r3, [r0, #8]
 8005c94:	8181      	strh	r1, [r0, #12]
 8005c96:	6643      	str	r3, [r0, #100]	; 0x64
 8005c98:	81c2      	strh	r2, [r0, #14]
 8005c9a:	6183      	str	r3, [r0, #24]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	2208      	movs	r2, #8
 8005ca0:	305c      	adds	r0, #92	; 0x5c
 8005ca2:	f7fd fd33 	bl	800370c <memset>
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <std+0x38>)
 8005ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <std+0x3c>)
 8005cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cae:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <std+0x40>)
 8005cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cb2:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <std+0x44>)
 8005cb4:	6224      	str	r4, [r4, #32]
 8005cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	bf00      	nop
 8005cbc:	08005fc1 	.word	0x08005fc1
 8005cc0:	08005fe3 	.word	0x08005fe3
 8005cc4:	0800601b 	.word	0x0800601b
 8005cc8:	0800603f 	.word	0x0800603f

08005ccc <_cleanup_r>:
 8005ccc:	4901      	ldr	r1, [pc, #4]	; (8005cd4 <_cleanup_r+0x8>)
 8005cce:	f000 b8af 	b.w	8005e30 <_fwalk_reent>
 8005cd2:	bf00      	nop
 8005cd4:	08005c0d 	.word	0x08005c0d

08005cd8 <__sfmoreglue>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	2268      	movs	r2, #104	; 0x68
 8005cdc:	1e4d      	subs	r5, r1, #1
 8005cde:	4355      	muls	r5, r2
 8005ce0:	460e      	mov	r6, r1
 8005ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ce6:	f7fd fd85 	bl	80037f4 <_malloc_r>
 8005cea:	4604      	mov	r4, r0
 8005cec:	b140      	cbz	r0, 8005d00 <__sfmoreglue+0x28>
 8005cee:	2100      	movs	r1, #0
 8005cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8005cf4:	300c      	adds	r0, #12
 8005cf6:	60a0      	str	r0, [r4, #8]
 8005cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005cfc:	f7fd fd06 	bl	800370c <memset>
 8005d00:	4620      	mov	r0, r4
 8005d02:	bd70      	pop	{r4, r5, r6, pc}

08005d04 <__sfp_lock_acquire>:
 8005d04:	4801      	ldr	r0, [pc, #4]	; (8005d0c <__sfp_lock_acquire+0x8>)
 8005d06:	f7ff bcb8 	b.w	800567a <__retarget_lock_acquire_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	20000e5d 	.word	0x20000e5d

08005d10 <__sfp_lock_release>:
 8005d10:	4801      	ldr	r0, [pc, #4]	; (8005d18 <__sfp_lock_release+0x8>)
 8005d12:	f7ff bcb3 	b.w	800567c <__retarget_lock_release_recursive>
 8005d16:	bf00      	nop
 8005d18:	20000e5d 	.word	0x20000e5d

08005d1c <__sinit_lock_acquire>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__sinit_lock_acquire+0x8>)
 8005d1e:	f7ff bcac 	b.w	800567a <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	20000e5e 	.word	0x20000e5e

08005d28 <__sinit_lock_release>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__sinit_lock_release+0x8>)
 8005d2a:	f7ff bca7 	b.w	800567c <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	20000e5e 	.word	0x20000e5e

08005d34 <__sinit>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	4604      	mov	r4, r0
 8005d38:	f7ff fff0 	bl	8005d1c <__sinit_lock_acquire>
 8005d3c:	69a3      	ldr	r3, [r4, #24]
 8005d3e:	b11b      	cbz	r3, 8005d48 <__sinit+0x14>
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f7ff bff0 	b.w	8005d28 <__sinit_lock_release>
 8005d48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d4c:	6523      	str	r3, [r4, #80]	; 0x50
 8005d4e:	4b13      	ldr	r3, [pc, #76]	; (8005d9c <__sinit+0x68>)
 8005d50:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <__sinit+0x6c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d56:	42a3      	cmp	r3, r4
 8005d58:	bf04      	itt	eq
 8005d5a:	2301      	moveq	r3, #1
 8005d5c:	61a3      	streq	r3, [r4, #24]
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 f820 	bl	8005da4 <__sfp>
 8005d64:	6060      	str	r0, [r4, #4]
 8005d66:	4620      	mov	r0, r4
 8005d68:	f000 f81c 	bl	8005da4 <__sfp>
 8005d6c:	60a0      	str	r0, [r4, #8]
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 f818 	bl	8005da4 <__sfp>
 8005d74:	2200      	movs	r2, #0
 8005d76:	60e0      	str	r0, [r4, #12]
 8005d78:	2104      	movs	r1, #4
 8005d7a:	6860      	ldr	r0, [r4, #4]
 8005d7c:	f7ff ff82 	bl	8005c84 <std>
 8005d80:	68a0      	ldr	r0, [r4, #8]
 8005d82:	2201      	movs	r2, #1
 8005d84:	2109      	movs	r1, #9
 8005d86:	f7ff ff7d 	bl	8005c84 <std>
 8005d8a:	68e0      	ldr	r0, [r4, #12]
 8005d8c:	2202      	movs	r2, #2
 8005d8e:	2112      	movs	r1, #18
 8005d90:	f7ff ff78 	bl	8005c84 <std>
 8005d94:	2301      	movs	r3, #1
 8005d96:	61a3      	str	r3, [r4, #24]
 8005d98:	e7d2      	b.n	8005d40 <__sinit+0xc>
 8005d9a:	bf00      	nop
 8005d9c:	08006a78 	.word	0x08006a78
 8005da0:	08005ccd 	.word	0x08005ccd

08005da4 <__sfp>:
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da6:	4607      	mov	r7, r0
 8005da8:	f7ff ffac 	bl	8005d04 <__sfp_lock_acquire>
 8005dac:	4b1e      	ldr	r3, [pc, #120]	; (8005e28 <__sfp+0x84>)
 8005dae:	681e      	ldr	r6, [r3, #0]
 8005db0:	69b3      	ldr	r3, [r6, #24]
 8005db2:	b913      	cbnz	r3, 8005dba <__sfp+0x16>
 8005db4:	4630      	mov	r0, r6
 8005db6:	f7ff ffbd 	bl	8005d34 <__sinit>
 8005dba:	3648      	adds	r6, #72	; 0x48
 8005dbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	d503      	bpl.n	8005dcc <__sfp+0x28>
 8005dc4:	6833      	ldr	r3, [r6, #0]
 8005dc6:	b30b      	cbz	r3, 8005e0c <__sfp+0x68>
 8005dc8:	6836      	ldr	r6, [r6, #0]
 8005dca:	e7f7      	b.n	8005dbc <__sfp+0x18>
 8005dcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005dd0:	b9d5      	cbnz	r5, 8005e08 <__sfp+0x64>
 8005dd2:	4b16      	ldr	r3, [pc, #88]	; (8005e2c <__sfp+0x88>)
 8005dd4:	60e3      	str	r3, [r4, #12]
 8005dd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005dda:	6665      	str	r5, [r4, #100]	; 0x64
 8005ddc:	f7ff fc4c 	bl	8005678 <__retarget_lock_init_recursive>
 8005de0:	f7ff ff96 	bl	8005d10 <__sfp_lock_release>
 8005de4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005de8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005dec:	6025      	str	r5, [r4, #0]
 8005dee:	61a5      	str	r5, [r4, #24]
 8005df0:	2208      	movs	r2, #8
 8005df2:	4629      	mov	r1, r5
 8005df4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005df8:	f7fd fc88 	bl	800370c <memset>
 8005dfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e04:	4620      	mov	r0, r4
 8005e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e08:	3468      	adds	r4, #104	; 0x68
 8005e0a:	e7d9      	b.n	8005dc0 <__sfp+0x1c>
 8005e0c:	2104      	movs	r1, #4
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7ff ff62 	bl	8005cd8 <__sfmoreglue>
 8005e14:	4604      	mov	r4, r0
 8005e16:	6030      	str	r0, [r6, #0]
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1d5      	bne.n	8005dc8 <__sfp+0x24>
 8005e1c:	f7ff ff78 	bl	8005d10 <__sfp_lock_release>
 8005e20:	230c      	movs	r3, #12
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	e7ee      	b.n	8005e04 <__sfp+0x60>
 8005e26:	bf00      	nop
 8005e28:	08006a78 	.word	0x08006a78
 8005e2c:	ffff0001 	.word	0xffff0001

08005e30 <_fwalk_reent>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	4606      	mov	r6, r0
 8005e36:	4688      	mov	r8, r1
 8005e38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e3c:	2700      	movs	r7, #0
 8005e3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e42:	f1b9 0901 	subs.w	r9, r9, #1
 8005e46:	d505      	bpl.n	8005e54 <_fwalk_reent+0x24>
 8005e48:	6824      	ldr	r4, [r4, #0]
 8005e4a:	2c00      	cmp	r4, #0
 8005e4c:	d1f7      	bne.n	8005e3e <_fwalk_reent+0xe>
 8005e4e:	4638      	mov	r0, r7
 8005e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e54:	89ab      	ldrh	r3, [r5, #12]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d907      	bls.n	8005e6a <_fwalk_reent+0x3a>
 8005e5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	d003      	beq.n	8005e6a <_fwalk_reent+0x3a>
 8005e62:	4629      	mov	r1, r5
 8005e64:	4630      	mov	r0, r6
 8005e66:	47c0      	blx	r8
 8005e68:	4307      	orrs	r7, r0
 8005e6a:	3568      	adds	r5, #104	; 0x68
 8005e6c:	e7e9      	b.n	8005e42 <_fwalk_reent+0x12>

08005e6e <__swhatbuf_r>:
 8005e6e:	b570      	push	{r4, r5, r6, lr}
 8005e70:	460e      	mov	r6, r1
 8005e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e76:	2900      	cmp	r1, #0
 8005e78:	b096      	sub	sp, #88	; 0x58
 8005e7a:	4614      	mov	r4, r2
 8005e7c:	461d      	mov	r5, r3
 8005e7e:	da08      	bge.n	8005e92 <__swhatbuf_r+0x24>
 8005e80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	602a      	str	r2, [r5, #0]
 8005e88:	061a      	lsls	r2, r3, #24
 8005e8a:	d410      	bmi.n	8005eae <__swhatbuf_r+0x40>
 8005e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e90:	e00e      	b.n	8005eb0 <__swhatbuf_r+0x42>
 8005e92:	466a      	mov	r2, sp
 8005e94:	f000 f8fa 	bl	800608c <_fstat_r>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	dbf1      	blt.n	8005e80 <__swhatbuf_r+0x12>
 8005e9c:	9a01      	ldr	r2, [sp, #4]
 8005e9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ea6:	425a      	negs	r2, r3
 8005ea8:	415a      	adcs	r2, r3
 8005eaa:	602a      	str	r2, [r5, #0]
 8005eac:	e7ee      	b.n	8005e8c <__swhatbuf_r+0x1e>
 8005eae:	2340      	movs	r3, #64	; 0x40
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	6023      	str	r3, [r4, #0]
 8005eb4:	b016      	add	sp, #88	; 0x58
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}

08005eb8 <__smakebuf_r>:
 8005eb8:	898b      	ldrh	r3, [r1, #12]
 8005eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ebc:	079d      	lsls	r5, r3, #30
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	d507      	bpl.n	8005ed4 <__smakebuf_r+0x1c>
 8005ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	2301      	movs	r3, #1
 8005ece:	6163      	str	r3, [r4, #20]
 8005ed0:	b002      	add	sp, #8
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	ab01      	add	r3, sp, #4
 8005ed6:	466a      	mov	r2, sp
 8005ed8:	f7ff ffc9 	bl	8005e6e <__swhatbuf_r>
 8005edc:	9900      	ldr	r1, [sp, #0]
 8005ede:	4605      	mov	r5, r0
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f7fd fc87 	bl	80037f4 <_malloc_r>
 8005ee6:	b948      	cbnz	r0, 8005efc <__smakebuf_r+0x44>
 8005ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eec:	059a      	lsls	r2, r3, #22
 8005eee:	d4ef      	bmi.n	8005ed0 <__smakebuf_r+0x18>
 8005ef0:	f023 0303 	bic.w	r3, r3, #3
 8005ef4:	f043 0302 	orr.w	r3, r3, #2
 8005ef8:	81a3      	strh	r3, [r4, #12]
 8005efa:	e7e3      	b.n	8005ec4 <__smakebuf_r+0xc>
 8005efc:	4b0d      	ldr	r3, [pc, #52]	; (8005f34 <__smakebuf_r+0x7c>)
 8005efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	6020      	str	r0, [r4, #0]
 8005f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f08:	81a3      	strh	r3, [r4, #12]
 8005f0a:	9b00      	ldr	r3, [sp, #0]
 8005f0c:	6163      	str	r3, [r4, #20]
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	6120      	str	r0, [r4, #16]
 8005f12:	b15b      	cbz	r3, 8005f2c <__smakebuf_r+0x74>
 8005f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f000 f8c9 	bl	80060b0 <_isatty_r>
 8005f1e:	b128      	cbz	r0, 8005f2c <__smakebuf_r+0x74>
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	81a3      	strh	r3, [r4, #12]
 8005f2c:	89a0      	ldrh	r0, [r4, #12]
 8005f2e:	4305      	orrs	r5, r0
 8005f30:	81a5      	strh	r5, [r4, #12]
 8005f32:	e7cd      	b.n	8005ed0 <__smakebuf_r+0x18>
 8005f34:	08005ccd 	.word	0x08005ccd

08005f38 <_raise_r>:
 8005f38:	291f      	cmp	r1, #31
 8005f3a:	b538      	push	{r3, r4, r5, lr}
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	460d      	mov	r5, r1
 8005f40:	d904      	bls.n	8005f4c <_raise_r+0x14>
 8005f42:	2316      	movs	r3, #22
 8005f44:	6003      	str	r3, [r0, #0]
 8005f46:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f4e:	b112      	cbz	r2, 8005f56 <_raise_r+0x1e>
 8005f50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f54:	b94b      	cbnz	r3, 8005f6a <_raise_r+0x32>
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 f830 	bl	8005fbc <_getpid_r>
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	4601      	mov	r1, r0
 8005f60:	4620      	mov	r0, r4
 8005f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f66:	f000 b817 	b.w	8005f98 <_kill_r>
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d00a      	beq.n	8005f84 <_raise_r+0x4c>
 8005f6e:	1c59      	adds	r1, r3, #1
 8005f70:	d103      	bne.n	8005f7a <_raise_r+0x42>
 8005f72:	2316      	movs	r3, #22
 8005f74:	6003      	str	r3, [r0, #0]
 8005f76:	2001      	movs	r0, #1
 8005f78:	e7e7      	b.n	8005f4a <_raise_r+0x12>
 8005f7a:	2400      	movs	r4, #0
 8005f7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f80:	4628      	mov	r0, r5
 8005f82:	4798      	blx	r3
 8005f84:	2000      	movs	r0, #0
 8005f86:	e7e0      	b.n	8005f4a <_raise_r+0x12>

08005f88 <raise>:
 8005f88:	4b02      	ldr	r3, [pc, #8]	; (8005f94 <raise+0xc>)
 8005f8a:	4601      	mov	r1, r0
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	f7ff bfd3 	b.w	8005f38 <_raise_r>
 8005f92:	bf00      	nop
 8005f94:	20000ac4 	.word	0x20000ac4

08005f98 <_kill_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d07      	ldr	r5, [pc, #28]	; (8005fb8 <_kill_r+0x20>)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	602b      	str	r3, [r5, #0]
 8005fa6:	f7fb f90b 	bl	80011c0 <_kill>
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	d102      	bne.n	8005fb4 <_kill_r+0x1c>
 8005fae:	682b      	ldr	r3, [r5, #0]
 8005fb0:	b103      	cbz	r3, 8005fb4 <_kill_r+0x1c>
 8005fb2:	6023      	str	r3, [r4, #0]
 8005fb4:	bd38      	pop	{r3, r4, r5, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000e58 	.word	0x20000e58

08005fbc <_getpid_r>:
 8005fbc:	f7fb b8fe 	b.w	80011bc <_getpid>

08005fc0 <__sread>:
 8005fc0:	b510      	push	{r4, lr}
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc8:	f000 f894 	bl	80060f4 <_read_r>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	bfab      	itete	ge
 8005fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8005fd4:	181b      	addge	r3, r3, r0
 8005fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fda:	bfac      	ite	ge
 8005fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fde:	81a3      	strhlt	r3, [r4, #12]
 8005fe0:	bd10      	pop	{r4, pc}

08005fe2 <__swrite>:
 8005fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe6:	461f      	mov	r7, r3
 8005fe8:	898b      	ldrh	r3, [r1, #12]
 8005fea:	05db      	lsls	r3, r3, #23
 8005fec:	4605      	mov	r5, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	d505      	bpl.n	8006000 <__swrite+0x1e>
 8005ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f000 f868 	bl	80060d0 <_lseek_r>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	4632      	mov	r2, r6
 800600e:	463b      	mov	r3, r7
 8006010:	4628      	mov	r0, r5
 8006012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006016:	f000 b817 	b.w	8006048 <_write_r>

0800601a <__sseek>:
 800601a:	b510      	push	{r4, lr}
 800601c:	460c      	mov	r4, r1
 800601e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006022:	f000 f855 	bl	80060d0 <_lseek_r>
 8006026:	1c43      	adds	r3, r0, #1
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	bf15      	itete	ne
 800602c:	6560      	strne	r0, [r4, #84]	; 0x54
 800602e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006036:	81a3      	strheq	r3, [r4, #12]
 8006038:	bf18      	it	ne
 800603a:	81a3      	strhne	r3, [r4, #12]
 800603c:	bd10      	pop	{r4, pc}

0800603e <__sclose>:
 800603e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006042:	f000 b813 	b.w	800606c <_close_r>
	...

08006048 <_write_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d07      	ldr	r5, [pc, #28]	; (8006068 <_write_r+0x20>)
 800604c:	4604      	mov	r4, r0
 800604e:	4608      	mov	r0, r1
 8006050:	4611      	mov	r1, r2
 8006052:	2200      	movs	r2, #0
 8006054:	602a      	str	r2, [r5, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	f7fc f836 	bl	80020c8 <_write>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_write_r+0x1e>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_write_r+0x1e>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	20000e58 	.word	0x20000e58

0800606c <_close_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4d06      	ldr	r5, [pc, #24]	; (8006088 <_close_r+0x1c>)
 8006070:	2300      	movs	r3, #0
 8006072:	4604      	mov	r4, r0
 8006074:	4608      	mov	r0, r1
 8006076:	602b      	str	r3, [r5, #0]
 8006078:	f7fb f8be 	bl	80011f8 <_close>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d102      	bne.n	8006086 <_close_r+0x1a>
 8006080:	682b      	ldr	r3, [r5, #0]
 8006082:	b103      	cbz	r3, 8006086 <_close_r+0x1a>
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	bd38      	pop	{r3, r4, r5, pc}
 8006088:	20000e58 	.word	0x20000e58

0800608c <_fstat_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4d07      	ldr	r5, [pc, #28]	; (80060ac <_fstat_r+0x20>)
 8006090:	2300      	movs	r3, #0
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	f7fb f8b0 	bl	80011fe <_fstat>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	d102      	bne.n	80060a8 <_fstat_r+0x1c>
 80060a2:	682b      	ldr	r3, [r5, #0]
 80060a4:	b103      	cbz	r3, 80060a8 <_fstat_r+0x1c>
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	bd38      	pop	{r3, r4, r5, pc}
 80060aa:	bf00      	nop
 80060ac:	20000e58 	.word	0x20000e58

080060b0 <_isatty_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d06      	ldr	r5, [pc, #24]	; (80060cc <_isatty_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	f7fb f8a4 	bl	8001208 <_isatty>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_isatty_r+0x1a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_isatty_r+0x1a>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20000e58 	.word	0x20000e58

080060d0 <_lseek_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d07      	ldr	r5, [pc, #28]	; (80060f0 <_lseek_r+0x20>)
 80060d4:	4604      	mov	r4, r0
 80060d6:	4608      	mov	r0, r1
 80060d8:	4611      	mov	r1, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	602a      	str	r2, [r5, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	f7fb f894 	bl	800120c <_lseek>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_lseek_r+0x1e>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_lseek_r+0x1e>
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	20000e58 	.word	0x20000e58

080060f4 <_read_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4d07      	ldr	r5, [pc, #28]	; (8006114 <_read_r+0x20>)
 80060f8:	4604      	mov	r4, r0
 80060fa:	4608      	mov	r0, r1
 80060fc:	4611      	mov	r1, r2
 80060fe:	2200      	movs	r2, #0
 8006100:	602a      	str	r2, [r5, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	f7fb f86a 	bl	80011dc <_read>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_read_r+0x1e>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_read_r+0x1e>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	20000e58 	.word	0x20000e58

08006118 <expf>:
 8006118:	b508      	push	{r3, lr}
 800611a:	ed2d 8b02 	vpush	{d8}
 800611e:	eef0 8a40 	vmov.f32	s17, s0
 8006122:	f000 f82f 	bl	8006184 <__ieee754_expf>
 8006126:	eeb0 8a40 	vmov.f32	s16, s0
 800612a:	eeb0 0a68 	vmov.f32	s0, s17
 800612e:	f000 f919 	bl	8006364 <finitef>
 8006132:	b160      	cbz	r0, 800614e <expf+0x36>
 8006134:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8006174 <expf+0x5c>
 8006138:	eef4 8ae7 	vcmpe.f32	s17, s15
 800613c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006140:	dd0a      	ble.n	8006158 <expf+0x40>
 8006142:	f7fd faa3 	bl	800368c <__errno>
 8006146:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8006178 <expf+0x60>
 800614a:	2322      	movs	r3, #34	; 0x22
 800614c:	6003      	str	r3, [r0, #0]
 800614e:	eeb0 0a48 	vmov.f32	s0, s16
 8006152:	ecbd 8b02 	vpop	{d8}
 8006156:	bd08      	pop	{r3, pc}
 8006158:	eddf 7a08 	vldr	s15, [pc, #32]	; 800617c <expf+0x64>
 800615c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006164:	d5f3      	bpl.n	800614e <expf+0x36>
 8006166:	f7fd fa91 	bl	800368c <__errno>
 800616a:	2322      	movs	r3, #34	; 0x22
 800616c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8006180 <expf+0x68>
 8006170:	6003      	str	r3, [r0, #0]
 8006172:	e7ec      	b.n	800614e <expf+0x36>
 8006174:	42b17180 	.word	0x42b17180
 8006178:	7f800000 	.word	0x7f800000
 800617c:	c2cff1b5 	.word	0xc2cff1b5
 8006180:	00000000 	.word	0x00000000

08006184 <__ieee754_expf>:
 8006184:	ee10 2a10 	vmov	r2, s0
 8006188:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800618c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006190:	d902      	bls.n	8006198 <__ieee754_expf+0x14>
 8006192:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006196:	4770      	bx	lr
 8006198:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800619c:	d106      	bne.n	80061ac <__ieee754_expf+0x28>
 800619e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80062d8 <__ieee754_expf+0x154>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	bf18      	it	ne
 80061a6:	eeb0 0a67 	vmovne.f32	s0, s15
 80061aa:	4770      	bx	lr
 80061ac:	484b      	ldr	r0, [pc, #300]	; (80062dc <__ieee754_expf+0x158>)
 80061ae:	4282      	cmp	r2, r0
 80061b0:	dd02      	ble.n	80061b8 <__ieee754_expf+0x34>
 80061b2:	2000      	movs	r0, #0
 80061b4:	f000 b8d0 	b.w	8006358 <__math_oflowf>
 80061b8:	2a00      	cmp	r2, #0
 80061ba:	da05      	bge.n	80061c8 <__ieee754_expf+0x44>
 80061bc:	4a48      	ldr	r2, [pc, #288]	; (80062e0 <__ieee754_expf+0x15c>)
 80061be:	4291      	cmp	r1, r2
 80061c0:	d902      	bls.n	80061c8 <__ieee754_expf+0x44>
 80061c2:	2000      	movs	r0, #0
 80061c4:	f000 b8c2 	b.w	800634c <__math_uflowf>
 80061c8:	4a46      	ldr	r2, [pc, #280]	; (80062e4 <__ieee754_expf+0x160>)
 80061ca:	4291      	cmp	r1, r2
 80061cc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80061d0:	d952      	bls.n	8006278 <__ieee754_expf+0xf4>
 80061d2:	4a45      	ldr	r2, [pc, #276]	; (80062e8 <__ieee754_expf+0x164>)
 80061d4:	4291      	cmp	r1, r2
 80061d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80061da:	d834      	bhi.n	8006246 <__ieee754_expf+0xc2>
 80061dc:	4943      	ldr	r1, [pc, #268]	; (80062ec <__ieee754_expf+0x168>)
 80061de:	4411      	add	r1, r2
 80061e0:	ed91 7a00 	vldr	s14, [r1]
 80061e4:	4942      	ldr	r1, [pc, #264]	; (80062f0 <__ieee754_expf+0x16c>)
 80061e6:	440a      	add	r2, r1
 80061e8:	edd2 7a00 	vldr	s15, [r2]
 80061ec:	ee30 7a47 	vsub.f32	s14, s0, s14
 80061f0:	f1c3 0201 	rsb	r2, r3, #1
 80061f4:	1ad2      	subs	r2, r2, r3
 80061f6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80061fa:	ee20 6a00 	vmul.f32	s12, s0, s0
 80061fe:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80062f4 <__ieee754_expf+0x170>
 8006202:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80062f8 <__ieee754_expf+0x174>
 8006206:	eee6 6a05 	vfma.f32	s13, s12, s10
 800620a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80062fc <__ieee754_expf+0x178>
 800620e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8006212:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006300 <__ieee754_expf+0x17c>
 8006216:	eee5 6a06 	vfma.f32	s13, s10, s12
 800621a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8006304 <__ieee754_expf+0x180>
 800621e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8006222:	eef0 6a40 	vmov.f32	s13, s0
 8006226:	eee5 6a46 	vfms.f32	s13, s10, s12
 800622a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800622e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8006232:	bb92      	cbnz	r2, 800629a <__ieee754_expf+0x116>
 8006234:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006238:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800623c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006240:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8006244:	4770      	bx	lr
 8006246:	4b30      	ldr	r3, [pc, #192]	; (8006308 <__ieee754_expf+0x184>)
 8006248:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800630c <__ieee754_expf+0x188>
 800624c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006310 <__ieee754_expf+0x18c>
 8006250:	4413      	add	r3, r2
 8006252:	edd3 7a00 	vldr	s15, [r3]
 8006256:	eee0 7a07 	vfma.f32	s15, s0, s14
 800625a:	eeb0 7a40 	vmov.f32	s14, s0
 800625e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006262:	ee17 2a90 	vmov	r2, s15
 8006266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800626a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800626e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8006314 <__ieee754_expf+0x190>
 8006272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006276:	e7be      	b.n	80061f6 <__ieee754_expf+0x72>
 8006278:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800627c:	d20b      	bcs.n	8006296 <__ieee754_expf+0x112>
 800627e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006318 <__ieee754_expf+0x194>
 8006282:	ee70 6a26 	vadd.f32	s13, s0, s13
 8006286:	eef4 6ae5 	vcmpe.f32	s13, s11
 800628a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800628e:	dd02      	ble.n	8006296 <__ieee754_expf+0x112>
 8006290:	ee30 0a25 	vadd.f32	s0, s0, s11
 8006294:	4770      	bx	lr
 8006296:	2200      	movs	r2, #0
 8006298:	e7af      	b.n	80061fa <__ieee754_expf+0x76>
 800629a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800629e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80062a2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80062a6:	bfb8      	it	lt
 80062a8:	3264      	addlt	r2, #100	; 0x64
 80062aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80062ae:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80062b2:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80062b6:	ee17 3a90 	vmov	r3, s15
 80062ba:	bfab      	itete	ge
 80062bc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80062c0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80062c4:	ee00 3a10 	vmovge	s0, r3
 80062c8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800631c <__ieee754_expf+0x198>
 80062cc:	bfbc      	itt	lt
 80062ce:	ee00 3a10 	vmovlt	s0, r3
 80062d2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80062d6:	4770      	bx	lr
 80062d8:	00000000 	.word	0x00000000
 80062dc:	42b17217 	.word	0x42b17217
 80062e0:	42cff1b5 	.word	0x42cff1b5
 80062e4:	3eb17218 	.word	0x3eb17218
 80062e8:	3f851591 	.word	0x3f851591
 80062ec:	08006e5c 	.word	0x08006e5c
 80062f0:	08006e64 	.word	0x08006e64
 80062f4:	3331bb4c 	.word	0x3331bb4c
 80062f8:	b5ddea0e 	.word	0xb5ddea0e
 80062fc:	388ab355 	.word	0x388ab355
 8006300:	bb360b61 	.word	0xbb360b61
 8006304:	3e2aaaab 	.word	0x3e2aaaab
 8006308:	08006e54 	.word	0x08006e54
 800630c:	3fb8aa3b 	.word	0x3fb8aa3b
 8006310:	3f317180 	.word	0x3f317180
 8006314:	3717f7d1 	.word	0x3717f7d1
 8006318:	7149f2ca 	.word	0x7149f2ca
 800631c:	0d800000 	.word	0x0d800000

08006320 <with_errnof>:
 8006320:	b513      	push	{r0, r1, r4, lr}
 8006322:	4604      	mov	r4, r0
 8006324:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006328:	f7fd f9b0 	bl	800368c <__errno>
 800632c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006330:	6004      	str	r4, [r0, #0]
 8006332:	b002      	add	sp, #8
 8006334:	bd10      	pop	{r4, pc}

08006336 <xflowf>:
 8006336:	b130      	cbz	r0, 8006346 <xflowf+0x10>
 8006338:	eef1 7a40 	vneg.f32	s15, s0
 800633c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006340:	2022      	movs	r0, #34	; 0x22
 8006342:	f7ff bfed 	b.w	8006320 <with_errnof>
 8006346:	eef0 7a40 	vmov.f32	s15, s0
 800634a:	e7f7      	b.n	800633c <xflowf+0x6>

0800634c <__math_uflowf>:
 800634c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006354 <__math_uflowf+0x8>
 8006350:	f7ff bff1 	b.w	8006336 <xflowf>
 8006354:	10000000 	.word	0x10000000

08006358 <__math_oflowf>:
 8006358:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006360 <__math_oflowf+0x8>
 800635c:	f7ff bfeb 	b.w	8006336 <xflowf>
 8006360:	70000000 	.word	0x70000000

08006364 <finitef>:
 8006364:	b082      	sub	sp, #8
 8006366:	ed8d 0a01 	vstr	s0, [sp, #4]
 800636a:	9801      	ldr	r0, [sp, #4]
 800636c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006370:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006374:	bfac      	ite	ge
 8006376:	2000      	movge	r0, #0
 8006378:	2001      	movlt	r0, #1
 800637a:	b002      	add	sp, #8
 800637c:	4770      	bx	lr
	...

08006380 <_init>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	bf00      	nop
 8006384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006386:	bc08      	pop	{r3}
 8006388:	469e      	mov	lr, r3
 800638a:	4770      	bx	lr

0800638c <_fini>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr
