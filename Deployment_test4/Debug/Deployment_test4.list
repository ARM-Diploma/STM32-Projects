
Deployment_test4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004588  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae0  08004760  08004760  00014760  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006240  08006240  000205b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006248  08006248  000205b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006248  08006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800624c  0800624c  0001624c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  20000000  08006250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  200005c0  08006808  000205c0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20000d5c  08006808  00020d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b83a  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002171  00000000  00000000  0002be22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  0002df98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002320f  00000000  00000000  0002ef78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d925  00000000  00000000  00052187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4135  00000000  00000000  0005faac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133be1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002208  00000000  00000000  00133c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000014d  00000000  00000000  00135e3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200005c0 	.word	0x200005c0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004734 	.word	0x08004734

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200005c4 	.word	0x200005c4
 8000200:	08004734 	.word	0x08004734

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_CRC_Init+0x20>)
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <MX_CRC_Init+0x24>)
 8000510:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000512:	4805      	ldr	r0, [pc, #20]	; (8000528 <MX_CRC_Init+0x20>)
 8000514:	f000 fc1b 	bl	8000d4e <HAL_CRC_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800051e:	f000 f9b9 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200005dc 	.word	0x200005dc
 800052c:	40023000 	.word	0x40023000

08000530 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <HAL_CRC_MspInit+0x3c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d10d      	bne.n	800055e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_CRC_MspInit+0x40>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a09      	ldr	r2, [pc, #36]	; (8000570 <HAL_CRC_MspInit+0x40>)
 800054c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <HAL_CRC_MspInit+0x40>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40023000 	.word	0x40023000
 8000570:	40023800 	.word	0x40023800

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <MX_GPIO_Init+0xd0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a2c      	ldr	r2, [pc, #176]	; (8000644 <MX_GPIO_Init+0xd0>)
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <MX_GPIO_Init+0xd0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b26      	ldr	r3, [pc, #152]	; (8000644 <MX_GPIO_Init+0xd0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a25      	ldr	r2, [pc, #148]	; (8000644 <MX_GPIO_Init+0xd0>)
 80005b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b23      	ldr	r3, [pc, #140]	; (8000644 <MX_GPIO_Init+0xd0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <MX_GPIO_Init+0xd0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <MX_GPIO_Init+0xd0>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_GPIO_Init+0xd0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_GPIO_Init+0xd0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_GPIO_Init+0xd0>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_GPIO_Init+0xd0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2120      	movs	r1, #32
 80005fe:	4812      	ldr	r0, [pc, #72]	; (8000648 <MX_GPIO_Init+0xd4>)
 8000600:	f000 fd56 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	480c      	ldr	r0, [pc, #48]	; (800064c <MX_GPIO_Init+0xd8>)
 800061c:	f000 fbb4 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000620:	2320      	movs	r3, #32
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2301      	movs	r3, #1
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4619      	mov	r1, r3
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_GPIO_Init+0xd4>)
 8000638:	f000 fba6 	bl	8000d88 <HAL_GPIO_Init>

}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	; 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40020000 	.word	0x40020000
 800064c:	40020800 	.word	0x40020800

08000650 <Model_Init>:

static ai_buffer *ai_input;
static ai_buffer *ai_output;

int Model_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	ai_error err;
	const ai_handle acts[] = { activations };
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <Model_Init+0x48>)
 8000658:	603b      	str	r3, [r7, #0]
	err = ai_network_create_and_init(&network, acts, NULL);
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	4619      	mov	r1, r3
 8000660:	480e      	ldr	r0, [pc, #56]	; (800069c <Model_Init+0x4c>)
 8000662:	f001 ff19 	bl	8002498 <ai_network_create_and_init>
 8000666:	4603      	mov	r3, r0
 8000668:	607b      	str	r3, [r7, #4]

	ai_input = ai_network_inputs_get(network, NULL);
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <Model_Init+0x4c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f001 ff85 	bl	8002580 <ai_network_inputs_get>
 8000676:	4603      	mov	r3, r0
 8000678:	4a09      	ldr	r2, [pc, #36]	; (80006a0 <Model_Init+0x50>)
 800067a:	6013      	str	r3, [r2, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <Model_Init+0x4c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f001 ff96 	bl	80025b4 <ai_network_outputs_get>
 8000688:	4603      	mov	r3, r0
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <Model_Init+0x54>)
 800068c:	6013      	str	r3, [r2, #0]

	return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000600 	.word	0x20000600
 800069c:	200005e4 	.word	0x200005e4
 80006a0:	20000c84 	.word	0x20000c84
 80006a4:	20000c88 	.word	0x20000c88

080006a8 <Model_Run>:

int Model_Run(const void *in_data, void *out_data)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	ai_i32 n_batch;
	ai_error err;

	/* 1 - Update IO handlers with the data payload */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <Model_Run+0x4c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <Model_Run+0x50>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	605a      	str	r2, [r3, #4]

	/* 2 - Perform the inference */
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <Model_Run+0x54>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a0b      	ldr	r2, [pc, #44]	; (80006f4 <Model_Run+0x4c>)
 80006c8:	6811      	ldr	r1, [r2, #0]
 80006ca:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <Model_Run+0x50>)
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 ffc6 	bl	8002660 <ai_network_run>
 80006d4:	60f8      	str	r0, [r7, #12]
	if (n_batch != 1) {
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d006      	beq.n	80006ea <Model_Run+0x42>
		err = ai_network_get_error(network);
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <Model_Run+0x54>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 feb7 	bl	8002454 <ai_network_get_error>
 80006e6:	4603      	mov	r3, r0
 80006e8:	60bb      	str	r3, [r7, #8]
	};

	return 0;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000c84 	.word	0x20000c84
 80006f8:	20000c88 	.word	0x20000c88
 80006fc:	200005e4 	.word	0x200005e4

08000700 <main>:
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000704:	f000 f9cc 	bl	8000aa0 <HAL_Init>
	SystemClock_Config();
 8000708:	f000 f852 	bl	80007b0 <SystemClock_Config>

	MX_GPIO_Init();
 800070c:	f7ff ff32 	bl	8000574 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000710:	f000 f92a 	bl	8000968 <MX_USART2_UART_Init>
	MX_CRC_Init();
 8000714:	f7ff fef8 	bl	8000508 <MX_CRC_Init>

	Model_Init();
 8000718:	f7ff ff9a 	bl	8000650 <Model_Init>
	while (1)
	{


		/*Movement 1 Data*/
		in_data[0] = -0.48808113;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <main+0x78>)
 800071e:	4a17      	ldr	r2, [pc, #92]	; (800077c <main+0x7c>)
 8000720:	601a      	str	r2, [r3, #0]
		in_data[1] = -0.55175108;
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <main+0x78>)
 8000724:	4a16      	ldr	r2, [pc, #88]	; (8000780 <main+0x80>)
 8000726:	605a      	str	r2, [r3, #4]
		in_data[2] = -0.4681329;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <main+0x78>)
 800072a:	4a16      	ldr	r2, [pc, #88]	; (8000784 <main+0x84>)
 800072c:	609a      	str	r2, [r3, #8]
		in_data[3] = -1.32115892;
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <main+0x78>)
 8000730:	4a15      	ldr	r2, [pc, #84]	; (8000788 <main+0x88>)
 8000732:	60da      	str	r2, [r3, #12]
		in_data[4] = -0.55970546;
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <main+0x78>)
 8000736:	4a15      	ldr	r2, [pc, #84]	; (800078c <main+0x8c>)
 8000738:	611a      	str	r2, [r3, #16]
		in_data[5] = -0.22794302;
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <main+0x78>)
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <main+0x90>)
 800073e:	615a      	str	r2, [r3, #20]
//		in_data[2] = 0.365111977;
//		in_data[3] = -2.5032258;
//		in_data[4] = 1.48593354;
//		in_data[5] = 0.976418376;

		Model_Run(in_data, out_data);
 8000740:	4914      	ldr	r1, [pc, #80]	; (8000794 <main+0x94>)
 8000742:	480d      	ldr	r0, [pc, #52]	; (8000778 <main+0x78>)
 8000744:	f7ff ffb0 	bl	80006a8 <Model_Run>

		/*Movement 2 Data*/
		in_data[0] = 0.15262816;
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <main+0x78>)
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <main+0x98>)
 800074c:	601a      	str	r2, [r3, #0]
		in_data[1] = 0.0762882;
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <main+0x78>)
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <main+0x9c>)
 8000752:	605a      	str	r2, [r3, #4]
		in_data[2] = -0.63788115;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <main+0x78>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <main+0xa0>)
 8000758:	609a      	str	r2, [r3, #8]
		in_data[3] = -0.56810121;
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <main+0x78>)
 800075c:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <main+0xa4>)
 800075e:	60da      	str	r2, [r3, #12]
		in_data[4] = -1.07088945;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <main+0x78>)
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <main+0xa8>)
 8000764:	611a      	str	r2, [r3, #16]
		in_data[5] = -0.74940943;
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <main+0x78>)
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <main+0xac>)
 800076a:	615a      	str	r2, [r3, #20]
//		in_data[2] = -0.886380613;
//		in_data[3] = -3.90107536	;
//		in_data[4] = -1.58312023	;
//		in_data[5] = -1.07045007;

		Model_Run(in_data, out_data);
 800076c:	4909      	ldr	r1, [pc, #36]	; (8000794 <main+0x94>)
 800076e:	4802      	ldr	r0, [pc, #8]	; (8000778 <main+0x78>)
 8000770:	f7ff ff9a 	bl	80006a8 <Model_Run>
		in_data[0] = -0.48808113;
 8000774:	e7d2      	b.n	800071c <main+0x1c>
 8000776:	bf00      	nop
 8000778:	20000c60 	.word	0x20000c60
 800077c:	bef9e5c5 	.word	0xbef9e5c5
 8000780:	bf0d3f8f 	.word	0xbf0d3f8f
 8000784:	beefaf1e 	.word	0xbeefaf1e
 8000788:	bfa91bbc 	.word	0xbfa91bbc
 800078c:	bf0f48db 	.word	0xbf0f48db
 8000790:	be6969e5 	.word	0xbe6969e5
 8000794:	20000c80 	.word	0x20000c80
 8000798:	3e1c4a8e 	.word	0x3e1c4a8e
 800079c:	3d9c3cfd 	.word	0x3d9c3cfd
 80007a0:	bf234c2e 	.word	0xbf234c2e
 80007a4:	bf116f15 	.word	0xbf116f15
 80007a8:	bf8912e8 	.word	0xbf8912e8
 80007ac:	bf3fd94c 	.word	0xbf3fd94c

080007b0 <SystemClock_Config>:
	}

}

void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2234      	movs	r2, #52	; 0x34
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fe7c 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <SystemClock_Config+0xdc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a2b      	ldr	r2, [pc, #172]	; (800088c <SystemClock_Config+0xdc>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <SystemClock_Config+0xdc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <SystemClock_Config+0xe0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a25      	ldr	r2, [pc, #148]	; (8000890 <SystemClock_Config+0xe0>)
 80007fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <SystemClock_Config+0xe0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000814:	2310      	movs	r3, #16
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081c:	2300      	movs	r3, #0
 800081e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000820:	2308      	movs	r3, #8
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000824:	23b4      	movs	r3, #180	; 0xb4
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000828:	2302      	movs	r3, #2
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4618      	mov	r0, r3
 800083a:	f000 ffed 	bl	8001818 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000844:	f000 f826 	bl	8000894 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000848:	f000 fc4c 	bl	80010e4 <HAL_PWREx_EnableOverDrive>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000852:	f000 f81f 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2302      	movs	r3, #2
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000862:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2105      	movs	r1, #5
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fc85 	bl	8001184 <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000880:	f000 f808 	bl	8000894 <Error_Handler>
  }
}
 8000884:	bf00      	nop
 8000886:	3750      	adds	r7, #80	; 0x50
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008de:	2007      	movs	r0, #7
 80008e0:	f000 fa02 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f902 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <MX_USART2_UART_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f001 f9d8 	bl	8001d54 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009aa:	f7ff ff73 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000c8c 	.word	0x20000c8c
 80009b8:	40004400 	.word	0x40004400

080009bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a19      	ldr	r2, [pc, #100]	; (8000a40 <HAL_UART_MspInit+0x84>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d12b      	bne.n	8000a36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <HAL_UART_MspInit+0x88>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_UART_MspInit+0x88>)
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_UART_MspInit+0x88>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_UART_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <HAL_UART_MspInit+0x88>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_UART_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a16:	230c      	movs	r3, #12
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a26:	2307      	movs	r3, #7
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <HAL_UART_MspInit+0x8c>)
 8000a32:	f000 f9a9 	bl	8000d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40004400 	.word	0x40004400
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a52:	490e      	ldr	r1, [pc, #56]	; (8000a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a54:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a68:	4c0b      	ldr	r4, [pc, #44]	; (8000a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a76:	f7ff ff65 	bl	8000944 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f003 fced 	bl	8004458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7e:	f7ff fe3f 	bl	8000700 <main>
  bx  lr    
 8000a82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	200005b8 	.word	0x200005b8
  ldr r2, =_sidata
 8000a90:	08006250 	.word	0x08006250
  ldr r2, =_sbss
 8000a94:	200005c0 	.word	0x200005c0
  ldr r4, =_ebss
 8000a98:	20000d5c 	.word	0x20000d5c

08000a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <HAL_Init+0x40>)
 8000aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_Init+0x40>)
 8000ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_Init+0x40>)
 8000ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f90d 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f808 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f7ff fee4 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023c00 	.word	0x40023c00

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f917 	bl	8000d36 <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f000 f8ed 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000cd0 	.word	0x20000cd0

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000cd0 	.word	0x20000cd0

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff47 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff5c 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffb0 	bl	8000ca4 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e00e      	b.n	8000d7e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	795b      	ldrb	r3, [r3, #5]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d105      	bne.n	8000d76 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fbdd 	bl	8000530 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e165      	b.n	8001070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 8154 	bne.w	800106a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80ae 	beq.w	800106a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a5c      	ldr	r2, [pc, #368]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b5a      	ldr	r3, [pc, #360]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2a:	4a58      	ldr	r2, [pc, #352]	; (800108c <HAL_GPIO_Init+0x304>)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x308>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d025      	beq.n	8000fa2 <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x30c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01f      	beq.n	8000f9e <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x310>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x314>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x20e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x318>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x20a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x31c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x206>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x202>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00c      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	; (800108c <HAL_GPIO_Init+0x304>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe6:	4a31      	ldr	r2, [pc, #196]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001010:	4a26      	ldr	r2, [pc, #152]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <HAL_GPIO_Init+0x324>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	f67f ae96 	bls.w	8000da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40013800 	.word	0x40013800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40021400 	.word	0x40021400
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40013c00 	.word	0x40013c00

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010cc:	e003      	b.n	80010d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_PWREx_EnableOverDrive+0x90>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <HAL_PWREx_EnableOverDrive+0x90>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_PWREx_EnableOverDrive+0x90>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_PWREx_EnableOverDrive+0x94>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff fd2c 	bl	8000b6c <HAL_GetTick>
 8001114:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001116:	e009      	b.n	800112c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001118:	f7ff fd28 	bl	8000b6c <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001126:	d901      	bls.n	800112c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e01f      	b.n	800116c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_PWREx_EnableOverDrive+0x98>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001138:	d1ee      	bne.n	8001118 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_PWREx_EnableOverDrive+0x9c>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001140:	f7ff fd14 	bl	8000b6c <HAL_GetTick>
 8001144:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001146:	e009      	b.n	800115c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001148:	f7ff fd10 	bl	8000b6c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001156:	d901      	bls.n	800115c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e007      	b.n	800116c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <HAL_PWREx_EnableOverDrive+0x98>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001168:	d1ee      	bne.n	8001148 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	420e0040 	.word	0x420e0040
 800117c:	40007000 	.word	0x40007000
 8001180:	420e0044 	.word	0x420e0044

08001184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0cc      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b68      	ldr	r3, [pc, #416]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d90c      	bls.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	4b65      	ldr	r3, [pc, #404]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ae:	4b63      	ldr	r3, [pc, #396]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0b8      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a58      	ldr	r2, [pc, #352]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	494d      	ldr	r1, [pc, #308]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d044      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d119      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e07f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123e:	2b03      	cmp	r3, #3
 8001240:	d107      	bne.n	8001252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e067      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f023 0203 	bic.w	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4934      	ldr	r1, [pc, #208]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	4313      	orrs	r3, r2
 8001272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001274:	f7ff fc7a 	bl	8000b6c <HAL_GetTick>
 8001278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	e00a      	b.n	8001292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f7ff fc76 	bl	8000b6c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f241 3288 	movw	r2, #5000	; 0x1388
 800128a:	4293      	cmp	r3, r2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e04f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 020c 	and.w	r2, r3, #12
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d1eb      	bne.n	800127c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d20c      	bcs.n	80012cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e032      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4916      	ldr	r1, [pc, #88]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	4313      	orrs	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800130a:	f000 f855 	bl	80013b8 <HAL_RCC_GetSysClockFreq>
 800130e:	4602      	mov	r2, r0
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	490a      	ldr	r1, [pc, #40]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	5ccb      	ldrb	r3, [r1, r3]
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fbda 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023c00 	.word	0x40023c00
 8001340:	40023800 	.word	0x40023800
 8001344:	08004790 	.word	0x08004790
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_RCC_GetHCLKFreq+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000

08001368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800136c:	f7ff fff0 	bl	8001350 <HAL_RCC_GetHCLKFreq>
 8001370:	4602      	mov	r2, r0
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	0a9b      	lsrs	r3, r3, #10
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	4903      	ldr	r1, [pc, #12]	; (800138c <HAL_RCC_GetPCLK1Freq+0x24>)
 800137e:	5ccb      	ldrb	r3, [r1, r3]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	080047a0 	.word	0x080047a0

08001390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001394:	f7ff ffdc 	bl	8001350 <HAL_RCC_GetHCLKFreq>
 8001398:	4602      	mov	r2, r0
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	0b5b      	lsrs	r3, r3, #13
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	4903      	ldr	r1, [pc, #12]	; (80013b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013a6:	5ccb      	ldrb	r3, [r1, r3]
 80013a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	080047a0 	.word	0x080047a0

080013b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013bc:	b0ae      	sub	sp, #184	; 0xb8
 80013be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013de:	4bcb      	ldr	r3, [pc, #812]	; (800170c <HAL_RCC_GetSysClockFreq+0x354>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b0c      	cmp	r3, #12
 80013e8:	f200 8206 	bhi.w	80017f8 <HAL_RCC_GetSysClockFreq+0x440>
 80013ec:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f2:	bf00      	nop
 80013f4:	08001429 	.word	0x08001429
 80013f8:	080017f9 	.word	0x080017f9
 80013fc:	080017f9 	.word	0x080017f9
 8001400:	080017f9 	.word	0x080017f9
 8001404:	08001431 	.word	0x08001431
 8001408:	080017f9 	.word	0x080017f9
 800140c:	080017f9 	.word	0x080017f9
 8001410:	080017f9 	.word	0x080017f9
 8001414:	08001439 	.word	0x08001439
 8001418:	080017f9 	.word	0x080017f9
 800141c:	080017f9 	.word	0x080017f9
 8001420:	080017f9 	.word	0x080017f9
 8001424:	08001629 	.word	0x08001629
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001428:	4bb9      	ldr	r3, [pc, #740]	; (8001710 <HAL_RCC_GetSysClockFreq+0x358>)
 800142a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800142e:	e1e7      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001430:	4bb8      	ldr	r3, [pc, #736]	; (8001714 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001436:	e1e3      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001438:	4bb4      	ldr	r3, [pc, #720]	; (800170c <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001444:	4bb1      	ldr	r3, [pc, #708]	; (800170c <HAL_RCC_GetSysClockFreq+0x354>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d071      	beq.n	8001534 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001450:	4bae      	ldr	r3, [pc, #696]	; (800170c <HAL_RCC_GetSysClockFreq+0x354>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	099b      	lsrs	r3, r3, #6
 8001456:	2200      	movs	r2, #0
 8001458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800145c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001476:	4622      	mov	r2, r4
 8001478:	462b      	mov	r3, r5
 800147a:	f04f 0000 	mov.w	r0, #0
 800147e:	f04f 0100 	mov.w	r1, #0
 8001482:	0159      	lsls	r1, r3, #5
 8001484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001488:	0150      	lsls	r0, r2, #5
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4621      	mov	r1, r4
 8001490:	1a51      	subs	r1, r2, r1
 8001492:	6439      	str	r1, [r7, #64]	; 0x40
 8001494:	4629      	mov	r1, r5
 8001496:	eb63 0301 	sbc.w	r3, r3, r1
 800149a:	647b      	str	r3, [r7, #68]	; 0x44
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014a8:	4649      	mov	r1, r9
 80014aa:	018b      	lsls	r3, r1, #6
 80014ac:	4641      	mov	r1, r8
 80014ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014b2:	4641      	mov	r1, r8
 80014b4:	018a      	lsls	r2, r1, #6
 80014b6:	4641      	mov	r1, r8
 80014b8:	1a51      	subs	r1, r2, r1
 80014ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80014bc:	4649      	mov	r1, r9
 80014be:	eb63 0301 	sbc.w	r3, r3, r1
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014d0:	4649      	mov	r1, r9
 80014d2:	00cb      	lsls	r3, r1, #3
 80014d4:	4641      	mov	r1, r8
 80014d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014da:	4641      	mov	r1, r8
 80014dc:	00ca      	lsls	r2, r1, #3
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	4603      	mov	r3, r0
 80014e4:	4622      	mov	r2, r4
 80014e6:	189b      	adds	r3, r3, r2
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
 80014ea:	462b      	mov	r3, r5
 80014ec:	460a      	mov	r2, r1
 80014ee:	eb42 0303 	adc.w	r3, r2, r3
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001500:	4629      	mov	r1, r5
 8001502:	024b      	lsls	r3, r1, #9
 8001504:	4621      	mov	r1, r4
 8001506:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800150a:	4621      	mov	r1, r4
 800150c:	024a      	lsls	r2, r1, #9
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001516:	2200      	movs	r2, #0
 8001518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800151c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001520:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001524:	f7fe fe6e 	bl	8000204 <__aeabi_uldivmod>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4613      	mov	r3, r2
 800152e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001532:	e067      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001534:	4b75      	ldr	r3, [pc, #468]	; (800170c <HAL_RCC_GetSysClockFreq+0x354>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	2200      	movs	r2, #0
 800153c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001540:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800154c:	67bb      	str	r3, [r7, #120]	; 0x78
 800154e:	2300      	movs	r3, #0
 8001550:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001552:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001556:	4622      	mov	r2, r4
 8001558:	462b      	mov	r3, r5
 800155a:	f04f 0000 	mov.w	r0, #0
 800155e:	f04f 0100 	mov.w	r1, #0
 8001562:	0159      	lsls	r1, r3, #5
 8001564:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001568:	0150      	lsls	r0, r2, #5
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4621      	mov	r1, r4
 8001570:	1a51      	subs	r1, r2, r1
 8001572:	62b9      	str	r1, [r7, #40]	; 0x28
 8001574:	4629      	mov	r1, r5
 8001576:	eb63 0301 	sbc.w	r3, r3, r1
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001588:	4649      	mov	r1, r9
 800158a:	018b      	lsls	r3, r1, #6
 800158c:	4641      	mov	r1, r8
 800158e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001592:	4641      	mov	r1, r8
 8001594:	018a      	lsls	r2, r1, #6
 8001596:	4641      	mov	r1, r8
 8001598:	ebb2 0a01 	subs.w	sl, r2, r1
 800159c:	4649      	mov	r1, r9
 800159e:	eb63 0b01 	sbc.w	fp, r3, r1
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015b6:	4692      	mov	sl, r2
 80015b8:	469b      	mov	fp, r3
 80015ba:	4623      	mov	r3, r4
 80015bc:	eb1a 0303 	adds.w	r3, sl, r3
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	462b      	mov	r3, r5
 80015c4:	eb4b 0303 	adc.w	r3, fp, r3
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015d6:	4629      	mov	r1, r5
 80015d8:	028b      	lsls	r3, r1, #10
 80015da:	4621      	mov	r1, r4
 80015dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015e0:	4621      	mov	r1, r4
 80015e2:	028a      	lsls	r2, r1, #10
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015ec:	2200      	movs	r2, #0
 80015ee:	673b      	str	r3, [r7, #112]	; 0x70
 80015f0:	677a      	str	r2, [r7, #116]	; 0x74
 80015f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015f6:	f7fe fe05 	bl	8000204 <__aeabi_uldivmod>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4613      	mov	r3, r2
 8001600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001604:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_RCC_GetSysClockFreq+0x354>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	0c1b      	lsrs	r3, r3, #16
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	3301      	adds	r3, #1
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800161a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001626:	e0eb      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001628:	4b38      	ldr	r3, [pc, #224]	; (800170c <HAL_RCC_GetSysClockFreq+0x354>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001634:	4b35      	ldr	r3, [pc, #212]	; (800170c <HAL_RCC_GetSysClockFreq+0x354>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d06b      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_RCC_GetSysClockFreq+0x354>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	2200      	movs	r2, #0
 8001648:	66bb      	str	r3, [r7, #104]	; 0x68
 800164a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800164c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800164e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001652:	663b      	str	r3, [r7, #96]	; 0x60
 8001654:	2300      	movs	r3, #0
 8001656:	667b      	str	r3, [r7, #100]	; 0x64
 8001658:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800165c:	4622      	mov	r2, r4
 800165e:	462b      	mov	r3, r5
 8001660:	f04f 0000 	mov.w	r0, #0
 8001664:	f04f 0100 	mov.w	r1, #0
 8001668:	0159      	lsls	r1, r3, #5
 800166a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800166e:	0150      	lsls	r0, r2, #5
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4621      	mov	r1, r4
 8001676:	1a51      	subs	r1, r2, r1
 8001678:	61b9      	str	r1, [r7, #24]
 800167a:	4629      	mov	r1, r5
 800167c:	eb63 0301 	sbc.w	r3, r3, r1
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800168e:	4659      	mov	r1, fp
 8001690:	018b      	lsls	r3, r1, #6
 8001692:	4651      	mov	r1, sl
 8001694:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001698:	4651      	mov	r1, sl
 800169a:	018a      	lsls	r2, r1, #6
 800169c:	4651      	mov	r1, sl
 800169e:	ebb2 0801 	subs.w	r8, r2, r1
 80016a2:	4659      	mov	r1, fp
 80016a4:	eb63 0901 	sbc.w	r9, r3, r1
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016bc:	4690      	mov	r8, r2
 80016be:	4699      	mov	r9, r3
 80016c0:	4623      	mov	r3, r4
 80016c2:	eb18 0303 	adds.w	r3, r8, r3
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	462b      	mov	r3, r5
 80016ca:	eb49 0303 	adc.w	r3, r9, r3
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016dc:	4629      	mov	r1, r5
 80016de:	024b      	lsls	r3, r1, #9
 80016e0:	4621      	mov	r1, r4
 80016e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016e6:	4621      	mov	r1, r4
 80016e8:	024a      	lsls	r2, r1, #9
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016f2:	2200      	movs	r2, #0
 80016f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80016f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016fc:	f7fe fd82 	bl	8000204 <__aeabi_uldivmod>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4613      	mov	r3, r2
 8001706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800170a:	e065      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x420>
 800170c:	40023800 	.word	0x40023800
 8001710:	00f42400 	.word	0x00f42400
 8001714:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001718:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_RCC_GetSysClockFreq+0x458>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	2200      	movs	r2, #0
 8001720:	4618      	mov	r0, r3
 8001722:	4611      	mov	r1, r2
 8001724:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001728:	653b      	str	r3, [r7, #80]	; 0x50
 800172a:	2300      	movs	r3, #0
 800172c:	657b      	str	r3, [r7, #84]	; 0x54
 800172e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001732:	4642      	mov	r2, r8
 8001734:	464b      	mov	r3, r9
 8001736:	f04f 0000 	mov.w	r0, #0
 800173a:	f04f 0100 	mov.w	r1, #0
 800173e:	0159      	lsls	r1, r3, #5
 8001740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001744:	0150      	lsls	r0, r2, #5
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4641      	mov	r1, r8
 800174c:	1a51      	subs	r1, r2, r1
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	4649      	mov	r1, r9
 8001752:	eb63 0301 	sbc.w	r3, r3, r1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001764:	4659      	mov	r1, fp
 8001766:	018b      	lsls	r3, r1, #6
 8001768:	4651      	mov	r1, sl
 800176a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800176e:	4651      	mov	r1, sl
 8001770:	018a      	lsls	r2, r1, #6
 8001772:	4651      	mov	r1, sl
 8001774:	1a54      	subs	r4, r2, r1
 8001776:	4659      	mov	r1, fp
 8001778:	eb63 0501 	sbc.w	r5, r3, r1
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	00eb      	lsls	r3, r5, #3
 8001786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800178a:	00e2      	lsls	r2, r4, #3
 800178c:	4614      	mov	r4, r2
 800178e:	461d      	mov	r5, r3
 8001790:	4643      	mov	r3, r8
 8001792:	18e3      	adds	r3, r4, r3
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	464b      	mov	r3, r9
 8001798:	eb45 0303 	adc.w	r3, r5, r3
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017aa:	4629      	mov	r1, r5
 80017ac:	028b      	lsls	r3, r1, #10
 80017ae:	4621      	mov	r1, r4
 80017b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b4:	4621      	mov	r1, r4
 80017b6:	028a      	lsls	r2, r1, #10
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017c0:	2200      	movs	r2, #0
 80017c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80017c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017ca:	f7fe fd1b 	bl	8000204 <__aeabi_uldivmod>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4613      	mov	r3, r2
 80017d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_RCC_GetSysClockFreq+0x458>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	0f1b      	lsrs	r3, r3, #28
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017f6:	e003      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001804:	4618      	mov	r0, r3
 8001806:	37b8      	adds	r7, #184	; 0xb8
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	00f42400 	.word	0x00f42400

08001818 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e28d      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8083 	beq.w	800193e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001838:	4b94      	ldr	r3, [pc, #592]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b04      	cmp	r3, #4
 8001842:	d019      	beq.n	8001878 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001844:	4b91      	ldr	r3, [pc, #580]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800184c:	2b08      	cmp	r3, #8
 800184e:	d106      	bne.n	800185e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001850:	4b8e      	ldr	r3, [pc, #568]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800185c:	d00c      	beq.n	8001878 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185e:	4b8b      	ldr	r3, [pc, #556]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d112      	bne.n	8001890 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186a:	4b88      	ldr	r3, [pc, #544]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001876:	d10b      	bne.n	8001890 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	4b84      	ldr	r3, [pc, #528]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d05b      	beq.n	800193c <HAL_RCC_OscConfig+0x124>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d157      	bne.n	800193c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e25a      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x90>
 800189a:	4b7c      	ldr	r3, [pc, #496]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7b      	ldr	r2, [pc, #492]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e01d      	b.n	80018e4 <HAL_RCC_OscConfig+0xcc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0xb4>
 80018b2:	4b76      	ldr	r3, [pc, #472]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a75      	ldr	r2, [pc, #468]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a72      	ldr	r2, [pc, #456]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0xcc>
 80018cc:	4b6f      	ldr	r3, [pc, #444]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6e      	ldr	r2, [pc, #440]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b6c      	ldr	r3, [pc, #432]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6b      	ldr	r2, [pc, #428]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f93e 	bl	8000b6c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff f93a 	bl	8000b6c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e21f      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b61      	ldr	r3, [pc, #388]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0xdc>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff f92a 	bl	8000b6c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff f926 	bl	8000b6c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	; 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e20b      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x104>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d06f      	beq.n	8001a2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800194a:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b00      	cmp	r3, #0
 8001954:	d017      	beq.n	8001986 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001956:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800195e:	2b08      	cmp	r3, #8
 8001960:	d105      	bne.n	800196e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001962:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d11c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197a:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d116      	bne.n	80019b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_RCC_OscConfig+0x186>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e1d3      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4937      	ldr	r1, [pc, #220]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	e03a      	b.n	8001a2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019bc:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_RCC_OscConfig+0x278>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff f8d3 	bl	8000b6c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff f8cf 	bl	8000b6c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e1b4      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4925      	ldr	r1, [pc, #148]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	e015      	b.n	8001a2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_RCC_OscConfig+0x278>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff f8b2 	bl	8000b6c <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff f8ae 	bl	8000b6c <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e193      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d036      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d016      	beq.n	8001a6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_RCC_OscConfig+0x27c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff f892 	bl	8000b6c <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7ff f88e 	bl	8000b6c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e173      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_OscConfig+0x274>)
 8001a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x234>
 8001a6a:	e01b      	b.n	8001aa4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_OscConfig+0x27c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff f87b 	bl	8000b6c <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	e00e      	b.n	8001a98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f877 	bl	8000b6c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d907      	bls.n	8001a98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e15c      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	42470000 	.word	0x42470000
 8001a94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a98:	4b8a      	ldr	r3, [pc, #552]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ea      	bne.n	8001a7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8097 	beq.w	8001be0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab6:	4b83      	ldr	r3, [pc, #524]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10f      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b7f      	ldr	r3, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a7e      	ldr	r2, [pc, #504]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b7c      	ldr	r3, [pc, #496]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <HAL_RCC_OscConfig+0x4b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d118      	bne.n	8001b20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aee:	4b76      	ldr	r3, [pc, #472]	; (8001cc8 <HAL_RCC_OscConfig+0x4b0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a75      	ldr	r2, [pc, #468]	; (8001cc8 <HAL_RCC_OscConfig+0x4b0>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afa:	f7ff f837 	bl	8000b6c <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b02:	f7ff f833 	bl	8000b6c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e118      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4b6c      	ldr	r3, [pc, #432]	; (8001cc8 <HAL_RCC_OscConfig+0x4b0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x31e>
 8001b28:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a65      	ldr	r2, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
 8001b34:	e01c      	b.n	8001b70 <HAL_RCC_OscConfig+0x358>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x340>
 8001b3e:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	4a60      	ldr	r2, [pc, #384]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4a:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	4a5d      	ldr	r2, [pc, #372]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6713      	str	r3, [r2, #112]	; 0x70
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0x358>
 8001b58:	4b5a      	ldr	r3, [pc, #360]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5c:	4a59      	ldr	r2, [pc, #356]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	; 0x70
 8001b64:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	4a56      	ldr	r2, [pc, #344]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	f023 0304 	bic.w	r3, r3, #4
 8001b6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d015      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7fe fff8 	bl	8000b6c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f7fe fff4 	bl	8000b6c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0d7      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b96:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0ee      	beq.n	8001b80 <HAL_RCC_OscConfig+0x368>
 8001ba2:	e014      	b.n	8001bce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7fe ffe2 	bl	8000b6c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7fe ffde 	bl	8000b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0c1      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc2:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ee      	bne.n	8001bac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a3a      	ldr	r2, [pc, #232]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80ad 	beq.w	8001d44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d060      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d145      	bne.n	8001c8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_RCC_OscConfig+0x4b4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7fe ffb2 	bl	8000b6c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7fe ffae 	bl	8000b6c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e093      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69da      	ldr	r2, [r3, #28]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	019b      	lsls	r3, r3, #6
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	3b01      	subs	r3, #1
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	071b      	lsls	r3, r3, #28
 8001c56:	491b      	ldr	r1, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x4b4>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7fe ff83 	bl	8000b6c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7fe ff7f 	bl	8000b6c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e064      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x452>
 8001c88:	e05c      	b.n	8001d44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_RCC_OscConfig+0x4b4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7fe ff6c 	bl	8000b6c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c98:	f7fe ff68 	bl	8000b6c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e04d      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_OscConfig+0x4ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x480>
 8001cb6:	e045      	b.n	8001d44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e040      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <HAL_RCC_OscConfig+0x538>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d030      	beq.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d129      	bne.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d122      	bne.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d119      	bne.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d10f      	bne.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e03f      	b.n	8001de6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fe1e 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2224      	movs	r2, #36	; 0x24
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f829 	bl	8001df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695a      	ldr	r2, [r3, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df4:	b0c0      	sub	sp, #256	; 0x100
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e0c:	68d9      	ldr	r1, [r3, #12]
 8001e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	ea40 0301 	orr.w	r3, r0, r1
 8001e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e48:	f021 010c 	bic.w	r1, r1, #12
 8001e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e56:	430b      	orrs	r3, r1
 8001e58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e6a:	6999      	ldr	r1, [r3, #24]
 8001e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	ea40 0301 	orr.w	r3, r0, r1
 8001e76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b8f      	ldr	r3, [pc, #572]	; (80020bc <UART_SetConfig+0x2cc>)
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d005      	beq.n	8001e90 <UART_SetConfig+0xa0>
 8001e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b8d      	ldr	r3, [pc, #564]	; (80020c0 <UART_SetConfig+0x2d0>)
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d104      	bne.n	8001e9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e90:	f7ff fa7e 	bl	8001390 <HAL_RCC_GetPCLK2Freq>
 8001e94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e98:	e003      	b.n	8001ea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e9a:	f7ff fa65 	bl	8001368 <HAL_RCC_GetPCLK1Freq>
 8001e9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eac:	f040 810c 	bne.w	80020c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001eba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001ebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	462b      	mov	r3, r5
 8001ec6:	1891      	adds	r1, r2, r2
 8001ec8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001eca:	415b      	adcs	r3, r3
 8001ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	eb12 0801 	adds.w	r8, r2, r1
 8001ed8:	4629      	mov	r1, r5
 8001eda:	eb43 0901 	adc.w	r9, r3, r1
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ef2:	4690      	mov	r8, r2
 8001ef4:	4699      	mov	r9, r3
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	eb18 0303 	adds.w	r3, r8, r3
 8001efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f00:	462b      	mov	r3, r5
 8001f02:	eb49 0303 	adc.w	r3, r9, r3
 8001f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f1e:	460b      	mov	r3, r1
 8001f20:	18db      	adds	r3, r3, r3
 8001f22:	653b      	str	r3, [r7, #80]	; 0x50
 8001f24:	4613      	mov	r3, r2
 8001f26:	eb42 0303 	adc.w	r3, r2, r3
 8001f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f34:	f7fe f966 	bl	8000204 <__aeabi_uldivmod>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <UART_SetConfig+0x2d4>)
 8001f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	011c      	lsls	r4, r3, #4
 8001f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f58:	4642      	mov	r2, r8
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	1891      	adds	r1, r2, r2
 8001f5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f60:	415b      	adcs	r3, r3
 8001f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f68:	4641      	mov	r1, r8
 8001f6a:	eb12 0a01 	adds.w	sl, r2, r1
 8001f6e:	4649      	mov	r1, r9
 8001f70:	eb43 0b01 	adc.w	fp, r3, r1
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f88:	4692      	mov	sl, r2
 8001f8a:	469b      	mov	fp, r3
 8001f8c:	4643      	mov	r3, r8
 8001f8e:	eb1a 0303 	adds.w	r3, sl, r3
 8001f92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f96:	464b      	mov	r3, r9
 8001f98:	eb4b 0303 	adc.w	r3, fp, r3
 8001f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001fb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	18db      	adds	r3, r3, r3
 8001fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8001fba:	4613      	mov	r3, r2
 8001fbc:	eb42 0303 	adc.w	r3, r2, r3
 8001fc0:	647b      	str	r3, [r7, #68]	; 0x44
 8001fc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fca:	f7fe f91b 	bl	8000204 <__aeabi_uldivmod>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <UART_SetConfig+0x2d4>)
 8001fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2264      	movs	r2, #100	; 0x64
 8001fde:	fb02 f303 	mul.w	r3, r2, r3
 8001fe2:	1acb      	subs	r3, r1, r3
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <UART_SetConfig+0x2d4>)
 8001fec:	fba3 2302 	umull	r2, r3, r3, r2
 8001ff0:	095b      	lsrs	r3, r3, #5
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ff8:	441c      	add	r4, r3
 8001ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002004:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800200c:	4642      	mov	r2, r8
 800200e:	464b      	mov	r3, r9
 8002010:	1891      	adds	r1, r2, r2
 8002012:	63b9      	str	r1, [r7, #56]	; 0x38
 8002014:	415b      	adcs	r3, r3
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800201c:	4641      	mov	r1, r8
 800201e:	1851      	adds	r1, r2, r1
 8002020:	6339      	str	r1, [r7, #48]	; 0x30
 8002022:	4649      	mov	r1, r9
 8002024:	414b      	adcs	r3, r1
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002034:	4659      	mov	r1, fp
 8002036:	00cb      	lsls	r3, r1, #3
 8002038:	4651      	mov	r1, sl
 800203a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800203e:	4651      	mov	r1, sl
 8002040:	00ca      	lsls	r2, r1, #3
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	4603      	mov	r3, r0
 8002048:	4642      	mov	r2, r8
 800204a:	189b      	adds	r3, r3, r2
 800204c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002050:	464b      	mov	r3, r9
 8002052:	460a      	mov	r2, r1
 8002054:	eb42 0303 	adc.w	r3, r2, r3
 8002058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002068:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800206c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002070:	460b      	mov	r3, r1
 8002072:	18db      	adds	r3, r3, r3
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
 8002076:	4613      	mov	r3, r2
 8002078:	eb42 0303 	adc.w	r3, r2, r3
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002086:	f7fe f8bd 	bl	8000204 <__aeabi_uldivmod>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <UART_SetConfig+0x2d4>)
 8002090:	fba3 1302 	umull	r1, r3, r3, r2
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	2164      	movs	r1, #100	; 0x64
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	3332      	adds	r3, #50	; 0x32
 80020a2:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <UART_SetConfig+0x2d4>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	f003 0207 	and.w	r2, r3, #7
 80020ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4422      	add	r2, r4
 80020b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020b8:	e105      	b.n	80022c6 <UART_SetConfig+0x4d6>
 80020ba:	bf00      	nop
 80020bc:	40011000 	.word	0x40011000
 80020c0:	40011400 	.word	0x40011400
 80020c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020cc:	2200      	movs	r2, #0
 80020ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020da:	4642      	mov	r2, r8
 80020dc:	464b      	mov	r3, r9
 80020de:	1891      	adds	r1, r2, r2
 80020e0:	6239      	str	r1, [r7, #32]
 80020e2:	415b      	adcs	r3, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020ea:	4641      	mov	r1, r8
 80020ec:	1854      	adds	r4, r2, r1
 80020ee:	4649      	mov	r1, r9
 80020f0:	eb43 0501 	adc.w	r5, r3, r1
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	00eb      	lsls	r3, r5, #3
 80020fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002102:	00e2      	lsls	r2, r4, #3
 8002104:	4614      	mov	r4, r2
 8002106:	461d      	mov	r5, r3
 8002108:	4643      	mov	r3, r8
 800210a:	18e3      	adds	r3, r4, r3
 800210c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002110:	464b      	mov	r3, r9
 8002112:	eb45 0303 	adc.w	r3, r5, r3
 8002116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800211a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002126:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002136:	4629      	mov	r1, r5
 8002138:	008b      	lsls	r3, r1, #2
 800213a:	4621      	mov	r1, r4
 800213c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002140:	4621      	mov	r1, r4
 8002142:	008a      	lsls	r2, r1, #2
 8002144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002148:	f7fe f85c 	bl	8000204 <__aeabi_uldivmod>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <UART_SetConfig+0x4e4>)
 8002152:	fba3 2302 	umull	r2, r3, r3, r2
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	011c      	lsls	r4, r3, #4
 800215a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800215e:	2200      	movs	r2, #0
 8002160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002164:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800216c:	4642      	mov	r2, r8
 800216e:	464b      	mov	r3, r9
 8002170:	1891      	adds	r1, r2, r2
 8002172:	61b9      	str	r1, [r7, #24]
 8002174:	415b      	adcs	r3, r3
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800217c:	4641      	mov	r1, r8
 800217e:	1851      	adds	r1, r2, r1
 8002180:	6139      	str	r1, [r7, #16]
 8002182:	4649      	mov	r1, r9
 8002184:	414b      	adcs	r3, r1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002194:	4659      	mov	r1, fp
 8002196:	00cb      	lsls	r3, r1, #3
 8002198:	4651      	mov	r1, sl
 800219a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800219e:	4651      	mov	r1, sl
 80021a0:	00ca      	lsls	r2, r1, #3
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	4642      	mov	r2, r8
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021b0:	464b      	mov	r3, r9
 80021b2:	460a      	mov	r2, r1
 80021b4:	eb42 0303 	adc.w	r3, r2, r3
 80021b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021d4:	4649      	mov	r1, r9
 80021d6:	008b      	lsls	r3, r1, #2
 80021d8:	4641      	mov	r1, r8
 80021da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021de:	4641      	mov	r1, r8
 80021e0:	008a      	lsls	r2, r1, #2
 80021e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80021e6:	f7fe f80d 	bl	8000204 <__aeabi_uldivmod>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <UART_SetConfig+0x4e4>)
 80021f0:	fba3 1302 	umull	r1, r3, r3, r2
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	2164      	movs	r1, #100	; 0x64
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	3332      	adds	r3, #50	; 0x32
 8002202:	4a34      	ldr	r2, [pc, #208]	; (80022d4 <UART_SetConfig+0x4e4>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800220e:	441c      	add	r4, r3
 8002210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002214:	2200      	movs	r2, #0
 8002216:	673b      	str	r3, [r7, #112]	; 0x70
 8002218:	677a      	str	r2, [r7, #116]	; 0x74
 800221a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800221e:	4642      	mov	r2, r8
 8002220:	464b      	mov	r3, r9
 8002222:	1891      	adds	r1, r2, r2
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	415b      	adcs	r3, r3
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800222e:	4641      	mov	r1, r8
 8002230:	1851      	adds	r1, r2, r1
 8002232:	6039      	str	r1, [r7, #0]
 8002234:	4649      	mov	r1, r9
 8002236:	414b      	adcs	r3, r1
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002246:	4659      	mov	r1, fp
 8002248:	00cb      	lsls	r3, r1, #3
 800224a:	4651      	mov	r1, sl
 800224c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002250:	4651      	mov	r1, sl
 8002252:	00ca      	lsls	r2, r1, #3
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	4603      	mov	r3, r0
 800225a:	4642      	mov	r2, r8
 800225c:	189b      	adds	r3, r3, r2
 800225e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002260:	464b      	mov	r3, r9
 8002262:	460a      	mov	r2, r1
 8002264:	eb42 0303 	adc.w	r3, r2, r3
 8002268:	66fb      	str	r3, [r7, #108]	; 0x6c
 800226a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	663b      	str	r3, [r7, #96]	; 0x60
 8002274:	667a      	str	r2, [r7, #100]	; 0x64
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002282:	4649      	mov	r1, r9
 8002284:	008b      	lsls	r3, r1, #2
 8002286:	4641      	mov	r1, r8
 8002288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800228c:	4641      	mov	r1, r8
 800228e:	008a      	lsls	r2, r1, #2
 8002290:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002294:	f7fd ffb6 	bl	8000204 <__aeabi_uldivmod>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <UART_SetConfig+0x4e4>)
 800229e:	fba3 1302 	umull	r1, r3, r3, r2
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2164      	movs	r1, #100	; 0x64
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	3332      	adds	r3, #50	; 0x32
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <UART_SetConfig+0x4e4>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	f003 020f 	and.w	r2, r3, #15
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4422      	add	r2, r4
 80022c4:	609a      	str	r2, [r3, #8]
}
 80022c6:	bf00      	nop
 80022c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022cc:	46bd      	mov	sp, r7
 80022ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022d2:	bf00      	nop
 80022d4:	51eb851f 	.word	0x51eb851f

080022d8 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	4820      	ldr	r0, [pc, #128]	; (8002368 <network_configure_activations+0x90>)
 80022e8:	f000 fa98 	bl	800281c <ai_platform_get_activations_map>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d02f      	beq.n	8002352 <network_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <network_configure_activations+0x90>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1d      	ldr	r2, [pc, #116]	; (800236c <network_configure_activations+0x94>)
 80022f8:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <network_configure_activations+0x90>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a1b      	ldr	r2, [pc, #108]	; (800236c <network_configure_activations+0x94>)
 8002300:	60d3      	str	r3, [r2, #12]
    
    L1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <network_configure_activations+0x90>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3318      	adds	r3, #24
 8002308:	4a19      	ldr	r2, [pc, #100]	; (8002370 <network_configure_activations+0x98>)
 800230a:	6093      	str	r3, [r2, #8]
    L1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <network_configure_activations+0x90>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3318      	adds	r3, #24
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <network_configure_activations+0x98>)
 8002314:	60d3      	str	r3, [r2, #12]
    
    L1_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <network_configure_activations+0x90>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3318      	adds	r3, #24
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <network_configure_activations+0x9c>)
 800231e:	6093      	str	r3, [r2, #8]
    L1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <network_configure_activations+0x90>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3318      	adds	r3, #24
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <network_configure_activations+0x9c>)
 8002328:	60d3      	str	r3, [r2, #12]
    
    L5_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <network_configure_activations+0x90>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <network_configure_activations+0xa0>)
 8002330:	6093      	str	r3, [r2, #8]
    L5_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <network_configure_activations+0x90>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <network_configure_activations+0xa0>)
 8002338:	60d3      	str	r3, [r2, #12]
    
    L5_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <network_configure_activations+0x90>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3304      	adds	r3, #4
 8002340:	4a0e      	ldr	r2, [pc, #56]	; (800237c <network_configure_activations+0xa4>)
 8002342:	6093      	str	r3, [r2, #8]
    L5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <network_configure_activations+0x90>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3304      	adds	r3, #4
 800234a:	4a0c      	ldr	r2, [pc, #48]	; (800237c <network_configure_activations+0xa4>)
 800234c:	60d3      	str	r3, [r2, #12]
    
    return true;
 800234e:	2301      	movs	r3, #1
 8002350:	e005      	b.n	800235e <network_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002352:	2213      	movs	r2, #19
 8002354:	2130      	movs	r1, #48	; 0x30
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fb44 	bl	80029e4 <ai_platform_network_set_error>
  return false;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000cd4 	.word	0x20000cd4
 800236c:	2000008c 	.word	0x2000008c
 8002370:	2000000c 	.word	0x2000000c
 8002374:	2000001c 	.word	0x2000001c
 8002378:	2000002c 	.word	0x2000002c
 800237c:	2000003c 	.word	0x2000003c

08002380 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	2101      	movs	r1, #1
 800238e:	482c      	ldr	r0, [pc, #176]	; (8002440 <network_configure_weights+0xc0>)
 8002390:	f000 f9f0 	bl	8002774 <ai_platform_get_weights_map>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d047      	beq.n	800242a <network_configure_weights+0xaa>
    /* Updating weights (byte) offsets */
    
    L1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <network_configure_weights+0xc4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023a2:	4a28      	ldr	r2, [pc, #160]	; (8002444 <network_configure_weights+0xc4>)
 80023a4:	6013      	str	r3, [r2, #0]
    L1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 1024);
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <network_configure_weights+0xc0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ae:	4a25      	ldr	r2, [pc, #148]	; (8002444 <network_configure_weights+0xc4>)
 80023b0:	6093      	str	r3, [r2, #8]
    L1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80023b2:	4b23      	ldr	r3, [pc, #140]	; (8002440 <network_configure_weights+0xc0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a23      	ldr	r2, [pc, #140]	; (8002444 <network_configure_weights+0xc4>)
 80023b8:	60d3      	str	r3, [r2, #12]
    
    L1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <network_configure_weights+0xc8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023c2:	4a21      	ldr	r2, [pc, #132]	; (8002448 <network_configure_weights+0xc8>)
 80023c4:	6013      	str	r3, [r2, #0]
    L1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 3424);
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <network_configure_weights+0xc0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 6356 	add.w	r3, r3, #3424	; 0xd60
 80023ce:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <network_configure_weights+0xc8>)
 80023d0:	6093      	str	r3, [r2, #8]
    L1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3424);
 80023d2:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <network_configure_weights+0xc0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f503 6356 	add.w	r3, r3, #3424	; 0xd60
 80023da:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <network_configure_weights+0xc8>)
 80023dc:	60d3      	str	r3, [r2, #12]
    
    L5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <network_configure_weights+0xcc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023e6:	4a19      	ldr	r2, [pc, #100]	; (800244c <network_configure_weights+0xcc>)
 80023e8:	6013      	str	r3, [r2, #0]
    L5_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 5024);
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <network_configure_weights+0xc0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <network_configure_weights+0xcc>)
 80023f4:	6093      	str	r3, [r2, #8]
    L5_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 5024);
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <network_configure_weights+0xc0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 80023fe:	4a13      	ldr	r2, [pc, #76]	; (800244c <network_configure_weights+0xcc>)
 8002400:	60d3      	str	r3, [r2, #12]
    
    L5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <network_configure_weights+0xd0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800240a:	4a11      	ldr	r2, [pc, #68]	; (8002450 <network_configure_weights+0xd0>)
 800240c:	6013      	str	r3, [r2, #0]
    L5_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 6624);
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <network_configure_weights+0xc0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 53cf 	add.w	r3, r3, #6624	; 0x19e0
 8002416:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <network_configure_weights+0xd0>)
 8002418:	6093      	str	r3, [r2, #8]
    L5_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 6624);
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <network_configure_weights+0xc0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f503 53cf 	add.w	r3, r3, #6624	; 0x19e0
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <network_configure_weights+0xd0>)
 8002424:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002426:	2301      	movs	r3, #1
 8002428:	e005      	b.n	8002436 <network_configure_weights+0xb6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800242a:	2212      	movs	r2, #18
 800242c:	2130      	movs	r1, #48	; 0x30
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fad8 	bl	80029e4 <ai_platform_network_set_error>
  return false;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000cd8 	.word	0x20000cd8
 8002444:	2000004c 	.word	0x2000004c
 8002448:	2000005c 	.word	0x2000005c
 800244c:	2000006c 	.word	0x2000006c
 8002450:	2000007c 	.word	0x2000007c

08002454 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fa53 	bl	8002908 <ai_platform_network_get_error>
 8002462:	4603      	mov	r3, r0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af02      	add	r7, sp, #8
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8002476:	2300      	movs	r3, #0
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	2305      	movs	r3, #5
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2301      	movs	r3, #1
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <ai_network_create+0x28>)
 8002482:	6839      	ldr	r1, [r7, #0]
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fc59 	bl	8002d3c <ai_platform_network_create>
 800248a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	200004b0 	.word	0x200004b0

08002498 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b096      	sub	sp, #88	; 0x58
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80024a4:	2100      	movs	r1, #0
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7ff ffe0 	bl	800246c <ai_network_create>
 80024ac:	4603      	mov	r3, r0
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80024b0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <ai_network_create_and_init+0x24>
        return err;
 80024b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ba:	e05d      	b.n	8002578 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f8dd 	bl	8002680 <ai_network_data_params_get>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f083 0301 	eor.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ffbc 	bl	8002454 <ai_network_get_error>
 80024dc:	4603      	mov	r3, r0
 80024de:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 80024e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e2:	e049      	b.n	8002578 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	657b      	str	r3, [r7, #84]	; 0x54
 80024ee:	e00e      	b.n	800250e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80024f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	4413      	add	r3, r2
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	330c      	adds	r3, #12
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f922 	bl	800274c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8002508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250a:	3301      	adds	r3, #1
 800250c:	657b      	str	r3, [r7, #84]	; 0x54
 800250e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002510:	461a      	mov	r2, r3
 8002512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002514:	4293      	cmp	r3, r2
 8002516:	dbeb      	blt.n	80024f0 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800251e:	2300      	movs	r3, #0
 8002520:	653b      	str	r3, [r7, #80]	; 0x50
 8002522:	e00e      	b.n	8002542 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8002524:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	3304      	adds	r3, #4
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f908 	bl	800274c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253e:	3301      	adds	r3, #1
 8002540:	653b      	str	r3, [r7, #80]	; 0x50
 8002542:	8b7b      	ldrh	r3, [r7, #26]
 8002544:	461a      	mov	r2, r3
 8002546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002548:	4293      	cmp	r3, r2
 800254a:	dbeb      	blt.n	8002524 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f107 0214 	add.w	r2, r7, #20
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f846 	bl	80025e8 <ai_network_init>
 800255c:	4603      	mov	r3, r0
 800255e:	f083 0301 	eor.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d006      	beq.n	8002576 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff71 	bl	8002454 <ai_network_get_error>
 8002572:	4603      	mov	r3, r0
 8002574:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002578:	4618      	mov	r0, r3
 800257a:	3758      	adds	r7, #88	; 0x58
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d104      	bne.n	800259a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <ai_network_inputs_get+0x2c>)
 8002592:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a06      	ldr	r2, [pc, #24]	; (80025b0 <ai_network_inputs_get+0x30>)
 8002598:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800259a:	6839      	ldr	r1, [r7, #0]
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fa27 	bl	80029f0 <ai_platform_inputs_get>
 80025a2:	4603      	mov	r3, r0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200004b0 	.word	0x200004b0
 80025b0:	a1c00100 	.word	0xa1c00100

080025b4 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <ai_network_outputs_get+0x2c>)
 80025c6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <ai_network_outputs_get+0x30>)
 80025cc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80025ce:	6839      	ldr	r1, [r7, #0]
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fae3 	bl	8002b9c <ai_platform_outputs_get>
 80025d6:	4603      	mov	r3, r0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200004b0 	.word	0x200004b0
 80025e4:	a1c00100 	.word	0xa1c00100

080025e8 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80025f2:	6839      	ldr	r1, [r7, #0]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fc77 	bl	8002ee8 <ai_platform_network_init>
 80025fa:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <ai_network_init+0x1e>
 8002602:	2300      	movs	r3, #0
 8002604:	e028      	b.n	8002658 <ai_network_init+0x70>

  ai_bool ok = true;
 8002606:	2301      	movs	r3, #1
 8002608:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800260a:	6839      	ldr	r1, [r7, #0]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7ff feb7 	bl	8002380 <network_configure_weights>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	7afb      	ldrb	r3, [r7, #11]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f7ff fe56 	bl	80022d8 <network_configure_activations>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	7afb      	ldrb	r3, [r7, #11]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fd40 	bl	80030c4 <ai_platform_network_post_init>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	7afb      	ldrb	r3, [r7, #11]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	72fb      	strb	r3, [r7, #11]

  return ok;
 8002656:	7afb      	ldrb	r3, [r7, #11]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fdaf 	bl	80031d4 <ai_platform_network_process>
 8002676:	4603      	mov	r3, r0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <ai_network_data_params_get+0x12>
 800268e:	2300      	movs	r3, #0
 8002690:	e016      	b.n	80026c0 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8002692:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <ai_network_data_params_get+0x48>)
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800269c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80026a0:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <ai_network_data_params_get+0x4c>)
 80026a2:	f107 0308 	add.w	r3, r7, #8
 80026a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026aa:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80026ae:	f107 0210 	add.w	r2, r7, #16
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	4619      	mov	r1, r3
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f903 	bl	80028c4 <ai_platform_bind_network_params>
 80026be:	4603      	mov	r3, r0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	08004780 	.word	0x08004780
 80026cc:	08004788 	.word	0x08004788

080026d0 <ai_buffer_get_size>:
 80026d0:	b378      	cbz	r0, 8002732 <ai_buffer_get_size+0x62>
 80026d2:	b410      	push	{r4}
 80026d4:	6803      	ldr	r3, [r0, #0]
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <ai_buffer_get_size+0x64>)
 80026d8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80026dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d01e      	beq.n	8002722 <ai_buffer_get_size+0x52>
 80026e4:	6984      	ldr	r4, [r0, #24]
 80026e6:	6862      	ldr	r2, [r4, #4]
 80026e8:	7d03      	ldrb	r3, [r0, #20]
 80026ea:	6941      	ldr	r1, [r0, #20]
 80026ec:	f1a3 0301 	sub.w	r3, r3, #1
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80026fa:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80026fe:	da0b      	bge.n	8002718 <ai_buffer_get_size+0x48>
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <ai_buffer_get_size+0x3a>
 8002704:	2802      	cmp	r0, #2
 8002706:	d007      	beq.n	8002718 <ai_buffer_get_size+0x48>
 8002708:	2302      	movs	r3, #2
 800270a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800270e:	3301      	adds	r3, #1
 8002710:	4298      	cmp	r0, r3
 8002712:	fb01 f202 	mul.w	r2, r1, r2
 8002716:	d1f3      	bne.n	8002700 <ai_buffer_get_size+0x30>
 8002718:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800271c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	2900      	cmp	r1, #0
 8002724:	d0de      	beq.n	80026e4 <ai_buffer_get_size+0x14>
 8002726:	6984      	ldr	r4, [r0, #24]
 8002728:	6863      	ldr	r3, [r4, #4]
 800272a:	331f      	adds	r3, #31
 800272c:	f023 021f 	bic.w	r2, r3, #31
 8002730:	e7da      	b.n	80026e8 <ai_buffer_get_size+0x18>
 8002732:	4770      	bx	lr
 8002734:	000400c0 	.word	0x000400c0

08002738 <ai_buffer_array_sane>:
 8002738:	b138      	cbz	r0, 800274a <ai_buffer_array_sane+0x12>
 800273a:	6843      	ldr	r3, [r0, #4]
 800273c:	b123      	cbz	r3, 8002748 <ai_buffer_array_sane+0x10>
 800273e:	8840      	ldrh	r0, [r0, #2]
 8002740:	3800      	subs	r0, #0
 8002742:	bf18      	it	ne
 8002744:	2001      	movne	r0, #1
 8002746:	4770      	bx	lr
 8002748:	4618      	mov	r0, r3
 800274a:	4770      	bx	lr

0800274c <ai_buffer_array_item_set_address>:
 800274c:	b150      	cbz	r0, 8002764 <ai_buffer_array_item_set_address+0x18>
 800274e:	6843      	ldr	r3, [r0, #4]
 8002750:	b14b      	cbz	r3, 8002766 <ai_buffer_array_item_set_address+0x1a>
 8002752:	8840      	ldrh	r0, [r0, #2]
 8002754:	b900      	cbnz	r0, 8002758 <ai_buffer_array_item_set_address+0xc>
 8002756:	4770      	bx	lr
 8002758:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800275c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002760:	2001      	movs	r0, #1
 8002762:	604a      	str	r2, [r1, #4]
 8002764:	4770      	bx	lr
 8002766:	4618      	mov	r0, r3
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop

0800276c <_ai_platform_acquire_crc>:
 800276c:	2001      	movs	r0, #1
 800276e:	4770      	bx	lr

08002770 <_ai_platform_release_crc>:
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop

08002774 <ai_platform_get_weights_map>:
 8002774:	2a00      	cmp	r2, #0
 8002776:	d037      	beq.n	80027e8 <ai_platform_get_weights_map+0x74>
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	4604      	mov	r4, r0
 800277c:	b1a0      	cbz	r0, 80027a8 <ai_platform_get_weights_map+0x34>
 800277e:	460f      	mov	r7, r1
 8002780:	b191      	cbz	r1, 80027a8 <ai_platform_get_weights_map+0x34>
 8002782:	4b25      	ldr	r3, [pc, #148]	; (8002818 <ai_platform_get_weights_map+0xa4>)
 8002784:	6810      	ldr	r0, [r2, #0]
 8002786:	4298      	cmp	r0, r3
 8002788:	4615      	mov	r5, r2
 800278a:	d00f      	beq.n	80027ac <ai_platform_get_weights_map+0x38>
 800278c:	6855      	ldr	r5, [r2, #4]
 800278e:	b15d      	cbz	r5, 80027a8 <ai_platform_get_weights_map+0x34>
 8002790:	682e      	ldr	r6, [r5, #0]
 8002792:	429e      	cmp	r6, r3
 8002794:	d02a      	beq.n	80027ec <ai_platform_get_weights_map+0x78>
 8002796:	f1a1 0001 	sub.w	r0, r1, #1
 800279a:	6025      	str	r5, [r4, #0]
 800279c:	fab0 f080 	clz	r0, r0
 80027a0:	0940      	lsrs	r0, r0, #5
 80027a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a4:	42a7      	cmp	r7, r4
 80027a6:	d034      	beq.n	8002812 <ai_platform_get_weights_map+0x9e>
 80027a8:	2000      	movs	r0, #0
 80027aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027ac:	1d10      	adds	r0, r2, #4
 80027ae:	f7ff ffc3 	bl	8002738 <ai_buffer_array_sane>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d0f8      	beq.n	80027a8 <ai_platform_get_weights_map+0x34>
 80027b6:	88eb      	ldrh	r3, [r5, #6]
 80027b8:	429f      	cmp	r7, r3
 80027ba:	d1f5      	bne.n	80027a8 <ai_platform_get_weights_map+0x34>
 80027bc:	f04f 0e00 	mov.w	lr, #0
 80027c0:	1f23      	subs	r3, r4, #4
 80027c2:	4670      	mov	r0, lr
 80027c4:	68aa      	ldr	r2, [r5, #8]
 80027c6:	eb02 0c0e 	add.w	ip, r2, lr
 80027ca:	f10e 0e1c 	add.w	lr, lr, #28
 80027ce:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80027d2:	b124      	cbz	r4, 80027de <ai_platform_get_weights_map+0x6a>
 80027d4:	3001      	adds	r0, #1
 80027d6:	4287      	cmp	r7, r0
 80027d8:	f843 4f04 	str.w	r4, [r3, #4]!
 80027dc:	d1f2      	bne.n	80027c4 <ai_platform_get_weights_map+0x50>
 80027de:	1a38      	subs	r0, r7, r0
 80027e0:	fab0 f080 	clz	r0, r0
 80027e4:	0940      	lsrs	r0, r0, #5
 80027e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027e8:	2000      	movs	r0, #0
 80027ea:	4770      	bx	lr
 80027ec:	1f23      	subs	r3, r4, #4
 80027ee:	4628      	mov	r0, r5
 80027f0:	2400      	movs	r4, #0
 80027f2:	e000      	b.n	80027f6 <ai_platform_get_weights_map+0x82>
 80027f4:	4614      	mov	r4, r2
 80027f6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80027fa:	42b2      	cmp	r2, r6
 80027fc:	d0d2      	beq.n	80027a4 <ai_platform_get_weights_map+0x30>
 80027fe:	f843 2f04 	str.w	r2, [r3, #4]!
 8002802:	1c62      	adds	r2, r4, #1
 8002804:	4297      	cmp	r7, r2
 8002806:	d1f5      	bne.n	80027f4 <ai_platform_get_weights_map+0x80>
 8002808:	3402      	adds	r4, #2
 800280a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800280e:	42b3      	cmp	r3, r6
 8002810:	d1ca      	bne.n	80027a8 <ai_platform_get_weights_map+0x34>
 8002812:	2001      	movs	r0, #1
 8002814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002816:	bf00      	nop
 8002818:	a1facade 	.word	0xa1facade

0800281c <ai_platform_get_activations_map>:
 800281c:	2a00      	cmp	r2, #0
 800281e:	d038      	beq.n	8002892 <ai_platform_get_activations_map+0x76>
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	4604      	mov	r4, r0
 8002824:	b1a0      	cbz	r0, 8002850 <ai_platform_get_activations_map+0x34>
 8002826:	460f      	mov	r7, r1
 8002828:	b191      	cbz	r1, 8002850 <ai_platform_get_activations_map+0x34>
 800282a:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <ai_platform_get_activations_map+0xa4>)
 800282c:	6810      	ldr	r0, [r2, #0]
 800282e:	4298      	cmp	r0, r3
 8002830:	4615      	mov	r5, r2
 8002832:	d00f      	beq.n	8002854 <ai_platform_get_activations_map+0x38>
 8002834:	6a15      	ldr	r5, [r2, #32]
 8002836:	b15d      	cbz	r5, 8002850 <ai_platform_get_activations_map+0x34>
 8002838:	682e      	ldr	r6, [r5, #0]
 800283a:	429e      	cmp	r6, r3
 800283c:	d02b      	beq.n	8002896 <ai_platform_get_activations_map+0x7a>
 800283e:	f1a1 0001 	sub.w	r0, r1, #1
 8002842:	6025      	str	r5, [r4, #0]
 8002844:	fab0 f080 	clz	r0, r0
 8002848:	0940      	lsrs	r0, r0, #5
 800284a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800284c:	42a7      	cmp	r7, r4
 800284e:	d035      	beq.n	80028bc <ai_platform_get_activations_map+0xa0>
 8002850:	2000      	movs	r0, #0
 8002852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002854:	f102 000c 	add.w	r0, r2, #12
 8002858:	f7ff ff6e 	bl	8002738 <ai_buffer_array_sane>
 800285c:	2800      	cmp	r0, #0
 800285e:	d0f7      	beq.n	8002850 <ai_platform_get_activations_map+0x34>
 8002860:	89eb      	ldrh	r3, [r5, #14]
 8002862:	429f      	cmp	r7, r3
 8002864:	d1f4      	bne.n	8002850 <ai_platform_get_activations_map+0x34>
 8002866:	f04f 0e00 	mov.w	lr, #0
 800286a:	1f23      	subs	r3, r4, #4
 800286c:	4670      	mov	r0, lr
 800286e:	692a      	ldr	r2, [r5, #16]
 8002870:	eb02 0c0e 	add.w	ip, r2, lr
 8002874:	f10e 0e1c 	add.w	lr, lr, #28
 8002878:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800287c:	b124      	cbz	r4, 8002888 <ai_platform_get_activations_map+0x6c>
 800287e:	3001      	adds	r0, #1
 8002880:	4287      	cmp	r7, r0
 8002882:	f843 4f04 	str.w	r4, [r3, #4]!
 8002886:	d1f2      	bne.n	800286e <ai_platform_get_activations_map+0x52>
 8002888:	1a38      	subs	r0, r7, r0
 800288a:	fab0 f080 	clz	r0, r0
 800288e:	0940      	lsrs	r0, r0, #5
 8002890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002892:	2000      	movs	r0, #0
 8002894:	4770      	bx	lr
 8002896:	1f23      	subs	r3, r4, #4
 8002898:	4628      	mov	r0, r5
 800289a:	2400      	movs	r4, #0
 800289c:	e000      	b.n	80028a0 <ai_platform_get_activations_map+0x84>
 800289e:	4614      	mov	r4, r2
 80028a0:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80028a4:	42b2      	cmp	r2, r6
 80028a6:	d0d1      	beq.n	800284c <ai_platform_get_activations_map+0x30>
 80028a8:	f843 2f04 	str.w	r2, [r3, #4]!
 80028ac:	1c62      	adds	r2, r4, #1
 80028ae:	4297      	cmp	r7, r2
 80028b0:	d1f5      	bne.n	800289e <ai_platform_get_activations_map+0x82>
 80028b2:	3402      	adds	r4, #2
 80028b4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80028b8:	42b3      	cmp	r3, r6
 80028ba:	d1c9      	bne.n	8002850 <ai_platform_get_activations_map+0x34>
 80028bc:	2001      	movs	r0, #1
 80028be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c0:	a1facade 	.word	0xa1facade

080028c4 <ai_platform_bind_network_params>:
 80028c4:	b1a0      	cbz	r0, 80028f0 <ai_platform_bind_network_params+0x2c>
 80028c6:	b1b1      	cbz	r1, 80028f6 <ai_platform_bind_network_params+0x32>
 80028c8:	b1c2      	cbz	r2, 80028fc <ai_platform_bind_network_params+0x38>
 80028ca:	b410      	push	{r4}
 80028cc:	4603      	mov	r3, r0
 80028ce:	4c0d      	ldr	r4, [pc, #52]	; (8002904 <ai_platform_bind_network_params+0x40>)
 80028d0:	f843 4b04 	str.w	r4, [r3], #4
 80028d4:	f100 0c0c 	add.w	ip, r0, #12
 80028d8:	c903      	ldmia	r1, {r0, r1}
 80028da:	e883 0003 	stmia.w	r3, {r0, r1}
 80028de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028e2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80028e6:	2301      	movs	r3, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	4603      	mov	r3, r0
 80028f2:	4618      	mov	r0, r3
 80028f4:	4770      	bx	lr
 80028f6:	460b      	mov	r3, r1
 80028f8:	4618      	mov	r0, r3
 80028fa:	4770      	bx	lr
 80028fc:	4613      	mov	r3, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	a1facade 	.word	0xa1facade

08002908 <ai_platform_network_get_error>:
 8002908:	b510      	push	{r4, lr}
 800290a:	b1f0      	cbz	r0, 800294a <ai_platform_network_get_error+0x42>
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <ai_platform_network_get_error+0xc4>)
 800290e:	6802      	ldr	r2, [r0, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	4604      	mov	r4, r0
 8002914:	d119      	bne.n	800294a <ai_platform_network_get_error+0x42>
 8002916:	f7ff ff29 	bl	800276c <_ai_platform_acquire_crc>
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <ai_platform_network_get_error+0xc8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002926:	d03c      	beq.n	80029a2 <ai_platform_network_get_error+0x9a>
 8002928:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <ai_platform_network_get_error+0xcc>)
 800292a:	2301      	movs	r3, #1
 800292c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002930:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1fb      	bne.n	8002930 <ai_platform_network_get_error+0x28>
 8002938:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <ai_platform_network_get_error+0xd0>)
 800293a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800293e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <ai_platform_network_get_error+0xd4>)
 8002944:	429a      	cmp	r2, r3
 8002946:	d038      	beq.n	80029ba <ai_platform_network_get_error+0xb2>
 8002948:	e7fe      	b.n	8002948 <ai_platform_network_get_error+0x40>
 800294a:	f7ff ff0f 	bl	800276c <_ai_platform_acquire_crc>
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <ai_platform_network_get_error+0xc8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800295a:	d010      	beq.n	800297e <ai_platform_network_get_error+0x76>
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <ai_platform_network_get_error+0xcc>)
 800295e:	2301      	movs	r3, #1
 8002960:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002964:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1fb      	bne.n	8002964 <ai_platform_network_get_error+0x5c>
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <ai_platform_network_get_error+0xd0>)
 800296e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8002972:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002976:	4b19      	ldr	r3, [pc, #100]	; (80029dc <ai_platform_network_get_error+0xd4>)
 8002978:	429a      	cmp	r2, r3
 800297a:	d00d      	beq.n	8002998 <ai_platform_network_get_error+0x90>
 800297c:	e7fe      	b.n	800297c <ai_platform_network_get_error+0x74>
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <ai_platform_network_get_error+0xd8>)
 8002980:	2301      	movs	r3, #1
 8002982:	6093      	str	r3, [r2, #8]
 8002984:	6893      	ldr	r3, [r2, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1fc      	bne.n	8002984 <ai_platform_network_get_error+0x7c>
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <ai_platform_network_get_error+0xd0>)
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <ai_platform_network_get_error+0xd4>)
 8002992:	429a      	cmp	r2, r3
 8002994:	d000      	beq.n	8002998 <ai_platform_network_get_error+0x90>
 8002996:	e7fe      	b.n	8002996 <ai_platform_network_get_error+0x8e>
 8002998:	f7ff feea 	bl	8002770 <_ai_platform_release_crc>
 800299c:	f241 0010 	movw	r0, #4112	; 0x1010
 80029a0:	bd10      	pop	{r4, pc}
 80029a2:	4a0f      	ldr	r2, [pc, #60]	; (80029e0 <ai_platform_network_get_error+0xd8>)
 80029a4:	2301      	movs	r3, #1
 80029a6:	6093      	str	r3, [r2, #8]
 80029a8:	6893      	ldr	r3, [r2, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1fc      	bne.n	80029a8 <ai_platform_network_get_error+0xa0>
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <ai_platform_network_get_error+0xd0>)
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <ai_platform_network_get_error+0xd4>)
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d107      	bne.n	80029ca <ai_platform_network_get_error+0xc2>
 80029ba:	f7ff fed9 	bl	8002770 <_ai_platform_release_crc>
 80029be:	f104 0010 	add.w	r0, r4, #16
 80029c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029c6:	f000 be8d 	b.w	80036e4 <core_get_error>
 80029ca:	e7fe      	b.n	80029ca <ai_platform_network_get_error+0xc2>
 80029cc:	a1c00100 	.word	0xa1c00100
 80029d0:	e0042000 	.word	0xe0042000
 80029d4:	58024000 	.word	0x58024000
 80029d8:	f407a5c2 	.word	0xf407a5c2
 80029dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80029e0:	40023000 	.word	0x40023000

080029e4 <ai_platform_network_set_error>:
 80029e4:	b110      	cbz	r0, 80029ec <ai_platform_network_set_error+0x8>
 80029e6:	3010      	adds	r0, #16
 80029e8:	f000 be82 	b.w	80036f0 <core_set_error>
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop

080029f0 <ai_platform_inputs_get>:
 80029f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f4:	b085      	sub	sp, #20
 80029f6:	9102      	str	r1, [sp, #8]
 80029f8:	b1f0      	cbz	r0, 8002a38 <ai_platform_inputs_get+0x48>
 80029fa:	4b62      	ldr	r3, [pc, #392]	; (8002b84 <ai_platform_inputs_get+0x194>)
 80029fc:	6802      	ldr	r2, [r0, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	4607      	mov	r7, r0
 8002a02:	d119      	bne.n	8002a38 <ai_platform_inputs_get+0x48>
 8002a04:	f7ff feb2 	bl	800276c <_ai_platform_acquire_crc>
 8002a08:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <ai_platform_inputs_get+0x198>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a14:	d03d      	beq.n	8002a92 <ai_platform_inputs_get+0xa2>
 8002a16:	4a5d      	ldr	r2, [pc, #372]	; (8002b8c <ai_platform_inputs_get+0x19c>)
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002a1e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1fb      	bne.n	8002a1e <ai_platform_inputs_get+0x2e>
 8002a26:	4b5a      	ldr	r3, [pc, #360]	; (8002b90 <ai_platform_inputs_get+0x1a0>)
 8002a28:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8002a2c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002a30:	4b58      	ldr	r3, [pc, #352]	; (8002b94 <ai_platform_inputs_get+0x1a4>)
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d039      	beq.n	8002aaa <ai_platform_inputs_get+0xba>
 8002a36:	e7fe      	b.n	8002a36 <ai_platform_inputs_get+0x46>
 8002a38:	f7ff fe98 	bl	800276c <_ai_platform_acquire_crc>
 8002a3c:	4b52      	ldr	r3, [pc, #328]	; (8002b88 <ai_platform_inputs_get+0x198>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a48:	d010      	beq.n	8002a6c <ai_platform_inputs_get+0x7c>
 8002a4a:	4a50      	ldr	r2, [pc, #320]	; (8002b8c <ai_platform_inputs_get+0x19c>)
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002a52:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1fb      	bne.n	8002a52 <ai_platform_inputs_get+0x62>
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <ai_platform_inputs_get+0x1a0>)
 8002a5c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8002a60:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002a64:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <ai_platform_inputs_get+0x1a4>)
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d00d      	beq.n	8002a86 <ai_platform_inputs_get+0x96>
 8002a6a:	e7fe      	b.n	8002a6a <ai_platform_inputs_get+0x7a>
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <ai_platform_inputs_get+0x1a8>)
 8002a6e:	2301      	movs	r3, #1
 8002a70:	6093      	str	r3, [r2, #8]
 8002a72:	6893      	ldr	r3, [r2, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1fc      	bne.n	8002a72 <ai_platform_inputs_get+0x82>
 8002a78:	4b45      	ldr	r3, [pc, #276]	; (8002b90 <ai_platform_inputs_get+0x1a0>)
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	4b45      	ldr	r3, [pc, #276]	; (8002b94 <ai_platform_inputs_get+0x1a4>)
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d000      	beq.n	8002a86 <ai_platform_inputs_get+0x96>
 8002a84:	e7fe      	b.n	8002a84 <ai_platform_inputs_get+0x94>
 8002a86:	f7ff fe73 	bl	8002770 <_ai_platform_release_crc>
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	b005      	add	sp, #20
 8002a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a92:	4a41      	ldr	r2, [pc, #260]	; (8002b98 <ai_platform_inputs_get+0x1a8>)
 8002a94:	2301      	movs	r3, #1
 8002a96:	6093      	str	r3, [r2, #8]
 8002a98:	6893      	ldr	r3, [r2, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1fc      	bne.n	8002a98 <ai_platform_inputs_get+0xa8>
 8002a9e:	4b3c      	ldr	r3, [pc, #240]	; (8002b90 <ai_platform_inputs_get+0x1a0>)
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <ai_platform_inputs_get+0x1a4>)
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d155      	bne.n	8002b56 <ai_platform_inputs_get+0x166>
 8002aaa:	f7ff fe61 	bl	8002770 <_ai_platform_release_crc>
 8002aae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d051      	beq.n	8002b58 <ai_platform_inputs_get+0x168>
 8002ab4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8002ab8:	f1ba 0f00 	cmp.w	sl, #0
 8002abc:	d04c      	beq.n	8002b58 <ai_platform_inputs_get+0x168>
 8002abe:	f04f 0b00 	mov.w	fp, #0
 8002ac2:	465d      	mov	r5, fp
 8002ac4:	9703      	str	r7, [sp, #12]
 8002ac6:	e016      	b.n	8002af6 <ai_platform_inputs_get+0x106>
 8002ac8:	9901      	ldr	r1, [sp, #4]
 8002aca:	2301      	movs	r3, #1
 8002acc:	507b      	str	r3, [r7, r1]
 8002ace:	69b1      	ldr	r1, [r6, #24]
 8002ad0:	6849      	ldr	r1, [r1, #4]
 8002ad2:	6121      	str	r1, [r4, #16]
 8002ad4:	f04f 0301 	mov.w	r3, #1
 8002ad8:	7523      	strb	r3, [r4, #20]
 8002ada:	e9c4 c200 	strd	ip, r2, [r4]
 8002ade:	6962      	ldr	r2, [r4, #20]
 8002ae0:	60a0      	str	r0, [r4, #8]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f369 221f 	bfi	r2, r9, #8, #24
 8002ae8:	f8c4 8018 	str.w	r8, [r4, #24]
 8002aec:	60e3      	str	r3, [r4, #12]
 8002aee:	3501      	adds	r5, #1
 8002af0:	f10b 0b1c 	add.w	fp, fp, #28
 8002af4:	6162      	str	r2, [r4, #20]
 8002af6:	f8ba 3000 	ldrh.w	r3, [sl]
 8002afa:	42ab      	cmp	r3, r5
 8002afc:	b2aa      	uxth	r2, r5
 8002afe:	d93a      	bls.n	8002b76 <ai_platform_inputs_get+0x186>
 8002b00:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002b04:	00e9      	lsls	r1, r5, #3
 8002b06:	9101      	str	r1, [sp, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d034      	beq.n	8002b76 <ai_platform_inputs_get+0x186>
 8002b0c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8002b10:	2e00      	cmp	r6, #0
 8002b12:	d030      	beq.n	8002b76 <ai_platform_inputs_get+0x186>
 8002b14:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002b18:	69b2      	ldr	r2, [r6, #24]
 8002b1a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8002b1e:	6810      	ldr	r0, [r2, #0]
 8002b20:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8002b24:	68b3      	ldr	r3, [r6, #8]
 8002b26:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8002b2a:	f001 fbe9 	bl	8004300 <ai_array_to_buffer_fmt>
 8002b2e:	69b1      	ldr	r1, [r6, #24]
 8002b30:	4684      	mov	ip, r0
 8002b32:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8002b36:	688a      	ldr	r2, [r1, #8]
 8002b38:	445c      	add	r4, fp
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d0c8      	beq.n	8002ad0 <ai_platform_inputs_get+0xe0>
 8002b3e:	2100      	movs	r1, #0
 8002b40:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8002b44:	6831      	ldr	r1, [r6, #0]
 8002b46:	6041      	str	r1, [r0, #4]
 8002b48:	b111      	cbz	r1, 8002b50 <ai_platform_inputs_get+0x160>
 8002b4a:	8849      	ldrh	r1, [r1, #2]
 8002b4c:	2900      	cmp	r1, #0
 8002b4e:	d1bb      	bne.n	8002ac8 <ai_platform_inputs_get+0xd8>
 8002b50:	69b1      	ldr	r1, [r6, #24]
 8002b52:	2000      	movs	r0, #0
 8002b54:	e7bc      	b.n	8002ad0 <ai_platform_inputs_get+0xe0>
 8002b56:	e7fe      	b.n	8002b56 <ai_platform_inputs_get+0x166>
 8002b58:	2218      	movs	r2, #24
 8002b5a:	2111      	movs	r1, #17
 8002b5c:	f107 0010 	add.w	r0, r7, #16
 8002b60:	f000 fdc6 	bl	80036f0 <core_set_error>
 8002b64:	2200      	movs	r2, #0
 8002b66:	4610      	mov	r0, r2
 8002b68:	9b02      	ldr	r3, [sp, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d08e      	beq.n	8002a8c <ai_platform_inputs_get+0x9c>
 8002b6e:	801a      	strh	r2, [r3, #0]
 8002b70:	b005      	add	sp, #20
 8002b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b76:	9f03      	ldr	r7, [sp, #12]
 8002b78:	2a00      	cmp	r2, #0
 8002b7a:	d0ed      	beq.n	8002b58 <ai_platform_inputs_get+0x168>
 8002b7c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8002b80:	6858      	ldr	r0, [r3, #4]
 8002b82:	e7f1      	b.n	8002b68 <ai_platform_inputs_get+0x178>
 8002b84:	a1c00100 	.word	0xa1c00100
 8002b88:	e0042000 	.word	0xe0042000
 8002b8c:	58024000 	.word	0x58024000
 8002b90:	f407a5c2 	.word	0xf407a5c2
 8002b94:	b5e8b5cd 	.word	0xb5e8b5cd
 8002b98:	40023000 	.word	0x40023000

08002b9c <ai_platform_outputs_get>:
 8002b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	b1f0      	cbz	r0, 8002be4 <ai_platform_outputs_get+0x48>
 8002ba6:	4b5f      	ldr	r3, [pc, #380]	; (8002d24 <ai_platform_outputs_get+0x188>)
 8002ba8:	6802      	ldr	r2, [r0, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	4607      	mov	r7, r0
 8002bae:	d119      	bne.n	8002be4 <ai_platform_outputs_get+0x48>
 8002bb0:	f7ff fddc 	bl	800276c <_ai_platform_acquire_crc>
 8002bb4:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <ai_platform_outputs_get+0x18c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc0:	d03d      	beq.n	8002c3e <ai_platform_outputs_get+0xa2>
 8002bc2:	4a5a      	ldr	r2, [pc, #360]	; (8002d2c <ai_platform_outputs_get+0x190>)
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002bca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1fb      	bne.n	8002bca <ai_platform_outputs_get+0x2e>
 8002bd2:	4b57      	ldr	r3, [pc, #348]	; (8002d30 <ai_platform_outputs_get+0x194>)
 8002bd4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8002bd8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002bdc:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <ai_platform_outputs_get+0x198>)
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d039      	beq.n	8002c56 <ai_platform_outputs_get+0xba>
 8002be2:	e7fe      	b.n	8002be2 <ai_platform_outputs_get+0x46>
 8002be4:	f7ff fdc2 	bl	800276c <_ai_platform_acquire_crc>
 8002be8:	4b4f      	ldr	r3, [pc, #316]	; (8002d28 <ai_platform_outputs_get+0x18c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf4:	d010      	beq.n	8002c18 <ai_platform_outputs_get+0x7c>
 8002bf6:	4a4d      	ldr	r2, [pc, #308]	; (8002d2c <ai_platform_outputs_get+0x190>)
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002bfe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1fb      	bne.n	8002bfe <ai_platform_outputs_get+0x62>
 8002c06:	4b4a      	ldr	r3, [pc, #296]	; (8002d30 <ai_platform_outputs_get+0x194>)
 8002c08:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8002c0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002c10:	4b48      	ldr	r3, [pc, #288]	; (8002d34 <ai_platform_outputs_get+0x198>)
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d00d      	beq.n	8002c32 <ai_platform_outputs_get+0x96>
 8002c16:	e7fe      	b.n	8002c16 <ai_platform_outputs_get+0x7a>
 8002c18:	4a47      	ldr	r2, [pc, #284]	; (8002d38 <ai_platform_outputs_get+0x19c>)
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	6093      	str	r3, [r2, #8]
 8002c1e:	6893      	ldr	r3, [r2, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1fc      	bne.n	8002c1e <ai_platform_outputs_get+0x82>
 8002c24:	4b42      	ldr	r3, [pc, #264]	; (8002d30 <ai_platform_outputs_get+0x194>)
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	4b42      	ldr	r3, [pc, #264]	; (8002d34 <ai_platform_outputs_get+0x198>)
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d000      	beq.n	8002c32 <ai_platform_outputs_get+0x96>
 8002c30:	e7fe      	b.n	8002c30 <ai_platform_outputs_get+0x94>
 8002c32:	f7ff fd9d 	bl	8002770 <_ai_platform_release_crc>
 8002c36:	2000      	movs	r0, #0
 8002c38:	b005      	add	sp, #20
 8002c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c3e:	4a3e      	ldr	r2, [pc, #248]	; (8002d38 <ai_platform_outputs_get+0x19c>)
 8002c40:	2301      	movs	r3, #1
 8002c42:	6093      	str	r3, [r2, #8]
 8002c44:	6893      	ldr	r3, [r2, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1fc      	bne.n	8002c44 <ai_platform_outputs_get+0xa8>
 8002c4a:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <ai_platform_outputs_get+0x194>)
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <ai_platform_outputs_get+0x198>)
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d150      	bne.n	8002cf8 <ai_platform_outputs_get+0x15c>
 8002c56:	f7ff fd8b 	bl	8002770 <_ai_platform_release_crc>
 8002c5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d958      	bls.n	8002d12 <ai_platform_outputs_get+0x176>
 8002c60:	f04f 0b00 	mov.w	fp, #0
 8002c64:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8002c68:	9703      	str	r7, [sp, #12]
 8002c6a:	465d      	mov	r5, fp
 8002c6c:	e016      	b.n	8002c9c <ai_platform_outputs_get+0x100>
 8002c6e:	9901      	ldr	r1, [sp, #4]
 8002c70:	2301      	movs	r3, #1
 8002c72:	507b      	str	r3, [r7, r1]
 8002c74:	69b1      	ldr	r1, [r6, #24]
 8002c76:	6849      	ldr	r1, [r1, #4]
 8002c78:	6121      	str	r1, [r4, #16]
 8002c7a:	f04f 0301 	mov.w	r3, #1
 8002c7e:	7523      	strb	r3, [r4, #20]
 8002c80:	e9c4 c200 	strd	ip, r2, [r4]
 8002c84:	6962      	ldr	r2, [r4, #20]
 8002c86:	60a0      	str	r0, [r4, #8]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f369 221f 	bfi	r2, r9, #8, #24
 8002c8e:	f8c4 8018 	str.w	r8, [r4, #24]
 8002c92:	60e3      	str	r3, [r4, #12]
 8002c94:	3501      	adds	r5, #1
 8002c96:	f10b 0b1c 	add.w	fp, fp, #28
 8002c9a:	6162      	str	r2, [r4, #20]
 8002c9c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002ca0:	42ab      	cmp	r3, r5
 8002ca2:	b2aa      	uxth	r2, r5
 8002ca4:	d929      	bls.n	8002cfa <ai_platform_outputs_get+0x15e>
 8002ca6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002caa:	00e9      	lsls	r1, r5, #3
 8002cac:	9101      	str	r1, [sp, #4]
 8002cae:	b323      	cbz	r3, 8002cfa <ai_platform_outputs_get+0x15e>
 8002cb0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8002cb4:	b30e      	cbz	r6, 8002cfa <ai_platform_outputs_get+0x15e>
 8002cb6:	f8da 3014 	ldr.w	r3, [sl, #20]
 8002cba:	69b2      	ldr	r2, [r6, #24]
 8002cbc:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8002cc0:	6810      	ldr	r0, [r2, #0]
 8002cc2:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8002cc6:	68b3      	ldr	r3, [r6, #8]
 8002cc8:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8002ccc:	f001 fb18 	bl	8004300 <ai_array_to_buffer_fmt>
 8002cd0:	69b1      	ldr	r1, [r6, #24]
 8002cd2:	4684      	mov	ip, r0
 8002cd4:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8002cd8:	688a      	ldr	r2, [r1, #8]
 8002cda:	445c      	add	r4, fp
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	d0ca      	beq.n	8002c76 <ai_platform_outputs_get+0xda>
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8002ce6:	6831      	ldr	r1, [r6, #0]
 8002ce8:	6041      	str	r1, [r0, #4]
 8002cea:	b111      	cbz	r1, 8002cf2 <ai_platform_outputs_get+0x156>
 8002cec:	8849      	ldrh	r1, [r1, #2]
 8002cee:	2900      	cmp	r1, #0
 8002cf0:	d1bd      	bne.n	8002c6e <ai_platform_outputs_get+0xd2>
 8002cf2:	69b1      	ldr	r1, [r6, #24]
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	e7be      	b.n	8002c76 <ai_platform_outputs_get+0xda>
 8002cf8:	e7fe      	b.n	8002cf8 <ai_platform_outputs_get+0x15c>
 8002cfa:	9f03      	ldr	r7, [sp, #12]
 8002cfc:	b14a      	cbz	r2, 8002d12 <ai_platform_outputs_get+0x176>
 8002cfe:	f8da 3014 	ldr.w	r3, [sl, #20]
 8002d02:	6858      	ldr	r0, [r3, #4]
 8002d04:	9b02      	ldr	r3, [sp, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d096      	beq.n	8002c38 <ai_platform_outputs_get+0x9c>
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	b005      	add	sp, #20
 8002d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d12:	2218      	movs	r2, #24
 8002d14:	2111      	movs	r1, #17
 8002d16:	f107 0010 	add.w	r0, r7, #16
 8002d1a:	f000 fce9 	bl	80036f0 <core_set_error>
 8002d1e:	2200      	movs	r2, #0
 8002d20:	4610      	mov	r0, r2
 8002d22:	e7ef      	b.n	8002d04 <ai_platform_outputs_get+0x168>
 8002d24:	a1c00100 	.word	0xa1c00100
 8002d28:	e0042000 	.word	0xe0042000
 8002d2c:	58024000 	.word	0x58024000
 8002d30:	f407a5c2 	.word	0xf407a5c2
 8002d34:	b5e8b5cd 	.word	0xb5e8b5cd
 8002d38:	40023000 	.word	0x40023000

08002d3c <ai_platform_network_create>:
 8002d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d40:	b083      	sub	sp, #12
 8002d42:	4606      	mov	r6, r0
 8002d44:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8002d48:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8002d4c:	4615      	mov	r5, r2
 8002d4e:	461f      	mov	r7, r3
 8002d50:	f7ff fd0c 	bl	800276c <_ai_platform_acquire_crc>
 8002d54:	b188      	cbz	r0, 8002d7a <ai_platform_network_create+0x3e>
 8002d56:	4a5d      	ldr	r2, [pc, #372]	; (8002ecc <ai_platform_network_create+0x190>)
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002d5e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002d62:	4603      	mov	r3, r0
 8002d64:	d00e      	beq.n	8002d84 <ai_platform_network_create+0x48>
 8002d66:	4a5a      	ldr	r2, [pc, #360]	; (8002ed0 <ai_platform_network_create+0x194>)
 8002d68:	2118      	movs	r1, #24
 8002d6a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8002d6e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8002d72:	2918      	cmp	r1, #24
 8002d74:	d018      	beq.n	8002da8 <ai_platform_network_create+0x6c>
 8002d76:	f7ff fcfb 	bl	8002770 <_ai_platform_release_crc>
 8002d7a:	f244 1033 	movw	r0, #16691	; 0x4133
 8002d7e:	b003      	add	sp, #12
 8002d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d84:	4a53      	ldr	r2, [pc, #332]	; (8002ed4 <ai_platform_network_create+0x198>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	6091      	str	r1, [r2, #8]
 8002d8a:	2114      	movs	r1, #20
 8002d8c:	e001      	b.n	8002d92 <ai_platform_network_create+0x56>
 8002d8e:	3901      	subs	r1, #1
 8002d90:	d002      	beq.n	8002d98 <ai_platform_network_create+0x5c>
 8002d92:	6894      	ldr	r4, [r2, #8]
 8002d94:	2c00      	cmp	r4, #0
 8002d96:	d1fa      	bne.n	8002d8e <ai_platform_network_create+0x52>
 8002d98:	4a4e      	ldr	r2, [pc, #312]	; (8002ed4 <ai_platform_network_create+0x198>)
 8002d9a:	6891      	ldr	r1, [r2, #8]
 8002d9c:	b911      	cbnz	r1, 8002da4 <ai_platform_network_create+0x68>
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	3201      	adds	r2, #1
 8002da2:	d008      	beq.n	8002db6 <ai_platform_network_create+0x7a>
 8002da4:	4618      	mov	r0, r3
 8002da6:	e7e6      	b.n	8002d76 <ai_platform_network_create+0x3a>
 8002da8:	2101      	movs	r1, #1
 8002daa:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8002dae:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8002db2:	2900      	cmp	r1, #0
 8002db4:	d1fb      	bne.n	8002dae <ai_platform_network_create+0x72>
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fcda 	bl	8002770 <_ai_platform_release_crc>
 8002dbc:	f7ff fcd6 	bl	800276c <_ai_platform_acquire_crc>
 8002dc0:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <ai_platform_network_create+0x190>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dcc:	d010      	beq.n	8002df0 <ai_platform_network_create+0xb4>
 8002dce:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <ai_platform_network_create+0x194>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8002dd6:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8002dda:	2900      	cmp	r1, #0
 8002ddc:	d1fb      	bne.n	8002dd6 <ai_platform_network_create+0x9a>
 8002dde:	4a3e      	ldr	r2, [pc, #248]	; (8002ed8 <ai_platform_network_create+0x19c>)
 8002de0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8002de4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8002de8:	4b3c      	ldr	r3, [pc, #240]	; (8002edc <ai_platform_network_create+0x1a0>)
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d00c      	beq.n	8002e08 <ai_platform_network_create+0xcc>
 8002dee:	e7fe      	b.n	8002dee <ai_platform_network_create+0xb2>
 8002df0:	4a38      	ldr	r2, [pc, #224]	; (8002ed4 <ai_platform_network_create+0x198>)
 8002df2:	2301      	movs	r3, #1
 8002df4:	6093      	str	r3, [r2, #8]
 8002df6:	6893      	ldr	r3, [r2, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1fc      	bne.n	8002df6 <ai_platform_network_create+0xba>
 8002dfc:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <ai_platform_network_create+0x19c>)
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	4b36      	ldr	r3, [pc, #216]	; (8002edc <ai_platform_network_create+0x1a0>)
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d122      	bne.n	8002e4e <ai_platform_network_create+0x112>
 8002e08:	f7ff fcb2 	bl	8002770 <_ai_platform_release_crc>
 8002e0c:	b38e      	cbz	r6, 8002e72 <ai_platform_network_create+0x136>
 8002e0e:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <ai_platform_network_create+0x1a4>)
 8002e10:	602b      	str	r3, [r5, #0]
 8002e12:	6035      	str	r5, [r6, #0]
 8002e14:	f000 fc64 	bl	80036e0 <core_init>
 8002e18:	b1d0      	cbz	r0, 8002e50 <ai_platform_network_create+0x114>
 8002e1a:	f7ff fca7 	bl	800276c <_ai_platform_acquire_crc>
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <ai_platform_network_create+0x190>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2a:	d025      	beq.n	8002e78 <ai_platform_network_create+0x13c>
 8002e2c:	4a28      	ldr	r2, [pc, #160]	; (8002ed0 <ai_platform_network_create+0x194>)
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002e34:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1fb      	bne.n	8002e34 <ai_platform_network_create+0xf8>
 8002e3c:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <ai_platform_network_create+0x19c>)
 8002e3e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8002e42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <ai_platform_network_create+0x1a0>)
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d022      	beq.n	8002e92 <ai_platform_network_create+0x156>
 8002e4c:	e7fe      	b.n	8002e4c <ai_platform_network_create+0x110>
 8002e4e:	e7fe      	b.n	8002e4e <ai_platform_network_create+0x112>
 8002e50:	2430      	movs	r4, #48	; 0x30
 8002e52:	2300      	movs	r3, #0
 8002e54:	6033      	str	r3, [r6, #0]
 8002e56:	2610      	movs	r6, #16
 8002e58:	464a      	mov	r2, r9
 8002e5a:	4641      	mov	r1, r8
 8002e5c:	4638      	mov	r0, r7
 8002e5e:	f001 fa31 	bl	80042c4 <ai_version_get>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2000      	movs	r0, #0
 8002e66:	f364 0007 	bfi	r0, r4, #0, #8
 8002e6a:	64ab      	str	r3, [r5, #72]	; 0x48
 8002e6c:	f366 201f 	bfi	r0, r6, #8, #24
 8002e70:	e785      	b.n	8002d7e <ai_platform_network_create+0x42>
 8002e72:	f241 0010 	movw	r0, #4112	; 0x1010
 8002e76:	e782      	b.n	8002d7e <ai_platform_network_create+0x42>
 8002e78:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <ai_platform_network_create+0x198>)
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	6093      	str	r3, [r2, #8]
 8002e7e:	6893      	ldr	r3, [r2, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1fc      	bne.n	8002e7e <ai_platform_network_create+0x142>
 8002e84:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <ai_platform_network_create+0x19c>)
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	4b14      	ldr	r3, [pc, #80]	; (8002edc <ai_platform_network_create+0x1a0>)
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d000      	beq.n	8002e92 <ai_platform_network_create+0x156>
 8002e90:	e7fe      	b.n	8002e90 <ai_platform_network_create+0x154>
 8002e92:	f7ff fc6d 	bl	8002770 <_ai_platform_release_crc>
 8002e96:	2200      	movs	r2, #0
 8002e98:	4641      	mov	r1, r8
 8002e9a:	4638      	mov	r0, r7
 8002e9c:	f001 fa12 	bl	80042c4 <ai_version_get>
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	2105      	movs	r1, #5
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f001 fa0c 	bl	80042c4 <ai_version_get>
 8002eac:	4284      	cmp	r4, r0
 8002eae:	d001      	beq.n	8002eb4 <ai_platform_network_create+0x178>
 8002eb0:	2401      	movs	r4, #1
 8002eb2:	e7ce      	b.n	8002e52 <ai_platform_network_create+0x116>
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <ai_platform_network_create+0x1a8>)
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	a801      	add	r0, sp, #4
 8002eba:	f001 f849 	bl	8003f50 <ai_check_custom_types>
 8002ebe:	b110      	cbz	r0, 8002ec6 <ai_platform_network_create+0x18a>
 8002ec0:	2600      	movs	r6, #0
 8002ec2:	4634      	mov	r4, r6
 8002ec4:	e7c8      	b.n	8002e58 <ai_platform_network_create+0x11c>
 8002ec6:	2402      	movs	r4, #2
 8002ec8:	e7c3      	b.n	8002e52 <ai_platform_network_create+0x116>
 8002eca:	bf00      	nop
 8002ecc:	e0042000 	.word	0xe0042000
 8002ed0:	58024000 	.word	0x58024000
 8002ed4:	40023000 	.word	0x40023000
 8002ed8:	f407a5c2 	.word	0xf407a5c2
 8002edc:	b5e8b5cd 	.word	0xb5e8b5cd
 8002ee0:	a1c00100 	.word	0xa1c00100
 8002ee4:	84048403 	.word	0x84048403

08002ee8 <ai_platform_network_init>:
 8002ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eec:	b1f8      	cbz	r0, 8002f2e <ai_platform_network_init+0x46>
 8002eee:	4b6e      	ldr	r3, [pc, #440]	; (80030a8 <ai_platform_network_init+0x1c0>)
 8002ef0:	6802      	ldr	r2, [r0, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	d11a      	bne.n	8002f2e <ai_platform_network_init+0x46>
 8002ef8:	460e      	mov	r6, r1
 8002efa:	f7ff fc37 	bl	800276c <_ai_platform_acquire_crc>
 8002efe:	4b6b      	ldr	r3, [pc, #428]	; (80030ac <ai_platform_network_init+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d03d      	beq.n	8002f88 <ai_platform_network_init+0xa0>
 8002f0c:	4a68      	ldr	r2, [pc, #416]	; (80030b0 <ai_platform_network_init+0x1c8>)
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002f14:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1fb      	bne.n	8002f14 <ai_platform_network_init+0x2c>
 8002f1c:	4b65      	ldr	r3, [pc, #404]	; (80030b4 <ai_platform_network_init+0x1cc>)
 8002f1e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8002f22:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002f26:	4b64      	ldr	r3, [pc, #400]	; (80030b8 <ai_platform_network_init+0x1d0>)
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d039      	beq.n	8002fa0 <ai_platform_network_init+0xb8>
 8002f2c:	e7fe      	b.n	8002f2c <ai_platform_network_init+0x44>
 8002f2e:	f7ff fc1d 	bl	800276c <_ai_platform_acquire_crc>
 8002f32:	4b5e      	ldr	r3, [pc, #376]	; (80030ac <ai_platform_network_init+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3e:	d010      	beq.n	8002f62 <ai_platform_network_init+0x7a>
 8002f40:	4a5b      	ldr	r2, [pc, #364]	; (80030b0 <ai_platform_network_init+0x1c8>)
 8002f42:	2301      	movs	r3, #1
 8002f44:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8002f48:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1fb      	bne.n	8002f48 <ai_platform_network_init+0x60>
 8002f50:	4b58      	ldr	r3, [pc, #352]	; (80030b4 <ai_platform_network_init+0x1cc>)
 8002f52:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8002f56:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8002f5a:	4b57      	ldr	r3, [pc, #348]	; (80030b8 <ai_platform_network_init+0x1d0>)
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d00d      	beq.n	8002f7c <ai_platform_network_init+0x94>
 8002f60:	e7fe      	b.n	8002f60 <ai_platform_network_init+0x78>
 8002f62:	4a56      	ldr	r2, [pc, #344]	; (80030bc <ai_platform_network_init+0x1d4>)
 8002f64:	2301      	movs	r3, #1
 8002f66:	6093      	str	r3, [r2, #8]
 8002f68:	6893      	ldr	r3, [r2, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1fc      	bne.n	8002f68 <ai_platform_network_init+0x80>
 8002f6e:	4b51      	ldr	r3, [pc, #324]	; (80030b4 <ai_platform_network_init+0x1cc>)
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <ai_platform_network_init+0x1d0>)
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d000      	beq.n	8002f7c <ai_platform_network_init+0x94>
 8002f7a:	e7fe      	b.n	8002f7a <ai_platform_network_init+0x92>
 8002f7c:	f7ff fbf8 	bl	8002770 <_ai_platform_release_crc>
 8002f80:	2600      	movs	r6, #0
 8002f82:	4630      	mov	r0, r6
 8002f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f88:	4a4c      	ldr	r2, [pc, #304]	; (80030bc <ai_platform_network_init+0x1d4>)
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	6093      	str	r3, [r2, #8]
 8002f8e:	6893      	ldr	r3, [r2, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1fc      	bne.n	8002f8e <ai_platform_network_init+0xa6>
 8002f94:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <ai_platform_network_init+0x1cc>)
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	4b47      	ldr	r3, [pc, #284]	; (80030b8 <ai_platform_network_init+0x1d0>)
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d11c      	bne.n	8002fda <ai_platform_network_init+0xf2>
 8002fa0:	f7ff fbe6 	bl	8002770 <_ai_platform_release_crc>
 8002fa4:	2e00      	cmp	r6, #0
 8002fa6:	d06f      	beq.n	8003088 <ai_platform_network_init+0x1a0>
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <ai_platform_network_init+0x1d8>)
 8002faa:	6832      	ldr	r2, [r6, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d115      	bne.n	8002fdc <ai_platform_network_init+0xf4>
 8002fb0:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8002fb4:	6933      	ldr	r3, [r6, #16]
 8002fb6:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8002fba:	89f7      	ldrh	r7, [r6, #14]
 8002fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fbe:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	84e7      	strh	r7, [r4, #38]	; 0x26
 8002fc6:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8002fca:	60e3      	str	r3, [r4, #12]
 8002fcc:	4620      	mov	r0, r4
 8002fce:	4626      	mov	r6, r4
 8002fd0:	f000 ffe8 	bl	8003fa4 <ai_layers_init_all>
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fda:	e7fe      	b.n	8002fda <ai_platform_network_init+0xf2>
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4630      	mov	r0, r6
 8002fe0:	4635      	mov	r5, r6
 8002fe2:	6876      	ldr	r6, [r6, #4]
 8002fe4:	f7ff fb74 	bl	80026d0 <ai_buffer_get_size>
 8002fe8:	f105 081c 	add.w	r8, r5, #28
 8002fec:	4681      	mov	r9, r0
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4640      	mov	r0, r8
 8002ff2:	6a2f      	ldr	r7, [r5, #32]
 8002ff4:	f7ff fb6c 	bl	80026d0 <ai_buffer_get_size>
 8002ff8:	f1b9 0f00 	cmp.w	r9, #0
 8002ffc:	d025      	beq.n	800304a <ai_platform_network_init+0x162>
 8002ffe:	2201      	movs	r2, #1
 8003000:	4696      	mov	lr, r2
 8003002:	bb30      	cbnz	r0, 8003052 <ai_platform_network_init+0x16a>
 8003004:	4680      	mov	r8, r0
 8003006:	4607      	mov	r7, r0
 8003008:	b376      	cbz	r6, 8003068 <ai_platform_network_init+0x180>
 800300a:	8be3      	ldrh	r3, [r4, #30]
 800300c:	4573      	cmp	r3, lr
 800300e:	d323      	bcc.n	8003058 <ai_platform_network_init+0x170>
 8003010:	b142      	cbz	r2, 8003024 <ai_platform_network_init+0x13c>
 8003012:	46ac      	mov	ip, r5
 8003014:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003018:	6a25      	ldr	r5, [r4, #32]
 800301a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800301c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003020:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003024:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003026:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800302a:	2600      	movs	r6, #0
 800302c:	42bb      	cmp	r3, r7
 800302e:	83a6      	strh	r6, [r4, #28]
 8003030:	d323      	bcc.n	800307a <ai_platform_network_init+0x192>
 8003032:	b37f      	cbz	r7, 8003094 <ai_platform_network_init+0x1ac>
 8003034:	46c4      	mov	ip, r8
 8003036:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800303a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800303c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003042:	46b6      	mov	lr, r6
 8003044:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003048:	e7bb      	b.n	8002fc2 <ai_platform_network_init+0xda>
 800304a:	464a      	mov	r2, r9
 800304c:	46ce      	mov	lr, r9
 800304e:	464d      	mov	r5, r9
 8003050:	e7d7      	b.n	8003002 <ai_platform_network_init+0x11a>
 8003052:	b30f      	cbz	r7, 8003098 <ai_platform_network_init+0x1b0>
 8003054:	2701      	movs	r7, #1
 8003056:	e7d7      	b.n	8003008 <ai_platform_network_init+0x120>
 8003058:	2212      	movs	r2, #18
 800305a:	2116      	movs	r1, #22
 800305c:	f104 0010 	add.w	r0, r4, #16
 8003060:	f000 fb46 	bl	80036f0 <core_set_error>
 8003064:	2600      	movs	r6, #0
 8003066:	e78c      	b.n	8002f82 <ai_platform_network_init+0x9a>
 8003068:	f1b9 0f00 	cmp.w	r9, #0
 800306c:	d0cd      	beq.n	800300a <ai_platform_network_init+0x122>
 800306e:	2110      	movs	r1, #16
 8003070:	2212      	movs	r2, #18
 8003072:	1860      	adds	r0, r4, r1
 8003074:	f000 fb3c 	bl	80036f0 <core_set_error>
 8003078:	e783      	b.n	8002f82 <ai_platform_network_init+0x9a>
 800307a:	2213      	movs	r2, #19
 800307c:	2116      	movs	r1, #22
 800307e:	f104 0010 	add.w	r0, r4, #16
 8003082:	f000 fb35 	bl	80036f0 <core_set_error>
 8003086:	e77c      	b.n	8002f82 <ai_platform_network_init+0x9a>
 8003088:	2110      	movs	r1, #16
 800308a:	2211      	movs	r2, #17
 800308c:	1860      	adds	r0, r4, r1
 800308e:	f000 fb2f 	bl	80036f0 <core_set_error>
 8003092:	e776      	b.n	8002f82 <ai_platform_network_init+0x9a>
 8003094:	46be      	mov	lr, r7
 8003096:	e794      	b.n	8002fc2 <ai_platform_network_init+0xda>
 8003098:	2110      	movs	r1, #16
 800309a:	2213      	movs	r2, #19
 800309c:	1860      	adds	r0, r4, r1
 800309e:	f000 fb27 	bl	80036f0 <core_set_error>
 80030a2:	463e      	mov	r6, r7
 80030a4:	e76d      	b.n	8002f82 <ai_platform_network_init+0x9a>
 80030a6:	bf00      	nop
 80030a8:	a1c00100 	.word	0xa1c00100
 80030ac:	e0042000 	.word	0xe0042000
 80030b0:	58024000 	.word	0x58024000
 80030b4:	f407a5c2 	.word	0xf407a5c2
 80030b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80030bc:	40023000 	.word	0x40023000
 80030c0:	a1facade 	.word	0xa1facade

080030c4 <ai_platform_network_post_init>:
 80030c4:	b538      	push	{r3, r4, r5, lr}
 80030c6:	b1f0      	cbz	r0, 8003106 <ai_platform_network_post_init+0x42>
 80030c8:	4b3c      	ldr	r3, [pc, #240]	; (80031bc <ai_platform_network_post_init+0xf8>)
 80030ca:	6802      	ldr	r2, [r0, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	4604      	mov	r4, r0
 80030d0:	d119      	bne.n	8003106 <ai_platform_network_post_init+0x42>
 80030d2:	f7ff fb4b 	bl	800276c <_ai_platform_acquire_crc>
 80030d6:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <ai_platform_network_post_init+0xfc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e2:	d03b      	beq.n	800315c <ai_platform_network_post_init+0x98>
 80030e4:	4a37      	ldr	r2, [pc, #220]	; (80031c4 <ai_platform_network_post_init+0x100>)
 80030e6:	2301      	movs	r3, #1
 80030e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80030ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1fb      	bne.n	80030ec <ai_platform_network_post_init+0x28>
 80030f4:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <ai_platform_network_post_init+0x104>)
 80030f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80030fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80030fe:	4b33      	ldr	r3, [pc, #204]	; (80031cc <ai_platform_network_post_init+0x108>)
 8003100:	429a      	cmp	r2, r3
 8003102:	d037      	beq.n	8003174 <ai_platform_network_post_init+0xb0>
 8003104:	e7fe      	b.n	8003104 <ai_platform_network_post_init+0x40>
 8003106:	f7ff fb31 	bl	800276c <_ai_platform_acquire_crc>
 800310a:	4b2d      	ldr	r3, [pc, #180]	; (80031c0 <ai_platform_network_post_init+0xfc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d010      	beq.n	800313a <ai_platform_network_post_init+0x76>
 8003118:	4a2a      	ldr	r2, [pc, #168]	; (80031c4 <ai_platform_network_post_init+0x100>)
 800311a:	2301      	movs	r3, #1
 800311c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003120:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1fb      	bne.n	8003120 <ai_platform_network_post_init+0x5c>
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <ai_platform_network_post_init+0x104>)
 800312a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800312e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003132:	4b26      	ldr	r3, [pc, #152]	; (80031cc <ai_platform_network_post_init+0x108>)
 8003134:	429a      	cmp	r2, r3
 8003136:	d00d      	beq.n	8003154 <ai_platform_network_post_init+0x90>
 8003138:	e7fe      	b.n	8003138 <ai_platform_network_post_init+0x74>
 800313a:	4a25      	ldr	r2, [pc, #148]	; (80031d0 <ai_platform_network_post_init+0x10c>)
 800313c:	2301      	movs	r3, #1
 800313e:	6093      	str	r3, [r2, #8]
 8003140:	6893      	ldr	r3, [r2, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1fc      	bne.n	8003140 <ai_platform_network_post_init+0x7c>
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <ai_platform_network_post_init+0x104>)
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	4b1f      	ldr	r3, [pc, #124]	; (80031cc <ai_platform_network_post_init+0x108>)
 800314e:	429a      	cmp	r2, r3
 8003150:	d000      	beq.n	8003154 <ai_platform_network_post_init+0x90>
 8003152:	e7fe      	b.n	8003152 <ai_platform_network_post_init+0x8e>
 8003154:	f7ff fb0c 	bl	8002770 <_ai_platform_release_crc>
 8003158:	2000      	movs	r0, #0
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <ai_platform_network_post_init+0x10c>)
 800315e:	2301      	movs	r3, #1
 8003160:	6093      	str	r3, [r2, #8]
 8003162:	6893      	ldr	r3, [r2, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1fc      	bne.n	8003162 <ai_platform_network_post_init+0x9e>
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <ai_platform_network_post_init+0x104>)
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <ai_platform_network_post_init+0x108>)
 8003170:	429a      	cmp	r2, r3
 8003172:	d11a      	bne.n	80031aa <ai_platform_network_post_init+0xe6>
 8003174:	f7ff fafc 	bl	8002770 <_ai_platform_release_crc>
 8003178:	68e3      	ldr	r3, [r4, #12]
 800317a:	f013 0502 	ands.w	r5, r3, #2
 800317e:	d015      	beq.n	80031ac <ai_platform_network_post_init+0xe8>
 8003180:	4620      	mov	r0, r4
 8003182:	f000 ff1d 	bl	8003fc0 <ai_layers_post_init_all>
 8003186:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003188:	b16b      	cbz	r3, 80031a6 <ai_platform_network_post_init+0xe2>
 800318a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800318c:	e007      	b.n	800319e <ai_platform_network_post_init+0xda>
 800318e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8003192:	4798      	blx	r3
 8003194:	692b      	ldr	r3, [r5, #16]
 8003196:	42ab      	cmp	r3, r5
 8003198:	d005      	beq.n	80031a6 <ai_platform_network_post_init+0xe2>
 800319a:	b123      	cbz	r3, 80031a6 <ai_platform_network_post_init+0xe2>
 800319c:	461d      	mov	r5, r3
 800319e:	4629      	mov	r1, r5
 80031a0:	2000      	movs	r0, #0
 80031a2:	2d00      	cmp	r5, #0
 80031a4:	d1f3      	bne.n	800318e <ai_platform_network_post_init+0xca>
 80031a6:	2001      	movs	r0, #1
 80031a8:	bd38      	pop	{r3, r4, r5, pc}
 80031aa:	e7fe      	b.n	80031aa <ai_platform_network_post_init+0xe6>
 80031ac:	2210      	movs	r2, #16
 80031ae:	2111      	movs	r1, #17
 80031b0:	18a0      	adds	r0, r4, r2
 80031b2:	f000 fa9d 	bl	80036f0 <core_set_error>
 80031b6:	4628      	mov	r0, r5
 80031b8:	bd38      	pop	{r3, r4, r5, pc}
 80031ba:	bf00      	nop
 80031bc:	a1c00100 	.word	0xa1c00100
 80031c0:	e0042000 	.word	0xe0042000
 80031c4:	58024000 	.word	0x58024000
 80031c8:	f407a5c2 	.word	0xf407a5c2
 80031cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80031d0:	40023000 	.word	0x40023000

080031d4 <ai_platform_network_process>:
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	460e      	mov	r6, r1
 80031da:	b085      	sub	sp, #20
 80031dc:	4693      	mov	fp, r2
 80031de:	4605      	mov	r5, r0
 80031e0:	b120      	cbz	r0, 80031ec <ai_platform_network_process+0x18>
 80031e2:	4bb8      	ldr	r3, [pc, #736]	; (80034c4 <ai_platform_network_process+0x2f0>)
 80031e4:	6802      	ldr	r2, [r0, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	bf18      	it	ne
 80031ea:	2500      	movne	r5, #0
 80031ec:	f7ff fabe 	bl	800276c <_ai_platform_acquire_crc>
 80031f0:	4bb5      	ldr	r3, [pc, #724]	; (80034c8 <ai_platform_network_process+0x2f4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fc:	d010      	beq.n	8003220 <ai_platform_network_process+0x4c>
 80031fe:	4ab3      	ldr	r2, [pc, #716]	; (80034cc <ai_platform_network_process+0x2f8>)
 8003200:	2301      	movs	r3, #1
 8003202:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003206:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1fb      	bne.n	8003206 <ai_platform_network_process+0x32>
 800320e:	4bb0      	ldr	r3, [pc, #704]	; (80034d0 <ai_platform_network_process+0x2fc>)
 8003210:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003214:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003218:	4bae      	ldr	r3, [pc, #696]	; (80034d4 <ai_platform_network_process+0x300>)
 800321a:	429a      	cmp	r2, r3
 800321c:	d00d      	beq.n	800323a <ai_platform_network_process+0x66>
 800321e:	e7fe      	b.n	800321e <ai_platform_network_process+0x4a>
 8003220:	4aad      	ldr	r2, [pc, #692]	; (80034d8 <ai_platform_network_process+0x304>)
 8003222:	2301      	movs	r3, #1
 8003224:	6093      	str	r3, [r2, #8]
 8003226:	6893      	ldr	r3, [r2, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1fc      	bne.n	8003226 <ai_platform_network_process+0x52>
 800322c:	4ba8      	ldr	r3, [pc, #672]	; (80034d0 <ai_platform_network_process+0x2fc>)
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	4ba8      	ldr	r3, [pc, #672]	; (80034d4 <ai_platform_network_process+0x300>)
 8003234:	429a      	cmp	r2, r3
 8003236:	f040 812c 	bne.w	8003492 <ai_platform_network_process+0x2be>
 800323a:	f7ff fa99 	bl	8002770 <_ai_platform_release_crc>
 800323e:	2d00      	cmp	r5, #0
 8003240:	f000 8154 	beq.w	80034ec <ai_platform_network_process+0x318>
 8003244:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8124 	beq.w	8003494 <ai_platform_network_process+0x2c0>
 800324c:	68eb      	ldr	r3, [r5, #12]
 800324e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2700      	movs	r7, #0
 8003258:	2b03      	cmp	r3, #3
 800325a:	616f      	str	r7, [r5, #20]
 800325c:	f040 813e 	bne.w	80034dc <ai_platform_network_process+0x308>
 8003260:	2e00      	cmp	r6, #0
 8003262:	f000 811d 	beq.w	80034a0 <ai_platform_network_process+0x2cc>
 8003266:	f1ba 0f00 	cmp.w	sl, #0
 800326a:	f000 8119 	beq.w	80034a0 <ai_platform_network_process+0x2cc>
 800326e:	f8ba 3000 	ldrh.w	r3, [sl]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8114 	beq.w	80034a0 <ai_platform_network_process+0x2cc>
 8003278:	69b3      	ldr	r3, [r6, #24]
 800327a:	f8cd b00c 	str.w	fp, [sp, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8003284:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d072      	beq.n	8003372 <ai_platform_network_process+0x19e>
 800328c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003290:	2c00      	cmp	r4, #0
 8003292:	d06e      	beq.n	8003372 <ai_platform_network_process+0x19e>
 8003294:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003298:	f8d3 9000 	ldr.w	r9, [r3]
 800329c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80032a0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80032a4:	f000 81e0 	beq.w	8003668 <ai_platform_network_process+0x494>
 80032a8:	69a3      	ldr	r3, [r4, #24]
 80032aa:	2101      	movs	r1, #1
 80032ac:	4630      	mov	r0, r6
 80032ae:	685d      	ldr	r5, [r3, #4]
 80032b0:	f7ff fa0e 	bl	80026d0 <ai_buffer_get_size>
 80032b4:	4285      	cmp	r5, r0
 80032b6:	f0c0 811b 	bcc.w	80034f0 <ai_platform_network_process+0x31c>
 80032ba:	68e0      	ldr	r0, [r4, #12]
 80032bc:	69b1      	ldr	r1, [r6, #24]
 80032be:	68c2      	ldr	r2, [r0, #12]
 80032c0:	68cb      	ldr	r3, [r1, #12]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	f040 8114 	bne.w	80034f0 <ai_platform_network_process+0x31c>
 80032c8:	6882      	ldr	r2, [r0, #8]
 80032ca:	688b      	ldr	r3, [r1, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	f040 810f 	bne.w	80034f0 <ai_platform_network_process+0x31c>
 80032d2:	6842      	ldr	r2, [r0, #4]
 80032d4:	684b      	ldr	r3, [r1, #4]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	f040 810a 	bne.w	80034f0 <ai_platform_network_process+0x31c>
 80032dc:	69a3      	ldr	r3, [r4, #24]
 80032de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032e2:	f001 f8a1 	bl	8004428 <ai_array_get_data_byte_size>
 80032e6:	4605      	mov	r5, r0
 80032e8:	4620      	mov	r0, r4
 80032ea:	f000 fff1 	bl	80042d0 <get_tensor_byte_size>
 80032ee:	4285      	cmp	r5, r0
 80032f0:	f0c0 80fe 	bcc.w	80034f0 <ai_platform_network_process+0x31c>
 80032f4:	69a3      	ldr	r3, [r4, #24]
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	f001 f802 	bl	8004300 <ai_array_to_buffer_fmt>
 80032fc:	6833      	ldr	r3, [r6, #0]
 80032fe:	4058      	eors	r0, r3
 8003300:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003304:	f040 81bb 	bne.w	800367e <ai_platform_network_process+0x4aa>
 8003308:	6873      	ldr	r3, [r6, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 81ae 	beq.w	800366c <ai_platform_network_process+0x498>
 8003310:	69b3      	ldr	r3, [r6, #24]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 819e 	beq.w	8003656 <ai_platform_network_process+0x482>
 800331a:	9a01      	ldr	r2, [sp, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	bf38      	it	cc
 8003320:	461a      	movcc	r2, r3
 8003322:	4620      	mov	r0, r4
 8003324:	9201      	str	r2, [sp, #4]
 8003326:	f000 ffd3 	bl	80042d0 <get_tensor_byte_size>
 800332a:	f8c8 0008 	str.w	r0, [r8, #8]
 800332e:	69b3      	ldr	r3, [r6, #24]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	fb00 f303 	mul.w	r3, r0, r3
 8003336:	f8c8 300c 	str.w	r3, [r8, #12]
 800333a:	6871      	ldr	r1, [r6, #4]
 800333c:	f8c8 1004 	str.w	r1, [r8, #4]
 8003340:	440b      	add	r3, r1
 8003342:	f849 300b 	str.w	r3, [r9, fp]
 8003346:	69a0      	ldr	r0, [r4, #24]
 8003348:	6803      	ldr	r3, [r0, #0]
 800334a:	009a      	lsls	r2, r3, #2
 800334c:	f107 0701 	add.w	r7, r7, #1
 8003350:	f106 061c 	add.w	r6, r6, #28
 8003354:	f100 80af 	bmi.w	80034b6 <ai_platform_network_process+0x2e2>
 8003358:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	4419      	add	r1, r3
 8003360:	6081      	str	r1, [r0, #8]
 8003362:	69a3      	ldr	r3, [r4, #24]
 8003364:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	f8ba 3000 	ldrh.w	r3, [sl]
 800336e:	42bb      	cmp	r3, r7
 8003370:	d888      	bhi.n	8003284 <ai_platform_network_process+0xb0>
 8003372:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8003376:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8003378:	f1bb 0f00 	cmp.w	fp, #0
 800337c:	f000 8188 	beq.w	8003690 <ai_platform_network_process+0x4bc>
 8003380:	2a01      	cmp	r2, #1
 8003382:	f240 8160 	bls.w	8003646 <ai_platform_network_process+0x472>
 8003386:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800338a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8159 	beq.w	8003646 <ai_platform_network_process+0x472>
 8003394:	465e      	mov	r6, fp
 8003396:	2700      	movs	r7, #0
 8003398:	462c      	mov	r4, r5
 800339a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80b4 	beq.w	800350c <ai_platform_network_process+0x338>
 80033a4:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	f000 80af 	beq.w	800350c <ai_platform_network_process+0x338>
 80033ae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80033b2:	f8d3 8000 	ldr.w	r8, [r3]
 80033b6:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80033ba:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80033be:	f000 8173 	beq.w	80036a8 <ai_platform_network_process+0x4d4>
 80033c2:	69ab      	ldr	r3, [r5, #24]
 80033c4:	2101      	movs	r1, #1
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	9302      	str	r3, [sp, #8]
 80033ca:	4630      	mov	r0, r6
 80033cc:	f7ff f980 	bl	80026d0 <ai_buffer_get_size>
 80033d0:	9b02      	ldr	r3, [sp, #8]
 80033d2:	4283      	cmp	r3, r0
 80033d4:	f0c0 8136 	bcc.w	8003644 <ai_platform_network_process+0x470>
 80033d8:	68e8      	ldr	r0, [r5, #12]
 80033da:	69b1      	ldr	r1, [r6, #24]
 80033dc:	68c2      	ldr	r2, [r0, #12]
 80033de:	68cb      	ldr	r3, [r1, #12]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	f040 812f 	bne.w	8003644 <ai_platform_network_process+0x470>
 80033e6:	6882      	ldr	r2, [r0, #8]
 80033e8:	688b      	ldr	r3, [r1, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	f040 812a 	bne.w	8003644 <ai_platform_network_process+0x470>
 80033f0:	6842      	ldr	r2, [r0, #4]
 80033f2:	684b      	ldr	r3, [r1, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	f040 8125 	bne.w	8003644 <ai_platform_network_process+0x470>
 80033fa:	69ab      	ldr	r3, [r5, #24]
 80033fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003400:	f001 f812 	bl	8004428 <ai_array_get_data_byte_size>
 8003404:	9002      	str	r0, [sp, #8]
 8003406:	4628      	mov	r0, r5
 8003408:	f000 ff62 	bl	80042d0 <get_tensor_byte_size>
 800340c:	9b02      	ldr	r3, [sp, #8]
 800340e:	4283      	cmp	r3, r0
 8003410:	f0c0 8118 	bcc.w	8003644 <ai_platform_network_process+0x470>
 8003414:	69ab      	ldr	r3, [r5, #24]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	f000 ff72 	bl	8004300 <ai_array_to_buffer_fmt>
 800341c:	6833      	ldr	r3, [r6, #0]
 800341e:	4058      	eors	r0, r3
 8003420:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003424:	f040 8138 	bne.w	8003698 <ai_platform_network_process+0x4c4>
 8003428:	6873      	ldr	r3, [r6, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 814f 	beq.w	80036ce <ai_platform_network_process+0x4fa>
 8003430:	69b3      	ldr	r3, [r6, #24]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8141 	beq.w	80036bc <ai_platform_network_process+0x4e8>
 800343a:	9a01      	ldr	r2, [sp, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	bf38      	it	cc
 8003440:	461a      	movcc	r2, r3
 8003442:	4628      	mov	r0, r5
 8003444:	9201      	str	r2, [sp, #4]
 8003446:	f000 ff43 	bl	80042d0 <get_tensor_byte_size>
 800344a:	f8ca 0008 	str.w	r0, [sl, #8]
 800344e:	69b3      	ldr	r3, [r6, #24]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fb00 f303 	mul.w	r3, r0, r3
 8003456:	f8ca 300c 	str.w	r3, [sl, #12]
 800345a:	6871      	ldr	r1, [r6, #4]
 800345c:	f8ca 1004 	str.w	r1, [sl, #4]
 8003460:	440b      	add	r3, r1
 8003462:	f848 300b 	str.w	r3, [r8, fp]
 8003466:	69a8      	ldr	r0, [r5, #24]
 8003468:	6803      	ldr	r3, [r0, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	f107 0701 	add.w	r7, r7, #1
 8003470:	f106 061c 	add.w	r6, r6, #28
 8003474:	d445      	bmi.n	8003502 <ai_platform_network_process+0x32e>
 8003476:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	4419      	add	r1, r3
 800347e:	6081      	str	r1, [r0, #8]
 8003480:	69ab      	ldr	r3, [r5, #24]
 8003482:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800348c:	429f      	cmp	r7, r3
 800348e:	d384      	bcc.n	800339a <ai_platform_network_process+0x1c6>
 8003490:	e03c      	b.n	800350c <ai_platform_network_process+0x338>
 8003492:	e7fe      	b.n	8003492 <ai_platform_network_process+0x2be>
 8003494:	68ea      	ldr	r2, [r5, #12]
 8003496:	616b      	str	r3, [r5, #20]
 8003498:	f002 0203 	and.w	r2, r2, #3
 800349c:	2a03      	cmp	r2, #3
 800349e:	d11d      	bne.n	80034dc <ai_platform_network_process+0x308>
 80034a0:	2217      	movs	r2, #23
 80034a2:	2112      	movs	r1, #18
 80034a4:	f105 0010 	add.w	r0, r5, #16
 80034a8:	f000 f922 	bl	80036f0 <core_set_error>
 80034ac:	2400      	movs	r4, #0
 80034ae:	4620      	mov	r0, r4
 80034b0:	b005      	add	sp, #20
 80034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b6:	f8ba 3000 	ldrh.w	r3, [sl]
 80034ba:	429f      	cmp	r7, r3
 80034bc:	f4ff aee2 	bcc.w	8003284 <ai_platform_network_process+0xb0>
 80034c0:	e757      	b.n	8003372 <ai_platform_network_process+0x19e>
 80034c2:	bf00      	nop
 80034c4:	a1c00100 	.word	0xa1c00100
 80034c8:	e0042000 	.word	0xe0042000
 80034cc:	58024000 	.word	0x58024000
 80034d0:	f407a5c2 	.word	0xf407a5c2
 80034d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80034d8:	40023000 	.word	0x40023000
 80034dc:	2230      	movs	r2, #48	; 0x30
 80034de:	2111      	movs	r1, #17
 80034e0:	f105 0010 	add.w	r0, r5, #16
 80034e4:	f000 f904 	bl	80036f0 <core_set_error>
 80034e8:	2400      	movs	r4, #0
 80034ea:	e7e0      	b.n	80034ae <ai_platform_network_process+0x2da>
 80034ec:	462c      	mov	r4, r5
 80034ee:	e7de      	b.n	80034ae <ai_platform_network_process+0x2da>
 80034f0:	9d02      	ldr	r5, [sp, #8]
 80034f2:	2218      	movs	r2, #24
 80034f4:	2112      	movs	r1, #18
 80034f6:	f105 0010 	add.w	r0, r5, #16
 80034fa:	f000 f8f9 	bl	80036f0 <core_set_error>
 80034fe:	2400      	movs	r4, #0
 8003500:	e7d5      	b.n	80034ae <ai_platform_network_process+0x2da>
 8003502:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003506:	429f      	cmp	r7, r3
 8003508:	f4ff af47 	bcc.w	800339a <ai_platform_network_process+0x1c6>
 800350c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003510:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003512:	82a3      	strh	r3, [r4, #20]
 8003514:	4625      	mov	r5, r4
 8003516:	2a00      	cmp	r2, #0
 8003518:	f040 808e 	bne.w	8003638 <ai_platform_network_process+0x464>
 800351c:	4616      	mov	r6, r2
 800351e:	4617      	mov	r7, r2
 8003520:	8aec      	ldrh	r4, [r5, #22]
 8003522:	429c      	cmp	r4, r3
 8003524:	bf38      	it	cc
 8003526:	46ab      	movcc	fp, r5
 8003528:	d2c1      	bcs.n	80034ae <ai_platform_network_process+0x2da>
 800352a:	2e00      	cmp	r6, #0
 800352c:	d030      	beq.n	8003590 <ai_platform_network_process+0x3bc>
 800352e:	f04f 0800 	mov.w	r8, #0
 8003532:	e014      	b.n	800355e <ai_platform_network_process+0x38a>
 8003534:	6882      	ldr	r2, [r0, #8]
 8003536:	68c5      	ldr	r5, [r0, #12]
 8003538:	6863      	ldr	r3, [r4, #4]
 800353a:	1b52      	subs	r2, r2, r5
 800353c:	4413      	add	r3, r2
 800353e:	6083      	str	r3, [r0, #8]
 8003540:	698b      	ldr	r3, [r1, #24]
 8003542:	6862      	ldr	r2, [r4, #4]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800354a:	f859 200a 	ldr.w	r2, [r9, sl]
 800354e:	440b      	add	r3, r1
 8003550:	4293      	cmp	r3, r2
 8003552:	bf24      	itt	cs
 8003554:	68e3      	ldrcs	r3, [r4, #12]
 8003556:	1ad3      	subcs	r3, r2, r3
 8003558:	6063      	str	r3, [r4, #4]
 800355a:	f108 0801 	add.w	r8, r8, #1
 800355e:	8833      	ldrh	r3, [r6, #0]
 8003560:	4543      	cmp	r3, r8
 8003562:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003566:	d913      	bls.n	8003590 <ai_platform_network_process+0x3bc>
 8003568:	6873      	ldr	r3, [r6, #4]
 800356a:	b18b      	cbz	r3, 8003590 <ai_platform_network_process+0x3bc>
 800356c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003570:	b171      	cbz	r1, 8003590 <ai_platform_network_process+0x3bc>
 8003572:	6988      	ldr	r0, [r1, #24]
 8003574:	68b2      	ldr	r2, [r6, #8]
 8003576:	6803      	ldr	r3, [r0, #0]
 8003578:	f8d2 9000 	ldr.w	r9, [r2]
 800357c:	009d      	lsls	r5, r3, #2
 800357e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8003582:	d5d7      	bpl.n	8003534 <ai_platform_network_process+0x360>
 8003584:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8003588:	6880      	ldr	r0, [r0, #8]
 800358a:	f000 ff89 	bl	80044a0 <memcpy>
 800358e:	e7da      	b.n	8003546 <ai_platform_network_process+0x372>
 8003590:	4658      	mov	r0, fp
 8003592:	f000 fd29 	bl	8003fe8 <ai_layers_forward_all>
 8003596:	2f00      	cmp	r7, #0
 8003598:	d03f      	beq.n	800361a <ai_platform_network_process+0x446>
 800359a:	2400      	movs	r4, #0
 800359c:	e016      	b.n	80035cc <ai_platform_network_process+0x3f8>
 800359e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80035a2:	f859 100a 	ldr.w	r1, [r9, sl]
 80035a6:	4413      	add	r3, r2
 80035a8:	428b      	cmp	r3, r1
 80035aa:	bf24      	itt	cs
 80035ac:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80035b0:	1acb      	subcs	r3, r1, r3
 80035b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80035b6:	6981      	ldr	r1, [r0, #24]
 80035b8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80035bc:	1b52      	subs	r2, r2, r5
 80035be:	4413      	add	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
 80035c2:	6983      	ldr	r3, [r0, #24]
 80035c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	3401      	adds	r4, #1
 80035cc:	883b      	ldrh	r3, [r7, #0]
 80035ce:	42a3      	cmp	r3, r4
 80035d0:	d923      	bls.n	800361a <ai_platform_network_process+0x446>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	b30b      	cbz	r3, 800361a <ai_platform_network_process+0x446>
 80035d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80035da:	b1f0      	cbz	r0, 800361a <ai_platform_network_process+0x446>
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	6983      	ldr	r3, [r0, #24]
 80035e0:	f8d2 9000 	ldr.w	r9, [r2]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	0092      	lsls	r2, r2, #2
 80035e8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80035ec:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80035f0:	d5d5      	bpl.n	800359e <ai_platform_network_process+0x3ca>
 80035f2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80035f6:	6899      	ldr	r1, [r3, #8]
 80035f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80035fc:	f000 ff50 	bl	80044a0 <memcpy>
 8003600:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8003604:	f859 200a 	ldr.w	r2, [r9, sl]
 8003608:	440b      	add	r3, r1
 800360a:	4293      	cmp	r3, r2
 800360c:	bf24      	itt	cs
 800360e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003612:	1ad3      	subcs	r3, r2, r3
 8003614:	f8c8 3004 	str.w	r3, [r8, #4]
 8003618:	e7d7      	b.n	80035ca <ai_platform_network_process+0x3f6>
 800361a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800361e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8003622:	3401      	adds	r4, #1
 8003624:	b2a4      	uxth	r4, r4
 8003626:	42a3      	cmp	r3, r4
 8003628:	f8ab 4016 	strh.w	r4, [fp, #22]
 800362c:	f63f af7d 	bhi.w	800352a <ai_platform_network_process+0x356>
 8003630:	4620      	mov	r0, r4
 8003632:	b005      	add	sp, #20
 8003634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003638:	2a01      	cmp	r2, #1
 800363a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800363c:	d03c      	beq.n	80036b8 <ai_platform_network_process+0x4e4>
 800363e:	f106 070c 	add.w	r7, r6, #12
 8003642:	e76d      	b.n	8003520 <ai_platform_network_process+0x34c>
 8003644:	4625      	mov	r5, r4
 8003646:	2218      	movs	r2, #24
 8003648:	2113      	movs	r1, #19
 800364a:	f105 0010 	add.w	r0, r5, #16
 800364e:	f000 f84f 	bl	80036f0 <core_set_error>
 8003652:	2400      	movs	r4, #0
 8003654:	e72b      	b.n	80034ae <ai_platform_network_process+0x2da>
 8003656:	9d02      	ldr	r5, [sp, #8]
 8003658:	4604      	mov	r4, r0
 800365a:	2221      	movs	r2, #33	; 0x21
 800365c:	2112      	movs	r1, #18
 800365e:	f105 0010 	add.w	r0, r5, #16
 8003662:	f000 f845 	bl	80036f0 <core_set_error>
 8003666:	e722      	b.n	80034ae <ai_platform_network_process+0x2da>
 8003668:	9d02      	ldr	r5, [sp, #8]
 800366a:	e719      	b.n	80034a0 <ai_platform_network_process+0x2cc>
 800366c:	9d02      	ldr	r5, [sp, #8]
 800366e:	4604      	mov	r4, r0
 8003670:	2217      	movs	r2, #23
 8003672:	2112      	movs	r1, #18
 8003674:	f105 0010 	add.w	r0, r5, #16
 8003678:	f000 f83a 	bl	80036f0 <core_set_error>
 800367c:	e717      	b.n	80034ae <ai_platform_network_process+0x2da>
 800367e:	9d02      	ldr	r5, [sp, #8]
 8003680:	2219      	movs	r2, #25
 8003682:	2112      	movs	r1, #18
 8003684:	f105 0010 	add.w	r0, r5, #16
 8003688:	f000 f832 	bl	80036f0 <core_set_error>
 800368c:	2400      	movs	r4, #0
 800368e:	e70e      	b.n	80034ae <ai_platform_network_process+0x2da>
 8003690:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003694:	82ab      	strh	r3, [r5, #20]
 8003696:	e73e      	b.n	8003516 <ai_platform_network_process+0x342>
 8003698:	f104 0010 	add.w	r0, r4, #16
 800369c:	2219      	movs	r2, #25
 800369e:	2113      	movs	r1, #19
 80036a0:	f000 f826 	bl	80036f0 <core_set_error>
 80036a4:	2400      	movs	r4, #0
 80036a6:	e702      	b.n	80034ae <ai_platform_network_process+0x2da>
 80036a8:	f104 0010 	add.w	r0, r4, #16
 80036ac:	2217      	movs	r2, #23
 80036ae:	2113      	movs	r1, #19
 80036b0:	f000 f81e 	bl	80036f0 <core_set_error>
 80036b4:	4654      	mov	r4, sl
 80036b6:	e6fa      	b.n	80034ae <ai_platform_network_process+0x2da>
 80036b8:	2700      	movs	r7, #0
 80036ba:	e731      	b.n	8003520 <ai_platform_network_process+0x34c>
 80036bc:	4625      	mov	r5, r4
 80036be:	2221      	movs	r2, #33	; 0x21
 80036c0:	4604      	mov	r4, r0
 80036c2:	2113      	movs	r1, #19
 80036c4:	f105 0010 	add.w	r0, r5, #16
 80036c8:	f000 f812 	bl	80036f0 <core_set_error>
 80036cc:	e6ef      	b.n	80034ae <ai_platform_network_process+0x2da>
 80036ce:	4625      	mov	r5, r4
 80036d0:	2217      	movs	r2, #23
 80036d2:	4604      	mov	r4, r0
 80036d4:	2113      	movs	r1, #19
 80036d6:	f105 0010 	add.w	r0, r5, #16
 80036da:	f000 f809 	bl	80036f0 <core_set_error>
 80036de:	e6e6      	b.n	80034ae <ai_platform_network_process+0x2da>

080036e0 <core_init>:
 80036e0:	2001      	movs	r0, #1
 80036e2:	4770      	bx	lr

080036e4 <core_get_error>:
 80036e4:	4603      	mov	r3, r0
 80036e6:	2200      	movs	r2, #0
 80036e8:	6800      	ldr	r0, [r0, #0]
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop

080036f0 <core_set_error>:
 80036f0:	4603      	mov	r3, r0
 80036f2:	7800      	ldrb	r0, [r0, #0]
 80036f4:	b108      	cbz	r0, 80036fa <core_set_error+0xa>
 80036f6:	2000      	movs	r0, #0
 80036f8:	4770      	bx	lr
 80036fa:	7019      	strb	r1, [r3, #0]
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	f362 211f 	bfi	r1, r2, #8, #24
 8003702:	2001      	movs	r0, #1
 8003704:	6019      	str	r1, [r3, #0]
 8003706:	4770      	bx	lr

08003708 <forward_dense>:
 8003708:	6983      	ldr	r3, [r0, #24]
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	2a00      	cmp	r2, #0
 800370e:	f000 8181 	beq.w	8003a14 <forward_dense+0x30c>
 8003712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003716:	ed2d 8b02 	vpush	{d8}
 800371a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800371e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8003722:	b095      	sub	sp, #84	; 0x54
 8003724:	b105      	cbz	r5, 8003728 <forward_dense+0x20>
 8003726:	682d      	ldr	r5, [r5, #0]
 8003728:	2a01      	cmp	r2, #1
 800372a:	f000 828f 	beq.w	8003c4c <forward_dense+0x544>
 800372e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8003732:	b106      	cbz	r6, 8003736 <forward_dense+0x2e>
 8003734:	6836      	ldr	r6, [r6, #0]
 8003736:	2a02      	cmp	r2, #2
 8003738:	f000 816e 	beq.w	8003a18 <forward_dense+0x310>
 800373c:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8003740:	930b      	str	r3, [sp, #44]	; 0x2c
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8274 	beq.w	8003c30 <forward_dense+0x528>
 8003748:	4619      	mov	r1, r3
 800374a:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800374e:	6809      	ldr	r1, [r1, #0]
 8003750:	910d      	str	r1, [sp, #52]	; 0x34
 8003752:	2b01      	cmp	r3, #1
 8003754:	f240 826e 	bls.w	8003c34 <forward_dense+0x52c>
 8003758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	930b      	str	r3, [sp, #44]	; 0x2c
 800375e:	460b      	mov	r3, r1
 8003760:	68e8      	ldr	r0, [r5, #12]
 8003762:	68f7      	ldr	r7, [r6, #12]
 8003764:	6840      	ldr	r0, [r0, #4]
 8003766:	6999      	ldr	r1, [r3, #24]
 8003768:	9013      	str	r0, [sp, #76]	; 0x4c
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	680b      	ldr	r3, [r1, #0]
 800376e:	9012      	str	r0, [sp, #72]	; 0x48
 8003770:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8003774:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8003778:	fb00 f404 	mul.w	r4, r0, r4
 800377c:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8003780:	fa4e f000 	asr.w	r0, lr, r0
 8003784:	2a03      	cmp	r2, #3
 8003786:	9010      	str	r0, [sp, #64]	; 0x40
 8003788:	f000 825d 	beq.w	8003c46 <forward_dense+0x53e>
 800378c:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8003790:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8003794:	2a00      	cmp	r2, #0
 8003796:	f000 8246 	beq.w	8003c26 <forward_dense+0x51e>
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	2a00      	cmp	r2, #0
 800379e:	f000 8242 	beq.w	8003c26 <forward_dense+0x51e>
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80037a8:	f000 822c 	beq.w	8003c04 <forward_dense+0x4fc>
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	f000 8229 	beq.w	8003c04 <forward_dense+0x4fc>
 80037b2:	f04f 0b00 	mov.w	fp, #0
 80037b6:	69b2      	ldr	r2, [r6, #24]
 80037b8:	69ab      	ldr	r3, [r5, #24]
 80037ba:	6891      	ldr	r1, [r2, #8]
 80037bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	6952      	ldr	r2, [r2, #20]
 80037c2:	9106      	str	r1, [sp, #24]
 80037c4:	fb07 f404 	mul.w	r4, r7, r4
 80037c8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80037cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80037ce:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80037d2:	4281      	cmp	r1, r0
 80037d4:	ea4f 0482 	mov.w	r4, r2, lsl #2
 80037d8:	900e      	str	r0, [sp, #56]	; 0x38
 80037da:	940c      	str	r4, [sp, #48]	; 0x30
 80037dc:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 80037e0:	f080 8113 	bcs.w	8003a0a <forward_dense+0x302>
 80037e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80037e6:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8003a34 <forward_dense+0x32c>
 80037ea:	f021 0201 	bic.w	r2, r1, #1
 80037ee:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80037f2:	9204      	str	r2, [sp, #16]
 80037f4:	f001 0201 	and.w	r2, r1, #1
 80037f8:	08c8      	lsrs	r0, r1, #3
 80037fa:	9208      	str	r2, [sp, #32]
 80037fc:	008a      	lsls	r2, r1, #2
 80037fe:	f001 0a07 	and.w	sl, r1, #7
 8003802:	920f      	str	r2, [sp, #60]	; 0x3c
 8003804:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8003808:	3320      	adds	r3, #32
 800380a:	465c      	mov	r4, fp
 800380c:	9007      	str	r0, [sp, #28]
 800380e:	46cb      	mov	fp, r9
 8003810:	9205      	str	r2, [sp, #20]
 8003812:	9302      	str	r3, [sp, #8]
 8003814:	46c1      	mov	r9, r8
 8003816:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800381a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	9b02      	ldr	r3, [sp, #8]
 8003822:	3b20      	subs	r3, #32
 8003824:	930a      	str	r3, [sp, #40]	; 0x28
 8003826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003828:	b10b      	cbz	r3, 800382e <forward_dense+0x126>
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2c00      	cmp	r4, #0
 8003830:	f000 81da 	beq.w	8003be8 <forward_dense+0x4e0>
 8003834:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003836:	2904      	cmp	r1, #4
 8003838:	9906      	ldr	r1, [sp, #24]
 800383a:	f000 80fd 	beq.w	8003a38 <forward_dense+0x330>
 800383e:	4549      	cmp	r1, r9
 8003840:	f080 80d2 	bcs.w	80039e8 <forward_dense+0x2e0>
 8003844:	460f      	mov	r7, r1
 8003846:	9907      	ldr	r1, [sp, #28]
 8003848:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800384c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8003850:	1c4e      	adds	r6, r1, #1
 8003852:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003856:	4694      	mov	ip, r2
 8003858:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800385a:	468e      	mov	lr, r1
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80de 	beq.w	8003a1e <forward_dense+0x316>
 8003862:	ecf3 2a01 	vldmia	r3!, {s5}
 8003866:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003a34 <forward_dense+0x32c>
 800386a:	f1be 0f00 	cmp.w	lr, #0
 800386e:	f000 80de 	beq.w	8003a2e <forward_dense+0x326>
 8003872:	f10c 0108 	add.w	r1, ip, #8
 8003876:	4640      	mov	r0, r8
 8003878:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800387c:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8003880:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8003884:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8003888:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 800388c:	ed10 5a04 	vldr	s10, [r0, #-16]
 8003890:	ed50 5a03 	vldr	s11, [r0, #-12]
 8003894:	ed10 6a02 	vldr	s12, [r0, #-8]
 8003898:	ed50 6a01 	vldr	s13, [r0, #-4]
 800389c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80038a0:	edd5 7a00 	vldr	s15, [r5]
 80038a4:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80038a8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80038ac:	ee67 7a83 	vmul.f32	s15, s15, s6
 80038b0:	ed95 3a00 	vldr	s6, [r5]
 80038b4:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 80038b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80038bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80038c0:	3108      	adds	r1, #8
 80038c2:	edd5 3a00 	vldr	s7, [r5]
 80038c6:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80038ca:	eee3 7a84 	vfma.f32	s15, s7, s8
 80038ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80038d2:	3020      	adds	r0, #32
 80038d4:	ed95 4a00 	vldr	s8, [r5]
 80038d8:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80038dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80038e0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80038e4:	edd5 4a00 	vldr	s9, [r5]
 80038e8:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80038ec:	eee4 7a85 	vfma.f32	s15, s9, s10
 80038f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80038f4:	ed95 5a00 	vldr	s10, [r5]
 80038f8:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80038fc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003900:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003904:	edd5 5a00 	vldr	s11, [r5]
 8003908:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800390c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003910:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003914:	428e      	cmp	r6, r1
 8003916:	ed95 6a00 	vldr	s12, [r5]
 800391a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800391e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003922:	d1a9      	bne.n	8003878 <forward_dense+0x170>
 8003924:	f1a6 0108 	sub.w	r1, r6, #8
 8003928:	4650      	mov	r0, sl
 800392a:	2a00      	cmp	r2, #0
 800392c:	d04a      	beq.n	80039c4 <forward_dense+0x2bc>
 800392e:	780d      	ldrb	r5, [r1, #0]
 8003930:	edd0 6a00 	vldr	s13, [r0]
 8003934:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003938:	edd5 7a00 	vldr	s15, [r5]
 800393c:	2a01      	cmp	r2, #1
 800393e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003942:	d03f      	beq.n	80039c4 <forward_dense+0x2bc>
 8003944:	784d      	ldrb	r5, [r1, #1]
 8003946:	edd0 6a01 	vldr	s13, [r0, #4]
 800394a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800394e:	edd5 7a00 	vldr	s15, [r5]
 8003952:	2a02      	cmp	r2, #2
 8003954:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003958:	d034      	beq.n	80039c4 <forward_dense+0x2bc>
 800395a:	788d      	ldrb	r5, [r1, #2]
 800395c:	edd0 6a02 	vldr	s13, [r0, #8]
 8003960:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003964:	edd5 7a00 	vldr	s15, [r5]
 8003968:	2a03      	cmp	r2, #3
 800396a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800396e:	d029      	beq.n	80039c4 <forward_dense+0x2bc>
 8003970:	78cd      	ldrb	r5, [r1, #3]
 8003972:	edd0 6a03 	vldr	s13, [r0, #12]
 8003976:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800397a:	edd5 7a00 	vldr	s15, [r5]
 800397e:	2a04      	cmp	r2, #4
 8003980:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003984:	d01e      	beq.n	80039c4 <forward_dense+0x2bc>
 8003986:	790d      	ldrb	r5, [r1, #4]
 8003988:	edd0 6a04 	vldr	s13, [r0, #16]
 800398c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003990:	edd5 7a00 	vldr	s15, [r5]
 8003994:	2a05      	cmp	r2, #5
 8003996:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800399a:	d013      	beq.n	80039c4 <forward_dense+0x2bc>
 800399c:	794d      	ldrb	r5, [r1, #5]
 800399e:	edd0 6a05 	vldr	s13, [r0, #20]
 80039a2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80039a6:	edd5 7a00 	vldr	s15, [r5]
 80039aa:	2a06      	cmp	r2, #6
 80039ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80039b0:	d008      	beq.n	80039c4 <forward_dense+0x2bc>
 80039b2:	7989      	ldrb	r1, [r1, #6]
 80039b4:	edd0 7a06 	vldr	s15, [r0, #24]
 80039b8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80039bc:	edd1 6a00 	vldr	s13, [r1]
 80039c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80039c4:	44dc      	add	ip, fp
 80039c6:	445e      	add	r6, fp
 80039c8:	ee32 7a87 	vadd.f32	s14, s5, s14
 80039cc:	eca7 7a01 	vstmia	r7!, {s14}
 80039d0:	454f      	cmp	r7, r9
 80039d2:	f4ff af43 	bcc.w	800385c <forward_dense+0x154>
 80039d6:	9a06      	ldr	r2, [sp, #24]
 80039d8:	eba9 0302 	sub.w	r3, r9, r2
 80039dc:	3b01      	subs	r3, #1
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	3304      	adds	r3, #4
 80039e4:	18d3      	adds	r3, r2, r3
 80039e6:	9306      	str	r3, [sp, #24]
 80039e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039ea:	9a05      	ldr	r2, [sp, #20]
 80039ec:	4499      	add	r9, r3
 80039ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039f0:	441a      	add	r2, r3
 80039f2:	9205      	str	r2, [sp, #20]
 80039f4:	9a02      	ldr	r2, [sp, #8]
 80039f6:	441a      	add	r2, r3
 80039f8:	9202      	str	r2, [sp, #8]
 80039fa:	9a04      	ldr	r2, [sp, #16]
 80039fc:	441a      	add	r2, r3
 80039fe:	9204      	str	r2, [sp, #16]
 8003a00:	9b06      	ldr	r3, [sp, #24]
 8003a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a04:	4293      	cmp	r3, r2
 8003a06:	f4ff af08 	bcc.w	800381a <forward_dense+0x112>
 8003a0a:	b015      	add	sp, #84	; 0x54
 8003a0c:	ecbd 8b02 	vpop	{d8}
 8003a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a14:	6853      	ldr	r3, [r2, #4]
 8003a16:	deff      	udf	#255	; 0xff
 8003a18:	2300      	movs	r3, #0
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	deff      	udf	#255	; 0xff
 8003a1e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003a34 <forward_dense+0x32c>
 8003a22:	eef0 2a48 	vmov.f32	s5, s16
 8003a26:	f1be 0f00 	cmp.w	lr, #0
 8003a2a:	f47f af22 	bne.w	8003872 <forward_dense+0x16a>
 8003a2e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003a30:	4661      	mov	r1, ip
 8003a32:	e77a      	b.n	800392a <forward_dense+0x222>
 8003a34:	00000000 	.word	0x00000000
 8003a38:	4549      	cmp	r1, r9
 8003a3a:	d2d5      	bcs.n	80039e8 <forward_dense+0x2e0>
 8003a3c:	9807      	ldr	r0, [sp, #28]
 8003a3e:	9103      	str	r1, [sp, #12]
 8003a40:	9904      	ldr	r1, [sp, #16]
 8003a42:	f100 0c01 	add.w	ip, r0, #1
 8003a46:	3901      	subs	r1, #1
 8003a48:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8003a4c:	9109      	str	r1, [sp, #36]	; 0x24
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80b2 	beq.w	8003bb8 <forward_dense+0x4b0>
 8003a54:	9907      	ldr	r1, [sp, #28]
 8003a56:	ecf3 2a01 	vldmia	r3!, {s5}
 8003a5a:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8003a34 <forward_dense+0x32c>
 8003a5e:	2900      	cmp	r1, #0
 8003a60:	f000 80b2 	beq.w	8003bc8 <forward_dense+0x4c0>
 8003a64:	9902      	ldr	r1, [sp, #8]
 8003a66:	1d10      	adds	r0, r2, #4
 8003a68:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8003a6c:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8003a70:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8003a74:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8003a78:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8003a7c:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8003a80:	ed11 5a04 	vldr	s10, [r1, #-16]
 8003a84:	ed51 5a03 	vldr	s11, [r1, #-12]
 8003a88:	ed11 6a02 	vldr	s12, [r1, #-8]
 8003a8c:	ed51 6a01 	vldr	s13, [r1, #-4]
 8003a90:	f006 070f 	and.w	r7, r6, #15
 8003a94:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8003a98:	edd7 7a00 	vldr	s15, [r7]
 8003a9c:	0936      	lsrs	r6, r6, #4
 8003a9e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8003aa2:	ed96 3a00 	vldr	s6, [r6]
 8003aa6:	ee67 7a82 	vmul.f32	s15, s15, s4
 8003aaa:	092e      	lsrs	r6, r5, #4
 8003aac:	eee3 7a23 	vfma.f32	s15, s6, s7
 8003ab0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8003ab4:	f005 050f 	and.w	r5, r5, #15
 8003ab8:	edd6 3a00 	vldr	s7, [r6]
 8003abc:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8003ac0:	eee3 7a84 	vfma.f32	s15, s7, s8
 8003ac4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003ac8:	0937      	lsrs	r7, r6, #4
 8003aca:	ed95 4a00 	vldr	s8, [r5]
 8003ace:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8003ad2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003ad6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8003ada:	f006 060f 	and.w	r6, r6, #15
 8003ade:	edd7 4a00 	vldr	s9, [r7]
 8003ae2:	eee4 7a85 	vfma.f32	s15, s9, s10
 8003ae6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8003aea:	3004      	adds	r0, #4
 8003aec:	ed96 5a00 	vldr	s10, [r6]
 8003af0:	092e      	lsrs	r6, r5, #4
 8003af2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003af6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8003afa:	f005 050f 	and.w	r5, r5, #15
 8003afe:	edd6 5a00 	vldr	s11, [r6]
 8003b02:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003b06:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003b0a:	4584      	cmp	ip, r0
 8003b0c:	ed95 6a00 	vldr	s12, [r5]
 8003b10:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003b14:	f101 0120 	add.w	r1, r1, #32
 8003b18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b1c:	d1a4      	bne.n	8003a68 <forward_dense+0x360>
 8003b1e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8003b22:	f1ac 0804 	sub.w	r8, ip, #4
 8003b26:	9904      	ldr	r1, [sp, #16]
 8003b28:	458e      	cmp	lr, r1
 8003b2a:	d22a      	bcs.n	8003b82 <forward_dense+0x47a>
 8003b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b2e:	eba1 070e 	sub.w	r7, r1, lr
 8003b32:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8003b36:	f10e 0008 	add.w	r0, lr, #8
 8003b3a:	f108 36ff 	add.w	r6, r8, #4294967295
 8003b3e:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8003b42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b46:	ed50 5a01 	vldr	s11, [r0, #-4]
 8003b4a:	ed50 6a02 	vldr	s13, [r0, #-8]
 8003b4e:	f001 050f 	and.w	r5, r1, #15
 8003b52:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003b56:	edd5 7a00 	vldr	s15, [r5]
 8003b5a:	0909      	lsrs	r1, r1, #4
 8003b5c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003b60:	ed91 6a00 	vldr	s12, [r1]
 8003b64:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003b68:	42b7      	cmp	r7, r6
 8003b6a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003b6e:	f100 0008 	add.w	r0, r0, #8
 8003b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b76:	d1e4      	bne.n	8003b42 <forward_dense+0x43a>
 8003b78:	f10a 0a01 	add.w	sl, sl, #1
 8003b7c:	44d0      	add	r8, sl
 8003b7e:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8003b82:	9908      	ldr	r1, [sp, #32]
 8003b84:	b321      	cbz	r1, 8003bd0 <forward_dense+0x4c8>
 8003b86:	f898 1000 	ldrb.w	r1, [r8]
 8003b8a:	edde 7a00 	vldr	s15, [lr]
 8003b8e:	0909      	lsrs	r1, r1, #4
 8003b90:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8003b94:	edd1 6a00 	vldr	s13, [r1]
 8003b98:	9903      	ldr	r1, [sp, #12]
 8003b9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003b9e:	445a      	add	r2, fp
 8003ba0:	44dc      	add	ip, fp
 8003ba2:	ee72 2a87 	vadd.f32	s5, s5, s14
 8003ba6:	ece1 2a01 	vstmia	r1!, {s5}
 8003baa:	4589      	cmp	r9, r1
 8003bac:	9103      	str	r1, [sp, #12]
 8003bae:	f67f af12 	bls.w	80039d6 <forward_dense+0x2ce>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f47f af4e 	bne.w	8003a54 <forward_dense+0x34c>
 8003bb8:	9907      	ldr	r1, [sp, #28]
 8003bba:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8003a34 <forward_dense+0x32c>
 8003bbe:	eef0 2a48 	vmov.f32	s5, s16
 8003bc2:	2900      	cmp	r1, #0
 8003bc4:	f47f af4e 	bne.w	8003a64 <forward_dense+0x35c>
 8003bc8:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8003bcc:	4690      	mov	r8, r2
 8003bce:	e7aa      	b.n	8003b26 <forward_dense+0x41e>
 8003bd0:	9903      	ldr	r1, [sp, #12]
 8003bd2:	ee32 7a87 	vadd.f32	s14, s5, s14
 8003bd6:	445a      	add	r2, fp
 8003bd8:	eca1 7a01 	vstmia	r1!, {s14}
 8003bdc:	4549      	cmp	r1, r9
 8003bde:	9103      	str	r1, [sp, #12]
 8003be0:	44dc      	add	ip, fp
 8003be2:	f4ff af34 	bcc.w	8003a4e <forward_dense+0x346>
 8003be6:	e6f6      	b.n	80039d6 <forward_dense+0x2ce>
 8003be8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003bea:	9d06      	ldr	r5, [sp, #24]
 8003bec:	9101      	str	r1, [sp, #4]
 8003bee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003bf0:	9100      	str	r1, [sp, #0]
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003bf6:	f000 fa41 	bl	800407c <lite_dense_if32of32wf32>
 8003bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	4413      	add	r3, r2
 8003c00:	9306      	str	r3, [sp, #24]
 8003c02:	e6f1      	b.n	80039e8 <forward_dense+0x2e0>
 8003c04:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8003c08:	f1b9 0f00 	cmp.w	r9, #0
 8003c0c:	d016      	beq.n	8003c3c <forward_dense+0x534>
 8003c0e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003c12:	f000 fbe1 	bl	80043d8 <ai_array_get_byte_size>
 8003c16:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	4658      	mov	r0, fp
 8003c20:	f000 fc3e 	bl	80044a0 <memcpy>
 8003c24:	e5c7      	b.n	80037b6 <forward_dense+0xae>
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d00a      	beq.n	8003c40 <forward_dense+0x538>
 8003c2a:	f04f 0900 	mov.w	r9, #0
 8003c2e:	e5bd      	b.n	80037ac <forward_dense+0xa4>
 8003c30:	930d      	str	r3, [sp, #52]	; 0x34
 8003c32:	e595      	b.n	8003760 <forward_dense+0x58>
 8003c34:	2300      	movs	r3, #0
 8003c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c38:	460b      	mov	r3, r1
 8003c3a:	e591      	b.n	8003760 <forward_dense+0x58>
 8003c3c:	46c3      	mov	fp, r8
 8003c3e:	e5ba      	b.n	80037b6 <forward_dense+0xae>
 8003c40:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8003c44:	e5b7      	b.n	80037b6 <forward_dense+0xae>
 8003c46:	2300      	movs	r3, #0
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	deff      	udf	#255	; 0xff
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	deff      	udf	#255	; 0xff
 8003c52:	bf00      	nop

08003c54 <forward_sigmoid>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	ed2d 8b02 	vpush	{d8}
 8003c5a:	6982      	ldr	r2, [r0, #24]
 8003c5c:	8813      	ldrh	r3, [r2, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d03b      	beq.n	8003cda <forward_sigmoid+0x86>
 8003c62:	6852      	ldr	r2, [r2, #4]
 8003c64:	6854      	ldr	r4, [r2, #4]
 8003c66:	b104      	cbz	r4, 8003c6a <forward_sigmoid+0x16>
 8003c68:	6824      	ldr	r4, [r4, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d034      	beq.n	8003cd8 <forward_sigmoid+0x84>
 8003c6e:	6915      	ldr	r5, [r2, #16]
 8003c70:	b105      	cbz	r5, 8003c74 <forward_sigmoid+0x20>
 8003c72:	682d      	ldr	r5, [r5, #0]
 8003c74:	68a3      	ldr	r3, [r4, #8]
 8003c76:	0a1b      	lsrs	r3, r3, #8
 8003c78:	d031      	beq.n	8003cde <forward_sigmoid+0x8a>
 8003c7a:	68e0      	ldr	r0, [r4, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003c82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003c86:	4298      	cmp	r0, r3
 8003c88:	fb01 f202 	mul.w	r2, r1, r2
 8003c8c:	d1f9      	bne.n	8003c82 <forward_sigmoid+0x2e>
 8003c8e:	69a7      	ldr	r7, [r4, #24]
 8003c90:	69a9      	ldr	r1, [r5, #24]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	688e      	ldr	r6, [r1, #8]
 8003c96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003c9a:	3a01      	subs	r2, #1
 8003c9c:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8003ca0:	42ab      	cmp	r3, r5
 8003ca2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8003ca6:	d814      	bhi.n	8003cd2 <forward_sigmoid+0x7e>
 8003ca8:	3504      	adds	r5, #4
 8003caa:	3604      	adds	r6, #4
 8003cac:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8003cb0:	462c      	mov	r4, r5
 8003cb2:	ed35 0a01 	vldmdb	r5!, {s0}
 8003cb6:	eeb1 0a40 	vneg.f32	s0, s0
 8003cba:	f000 fc07 	bl	80044cc <expf>
 8003cbe:	ee30 0a08 	vadd.f32	s0, s0, s16
 8003cc2:	3c08      	subs	r4, #8
 8003cc4:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8003cc8:	ed66 7a01 	vstmdb	r6!, {s15}
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	42a3      	cmp	r3, r4
 8003cd0:	d9ee      	bls.n	8003cb0 <forward_sigmoid+0x5c>
 8003cd2:	ecbd 8b02 	vpop	{d8}
 8003cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd8:	2300      	movs	r3, #0
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	deff      	udf	#255	; 0xff
 8003cde:	69ab      	ldr	r3, [r5, #24]
 8003ce0:	69a7      	ldr	r7, [r4, #24]
 8003ce2:	689e      	ldr	r6, [r3, #8]
 8003ce4:	68bd      	ldr	r5, [r7, #8]
 8003ce6:	e7df      	b.n	8003ca8 <forward_sigmoid+0x54>

08003ce8 <forward_relu>:
 8003ce8:	6982      	ldr	r2, [r0, #24]
 8003cea:	8813      	ldrh	r3, [r2, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d05b      	beq.n	8003da8 <forward_relu+0xc0>
 8003cf0:	6851      	ldr	r1, [r2, #4]
 8003cf2:	684a      	ldr	r2, [r1, #4]
 8003cf4:	b102      	cbz	r2, 8003cf8 <forward_relu+0x10>
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	f000 8123 	beq.w	8003f44 <forward_relu+0x25c>
 8003cfe:	b470      	push	{r4, r5, r6}
 8003d00:	6909      	ldr	r1, [r1, #16]
 8003d02:	b101      	cbz	r1, 8003d06 <forward_relu+0x1e>
 8003d04:	6809      	ldr	r1, [r1, #0]
 8003d06:	69c6      	ldr	r6, [r0, #28]
 8003d08:	2e00      	cmp	r6, #0
 8003d0a:	f000 8097 	beq.w	8003e3c <forward_relu+0x154>
 8003d0e:	6873      	ldr	r3, [r6, #4]
 8003d10:	6988      	ldr	r0, [r1, #24]
 8003d12:	6991      	ldr	r1, [r2, #24]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	f000 80c1 	beq.w	8003e9c <forward_relu+0x1b4>
 8003d1a:	6893      	ldr	r3, [r2, #8]
 8003d1c:	6880      	ldr	r0, [r0, #8]
 8003d1e:	688c      	ldr	r4, [r1, #8]
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	f000 80f2 	beq.w	8003f0a <forward_relu+0x222>
 8003d26:	68d5      	ldr	r5, [r2, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003d2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003d32:	42ab      	cmp	r3, r5
 8003d34:	fb01 f202 	mul.w	r2, r1, r2
 8003d38:	d1f9      	bne.n	8003d2e <forward_relu+0x46>
 8003d3a:	68b3      	ldr	r3, [r6, #8]
 8003d3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d40:	edd3 6a00 	vldr	s13, [r3]
 8003d44:	ed93 6a01 	vldr	s12, [r3, #4]
 8003d48:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003d4c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003d50:	3a01      	subs	r2, #1
 8003d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003d5a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003d5e:	d425      	bmi.n	8003dac <forward_relu+0xc4>
 8003d60:	429c      	cmp	r4, r3
 8003d62:	d81f      	bhi.n	8003da4 <forward_relu+0xbc>
 8003d64:	1d1a      	adds	r2, r3, #4
 8003d66:	1d01      	adds	r1, r0, #4
 8003d68:	e00d      	b.n	8003d86 <forward_relu+0x9e>
 8003d6a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d72:	db03      	blt.n	8003d7c <forward_relu+0x94>
 8003d74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d78:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003d7c:	3b08      	subs	r3, #8
 8003d7e:	429c      	cmp	r4, r3
 8003d80:	ed61 7a01 	vstmdb	r1!, {s15}
 8003d84:	d80e      	bhi.n	8003da4 <forward_relu+0xbc>
 8003d86:	4613      	mov	r3, r2
 8003d88:	ed72 7a01 	vldmdb	r2!, {s15}
 8003d8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d94:	d9e9      	bls.n	8003d6a <forward_relu+0x82>
 8003d96:	3b08      	subs	r3, #8
 8003d98:	eef0 7a47 	vmov.f32	s15, s14
 8003d9c:	429c      	cmp	r4, r3
 8003d9e:	ed61 7a01 	vstmdb	r1!, {s15}
 8003da2:	d9f0      	bls.n	8003d86 <forward_relu+0x9e>
 8003da4:	bc70      	pop	{r4, r5, r6}
 8003da6:	4770      	bx	lr
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	deff      	udf	#255	; 0xff
 8003dac:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8003db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db4:	d11f      	bne.n	8003df6 <forward_relu+0x10e>
 8003db6:	429c      	cmp	r4, r3
 8003db8:	d8f4      	bhi.n	8003da4 <forward_relu+0xbc>
 8003dba:	1b1c      	subs	r4, r3, r4
 8003dbc:	f024 0403 	bic.w	r4, r4, #3
 8003dc0:	1d1a      	adds	r2, r3, #4
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	1b1b      	subs	r3, r3, r4
 8003dc6:	1d01      	adds	r1, r0, #4
 8003dc8:	ed72 7a01 	vldmdb	r2!, {s15}
 8003dcc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd4:	dc0a      	bgt.n	8003dec <forward_relu+0x104>
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	f841 5d04 	str.w	r5, [r1, #-4]!
 8003ddc:	d0e2      	beq.n	8003da4 <forward_relu+0xbc>
 8003dde:	ed72 7a01 	vldmdb	r2!, {s15}
 8003de2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dea:	ddf4      	ble.n	8003dd6 <forward_relu+0xee>
 8003dec:	429a      	cmp	r2, r3
 8003dee:	ed61 7a01 	vstmdb	r1!, {s15}
 8003df2:	d1e9      	bne.n	8003dc8 <forward_relu+0xe0>
 8003df4:	e7d6      	b.n	8003da4 <forward_relu+0xbc>
 8003df6:	429c      	cmp	r4, r3
 8003df8:	d8d4      	bhi.n	8003da4 <forward_relu+0xbc>
 8003dfa:	1b1c      	subs	r4, r3, r4
 8003dfc:	f024 0403 	bic.w	r4, r4, #3
 8003e00:	1d1a      	adds	r2, r3, #4
 8003e02:	1d01      	adds	r1, r0, #4
 8003e04:	1b1b      	subs	r3, r3, r4
 8003e06:	ed72 7a01 	vldmdb	r2!, {s15}
 8003e0a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e12:	db0e      	blt.n	8003e32 <forward_relu+0x14a>
 8003e14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003e1e:	ed61 7a01 	vstmdb	r1!, {s15}
 8003e22:	d0bf      	beq.n	8003da4 <forward_relu+0xbc>
 8003e24:	ed72 7a01 	vldmdb	r2!, {s15}
 8003e28:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e30:	daf0      	bge.n	8003e14 <forward_relu+0x12c>
 8003e32:	4293      	cmp	r3, r2
 8003e34:	ed61 7a01 	vstmdb	r1!, {s15}
 8003e38:	d1e5      	bne.n	8003e06 <forward_relu+0x11e>
 8003e3a:	e7b3      	b.n	8003da4 <forward_relu+0xbc>
 8003e3c:	6893      	ldr	r3, [r2, #8]
 8003e3e:	6989      	ldr	r1, [r1, #24]
 8003e40:	6990      	ldr	r0, [r2, #24]
 8003e42:	6889      	ldr	r1, [r1, #8]
 8003e44:	6884      	ldr	r4, [r0, #8]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	d075      	beq.n	8003f36 <forward_relu+0x24e>
 8003e4a:	68d5      	ldr	r5, [r2, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003e52:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8003e56:	429d      	cmp	r5, r3
 8003e58:	fb00 f202 	mul.w	r2, r0, r2
 8003e5c:	d1f9      	bne.n	8003e52 <forward_relu+0x16a>
 8003e5e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8003e62:	3b01      	subs	r3, #1
 8003e64:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8003e68:	4294      	cmp	r4, r2
 8003e6a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003e6e:	d899      	bhi.n	8003da4 <forward_relu+0xbc>
 8003e70:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003f4c <forward_relu+0x264>
 8003e74:	3204      	adds	r2, #4
 8003e76:	3104      	adds	r1, #4
 8003e78:	4613      	mov	r3, r2
 8003e7a:	ed72 7a01 	vldmdb	r2!, {s15}
 8003e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e86:	f1a3 0308 	sub.w	r3, r3, #8
 8003e8a:	bfb8      	it	lt
 8003e8c:	eef0 7a47 	vmovlt.f32	s15, s14
 8003e90:	429c      	cmp	r4, r3
 8003e92:	ed61 7a01 	vstmdb	r1!, {s15}
 8003e96:	d9ef      	bls.n	8003e78 <forward_relu+0x190>
 8003e98:	bc70      	pop	{r4, r5, r6}
 8003e9a:	4770      	bx	lr
 8003e9c:	688c      	ldr	r4, [r1, #8]
 8003e9e:	6891      	ldr	r1, [r2, #8]
 8003ea0:	6880      	ldr	r0, [r0, #8]
 8003ea2:	0a09      	lsrs	r1, r1, #8
 8003ea4:	d049      	beq.n	8003f3a <forward_relu+0x252>
 8003ea6:	68d5      	ldr	r5, [r2, #12]
 8003ea8:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8003eac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003eb0:	42aa      	cmp	r2, r5
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	d1f9      	bne.n	8003eac <forward_relu+0x1c4>
 8003eb8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8003ebc:	3a01      	subs	r2, #1
 8003ebe:	68b1      	ldr	r1, [r6, #8]
 8003ec0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003ec4:	429c      	cmp	r4, r3
 8003ec6:	ed91 7a00 	vldr	s14, [r1]
 8003eca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003ece:	f63f af69 	bhi.w	8003da4 <forward_relu+0xbc>
 8003ed2:	2500      	movs	r5, #0
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	1d02      	adds	r2, r0, #4
 8003ed8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee4:	f1a3 0104 	sub.w	r1, r3, #4
 8003ee8:	f1a3 0308 	sub.w	r3, r3, #8
 8003eec:	d406      	bmi.n	8003efc <forward_relu+0x214>
 8003eee:	429c      	cmp	r4, r3
 8003ef0:	f842 5d04 	str.w	r5, [r2, #-4]!
 8003ef4:	f63f af56 	bhi.w	8003da4 <forward_relu+0xbc>
 8003ef8:	460b      	mov	r3, r1
 8003efa:	e7ed      	b.n	8003ed8 <forward_relu+0x1f0>
 8003efc:	429c      	cmp	r4, r3
 8003efe:	ed62 7a01 	vstmdb	r2!, {s15}
 8003f02:	f63f af4f 	bhi.w	8003da4 <forward_relu+0xbc>
 8003f06:	460b      	mov	r3, r1
 8003f08:	e7e6      	b.n	8003ed8 <forward_relu+0x1f0>
 8003f0a:	68b3      	ldr	r3, [r6, #8]
 8003f0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003f10:	edd3 6a00 	vldr	s13, [r3]
 8003f14:	ed93 6a01 	vldr	s12, [r3, #4]
 8003f18:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f20:	d401      	bmi.n	8003f26 <forward_relu+0x23e>
 8003f22:	4623      	mov	r3, r4
 8003f24:	e71e      	b.n	8003d64 <forward_relu+0x7c>
 8003f26:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8003f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2e:	4623      	mov	r3, r4
 8003f30:	f47f af63 	bne.w	8003dfa <forward_relu+0x112>
 8003f34:	e741      	b.n	8003dba <forward_relu+0xd2>
 8003f36:	4622      	mov	r2, r4
 8003f38:	e79a      	b.n	8003e70 <forward_relu+0x188>
 8003f3a:	68b2      	ldr	r2, [r6, #8]
 8003f3c:	4623      	mov	r3, r4
 8003f3e:	ed92 7a00 	vldr	s14, [r2]
 8003f42:	e7c6      	b.n	8003ed2 <forward_relu+0x1ea>
 8003f44:	2300      	movs	r3, #0
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	deff      	udf	#255	; 0xff
 8003f4a:	bf00      	nop
 8003f4c:	00000000 	.word	0x00000000

08003f50 <ai_check_custom_types>:
 8003f50:	b082      	sub	sp, #8
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <ai_check_custom_types+0x50>)
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	b118      	cbz	r0, 8003f60 <ai_check_custom_types+0x10>
 8003f58:	7803      	ldrb	r3, [r0, #0]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d002      	beq.n	8003f64 <ai_check_custom_types+0x14>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	b002      	add	sp, #8
 8003f62:	4770      	bx	lr
 8003f64:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <ai_check_custom_types+0x26>
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	f080 0001 	eor.w	r0, r0, #1
 8003f72:	b002      	add	sp, #8
 8003f74:	4770      	bx	lr
 8003f76:	7842      	ldrb	r2, [r0, #1]
 8003f78:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	f100 0001 	add.w	r0, r0, #1
 8003f82:	d1f3      	bne.n	8003f6c <ai_check_custom_types+0x1c>
 8003f84:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003f88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d1ed      	bne.n	8003f6c <ai_check_custom_types+0x1c>
 8003f90:	7842      	ldrb	r2, [r0, #1]
 8003f92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d1e8      	bne.n	8003f6c <ai_check_custom_types+0x1c>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e7e7      	b.n	8003f6e <ai_check_custom_types+0x1e>
 8003f9e:	bf00      	nop
 8003fa0:	84048403 	.word	0x84048403

08003fa4 <ai_layers_init_all>:
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003faa:	b143      	cbz	r3, 8003fbe <ai_layers_init_all+0x1a>
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	60d9      	str	r1, [r3, #12]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	f100 0001 	add.w	r0, r0, #1
 8003fb6:	d002      	beq.n	8003fbe <ai_layers_init_all+0x1a>
 8003fb8:	b10a      	cbz	r2, 8003fbe <ai_layers_init_all+0x1a>
 8003fba:	4613      	mov	r3, r2
 8003fbc:	e7f5      	b.n	8003faa <ai_layers_init_all+0x6>
 8003fbe:	4770      	bx	lr

08003fc0 <ai_layers_post_init_all>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003fc4:	2500      	movs	r5, #0
 8003fc6:	b16c      	cbz	r4, 8003fe4 <ai_layers_post_init_all+0x24>
 8003fc8:	6863      	ldr	r3, [r4, #4]
 8003fca:	07db      	lsls	r3, r3, #31
 8003fcc:	d504      	bpl.n	8003fd8 <ai_layers_post_init_all+0x18>
 8003fce:	6a23      	ldr	r3, [r4, #32]
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	b10b      	cbz	r3, 8003fd8 <ai_layers_post_init_all+0x18>
 8003fd4:	4798      	blx	r3
 8003fd6:	3501      	adds	r5, #1
 8003fd8:	6923      	ldr	r3, [r4, #16]
 8003fda:	42a3      	cmp	r3, r4
 8003fdc:	d002      	beq.n	8003fe4 <ai_layers_post_init_all+0x24>
 8003fde:	b10b      	cbz	r3, 8003fe4 <ai_layers_post_init_all+0x24>
 8003fe0:	461c      	mov	r4, r3
 8003fe2:	e7f0      	b.n	8003fc6 <ai_layers_post_init_all+0x6>
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}

08003fe8 <ai_layers_forward_all>:
 8003fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fec:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	f1b8 0f00 	cmp.w	r8, #0
 8003ff6:	d02b      	beq.n	8004050 <ai_layers_forward_all+0x68>
 8003ff8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003ffa:	6381      	str	r1, [r0, #56]	; 0x38
 8003ffc:	b321      	cbz	r1, 8004048 <ai_layers_forward_all+0x60>
 8003ffe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004000:	2001      	movs	r0, #1
 8004002:	47c0      	blx	r8
 8004004:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004006:	b1fe      	cbz	r6, 8004048 <ai_layers_forward_all+0x60>
 8004008:	2700      	movs	r7, #0
 800400a:	4631      	mov	r1, r6
 800400c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800400e:	2002      	movs	r0, #2
 8004010:	47c0      	blx	r8
 8004012:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004014:	4628      	mov	r0, r5
 8004016:	696b      	ldr	r3, [r5, #20]
 8004018:	4798      	blx	r3
 800401a:	692e      	ldr	r6, [r5, #16]
 800401c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800401e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004020:	42b5      	cmp	r5, r6
 8004022:	f04f 0003 	mov.w	r0, #3
 8004026:	d007      	beq.n	8004038 <ai_layers_forward_all+0x50>
 8004028:	47c0      	blx	r8
 800402a:	3701      	adds	r7, #1
 800402c:	63a6      	str	r6, [r4, #56]	; 0x38
 800402e:	2e00      	cmp	r6, #0
 8004030:	d1eb      	bne.n	800400a <ai_layers_forward_all+0x22>
 8004032:	4638      	mov	r0, r7
 8004034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004038:	2003      	movs	r0, #3
 800403a:	47c0      	blx	r8
 800403c:	2300      	movs	r3, #0
 800403e:	3701      	adds	r7, #1
 8004040:	63a3      	str	r3, [r4, #56]	; 0x38
 8004042:	4638      	mov	r0, r7
 8004044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004048:	2700      	movs	r7, #0
 800404a:	4638      	mov	r0, r7
 800404c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004050:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004052:	6385      	str	r5, [r0, #56]	; 0x38
 8004054:	2d00      	cmp	r5, #0
 8004056:	d0f7      	beq.n	8004048 <ai_layers_forward_all+0x60>
 8004058:	4647      	mov	r7, r8
 800405a:	696b      	ldr	r3, [r5, #20]
 800405c:	4628      	mov	r0, r5
 800405e:	4798      	blx	r3
 8004060:	462b      	mov	r3, r5
 8004062:	692d      	ldr	r5, [r5, #16]
 8004064:	429d      	cmp	r5, r3
 8004066:	d004      	beq.n	8004072 <ai_layers_forward_all+0x8a>
 8004068:	63a5      	str	r5, [r4, #56]	; 0x38
 800406a:	3701      	adds	r7, #1
 800406c:	2d00      	cmp	r5, #0
 800406e:	d1f4      	bne.n	800405a <ai_layers_forward_all+0x72>
 8004070:	e7df      	b.n	8004032 <ai_layers_forward_all+0x4a>
 8004072:	2300      	movs	r3, #0
 8004074:	63a3      	str	r3, [r4, #56]	; 0x38
 8004076:	3701      	adds	r7, #1
 8004078:	e7db      	b.n	8004032 <ai_layers_forward_all+0x4a>
 800407a:	bf00      	nop

0800407c <lite_dense_if32of32wf32>:
 800407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004080:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8004084:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8004088:	4287      	cmp	r7, r0
 800408a:	f240 8106 	bls.w	800429a <lite_dense_if32of32wf32+0x21e>
 800408e:	f1a6 0810 	sub.w	r8, r6, #16
 8004092:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8004096:	f108 0801 	add.w	r8, r8, #1
 800409a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800409e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80040a2:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80040a6:	4605      	mov	r5, r0
 80040a8:	f006 0a0f 	and.w	sl, r6, #15
 80040ac:	2e0f      	cmp	r6, #15
 80040ae:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80042c0 <lite_dense_if32of32wf32+0x244>
 80040b2:	f240 8101 	bls.w	80042b8 <lite_dense_if32of32wf32+0x23c>
 80040b6:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80040ba:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80040be:	46b6      	mov	lr, r6
 80040c0:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 80040c4:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80040c8:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 80040cc:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80040d0:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 80040d4:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 80040d8:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 80040dc:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 80040e0:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 80040e4:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80040e8:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80040ec:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80040f0:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80040f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80040f8:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80040fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004100:	f1ae 0e10 	sub.w	lr, lr, #16
 8004104:	f1be 0f0f 	cmp.w	lr, #15
 8004108:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 800410c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8004110:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004114:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8004118:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800411c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8004120:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8004124:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8004128:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 800412c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8004130:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004134:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8004138:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 800413c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004140:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8004144:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8004148:	eee3 7a23 	vfma.f32	s15, s6, s7
 800414c:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8004150:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8004154:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004158:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800415c:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8004160:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004164:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8004168:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800416c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004170:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8004174:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8004178:	eee1 7a21 	vfma.f32	s15, s2, s3
 800417c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004180:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004184:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004188:	eee5 7a25 	vfma.f32	s15, s10, s11
 800418c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004194:	d894      	bhi.n	80040c0 <lite_dense_if32of32wf32+0x44>
 8004196:	eb02 0e0b 	add.w	lr, r2, fp
 800419a:	4654      	mov	r4, sl
 800419c:	46c4      	mov	ip, r8
 800419e:	2c00      	cmp	r4, #0
 80041a0:	d075      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 80041a2:	eddc 6a00 	vldr	s13, [ip]
 80041a6:	edde 7a00 	vldr	s15, [lr]
 80041aa:	2c01      	cmp	r4, #1
 80041ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80041b0:	d06d      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 80041b2:	eddc 6a01 	vldr	s13, [ip, #4]
 80041b6:	edde 7a01 	vldr	s15, [lr, #4]
 80041ba:	2c02      	cmp	r4, #2
 80041bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80041c0:	d065      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 80041c2:	eddc 6a02 	vldr	s13, [ip, #8]
 80041c6:	edde 7a02 	vldr	s15, [lr, #8]
 80041ca:	2c03      	cmp	r4, #3
 80041cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80041d0:	d05d      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 80041d2:	eddc 6a03 	vldr	s13, [ip, #12]
 80041d6:	edde 7a03 	vldr	s15, [lr, #12]
 80041da:	2c04      	cmp	r4, #4
 80041dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80041e0:	d055      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 80041e2:	eddc 6a04 	vldr	s13, [ip, #16]
 80041e6:	edde 7a04 	vldr	s15, [lr, #16]
 80041ea:	2c05      	cmp	r4, #5
 80041ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80041f0:	d04d      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 80041f2:	eddc 6a05 	vldr	s13, [ip, #20]
 80041f6:	edde 7a05 	vldr	s15, [lr, #20]
 80041fa:	2c06      	cmp	r4, #6
 80041fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004200:	d045      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 8004202:	eddc 6a06 	vldr	s13, [ip, #24]
 8004206:	edde 7a06 	vldr	s15, [lr, #24]
 800420a:	2c07      	cmp	r4, #7
 800420c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004210:	d03d      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 8004212:	eddc 6a07 	vldr	s13, [ip, #28]
 8004216:	edde 7a07 	vldr	s15, [lr, #28]
 800421a:	2c08      	cmp	r4, #8
 800421c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004220:	d035      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 8004222:	eddc 6a08 	vldr	s13, [ip, #32]
 8004226:	edde 7a08 	vldr	s15, [lr, #32]
 800422a:	2c09      	cmp	r4, #9
 800422c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004230:	d02d      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 8004232:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8004236:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800423a:	2c0a      	cmp	r4, #10
 800423c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004240:	d025      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 8004242:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8004246:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800424a:	2c0b      	cmp	r4, #11
 800424c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004250:	d01d      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 8004252:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8004256:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800425a:	2c0c      	cmp	r4, #12
 800425c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004260:	d015      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 8004262:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8004266:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800426a:	3c0d      	subs	r4, #13
 800426c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004270:	d00d      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 8004272:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8004276:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800427a:	2c01      	cmp	r4, #1
 800427c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004280:	d005      	beq.n	800428e <lite_dense_if32of32wf32+0x212>
 8004282:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8004286:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800428a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800428e:	444a      	add	r2, r9
 8004290:	eca5 7a01 	vstmia	r5!, {s14}
 8004294:	42af      	cmp	r7, r5
 8004296:	f63f af09 	bhi.w	80040ac <lite_dense_if32of32wf32+0x30>
 800429a:	b15b      	cbz	r3, 80042b4 <lite_dense_if32of32wf32+0x238>
 800429c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800429e:	b14a      	cbz	r2, 80042b4 <lite_dense_if32of32wf32+0x238>
 80042a0:	edd0 7a00 	vldr	s15, [r0]
 80042a4:	ecb3 7a01 	vldmia	r3!, {s14}
 80042a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042ac:	ece0 7a01 	vstmia	r0!, {s15}
 80042b0:	4287      	cmp	r7, r0
 80042b2:	d1f5      	bne.n	80042a0 <lite_dense_if32of32wf32+0x224>
 80042b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b8:	4634      	mov	r4, r6
 80042ba:	4696      	mov	lr, r2
 80042bc:	468c      	mov	ip, r1
 80042be:	e76e      	b.n	800419e <lite_dense_if32of32wf32+0x122>
 80042c0:	00000000 	.word	0x00000000

080042c4 <ai_version_get>:
 80042c4:	0212      	lsls	r2, r2, #8
 80042c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80042ca:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80042ce:	4770      	bx	lr

080042d0 <get_tensor_byte_size>:
 80042d0:	b410      	push	{r4}
 80042d2:	6983      	ldr	r3, [r0, #24]
 80042d4:	68c4      	ldr	r4, [r0, #12]
 80042d6:	6941      	ldr	r1, [r0, #20]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68e0      	ldr	r0, [r4, #12]
 80042dc:	4a07      	ldr	r2, [pc, #28]	; (80042fc <get_tensor_byte_size+0x2c>)
 80042de:	68c9      	ldr	r1, [r1, #12]
 80042e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042e4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80042e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042ec:	fb01 f000 	mul.w	r0, r1, r0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	bf04      	itt	eq
 80042f4:	3007      	addeq	r0, #7
 80042f6:	08c0      	lsreq	r0, r0, #3
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	000400c0 	.word	0x000400c0

08004300 <ai_array_to_buffer_fmt>:
 8004300:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004304:	2b02      	cmp	r3, #2
 8004306:	d050      	beq.n	80043aa <ai_array_to_buffer_fmt+0xaa>
 8004308:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <ai_array_to_buffer_fmt+0xb4>)
 800430a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800430e:	429a      	cmp	r2, r3
 8004310:	d00b      	beq.n	800432a <ai_array_to_buffer_fmt+0x2a>
 8004312:	dc1c      	bgt.n	800434e <ai_array_to_buffer_fmt+0x4e>
 8004314:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <ai_array_to_buffer_fmt+0xb8>)
 8004316:	429a      	cmp	r2, r3
 8004318:	d007      	beq.n	800432a <ai_array_to_buffer_fmt+0x2a>
 800431a:	dd0b      	ble.n	8004334 <ai_array_to_buffer_fmt+0x34>
 800431c:	4b27      	ldr	r3, [pc, #156]	; (80043bc <ai_array_to_buffer_fmt+0xbc>)
 800431e:	429a      	cmp	r2, r3
 8004320:	d003      	beq.n	800432a <ai_array_to_buffer_fmt+0x2a>
 8004322:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8004326:	429a      	cmp	r2, r3
 8004328:	d131      	bne.n	800438e <ai_array_to_buffer_fmt+0x8e>
 800432a:	4613      	mov	r3, r2
 800432c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004330:	4318      	orrs	r0, r3
 8004332:	4770      	bx	lr
 8004334:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004338:	429a      	cmp	r2, r3
 800433a:	d0f6      	beq.n	800432a <ai_array_to_buffer_fmt+0x2a>
 800433c:	dd2c      	ble.n	8004398 <ai_array_to_buffer_fmt+0x98>
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <ai_array_to_buffer_fmt+0xc0>)
 8004340:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004344:	429a      	cmp	r2, r3
 8004346:	bf18      	it	ne
 8004348:	2340      	movne	r3, #64	; 0x40
 800434a:	4318      	orrs	r0, r3
 800434c:	4770      	bx	lr
 800434e:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <ai_array_to_buffer_fmt+0xc4>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d0ea      	beq.n	800432a <ai_array_to_buffer_fmt+0x2a>
 8004354:	dd0e      	ble.n	8004374 <ai_array_to_buffer_fmt+0x74>
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <ai_array_to_buffer_fmt+0xc8>)
 8004358:	429a      	cmp	r2, r3
 800435a:	d0e6      	beq.n	800432a <ai_array_to_buffer_fmt+0x2a>
 800435c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8004360:	429a      	cmp	r2, r3
 8004362:	d0e2      	beq.n	800432a <ai_array_to_buffer_fmt+0x2a>
 8004364:	4b19      	ldr	r3, [pc, #100]	; (80043cc <ai_array_to_buffer_fmt+0xcc>)
 8004366:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800436a:	429a      	cmp	r2, r3
 800436c:	bf18      	it	ne
 800436e:	2340      	movne	r3, #64	; 0x40
 8004370:	4318      	orrs	r0, r3
 8004372:	4770      	bx	lr
 8004374:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004378:	429a      	cmp	r2, r3
 800437a:	d0d6      	beq.n	800432a <ai_array_to_buffer_fmt+0x2a>
 800437c:	3307      	adds	r3, #7
 800437e:	429a      	cmp	r2, r3
 8004380:	d0d3      	beq.n	800432a <ai_array_to_buffer_fmt+0x2a>
 8004382:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8004386:	429a      	cmp	r2, r3
 8004388:	bf18      	it	ne
 800438a:	2340      	movne	r3, #64	; 0x40
 800438c:	e7ce      	b.n	800432c <ai_array_to_buffer_fmt+0x2c>
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <ai_array_to_buffer_fmt+0xd0>)
 8004390:	429a      	cmp	r2, r3
 8004392:	bf18      	it	ne
 8004394:	2340      	movne	r3, #64	; 0x40
 8004396:	e7c9      	b.n	800432c <ai_array_to_buffer_fmt+0x2c>
 8004398:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800439c:	429a      	cmp	r2, r3
 800439e:	d0c4      	beq.n	800432a <ai_array_to_buffer_fmt+0x2a>
 80043a0:	3380      	adds	r3, #128	; 0x80
 80043a2:	429a      	cmp	r2, r3
 80043a4:	bf18      	it	ne
 80043a6:	2340      	movne	r3, #64	; 0x40
 80043a8:	e7c0      	b.n	800432c <ai_array_to_buffer_fmt+0x2c>
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <ai_array_to_buffer_fmt+0xd4>)
 80043ac:	4003      	ands	r3, r0
 80043ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b2:	e7bb      	b.n	800432c <ai_array_to_buffer_fmt+0x2c>
 80043b4:	00840040 	.word	0x00840040
 80043b8:	00040840 	.word	0x00040840
 80043bc:	00041040 	.word	0x00041040
 80043c0:	00040447 	.word	0x00040447
 80043c4:	00840840 	.word	0x00840840
 80043c8:	00841040 	.word	0x00841040
 80043cc:	0084084f 	.word	0x0084084f
 80043d0:	0004084f 	.word	0x0004084f
 80043d4:	00803fff 	.word	0x00803fff

080043d8 <ai_array_get_byte_size>:
 80043d8:	b319      	cbz	r1, 8004422 <ai_array_get_byte_size+0x4a>
 80043da:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80043de:	fb03 f101 	mul.w	r1, r3, r1
 80043e2:	3107      	adds	r1, #7
 80043e4:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80043e8:	f021 0307 	bic.w	r3, r1, #7
 80043ec:	2a04      	cmp	r2, #4
 80043ee:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80043f2:	fa23 f101 	lsr.w	r1, r3, r1
 80043f6:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80043fa:	d00b      	beq.n	8004414 <ai_array_get_byte_size+0x3c>
 80043fc:	2a08      	cmp	r2, #8
 80043fe:	d002      	beq.n	8004406 <ai_array_get_byte_size+0x2e>
 8004400:	3107      	adds	r1, #7
 8004402:	08c8      	lsrs	r0, r1, #3
 8004404:	4770      	bx	lr
 8004406:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800440a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800440e:	3107      	adds	r1, #7
 8004410:	08c8      	lsrs	r0, r1, #3
 8004412:	4770      	bx	lr
 8004414:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004418:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800441c:	3107      	adds	r1, #7
 800441e:	08c8      	lsrs	r0, r1, #3
 8004420:	4770      	bx	lr
 8004422:	4608      	mov	r0, r1
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop

08004428 <ai_array_get_data_byte_size>:
 8004428:	b169      	cbz	r1, 8004446 <ai_array_get_data_byte_size+0x1e>
 800442a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800442e:	fb02 f101 	mul.w	r1, r2, r1
 8004432:	1dcb      	adds	r3, r1, #7
 8004434:	f023 0307 	bic.w	r3, r3, #7
 8004438:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800443c:	fa23 f000 	lsr.w	r0, r3, r0
 8004440:	3007      	adds	r0, #7
 8004442:	08c0      	lsrs	r0, r0, #3
 8004444:	4770      	bx	lr
 8004446:	4608      	mov	r0, r1
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop

0800444c <__errno>:
 800444c:	4b01      	ldr	r3, [pc, #4]	; (8004454 <__errno+0x8>)
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	20000554 	.word	0x20000554

08004458 <__libc_init_array>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	4d0d      	ldr	r5, [pc, #52]	; (8004490 <__libc_init_array+0x38>)
 800445c:	4c0d      	ldr	r4, [pc, #52]	; (8004494 <__libc_init_array+0x3c>)
 800445e:	1b64      	subs	r4, r4, r5
 8004460:	10a4      	asrs	r4, r4, #2
 8004462:	2600      	movs	r6, #0
 8004464:	42a6      	cmp	r6, r4
 8004466:	d109      	bne.n	800447c <__libc_init_array+0x24>
 8004468:	4d0b      	ldr	r5, [pc, #44]	; (8004498 <__libc_init_array+0x40>)
 800446a:	4c0c      	ldr	r4, [pc, #48]	; (800449c <__libc_init_array+0x44>)
 800446c:	f000 f962 	bl	8004734 <_init>
 8004470:	1b64      	subs	r4, r4, r5
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	2600      	movs	r6, #0
 8004476:	42a6      	cmp	r6, r4
 8004478:	d105      	bne.n	8004486 <__libc_init_array+0x2e>
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004480:	4798      	blx	r3
 8004482:	3601      	adds	r6, #1
 8004484:	e7ee      	b.n	8004464 <__libc_init_array+0xc>
 8004486:	f855 3b04 	ldr.w	r3, [r5], #4
 800448a:	4798      	blx	r3
 800448c:	3601      	adds	r6, #1
 800448e:	e7f2      	b.n	8004476 <__libc_init_array+0x1e>
 8004490:	08006248 	.word	0x08006248
 8004494:	08006248 	.word	0x08006248
 8004498:	08006248 	.word	0x08006248
 800449c:	0800624c 	.word	0x0800624c

080044a0 <memcpy>:
 80044a0:	440a      	add	r2, r1
 80044a2:	4291      	cmp	r1, r2
 80044a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044a8:	d100      	bne.n	80044ac <memcpy+0xc>
 80044aa:	4770      	bx	lr
 80044ac:	b510      	push	{r4, lr}
 80044ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b6:	4291      	cmp	r1, r2
 80044b8:	d1f9      	bne.n	80044ae <memcpy+0xe>
 80044ba:	bd10      	pop	{r4, pc}

080044bc <memset>:
 80044bc:	4402      	add	r2, r0
 80044be:	4603      	mov	r3, r0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <expf>:
 80044cc:	b508      	push	{r3, lr}
 80044ce:	ed2d 8b02 	vpush	{d8}
 80044d2:	eef0 8a40 	vmov.f32	s17, s0
 80044d6:	f000 f82f 	bl	8004538 <__ieee754_expf>
 80044da:	eeb0 8a40 	vmov.f32	s16, s0
 80044de:	eeb0 0a68 	vmov.f32	s0, s17
 80044e2:	f000 f919 	bl	8004718 <finitef>
 80044e6:	b160      	cbz	r0, 8004502 <expf+0x36>
 80044e8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004528 <expf+0x5c>
 80044ec:	eef4 8ae7 	vcmpe.f32	s17, s15
 80044f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f4:	dd0a      	ble.n	800450c <expf+0x40>
 80044f6:	f7ff ffa9 	bl	800444c <__errno>
 80044fa:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800452c <expf+0x60>
 80044fe:	2322      	movs	r3, #34	; 0x22
 8004500:	6003      	str	r3, [r0, #0]
 8004502:	eeb0 0a48 	vmov.f32	s0, s16
 8004506:	ecbd 8b02 	vpop	{d8}
 800450a:	bd08      	pop	{r3, pc}
 800450c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004530 <expf+0x64>
 8004510:	eef4 8ae7 	vcmpe.f32	s17, s15
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	d5f3      	bpl.n	8004502 <expf+0x36>
 800451a:	f7ff ff97 	bl	800444c <__errno>
 800451e:	2322      	movs	r3, #34	; 0x22
 8004520:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8004534 <expf+0x68>
 8004524:	6003      	str	r3, [r0, #0]
 8004526:	e7ec      	b.n	8004502 <expf+0x36>
 8004528:	42b17180 	.word	0x42b17180
 800452c:	7f800000 	.word	0x7f800000
 8004530:	c2cff1b5 	.word	0xc2cff1b5
 8004534:	00000000 	.word	0x00000000

08004538 <__ieee754_expf>:
 8004538:	ee10 2a10 	vmov	r2, s0
 800453c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004540:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004544:	d902      	bls.n	800454c <__ieee754_expf+0x14>
 8004546:	ee30 0a00 	vadd.f32	s0, s0, s0
 800454a:	4770      	bx	lr
 800454c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8004550:	d106      	bne.n	8004560 <__ieee754_expf+0x28>
 8004552:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800468c <__ieee754_expf+0x154>
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf18      	it	ne
 800455a:	eeb0 0a67 	vmovne.f32	s0, s15
 800455e:	4770      	bx	lr
 8004560:	484b      	ldr	r0, [pc, #300]	; (8004690 <__ieee754_expf+0x158>)
 8004562:	4282      	cmp	r2, r0
 8004564:	dd02      	ble.n	800456c <__ieee754_expf+0x34>
 8004566:	2000      	movs	r0, #0
 8004568:	f000 b8d0 	b.w	800470c <__math_oflowf>
 800456c:	2a00      	cmp	r2, #0
 800456e:	da05      	bge.n	800457c <__ieee754_expf+0x44>
 8004570:	4a48      	ldr	r2, [pc, #288]	; (8004694 <__ieee754_expf+0x15c>)
 8004572:	4291      	cmp	r1, r2
 8004574:	d902      	bls.n	800457c <__ieee754_expf+0x44>
 8004576:	2000      	movs	r0, #0
 8004578:	f000 b8c2 	b.w	8004700 <__math_uflowf>
 800457c:	4a46      	ldr	r2, [pc, #280]	; (8004698 <__ieee754_expf+0x160>)
 800457e:	4291      	cmp	r1, r2
 8004580:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004584:	d952      	bls.n	800462c <__ieee754_expf+0xf4>
 8004586:	4a45      	ldr	r2, [pc, #276]	; (800469c <__ieee754_expf+0x164>)
 8004588:	4291      	cmp	r1, r2
 800458a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800458e:	d834      	bhi.n	80045fa <__ieee754_expf+0xc2>
 8004590:	4943      	ldr	r1, [pc, #268]	; (80046a0 <__ieee754_expf+0x168>)
 8004592:	4411      	add	r1, r2
 8004594:	ed91 7a00 	vldr	s14, [r1]
 8004598:	4942      	ldr	r1, [pc, #264]	; (80046a4 <__ieee754_expf+0x16c>)
 800459a:	440a      	add	r2, r1
 800459c:	edd2 7a00 	vldr	s15, [r2]
 80045a0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80045a4:	f1c3 0201 	rsb	r2, r3, #1
 80045a8:	1ad2      	subs	r2, r2, r3
 80045aa:	ee37 0a67 	vsub.f32	s0, s14, s15
 80045ae:	ee20 6a00 	vmul.f32	s12, s0, s0
 80045b2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80046a8 <__ieee754_expf+0x170>
 80045b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80046ac <__ieee754_expf+0x174>
 80045ba:	eee6 6a05 	vfma.f32	s13, s12, s10
 80045be:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80046b0 <__ieee754_expf+0x178>
 80045c2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80045c6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80046b4 <__ieee754_expf+0x17c>
 80045ca:	eee5 6a06 	vfma.f32	s13, s10, s12
 80045ce:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80046b8 <__ieee754_expf+0x180>
 80045d2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80045d6:	eef0 6a40 	vmov.f32	s13, s0
 80045da:	eee5 6a46 	vfms.f32	s13, s10, s12
 80045de:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80045e2:	ee20 5a26 	vmul.f32	s10, s0, s13
 80045e6:	bb92      	cbnz	r2, 800464e <__ieee754_expf+0x116>
 80045e8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80045ec:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80045f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80045f4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80045f8:	4770      	bx	lr
 80045fa:	4b30      	ldr	r3, [pc, #192]	; (80046bc <__ieee754_expf+0x184>)
 80045fc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80046c0 <__ieee754_expf+0x188>
 8004600:	eddf 6a30 	vldr	s13, [pc, #192]	; 80046c4 <__ieee754_expf+0x18c>
 8004604:	4413      	add	r3, r2
 8004606:	edd3 7a00 	vldr	s15, [r3]
 800460a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800460e:	eeb0 7a40 	vmov.f32	s14, s0
 8004612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004616:	ee17 2a90 	vmov	r2, s15
 800461a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800461e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8004622:	eddf 6a29 	vldr	s13, [pc, #164]	; 80046c8 <__ieee754_expf+0x190>
 8004626:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800462a:	e7be      	b.n	80045aa <__ieee754_expf+0x72>
 800462c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8004630:	d20b      	bcs.n	800464a <__ieee754_expf+0x112>
 8004632:	eddf 6a26 	vldr	s13, [pc, #152]	; 80046cc <__ieee754_expf+0x194>
 8004636:	ee70 6a26 	vadd.f32	s13, s0, s13
 800463a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800463e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004642:	dd02      	ble.n	800464a <__ieee754_expf+0x112>
 8004644:	ee30 0a25 	vadd.f32	s0, s0, s11
 8004648:	4770      	bx	lr
 800464a:	2200      	movs	r2, #0
 800464c:	e7af      	b.n	80045ae <__ieee754_expf+0x76>
 800464e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004652:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8004656:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800465a:	bfb8      	it	lt
 800465c:	3264      	addlt	r2, #100	; 0x64
 800465e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004662:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8004666:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800466a:	ee17 3a90 	vmov	r3, s15
 800466e:	bfab      	itete	ge
 8004670:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8004674:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8004678:	ee00 3a10 	vmovge	s0, r3
 800467c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80046d0 <__ieee754_expf+0x198>
 8004680:	bfbc      	itt	lt
 8004682:	ee00 3a10 	vmovlt	s0, r3
 8004686:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800468a:	4770      	bx	lr
 800468c:	00000000 	.word	0x00000000
 8004690:	42b17217 	.word	0x42b17217
 8004694:	42cff1b5 	.word	0x42cff1b5
 8004698:	3eb17218 	.word	0x3eb17218
 800469c:	3f851591 	.word	0x3f851591
 80046a0:	08006230 	.word	0x08006230
 80046a4:	08006238 	.word	0x08006238
 80046a8:	3331bb4c 	.word	0x3331bb4c
 80046ac:	b5ddea0e 	.word	0xb5ddea0e
 80046b0:	388ab355 	.word	0x388ab355
 80046b4:	bb360b61 	.word	0xbb360b61
 80046b8:	3e2aaaab 	.word	0x3e2aaaab
 80046bc:	08006228 	.word	0x08006228
 80046c0:	3fb8aa3b 	.word	0x3fb8aa3b
 80046c4:	3f317180 	.word	0x3f317180
 80046c8:	3717f7d1 	.word	0x3717f7d1
 80046cc:	7149f2ca 	.word	0x7149f2ca
 80046d0:	0d800000 	.word	0x0d800000

080046d4 <with_errnof>:
 80046d4:	b513      	push	{r0, r1, r4, lr}
 80046d6:	4604      	mov	r4, r0
 80046d8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80046dc:	f7ff feb6 	bl	800444c <__errno>
 80046e0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80046e4:	6004      	str	r4, [r0, #0]
 80046e6:	b002      	add	sp, #8
 80046e8:	bd10      	pop	{r4, pc}

080046ea <xflowf>:
 80046ea:	b130      	cbz	r0, 80046fa <xflowf+0x10>
 80046ec:	eef1 7a40 	vneg.f32	s15, s0
 80046f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80046f4:	2022      	movs	r0, #34	; 0x22
 80046f6:	f7ff bfed 	b.w	80046d4 <with_errnof>
 80046fa:	eef0 7a40 	vmov.f32	s15, s0
 80046fe:	e7f7      	b.n	80046f0 <xflowf+0x6>

08004700 <__math_uflowf>:
 8004700:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004708 <__math_uflowf+0x8>
 8004704:	f7ff bff1 	b.w	80046ea <xflowf>
 8004708:	10000000 	.word	0x10000000

0800470c <__math_oflowf>:
 800470c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004714 <__math_oflowf+0x8>
 8004710:	f7ff bfeb 	b.w	80046ea <xflowf>
 8004714:	70000000 	.word	0x70000000

08004718 <finitef>:
 8004718:	b082      	sub	sp, #8
 800471a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800471e:	9801      	ldr	r0, [sp, #4]
 8004720:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004724:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004728:	bfac      	ite	ge
 800472a:	2000      	movge	r0, #0
 800472c:	2001      	movlt	r0, #1
 800472e:	b002      	add	sp, #8
 8004730:	4770      	bx	lr
	...

08004734 <_init>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr

08004740 <_fini>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr
