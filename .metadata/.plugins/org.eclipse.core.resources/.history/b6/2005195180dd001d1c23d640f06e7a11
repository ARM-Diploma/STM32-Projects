#include "stdint.h"
#include "../Inc/BIT_MATH.h"
#include "../Inc/STATUS.h"

#include "../Inc/RCC_config.h"
#include "../Inc/RCC_private.h"
#include "../Inc/RCC_interface.h"


int8_t RCC_Int8SetClockSrc(int8_t Copy_int8ClockType , int8_t Copy_int8Status)
{
	int8_t Local_int8ErrorState = OK;

	switch (Copy_int8ClockType)
	{
	case HSE_CLK :
		if(Copy_int8Status == ON)
		{
			SET_BIT(RCC->CR,HSEON);
		}

		else if(Copy_int8Status == OFF)
		{
			CLR_BIT(RCC->CR,HSEON);
		}

		else
		{
			Local_int8ErrorState = NOK;
		}

		while((GET_BIT(RCC->CR,HSERDY) != READY) || )
		{

		}
		break;

	case HSI_CLK :
		if(Copy_int8Status == ON)
		{
			SET_BIT(RCC->CR,HSION);
		}

		else if(Copy_int8Status == OFF)
		{
			CLR_BIT(RCC->CR,HSION);
		}

		else
		{
			Local_int8ErrorState = NOK;
		}
		break;

	case PLL_CLK :
		if(Copy_int8Status == ON)
		{
			SET_BIT(RCC->CR,PLLON);
		}

		else if(Copy_int8Status == OFF)
		{
			CLR_BIT(RCC->CR,PLLON);
		}

		else
		{
			Local_int8ErrorState = NOK;
		}
		break;

	default : Local_int8ErrorState = NOK;
	}

	return Local_int8ErrorState;

}

int8_t RCC_Int8SetSysClock(int8_t Copy_int8ClockType)
{
	int8_t Local_int8ErrorState = 0;

	switch (Copy_int8ClockType)
	{
	case HSE_CLK :

		break;

	case HSI_CLK :

		break;

	case PLL_CLK :

		break;

	default : Local_int8ErrorState = 1;
	}

	return Local_int8ErrorState;
}


int8_t RCC_Int8HSEConfig(int8_t Copy_int8DivisionScale)
{

}


int8_t RCC_Int8PLLConfig(int8_t Copy_int8PLLMul , int8_t Copy_int8PLLSrc)
{

}

int8_t RCC_Int8PeripheralClkControl(int8_t Copy_int8PeripheralClk , int8_t Copy_int8PeripheralName)
{

}
