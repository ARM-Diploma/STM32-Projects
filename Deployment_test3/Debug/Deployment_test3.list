
Deployment_test3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003374  08005980  08005980  00015980  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf4  08008cf4  000205c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cfc  08008cfc  000205c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cfc  08008cfc  00018cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c4  20000000  08008d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  200005c4  080092c8  000205c4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20000714  080092c8  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f906  00000000  00000000  000205f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a1  00000000  00000000  0002fefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  000325a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00033220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246c7  00000000  00000000  00033d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001213b  00000000  00000000  00058437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc93c  00000000  00000000  0006a572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146eae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003764  00000000  00000000  00146f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005c4 	.word	0x200005c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005958 	.word	0x08005958

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200005c8 	.word	0x200005c8
 800020c:	08005958 	.word	0x08005958

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b974 	b.w	8000928 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	468e      	mov	lr, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d14d      	bne.n	8000702 <__udivmoddi4+0xaa>
 8000666:	428a      	cmp	r2, r1
 8000668:	4694      	mov	ip, r2
 800066a:	d969      	bls.n	8000740 <__udivmoddi4+0xe8>
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	b152      	cbz	r2, 8000688 <__udivmoddi4+0x30>
 8000672:	fa01 f302 	lsl.w	r3, r1, r2
 8000676:	f1c2 0120 	rsb	r1, r2, #32
 800067a:	fa20 f101 	lsr.w	r1, r0, r1
 800067e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000682:	ea41 0e03 	orr.w	lr, r1, r3
 8000686:	4094      	lsls	r4, r2
 8000688:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800068c:	0c21      	lsrs	r1, r4, #16
 800068e:	fbbe f6f8 	udiv	r6, lr, r8
 8000692:	fa1f f78c 	uxth.w	r7, ip
 8000696:	fb08 e316 	mls	r3, r8, r6, lr
 800069a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800069e:	fb06 f107 	mul.w	r1, r6, r7
 80006a2:	4299      	cmp	r1, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x64>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ae:	f080 811f 	bcs.w	80008f0 <__udivmoddi4+0x298>
 80006b2:	4299      	cmp	r1, r3
 80006b4:	f240 811c 	bls.w	80008f0 <__udivmoddi4+0x298>
 80006b8:	3e02      	subs	r6, #2
 80006ba:	4463      	add	r3, ip
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	b2a4      	uxth	r4, r4
 80006c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c4:	fb08 3310 	mls	r3, r8, r0, r3
 80006c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006cc:	fb00 f707 	mul.w	r7, r0, r7
 80006d0:	42a7      	cmp	r7, r4
 80006d2:	d90a      	bls.n	80006ea <__udivmoddi4+0x92>
 80006d4:	eb1c 0404 	adds.w	r4, ip, r4
 80006d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006dc:	f080 810a 	bcs.w	80008f4 <__udivmoddi4+0x29c>
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	f240 8107 	bls.w	80008f4 <__udivmoddi4+0x29c>
 80006e6:	4464      	add	r4, ip
 80006e8:	3802      	subs	r0, #2
 80006ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ee:	1be4      	subs	r4, r4, r7
 80006f0:	2600      	movs	r6, #0
 80006f2:	b11d      	cbz	r5, 80006fc <__udivmoddi4+0xa4>
 80006f4:	40d4      	lsrs	r4, r2
 80006f6:	2300      	movs	r3, #0
 80006f8:	e9c5 4300 	strd	r4, r3, [r5]
 80006fc:	4631      	mov	r1, r6
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	428b      	cmp	r3, r1
 8000704:	d909      	bls.n	800071a <__udivmoddi4+0xc2>
 8000706:	2d00      	cmp	r5, #0
 8000708:	f000 80ef 	beq.w	80008ea <__udivmoddi4+0x292>
 800070c:	2600      	movs	r6, #0
 800070e:	e9c5 0100 	strd	r0, r1, [r5]
 8000712:	4630      	mov	r0, r6
 8000714:	4631      	mov	r1, r6
 8000716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071a:	fab3 f683 	clz	r6, r3
 800071e:	2e00      	cmp	r6, #0
 8000720:	d14a      	bne.n	80007b8 <__udivmoddi4+0x160>
 8000722:	428b      	cmp	r3, r1
 8000724:	d302      	bcc.n	800072c <__udivmoddi4+0xd4>
 8000726:	4282      	cmp	r2, r0
 8000728:	f200 80f9 	bhi.w	800091e <__udivmoddi4+0x2c6>
 800072c:	1a84      	subs	r4, r0, r2
 800072e:	eb61 0303 	sbc.w	r3, r1, r3
 8000732:	2001      	movs	r0, #1
 8000734:	469e      	mov	lr, r3
 8000736:	2d00      	cmp	r5, #0
 8000738:	d0e0      	beq.n	80006fc <__udivmoddi4+0xa4>
 800073a:	e9c5 4e00 	strd	r4, lr, [r5]
 800073e:	e7dd      	b.n	80006fc <__udivmoddi4+0xa4>
 8000740:	b902      	cbnz	r2, 8000744 <__udivmoddi4+0xec>
 8000742:	deff      	udf	#255	; 0xff
 8000744:	fab2 f282 	clz	r2, r2
 8000748:	2a00      	cmp	r2, #0
 800074a:	f040 8092 	bne.w	8000872 <__udivmoddi4+0x21a>
 800074e:	eba1 010c 	sub.w	r1, r1, ip
 8000752:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000756:	fa1f fe8c 	uxth.w	lr, ip
 800075a:	2601      	movs	r6, #1
 800075c:	0c20      	lsrs	r0, r4, #16
 800075e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000762:	fb07 1113 	mls	r1, r7, r3, r1
 8000766:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800076a:	fb0e f003 	mul.w	r0, lr, r3
 800076e:	4288      	cmp	r0, r1
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x12c>
 8000772:	eb1c 0101 	adds.w	r1, ip, r1
 8000776:	f103 38ff 	add.w	r8, r3, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x12a>
 800077c:	4288      	cmp	r0, r1
 800077e:	f200 80cb 	bhi.w	8000918 <__udivmoddi4+0x2c0>
 8000782:	4643      	mov	r3, r8
 8000784:	1a09      	subs	r1, r1, r0
 8000786:	b2a4      	uxth	r4, r4
 8000788:	fbb1 f0f7 	udiv	r0, r1, r7
 800078c:	fb07 1110 	mls	r1, r7, r0, r1
 8000790:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000794:	fb0e fe00 	mul.w	lr, lr, r0
 8000798:	45a6      	cmp	lr, r4
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x156>
 800079c:	eb1c 0404 	adds.w	r4, ip, r4
 80007a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007a4:	d202      	bcs.n	80007ac <__udivmoddi4+0x154>
 80007a6:	45a6      	cmp	lr, r4
 80007a8:	f200 80bb 	bhi.w	8000922 <__udivmoddi4+0x2ca>
 80007ac:	4608      	mov	r0, r1
 80007ae:	eba4 040e 	sub.w	r4, r4, lr
 80007b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007b6:	e79c      	b.n	80006f2 <__udivmoddi4+0x9a>
 80007b8:	f1c6 0720 	rsb	r7, r6, #32
 80007bc:	40b3      	lsls	r3, r6
 80007be:	fa22 fc07 	lsr.w	ip, r2, r7
 80007c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007c6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ca:	fa01 f306 	lsl.w	r3, r1, r6
 80007ce:	431c      	orrs	r4, r3
 80007d0:	40f9      	lsrs	r1, r7
 80007d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007d6:	fa00 f306 	lsl.w	r3, r0, r6
 80007da:	fbb1 f8f9 	udiv	r8, r1, r9
 80007de:	0c20      	lsrs	r0, r4, #16
 80007e0:	fa1f fe8c 	uxth.w	lr, ip
 80007e4:	fb09 1118 	mls	r1, r9, r8, r1
 80007e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ec:	fb08 f00e 	mul.w	r0, r8, lr
 80007f0:	4288      	cmp	r0, r1
 80007f2:	fa02 f206 	lsl.w	r2, r2, r6
 80007f6:	d90b      	bls.n	8000810 <__udivmoddi4+0x1b8>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000800:	f080 8088 	bcs.w	8000914 <__udivmoddi4+0x2bc>
 8000804:	4288      	cmp	r0, r1
 8000806:	f240 8085 	bls.w	8000914 <__udivmoddi4+0x2bc>
 800080a:	f1a8 0802 	sub.w	r8, r8, #2
 800080e:	4461      	add	r1, ip
 8000810:	1a09      	subs	r1, r1, r0
 8000812:	b2a4      	uxth	r4, r4
 8000814:	fbb1 f0f9 	udiv	r0, r1, r9
 8000818:	fb09 1110 	mls	r1, r9, r0, r1
 800081c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000820:	fb00 fe0e 	mul.w	lr, r0, lr
 8000824:	458e      	cmp	lr, r1
 8000826:	d908      	bls.n	800083a <__udivmoddi4+0x1e2>
 8000828:	eb1c 0101 	adds.w	r1, ip, r1
 800082c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000830:	d26c      	bcs.n	800090c <__udivmoddi4+0x2b4>
 8000832:	458e      	cmp	lr, r1
 8000834:	d96a      	bls.n	800090c <__udivmoddi4+0x2b4>
 8000836:	3802      	subs	r0, #2
 8000838:	4461      	add	r1, ip
 800083a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800083e:	fba0 9402 	umull	r9, r4, r0, r2
 8000842:	eba1 010e 	sub.w	r1, r1, lr
 8000846:	42a1      	cmp	r1, r4
 8000848:	46c8      	mov	r8, r9
 800084a:	46a6      	mov	lr, r4
 800084c:	d356      	bcc.n	80008fc <__udivmoddi4+0x2a4>
 800084e:	d053      	beq.n	80008f8 <__udivmoddi4+0x2a0>
 8000850:	b15d      	cbz	r5, 800086a <__udivmoddi4+0x212>
 8000852:	ebb3 0208 	subs.w	r2, r3, r8
 8000856:	eb61 010e 	sbc.w	r1, r1, lr
 800085a:	fa01 f707 	lsl.w	r7, r1, r7
 800085e:	fa22 f306 	lsr.w	r3, r2, r6
 8000862:	40f1      	lsrs	r1, r6
 8000864:	431f      	orrs	r7, r3
 8000866:	e9c5 7100 	strd	r7, r1, [r5]
 800086a:	2600      	movs	r6, #0
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	f1c2 0320 	rsb	r3, r2, #32
 8000876:	40d8      	lsrs	r0, r3
 8000878:	fa0c fc02 	lsl.w	ip, ip, r2
 800087c:	fa21 f303 	lsr.w	r3, r1, r3
 8000880:	4091      	lsls	r1, r2
 8000882:	4301      	orrs	r1, r0
 8000884:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000888:	fa1f fe8c 	uxth.w	lr, ip
 800088c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000890:	fb07 3610 	mls	r6, r7, r0, r3
 8000894:	0c0b      	lsrs	r3, r1, #16
 8000896:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800089a:	fb00 f60e 	mul.w	r6, r0, lr
 800089e:	429e      	cmp	r6, r3
 80008a0:	fa04 f402 	lsl.w	r4, r4, r2
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x260>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ae:	d22f      	bcs.n	8000910 <__udivmoddi4+0x2b8>
 80008b0:	429e      	cmp	r6, r3
 80008b2:	d92d      	bls.n	8000910 <__udivmoddi4+0x2b8>
 80008b4:	3802      	subs	r0, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1b9b      	subs	r3, r3, r6
 80008ba:	b289      	uxth	r1, r1
 80008bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008c0:	fb07 3316 	mls	r3, r7, r6, r3
 80008c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c8:	fb06 f30e 	mul.w	r3, r6, lr
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x28a>
 80008d0:	eb1c 0101 	adds.w	r1, ip, r1
 80008d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008d8:	d216      	bcs.n	8000908 <__udivmoddi4+0x2b0>
 80008da:	428b      	cmp	r3, r1
 80008dc:	d914      	bls.n	8000908 <__udivmoddi4+0x2b0>
 80008de:	3e02      	subs	r6, #2
 80008e0:	4461      	add	r1, ip
 80008e2:	1ac9      	subs	r1, r1, r3
 80008e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008e8:	e738      	b.n	800075c <__udivmoddi4+0x104>
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e705      	b.n	80006fc <__udivmoddi4+0xa4>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e3      	b.n	80006bc <__udivmoddi4+0x64>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6f8      	b.n	80006ea <__udivmoddi4+0x92>
 80008f8:	454b      	cmp	r3, r9
 80008fa:	d2a9      	bcs.n	8000850 <__udivmoddi4+0x1f8>
 80008fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000900:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000904:	3801      	subs	r0, #1
 8000906:	e7a3      	b.n	8000850 <__udivmoddi4+0x1f8>
 8000908:	4646      	mov	r6, r8
 800090a:	e7ea      	b.n	80008e2 <__udivmoddi4+0x28a>
 800090c:	4620      	mov	r0, r4
 800090e:	e794      	b.n	800083a <__udivmoddi4+0x1e2>
 8000910:	4640      	mov	r0, r8
 8000912:	e7d1      	b.n	80008b8 <__udivmoddi4+0x260>
 8000914:	46d0      	mov	r8, sl
 8000916:	e77b      	b.n	8000810 <__udivmoddi4+0x1b8>
 8000918:	3b02      	subs	r3, #2
 800091a:	4461      	add	r1, ip
 800091c:	e732      	b.n	8000784 <__udivmoddi4+0x12c>
 800091e:	4630      	mov	r0, r6
 8000920:	e709      	b.n	8000736 <__udivmoddi4+0xde>
 8000922:	4464      	add	r4, ip
 8000924:	3802      	subs	r0, #2
 8000926:	e742      	b.n	80007ae <__udivmoddi4+0x156>

08000928 <__aeabi_idiv0>:
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_CRC_Init+0x20>)
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <MX_CRC_Init+0x24>)
 8000934:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_CRC_Init+0x20>)
 8000938:	f000 fd43 	bl	80013c2 <HAL_CRC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000942:	f000 fa41 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200005e0 	.word	0x200005e0
 8000950:	40023000 	.word	0x40023000

08000954 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <HAL_CRC_MspInit+0x3c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d10d      	bne.n	8000982 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_CRC_MspInit+0x40>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <HAL_CRC_MspInit+0x40>)
 8000970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_CRC_MspInit+0x40>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023000 	.word	0x40023000
 8000994:	40023800 	.word	0x40023800

08000998 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <MX_GPIO_Init+0xd0>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <MX_GPIO_Init+0xd0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <MX_GPIO_Init+0xd0>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_GPIO_Init+0xd0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a1e      	ldr	r2, [pc, #120]	; (8000a68 <MX_GPIO_Init+0xd0>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_GPIO_Init+0xd0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <MX_GPIO_Init+0xd0>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <MX_GPIO_Init+0xd0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2120      	movs	r1, #32
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_GPIO_Init+0xd4>)
 8000a24:	f000 fe7e 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <MX_GPIO_Init+0xd8>)
 8000a40:	f000 fcdc 	bl	80013fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a44:	2320      	movs	r3, #32
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_GPIO_Init+0xd4>)
 8000a5c:	f000 fcce 	bl	80013fc <HAL_GPIO_Init>

}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	; 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020800 	.word	0x40020800

08000a74 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	f5ad 6de8 	sub.w	sp, sp, #1856	; 0x740
 8000a7a:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	char buf[50];
	int buf_len = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 3730 	str.w	r3, [r7, #1840]	; 0x730
	// Buffers used to store input and output tensors
	AI_ALIGNED(4) ai_i8 in_data[AI_SINE_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_i8 out_data[AI_SINE_MODEL_OUT_1_SIZE_BYTES];

	// Pointer to our model
	ai_handle sine_model = AI_HANDLE_NULL;
 8000a82:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000a86:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]

	// Initialize wrapper structs that hold pointers to data and info about the
	// data (tensor height, width, channels)
	ai_buffer ai_input[AI_SINE_MODEL_IN_NUM] = AI_SINE_MODEL_IN;
 8000a8e:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000a92:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8000a96:	461a      	mov	r2, r3
 8000a98:	2300      	movs	r3, #0
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	6053      	str	r3, [r2, #4]
 8000a9e:	6093      	str	r3, [r2, #8]
 8000aa0:	60d3      	str	r3, [r2, #12]
 8000aa2:	6113      	str	r3, [r2, #16]
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f002 fa78 	bl	8002fa0 <ai_sine_model_inputs_get>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000ab8:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8000abc:	601a      	str	r2, [r3, #0]
	ai_buffer ai_output[AI_SINE_MODEL_OUT_NUM] = AI_SINE_MODEL_OUT;
 8000abe:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000ac2:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	2300      	movs	r3, #0
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	6053      	str	r3, [r2, #4]
 8000ace:	6093      	str	r3, [r2, #8]
 8000ad0:	60d3      	str	r3, [r2, #12]
 8000ad2:	6113      	str	r3, [r2, #16]
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2000      	movs	r0, #0
 8000adc:	f002 fa7a 	bl	8002fd4 <ai_sine_model_outputs_get>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000ae8:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8000aec:	601a      	str	r2, [r3, #0]

	// Set working memory and get weights/biases from model
	ai_network_params ai_params = {
			AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 8000aee:	f002 fb3f 	bl	8003170 <ai_sine_model_data_weights_get>
 8000af2:	4602      	mov	r2, r0
 8000af4:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000af8:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 fb02 	bl	8003108 <ai_sine_model_data_weights_buffer_get>
			AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
 8000b04:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000b08:	f2a3 7334 	subw	r3, r3, #1844	; 0x734
 8000b0c:	331c      	adds	r3, #28
 8000b0e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000b12:	4611      	mov	r1, r2
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 fac3 	bl	80030a0 <ai_sine_model_data_activations_buffer_get>
	};

	// Set pointers wrapper structs to our data buffers
	//	ai_input[0].shape = 1;
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000b1a:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000b1e:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 8000b22:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000b26:	605a      	str	r2, [r3, #4]
	//	ai_output[0].shape = 1;
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000b28:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000b2c:	f2a3 63fc 	subw	r3, r3, #1788	; 0x6fc
 8000b30:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000b34:	605a      	str	r2, [r3, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b36:	f000 fac9 	bl	80010cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b3a:	f000 f8d3 	bl	8000ce4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b3e:	f7ff ff2b 	bl	8000998 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000b42:	f000 fa27 	bl	8000f94 <MX_USART2_UART_Init>
	MX_CRC_Init();
 8000b46:	f7ff fef1 	bl	800092c <MX_CRC_Init>
	MX_TIM10_Init();
 8000b4a:	f000 f9dd 	bl	8000f08 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim10);
 8000b4e:	485e      	ldr	r0, [pc, #376]	; (8000cc8 <main+0x254>)
 8000b50:	f001 fc8a 	bl	8002468 <HAL_TIM_Base_Start>


	buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 8000b54:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8000b58:	495c      	ldr	r1, [pc, #368]	; (8000ccc <main+0x258>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 fa5a 	bl	8005014 <siprintf>
 8000b60:	f8c7 0730 	str.w	r0, [r7, #1840]	; 0x730
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000b64:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	4857      	ldr	r0, [pc, #348]	; (8000cd0 <main+0x25c>)
 8000b72:	f001 fdce 	bl	8002712 <HAL_UART_Transmit>

	// Create instance of neural network
	ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000b76:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 f9f9 	bl	8002f74 <ai_sine_model_create>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
	if (ai_err.type != AI_ERROR_NONE)
 8000b88:	f897 36ec 	ldrb.w	r3, [r7, #1772]	; 0x6ec
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d011      	beq.n	8000bb4 <main+0x140>
	{
		buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000b90:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8000b94:	494f      	ldr	r1, [pc, #316]	; (8000cd4 <main+0x260>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f004 fa3c 	bl	8005014 <siprintf>
 8000b9c:	f8c7 0730 	str.w	r0, [r7, #1840]	; 0x730
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000ba0:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8000baa:	2364      	movs	r3, #100	; 0x64
 8000bac:	4848      	ldr	r0, [pc, #288]	; (8000cd0 <main+0x25c>)
 8000bae:	f001 fdb0 	bl	8002712 <HAL_UART_Transmit>
		while(1);
 8000bb2:	e7fe      	b.n	8000bb2 <main+0x13e>
	}

	// Initialize neural network
	if (!ai_sine_model_init(sine_model, &ai_params))
 8000bb4:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000bb8:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	1d3a      	adds	r2, r7, #4
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 fa20 	bl	8003008 <ai_sine_model_init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f083 0301 	eor.w	r3, r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d011      	beq.n	8000bf8 <main+0x184>
	{
		buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8000bd4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8000bd8:	493f      	ldr	r1, [pc, #252]	; (8000cd8 <main+0x264>)
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 fa1a 	bl	8005014 <siprintf>
 8000be0:	f8c7 0730 	str.w	r0, [r7, #1840]	; 0x730
		HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000be4:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8000bee:	2364      	movs	r3, #100	; 0x64
 8000bf0:	4837      	ldr	r0, [pc, #220]	; (8000cd0 <main+0x25c>)
 8000bf2:	f001 fd8e 	bl	8002712 <HAL_UART_Transmit>
		while(1);
 8000bf6:	e7fe      	b.n	8000bf6 <main+0x182>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Fill input buffer (use test value)
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 8000bfe:	e00d      	b.n	8000c1c <main+0x1a8>
		{
			((ai_float *)in_data)[i] = (ai_float)2.0f;
 8000c00:	f8d7 3734 	ldr.w	r3, [r7, #1844]	; 0x734
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000c0a:	4413      	add	r3, r2
 8000c0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c10:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8000c12:	f8d7 3734 	ldr.w	r3, [r7, #1844]	; 0x734
 8000c16:	3301      	adds	r3, #1
 8000c18:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 8000c1c:	f8d7 3734 	ldr.w	r3, [r7, #1844]	; 0x734
 8000c20:	2b05      	cmp	r3, #5
 8000c22:	d9ed      	bls.n	8000c00 <main+0x18c>
		}

	    // Get current timestamp
	    timestamp = htim10.Instance->CNT;
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <main+0x254>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2a:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c

	    // Perform inference
	    nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8000c2e:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 8000c32:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000c3c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fa1d 	bl	8003080 <ai_sine_model_run>
 8000c46:	f8c7 0728 	str.w	r0, [r7, #1832]	; 0x728
	    if (nbatch != 1) {
 8000c4a:	f8d7 3728 	ldr.w	r3, [r7, #1832]	; 0x728
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d010      	beq.n	8000c74 <main+0x200>
	      buf_len = sprintf(buf, "Error: could not run inference\r\n");
 8000c52:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8000c56:	4921      	ldr	r1, [pc, #132]	; (8000cdc <main+0x268>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 f9db 	bl	8005014 <siprintf>
 8000c5e:	f8c7 0730 	str.w	r0, [r7, #1840]	; 0x730
	      HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000c62:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8000c6c:	2364      	movs	r3, #100	; 0x64
 8000c6e:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <main+0x25c>)
 8000c70:	f001 fd4f 	bl	8002712 <HAL_UART_Transmit>
	    }

	    // Read output (predicted y) of neural network
	    y_val = ((float *)out_data)[0];
 8000c74:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f207 7224 	addw	r2, r7, #1828	; 0x724
 8000c7e:	6013      	str	r3, [r2, #0]

	    // Print output of neural network along with inference time (microseconds)
	    buf_len = sprintf(buf,
 8000c80:	f207 7324 	addw	r3, r7, #1828	; 0x724
 8000c84:	6818      	ldr	r0, [r3, #0]
 8000c86:	f7ff fc77 	bl	8000578 <__aeabi_f2d>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
	                      "Output: %f | Duration: %lu\r\n",
	                      y_val,
	                      htim10.Instance->CNT - timestamp);
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <main+0x254>)
 8000c90:	6809      	ldr	r1, [r1, #0]
 8000c92:	6a48      	ldr	r0, [r1, #36]	; 0x24
	    buf_len = sprintf(buf,
 8000c94:	f8d7 172c 	ldr.w	r1, [r7, #1836]	; 0x72c
 8000c98:	1a41      	subs	r1, r0, r1
 8000c9a:	f507 60de 	add.w	r0, r7, #1776	; 0x6f0
 8000c9e:	9100      	str	r1, [sp, #0]
 8000ca0:	490f      	ldr	r1, [pc, #60]	; (8000ce0 <main+0x26c>)
 8000ca2:	f004 f9b7 	bl	8005014 <siprintf>
 8000ca6:	f8c7 0730 	str.w	r0, [r7, #1840]	; 0x730
	    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000caa:	f8d7 3730 	ldr.w	r3, [r7, #1840]	; 0x730
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 8000cb4:	2364      	movs	r3, #100	; 0x64
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <main+0x25c>)
 8000cb8:	f001 fd2b 	bl	8002712 <HAL_UART_Transmit>

	    // Wait before doing it again
	    HAL_Delay(500);
 8000cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc0:	f000 fa76 	bl	80011b0 <HAL_Delay>
		for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8000cc4:	e798      	b.n	8000bf8 <main+0x184>
 8000cc6:	bf00      	nop
 8000cc8:	200005ec 	.word	0x200005ec
 8000ccc:	08005980 	.word	0x08005980
 8000cd0:	20000634 	.word	0x20000634
 8000cd4:	0800599c 	.word	0x0800599c
 8000cd8:	080059c4 	.word	0x080059c4
 8000cdc:	080059e8 	.word	0x080059e8
 8000ce0:	08005a0c 	.word	0x08005a0c

08000ce4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	; 0x50
 8000ce8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	2234      	movs	r2, #52	; 0x34
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f004 f896 	bl	8004e24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <SystemClock_Config+0xdc>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a2b      	ldr	r2, [pc, #172]	; (8000dc0 <SystemClock_Config+0xdc>)
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <SystemClock_Config+0xdc>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <SystemClock_Config+0xe0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a25      	ldr	r2, [pc, #148]	; (8000dc4 <SystemClock_Config+0xe0>)
 8000d2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <SystemClock_Config+0xe0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d40:	2302      	movs	r3, #2
 8000d42:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000d54:	2308      	movs	r3, #8
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000d58:	23b4      	movs	r3, #180	; 0xb4
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f88d 	bl	8001e8c <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000d78:	f000 f826 	bl	8000dc8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d7c:	f000 fcec 	bl	8001758 <HAL_PWREx_EnableOverDrive>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000d86:	f000 f81f 	bl	8000dc8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d9a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da0:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	2105      	movs	r1, #5
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fd25 	bl	80017f8 <HAL_RCC_ClockConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000db4:	f000 f808 	bl	8000dc8 <Error_Handler>
	}
}
 8000db8:	bf00      	nop
 8000dba:	3750      	adds	r7, #80	; 0x50
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40007000 	.word	0x40007000

08000dc8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a0f      	ldr	r2, [pc, #60]	; (8000e20 <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a08      	ldr	r2, [pc, #32]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e12:	2007      	movs	r0, #7
 8000e14:	f000 faa2 	bl	800135c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f97e 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f003 ff84 	bl	8004db4 <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20020000 	.word	0x20020000
 8000ed8:	00000800 	.word	0x00000800
 8000edc:	200005e8 	.word	0x200005e8
 8000ee0:	20000718 	.word	0x20000718

08000ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <SystemInit+0x20>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SystemInit+0x20>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_TIM10_Init+0x40>)
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <MX_TIM10_Init+0x44>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 80-1;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_TIM10_Init+0x40>)
 8000f14:	224f      	movs	r2, #79	; 0x4f
 8000f16:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MX_TIM10_Init+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_TIM10_Init+0x40>)
 8000f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f24:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <MX_TIM10_Init+0x40>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_TIM10_Init+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_TIM10_Init+0x40>)
 8000f34:	f001 fa48 	bl	80023c8 <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000f3e:	f7ff ff43 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200005ec 	.word	0x200005ec
 8000f4c:	40014400 	.word	0x40014400

08000f50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <HAL_TIM_Base_MspInit+0x3c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d10d      	bne.n	8000f7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_TIM_Base_MspInit+0x40>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <HAL_TIM_Base_MspInit+0x40>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_TIM_Base_MspInit+0x40>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40014400 	.word	0x40014400
 8000f90:	40023800 	.word	0x40023800

08000f94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <MX_USART2_UART_Init+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	f001 fb54 	bl	8002678 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fd6:	f7ff fef7 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000634 	.word	0x20000634
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_UART_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12b      	bne.n	8001062 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_UART_MspInit+0x88>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_UART_MspInit+0x88>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_UART_MspInit+0x88>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001042:	230c      	movs	r3, #12
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001052:	2307      	movs	r3, #7
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_UART_MspInit+0x8c>)
 800105e:	f000 f9cd 	bl	80013fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40004400 	.word	0x40004400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ff1f 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f003 fe8b 	bl	8004dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fce3 	bl	8000a74 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	200005c4 	.word	0x200005c4
  ldr r2, =_sidata
 80010bc:	08008d04 	.word	0x08008d04
  ldr r2, =_sbss
 80010c0:	200005c4 	.word	0x200005c4
  ldr r4, =_ebss
 80010c4:	20000714 	.word	0x20000714

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <HAL_Init+0x40>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_Init+0x40>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x40>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f931 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fe68 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f93b 	bl	80013aa <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f911 	bl	8001372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	20000008 	.word	0x20000008
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	20000678 	.word	0x20000678

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000678 	.word	0x20000678

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f7ff ff8e 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff47 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff5c 	bl	8001240 <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff8e 	bl	80012b0 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5d 	bl	800125c <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ffb0 	bl	8001318 <SysTick_Config>
 80013b8:	4603      	mov	r3, r0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e00e      	b.n	80013f2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	795b      	ldrb	r3, [r3, #5]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d105      	bne.n	80013ea <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fab5 	bl	8000954 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	e165      	b.n	80016e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	429a      	cmp	r2, r3
 8001432:	f040 8154 	bne.w	80016de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b01      	cmp	r3, #1
 8001440:	d005      	beq.n	800144e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144a:	2b02      	cmp	r3, #2
 800144c:	d130      	bne.n	80014b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	2203      	movs	r2, #3
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001484:	2201      	movs	r2, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	091b      	lsrs	r3, r3, #4
 800149a:	f003 0201 	and.w	r2, r3, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d017      	beq.n	80014ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d123      	bne.n	8001540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	08da      	lsrs	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3208      	adds	r2, #8
 8001500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	220f      	movs	r2, #15
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	08da      	lsrs	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3208      	adds	r2, #8
 800153a:	69b9      	ldr	r1, [r7, #24]
 800153c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0203 	and.w	r2, r3, #3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 80ae 	beq.w	80016de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_GPIO_Init+0x300>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	4a5c      	ldr	r2, [pc, #368]	; (80016fc <HAL_GPIO_Init+0x300>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001590:	6453      	str	r3, [r2, #68]	; 0x44
 8001592:	4b5a      	ldr	r3, [pc, #360]	; (80016fc <HAL_GPIO_Init+0x300>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800159e:	4a58      	ldr	r2, [pc, #352]	; (8001700 <HAL_GPIO_Init+0x304>)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	220f      	movs	r2, #15
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4f      	ldr	r2, [pc, #316]	; (8001704 <HAL_GPIO_Init+0x308>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d025      	beq.n	8001616 <HAL_GPIO_Init+0x21a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4e      	ldr	r2, [pc, #312]	; (8001708 <HAL_GPIO_Init+0x30c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01f      	beq.n	8001612 <HAL_GPIO_Init+0x216>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4d      	ldr	r2, [pc, #308]	; (800170c <HAL_GPIO_Init+0x310>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0x212>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4c      	ldr	r2, [pc, #304]	; (8001710 <HAL_GPIO_Init+0x314>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0x20e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4b      	ldr	r2, [pc, #300]	; (8001714 <HAL_GPIO_Init+0x318>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00d      	beq.n	8001606 <HAL_GPIO_Init+0x20a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4a      	ldr	r2, [pc, #296]	; (8001718 <HAL_GPIO_Init+0x31c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x206>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a49      	ldr	r2, [pc, #292]	; (800171c <HAL_GPIO_Init+0x320>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_GPIO_Init+0x202>
 80015fa:	2306      	movs	r3, #6
 80015fc:	e00c      	b.n	8001618 <HAL_GPIO_Init+0x21c>
 80015fe:	2307      	movs	r3, #7
 8001600:	e00a      	b.n	8001618 <HAL_GPIO_Init+0x21c>
 8001602:	2305      	movs	r3, #5
 8001604:	e008      	b.n	8001618 <HAL_GPIO_Init+0x21c>
 8001606:	2304      	movs	r3, #4
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x21c>
 800160a:	2303      	movs	r3, #3
 800160c:	e004      	b.n	8001618 <HAL_GPIO_Init+0x21c>
 800160e:	2302      	movs	r3, #2
 8001610:	e002      	b.n	8001618 <HAL_GPIO_Init+0x21c>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x21c>
 8001616:	2300      	movs	r3, #0
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	f002 0203 	and.w	r2, r2, #3
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4093      	lsls	r3, r2
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001628:	4935      	ldr	r1, [pc, #212]	; (8001700 <HAL_GPIO_Init+0x304>)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001636:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <HAL_GPIO_Init+0x324>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165a:	4a31      	ldr	r2, [pc, #196]	; (8001720 <HAL_GPIO_Init+0x324>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001660:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <HAL_GPIO_Init+0x324>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001684:	4a26      	ldr	r2, [pc, #152]	; (8001720 <HAL_GPIO_Init+0x324>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <HAL_GPIO_Init+0x324>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ae:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <HAL_GPIO_Init+0x324>)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_GPIO_Init+0x324>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016d8:	4a11      	ldr	r2, [pc, #68]	; (8001720 <HAL_GPIO_Init+0x324>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	2b0f      	cmp	r3, #15
 80016e8:	f67f ae96 	bls.w	8001418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3724      	adds	r7, #36	; 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40013800 	.word	0x40013800
 8001704:	40020000 	.word	0x40020000
 8001708:	40020400 	.word	0x40020400
 800170c:	40020800 	.word	0x40020800
 8001710:	40020c00 	.word	0x40020c00
 8001714:	40021000 	.word	0x40021000
 8001718:	40021400 	.word	0x40021400
 800171c:	40021800 	.word	0x40021800
 8001720:	40013c00 	.word	0x40013c00

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001740:	e003      	b.n	800174a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	041a      	lsls	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_PWREx_EnableOverDrive+0x94>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001784:	f7ff fd08 	bl	8001198 <HAL_GetTick>
 8001788:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800178a:	e009      	b.n	80017a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800178c:	f7ff fd04 	bl	8001198 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800179a:	d901      	bls.n	80017a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e01f      	b.n	80017e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d1ee      	bne.n	800178c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b4:	f7ff fcf0 	bl	8001198 <HAL_GetTick>
 80017b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017ba:	e009      	b.n	80017d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017bc:	f7ff fcec 	bl	8001198 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ca:	d901      	bls.n	80017d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e007      	b.n	80017e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017dc:	d1ee      	bne.n	80017bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	420e0040 	.word	0x420e0040
 80017f0:	40007000 	.word	0x40007000
 80017f4:	420e0044 	.word	0x420e0044

080017f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0cc      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d90c      	bls.n	8001834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b65      	ldr	r3, [pc, #404]	; (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0b8      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800184c:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a52      	ldr	r2, [pc, #328]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800186e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	494d      	ldr	r1, [pc, #308]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d044      	beq.n	8001918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d119      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e07f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e06f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e067      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4934      	ldr	r1, [pc, #208]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e8:	f7ff fc56 	bl	8001198 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff fc52 	bl	8001198 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e04f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d20c      	bcs.n	8001940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e032      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4916      	ldr	r1, [pc, #88]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	490e      	ldr	r1, [pc, #56]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800197e:	f000 f855 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8001982:	4602      	mov	r2, r0
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	490a      	ldr	r1, [pc, #40]	; (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	5ccb      	ldrb	r3, [r1, r3]
 8001992:	fa22 f303 	lsr.w	r3, r2, r3
 8001996:	4a09      	ldr	r2, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fbb6 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	08005a5c 	.word	0x08005a5c
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000000 	.word	0x20000000

080019dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019e0:	f7ff fff0 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	0a9b      	lsrs	r3, r3, #10
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4903      	ldr	r1, [pc, #12]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08005a6c 	.word	0x08005a6c

08001a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a08:	f7ff ffdc 	bl	80019c4 <HAL_RCC_GetHCLKFreq>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	0b5b      	lsrs	r3, r3, #13
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	4903      	ldr	r1, [pc, #12]	; (8001a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1a:	5ccb      	ldrb	r3, [r1, r3]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08005a6c 	.word	0x08005a6c

08001a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a30:	b0ae      	sub	sp, #184	; 0xb8
 8001a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a52:	4bcb      	ldr	r3, [pc, #812]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	f200 8206 	bhi.w	8001e6c <HAL_RCC_GetSysClockFreq+0x440>
 8001a60:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a9d 	.word	0x08001a9d
 8001a6c:	08001e6d 	.word	0x08001e6d
 8001a70:	08001e6d 	.word	0x08001e6d
 8001a74:	08001e6d 	.word	0x08001e6d
 8001a78:	08001aa5 	.word	0x08001aa5
 8001a7c:	08001e6d 	.word	0x08001e6d
 8001a80:	08001e6d 	.word	0x08001e6d
 8001a84:	08001e6d 	.word	0x08001e6d
 8001a88:	08001aad 	.word	0x08001aad
 8001a8c:	08001e6d 	.word	0x08001e6d
 8001a90:	08001e6d 	.word	0x08001e6d
 8001a94:	08001e6d 	.word	0x08001e6d
 8001a98:	08001c9d 	.word	0x08001c9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4bb9      	ldr	r3, [pc, #740]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001aa2:	e1e7      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa4:	4bb8      	ldr	r3, [pc, #736]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001aaa:	e1e3      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aac:	4bb4      	ldr	r3, [pc, #720]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab8:	4bb1      	ldr	r3, [pc, #708]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d071      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac4:	4bae      	ldr	r3, [pc, #696]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	099b      	lsrs	r3, r3, #6
 8001aca:	2200      	movs	r2, #0
 8001acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ad0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001adc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001aea:	4622      	mov	r2, r4
 8001aec:	462b      	mov	r3, r5
 8001aee:	f04f 0000 	mov.w	r0, #0
 8001af2:	f04f 0100 	mov.w	r1, #0
 8001af6:	0159      	lsls	r1, r3, #5
 8001af8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afc:	0150      	lsls	r0, r2, #5
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4621      	mov	r1, r4
 8001b04:	1a51      	subs	r1, r2, r1
 8001b06:	6439      	str	r1, [r7, #64]	; 0x40
 8001b08:	4629      	mov	r1, r5
 8001b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	018b      	lsls	r3, r1, #6
 8001b20:	4641      	mov	r1, r8
 8001b22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b26:	4641      	mov	r1, r8
 8001b28:	018a      	lsls	r2, r1, #6
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	1a51      	subs	r1, r2, r1
 8001b2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b30:	4649      	mov	r1, r9
 8001b32:	eb63 0301 	sbc.w	r3, r3, r1
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001b44:	4649      	mov	r1, r9
 8001b46:	00cb      	lsls	r3, r1, #3
 8001b48:	4641      	mov	r1, r8
 8001b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b4e:	4641      	mov	r1, r8
 8001b50:	00ca      	lsls	r2, r1, #3
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	4622      	mov	r2, r4
 8001b5a:	189b      	adds	r3, r3, r2
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b5e:	462b      	mov	r3, r5
 8001b60:	460a      	mov	r2, r1
 8001b62:	eb42 0303 	adc.w	r3, r2, r3
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	f04f 0300 	mov.w	r3, #0
 8001b70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b74:	4629      	mov	r1, r5
 8001b76:	024b      	lsls	r3, r1, #9
 8001b78:	4621      	mov	r1, r4
 8001b7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b7e:	4621      	mov	r1, r4
 8001b80:	024a      	lsls	r2, r1, #9
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001b94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b98:	f7fe fd46 	bl	8000628 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ba6:	e067      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba8:	4b75      	ldr	r3, [pc, #468]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001bb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bc6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001bca:	4622      	mov	r2, r4
 8001bcc:	462b      	mov	r3, r5
 8001bce:	f04f 0000 	mov.w	r0, #0
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	0159      	lsls	r1, r3, #5
 8001bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bdc:	0150      	lsls	r0, r2, #5
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4621      	mov	r1, r4
 8001be4:	1a51      	subs	r1, r2, r1
 8001be6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001be8:	4629      	mov	r1, r5
 8001bea:	eb63 0301 	sbc.w	r3, r3, r1
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	018b      	lsls	r3, r1, #6
 8001c00:	4641      	mov	r1, r8
 8001c02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c06:	4641      	mov	r1, r8
 8001c08:	018a      	lsls	r2, r1, #6
 8001c0a:	4641      	mov	r1, r8
 8001c0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c10:	4649      	mov	r1, r9
 8001c12:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c22:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c2a:	4692      	mov	sl, r2
 8001c2c:	469b      	mov	fp, r3
 8001c2e:	4623      	mov	r3, r4
 8001c30:	eb1a 0303 	adds.w	r3, sl, r3
 8001c34:	623b      	str	r3, [r7, #32]
 8001c36:	462b      	mov	r3, r5
 8001c38:	eb4b 0303 	adc.w	r3, fp, r3
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	028b      	lsls	r3, r1, #10
 8001c4e:	4621      	mov	r1, r4
 8001c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c54:	4621      	mov	r1, r4
 8001c56:	028a      	lsls	r2, r1, #10
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c60:	2200      	movs	r2, #0
 8001c62:	673b      	str	r3, [r7, #112]	; 0x70
 8001c64:	677a      	str	r2, [r7, #116]	; 0x74
 8001c66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001c6a:	f7fe fcdd 	bl	8000628 <__aeabi_uldivmod>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4613      	mov	r3, r2
 8001c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c78:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	3301      	adds	r3, #1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c9a:	e0eb      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c9c:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca8:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d06b      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb4:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	099b      	lsrs	r3, r3, #6
 8001cba:	2200      	movs	r2, #0
 8001cbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8001cc8:	2300      	movs	r3, #0
 8001cca:	667b      	str	r3, [r7, #100]	; 0x64
 8001ccc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	462b      	mov	r3, r5
 8001cd4:	f04f 0000 	mov.w	r0, #0
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	0159      	lsls	r1, r3, #5
 8001cde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ce2:	0150      	lsls	r0, r2, #5
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4621      	mov	r1, r4
 8001cea:	1a51      	subs	r1, r2, r1
 8001cec:	61b9      	str	r1, [r7, #24]
 8001cee:	4629      	mov	r1, r5
 8001cf0:	eb63 0301 	sbc.w	r3, r3, r1
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d02:	4659      	mov	r1, fp
 8001d04:	018b      	lsls	r3, r1, #6
 8001d06:	4651      	mov	r1, sl
 8001d08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d0c:	4651      	mov	r1, sl
 8001d0e:	018a      	lsls	r2, r1, #6
 8001d10:	4651      	mov	r1, sl
 8001d12:	ebb2 0801 	subs.w	r8, r2, r1
 8001d16:	4659      	mov	r1, fp
 8001d18:	eb63 0901 	sbc.w	r9, r3, r1
 8001d1c:	f04f 0200 	mov.w	r2, #0
 8001d20:	f04f 0300 	mov.w	r3, #0
 8001d24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d30:	4690      	mov	r8, r2
 8001d32:	4699      	mov	r9, r3
 8001d34:	4623      	mov	r3, r4
 8001d36:	eb18 0303 	adds.w	r3, r8, r3
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	462b      	mov	r3, r5
 8001d3e:	eb49 0303 	adc.w	r3, r9, r3
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d50:	4629      	mov	r1, r5
 8001d52:	024b      	lsls	r3, r1, #9
 8001d54:	4621      	mov	r1, r4
 8001d56:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	024a      	lsls	r2, r1, #9
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d66:	2200      	movs	r2, #0
 8001d68:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d6a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001d6c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d70:	f7fe fc5a 	bl	8000628 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d7e:	e065      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x420>
 8001d80:	40023800 	.word	0x40023800
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8c:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	2200      	movs	r2, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	4611      	mov	r1, r2
 8001d98:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d9c:	653b      	str	r3, [r7, #80]	; 0x50
 8001d9e:	2300      	movs	r3, #0
 8001da0:	657b      	str	r3, [r7, #84]	; 0x54
 8001da2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001da6:	4642      	mov	r2, r8
 8001da8:	464b      	mov	r3, r9
 8001daa:	f04f 0000 	mov.w	r0, #0
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	0159      	lsls	r1, r3, #5
 8001db4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db8:	0150      	lsls	r0, r2, #5
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4641      	mov	r1, r8
 8001dc0:	1a51      	subs	r1, r2, r1
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	4649      	mov	r1, r9
 8001dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001dd8:	4659      	mov	r1, fp
 8001dda:	018b      	lsls	r3, r1, #6
 8001ddc:	4651      	mov	r1, sl
 8001dde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001de2:	4651      	mov	r1, sl
 8001de4:	018a      	lsls	r2, r1, #6
 8001de6:	4651      	mov	r1, sl
 8001de8:	1a54      	subs	r4, r2, r1
 8001dea:	4659      	mov	r1, fp
 8001dec:	eb63 0501 	sbc.w	r5, r3, r1
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	00eb      	lsls	r3, r5, #3
 8001dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dfe:	00e2      	lsls	r2, r4, #3
 8001e00:	4614      	mov	r4, r2
 8001e02:	461d      	mov	r5, r3
 8001e04:	4643      	mov	r3, r8
 8001e06:	18e3      	adds	r3, r4, r3
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	eb45 0303 	adc.w	r3, r5, r3
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e1e:	4629      	mov	r1, r5
 8001e20:	028b      	lsls	r3, r1, #10
 8001e22:	4621      	mov	r1, r4
 8001e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e28:	4621      	mov	r1, r4
 8001e2a:	028a      	lsls	r2, r1, #10
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e34:	2200      	movs	r2, #0
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e38:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e3e:	f7fe fbf3 	bl	8000628 <__aeabi_uldivmod>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4613      	mov	r3, r2
 8001e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	0f1b      	lsrs	r3, r3, #28
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001e5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e6a:	e003      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001e72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	37b8      	adds	r7, #184	; 0xb8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	00f42400 	.word	0x00f42400

08001e8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e28d      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8083 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001eac:	4b94      	ldr	r3, [pc, #592]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d019      	beq.n	8001eec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eb8:	4b91      	ldr	r3, [pc, #580]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ec4:	4b8e      	ldr	r3, [pc, #568]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed0:	d00c      	beq.n	8001eec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	d112      	bne.n	8001f04 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ede:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	4b84      	ldr	r3, [pc, #528]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x124>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d157      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e25a      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x90>
 8001f0e:	4b7c      	ldr	r3, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7b      	ldr	r2, [pc, #492]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xcc>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0xb4>
 8001f26:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a75      	ldr	r2, [pc, #468]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b73      	ldr	r3, [pc, #460]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a72      	ldr	r2, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xcc>
 8001f40:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b6c      	ldr	r3, [pc, #432]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6b      	ldr	r2, [pc, #428]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f91a 	bl	8001198 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f916 	bl	8001198 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e21f      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b61      	ldr	r3, [pc, #388]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xdc>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff f906 	bl	8001198 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff f902 	bl	8001198 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e20b      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b57      	ldr	r3, [pc, #348]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x104>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d06f      	beq.n	800209e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fbe:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d017      	beq.n	8001ffa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fca:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fee:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_RCC_OscConfig+0x186>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e1d3      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4937      	ldr	r1, [pc, #220]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	e03a      	b.n	800209e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d020      	beq.n	8002072 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002030:	4b34      	ldr	r3, [pc, #208]	; (8002104 <HAL_RCC_OscConfig+0x278>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7ff f8af 	bl	8001198 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203e:	f7ff f8ab 	bl	8001198 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1b4      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4925      	ldr	r1, [pc, #148]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e015      	b.n	800209e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCC_OscConfig+0x278>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f88e 	bl	8001198 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002080:	f7ff f88a 	bl	8001198 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e193      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d036      	beq.n	8002118 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff f86e 	bl	8001198 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff f86a 	bl	8001198 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e173      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_OscConfig+0x274>)
 80020d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x234>
 80020de:	e01b      	b.n	8002118 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_OscConfig+0x27c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7ff f857 	bl	8001198 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	e00e      	b.n	800210c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ee:	f7ff f853 	bl	8001198 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d907      	bls.n	800210c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e15c      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
 8002100:	40023800 	.word	0x40023800
 8002104:	42470000 	.word	0x42470000
 8002108:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b8a      	ldr	r3, [pc, #552]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800210e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ea      	bne.n	80020ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8097 	beq.w	8002254 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b83      	ldr	r3, [pc, #524]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a7e      	ldr	r2, [pc, #504]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b7c      	ldr	r3, [pc, #496]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b79      	ldr	r3, [pc, #484]	; (800233c <HAL_RCC_OscConfig+0x4b0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_RCC_OscConfig+0x4b0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a75      	ldr	r2, [pc, #468]	; (800233c <HAL_RCC_OscConfig+0x4b0>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7ff f813 	bl	8001198 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7ff f80f 	bl	8001198 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e118      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_RCC_OscConfig+0x4b0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x31e>
 800219c:	4b66      	ldr	r3, [pc, #408]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a65      	ldr	r2, [pc, #404]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	e01c      	b.n	80021e4 <HAL_RCC_OscConfig+0x358>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x340>
 80021b2:	4b61      	ldr	r3, [pc, #388]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a60      	ldr	r2, [pc, #384]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
 80021be:	4b5e      	ldr	r3, [pc, #376]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c2:	4a5d      	ldr	r2, [pc, #372]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0x358>
 80021cc:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	4a59      	ldr	r2, [pc, #356]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6713      	str	r3, [r2, #112]	; 0x70
 80021d8:	4b57      	ldr	r3, [pc, #348]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021dc:	4a56      	ldr	r2, [pc, #344]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80021de:	f023 0304 	bic.w	r3, r3, #4
 80021e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7fe ffd4 	bl	8001198 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	e00a      	b.n	800220a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe ffd0 	bl	8001198 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e0d7      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0ee      	beq.n	80021f4 <HAL_RCC_OscConfig+0x368>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7fe ffbe 	bl	8001198 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe ffba 	bl	8001198 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0c1      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002236:	4b40      	ldr	r3, [pc, #256]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1ee      	bne.n	8002220 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 800224e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002252:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80ad 	beq.w	80023b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d060      	beq.n	800232c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d145      	bne.n	80022fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <HAL_RCC_OscConfig+0x4b4>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe ff8e 	bl	8001198 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe ff8a 	bl	8001198 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e093      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	071b      	lsls	r3, r3, #28
 80022ca:	491b      	ldr	r1, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_RCC_OscConfig+0x4b4>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe ff5f 	bl	8001198 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe ff5b 	bl	8001198 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e064      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x452>
 80022fc:	e05c      	b.n	80023b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_RCC_OscConfig+0x4b4>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe ff48 	bl	8001198 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe ff44 	bl	8001198 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e04d      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_OscConfig+0x4ac>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x480>
 800232a:	e045      	b.n	80023b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d107      	bne.n	8002344 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e040      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
 8002338:	40023800 	.word	0x40023800
 800233c:	40007000 	.word	0x40007000
 8002340:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <HAL_RCC_OscConfig+0x538>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d030      	beq.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d129      	bne.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d122      	bne.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002374:	4013      	ands	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800237a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800237c:	4293      	cmp	r3, r2
 800237e:	d119      	bne.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	3b01      	subs	r3, #1
 800238e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d10f      	bne.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e041      	b.n	800245e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fdae 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f000 f896 	bl	8002538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d001      	beq.n	8002480 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e046      	b.n	800250e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a23      	ldr	r2, [pc, #140]	; (800251c <HAL_TIM_Base_Start+0xb4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d022      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249a:	d01d      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1f      	ldr	r2, [pc, #124]	; (8002520 <HAL_TIM_Base_Start+0xb8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d018      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1e      	ldr	r2, [pc, #120]	; (8002524 <HAL_TIM_Base_Start+0xbc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d013      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <HAL_TIM_Base_Start+0xc0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00e      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_TIM_Base_Start+0xc4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d009      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a19      	ldr	r2, [pc, #100]	; (8002530 <HAL_TIM_Base_Start+0xc8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_TIM_Base_Start+0x70>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_TIM_Base_Start+0xcc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d111      	bne.n	80024fc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d010      	beq.n	800250c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fa:	e007      	b.n	800250c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40010000 	.word	0x40010000
 8002520:	40000400 	.word	0x40000400
 8002524:	40000800 	.word	0x40000800
 8002528:	40000c00 	.word	0x40000c00
 800252c:	40010400 	.word	0x40010400
 8002530:	40014000 	.word	0x40014000
 8002534:	40001800 	.word	0x40001800

08002538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a40      	ldr	r2, [pc, #256]	; (800264c <TIM_Base_SetConfig+0x114>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d013      	beq.n	8002578 <TIM_Base_SetConfig+0x40>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d00f      	beq.n	8002578 <TIM_Base_SetConfig+0x40>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a3d      	ldr	r2, [pc, #244]	; (8002650 <TIM_Base_SetConfig+0x118>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00b      	beq.n	8002578 <TIM_Base_SetConfig+0x40>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a3c      	ldr	r2, [pc, #240]	; (8002654 <TIM_Base_SetConfig+0x11c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d007      	beq.n	8002578 <TIM_Base_SetConfig+0x40>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a3b      	ldr	r2, [pc, #236]	; (8002658 <TIM_Base_SetConfig+0x120>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d003      	beq.n	8002578 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3a      	ldr	r2, [pc, #232]	; (800265c <TIM_Base_SetConfig+0x124>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d108      	bne.n	800258a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a2f      	ldr	r2, [pc, #188]	; (800264c <TIM_Base_SetConfig+0x114>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d02b      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002598:	d027      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a2c      	ldr	r2, [pc, #176]	; (8002650 <TIM_Base_SetConfig+0x118>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d023      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <TIM_Base_SetConfig+0x11c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01f      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <TIM_Base_SetConfig+0x120>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01b      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <TIM_Base_SetConfig+0x124>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d017      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a28      	ldr	r2, [pc, #160]	; (8002660 <TIM_Base_SetConfig+0x128>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d013      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a27      	ldr	r2, [pc, #156]	; (8002664 <TIM_Base_SetConfig+0x12c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00f      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <TIM_Base_SetConfig+0x130>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00b      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a25      	ldr	r2, [pc, #148]	; (800266c <TIM_Base_SetConfig+0x134>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a24      	ldr	r2, [pc, #144]	; (8002670 <TIM_Base_SetConfig+0x138>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a23      	ldr	r2, [pc, #140]	; (8002674 <TIM_Base_SetConfig+0x13c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <TIM_Base_SetConfig+0x114>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_Base_SetConfig+0xf8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0c      	ldr	r2, [pc, #48]	; (800265c <TIM_Base_SetConfig+0x124>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d103      	bne.n	8002638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	615a      	str	r2, [r3, #20]
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40010000 	.word	0x40010000
 8002650:	40000400 	.word	0x40000400
 8002654:	40000800 	.word	0x40000800
 8002658:	40000c00 	.word	0x40000c00
 800265c:	40010400 	.word	0x40010400
 8002660:	40014000 	.word	0x40014000
 8002664:	40014400 	.word	0x40014400
 8002668:	40014800 	.word	0x40014800
 800266c:	40001800 	.word	0x40001800
 8002670:	40001c00 	.word	0x40001c00
 8002674:	40002000 	.word	0x40002000

08002678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e03f      	b.n	800270a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d106      	bne.n	80026a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fca2 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2224      	movs	r2, #36	; 0x24
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f929 	bl	8002914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b08a      	sub	sp, #40	; 0x28
 8002716:	af02      	add	r7, sp, #8
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	603b      	str	r3, [r7, #0]
 800271e:	4613      	mov	r3, r2
 8002720:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b20      	cmp	r3, #32
 8002730:	d17c      	bne.n	800282c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_UART_Transmit+0x2c>
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e075      	b.n	800282e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_UART_Transmit+0x3e>
 800274c:	2302      	movs	r3, #2
 800274e:	e06e      	b.n	800282e <HAL_UART_Transmit+0x11c>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2221      	movs	r2, #33	; 0x21
 8002762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002766:	f7fe fd17 	bl	8001198 <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002780:	d108      	bne.n	8002794 <HAL_UART_Transmit+0x82>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d104      	bne.n	8002794 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	e003      	b.n	800279c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027a4:	e02a      	b.n	80027fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f840 	bl	8002836 <UART_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e036      	b.n	800282e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10b      	bne.n	80027de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	3302      	adds	r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	e007      	b.n	80027ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	3301      	adds	r3, #1
 80027ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1cf      	bne.n	80027a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2200      	movs	r2, #0
 800280e:	2140      	movs	r1, #64	; 0x40
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f810 	bl	8002836 <UART_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e006      	b.n	800282e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	e000      	b.n	800282e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
  }
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b090      	sub	sp, #64	; 0x40
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002846:	e050      	b.n	80028ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d04c      	beq.n	80028ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <UART_WaitOnFlagUntilTimeout+0x30>
 8002856:	f7fe fc9f 	bl	8001198 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002862:	429a      	cmp	r2, r3
 8002864:	d241      	bcs.n	80028ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	e853 3f00 	ldrex	r3, [r3]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	330c      	adds	r3, #12
 8002884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002886:	637a      	str	r2, [r7, #52]	; 0x34
 8002888:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800288c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800288e:	e841 2300 	strex	r3, r2, [r1]
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1e5      	bne.n	8002866 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3314      	adds	r3, #20
 80028a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	e853 3f00 	ldrex	r3, [r3]
 80028a8:	613b      	str	r3, [r7, #16]
   return(result);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	3314      	adds	r3, #20
 80028b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028ba:	623a      	str	r2, [r7, #32]
 80028bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028be:	69f9      	ldr	r1, [r7, #28]
 80028c0:	6a3a      	ldr	r2, [r7, #32]
 80028c2:	e841 2300 	strex	r3, r2, [r1]
 80028c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1e5      	bne.n	800289a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e00f      	b.n	800290a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4013      	ands	r3, r2
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	429a      	cmp	r2, r3
 8002906:	d09f      	beq.n	8002848 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3740      	adds	r7, #64	; 0x40
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002918:	b0c0      	sub	sp, #256	; 0x100
 800291a:	af00      	add	r7, sp, #0
 800291c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	68d9      	ldr	r1, [r3, #12]
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	ea40 0301 	orr.w	r3, r0, r1
 800293c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800293e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	431a      	orrs	r2, r3
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	431a      	orrs	r2, r3
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800296c:	f021 010c 	bic.w	r1, r1, #12
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800297a:	430b      	orrs	r3, r1
 800297c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800298a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298e:	6999      	ldr	r1, [r3, #24]
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	ea40 0301 	orr.w	r3, r0, r1
 800299a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4b8f      	ldr	r3, [pc, #572]	; (8002be0 <UART_SetConfig+0x2cc>)
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d005      	beq.n	80029b4 <UART_SetConfig+0xa0>
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b8d      	ldr	r3, [pc, #564]	; (8002be4 <UART_SetConfig+0x2d0>)
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d104      	bne.n	80029be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029b4:	f7ff f826 	bl	8001a04 <HAL_RCC_GetPCLK2Freq>
 80029b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029bc:	e003      	b.n	80029c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029be:	f7ff f80d 	bl	80019dc <HAL_RCC_GetPCLK1Freq>
 80029c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d0:	f040 810c 	bne.w	8002bec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029d8:	2200      	movs	r2, #0
 80029da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	1891      	adds	r1, r2, r2
 80029ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80029ee:	415b      	adcs	r3, r3
 80029f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029f6:	4621      	mov	r1, r4
 80029f8:	eb12 0801 	adds.w	r8, r2, r1
 80029fc:	4629      	mov	r1, r5
 80029fe:	eb43 0901 	adc.w	r9, r3, r1
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a16:	4690      	mov	r8, r2
 8002a18:	4699      	mov	r9, r3
 8002a1a:	4623      	mov	r3, r4
 8002a1c:	eb18 0303 	adds.w	r3, r8, r3
 8002a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a24:	462b      	mov	r3, r5
 8002a26:	eb49 0303 	adc.w	r3, r9, r3
 8002a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a42:	460b      	mov	r3, r1
 8002a44:	18db      	adds	r3, r3, r3
 8002a46:	653b      	str	r3, [r7, #80]	; 0x50
 8002a48:	4613      	mov	r3, r2
 8002a4a:	eb42 0303 	adc.w	r3, r2, r3
 8002a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a58:	f7fd fde6 	bl	8000628 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4b61      	ldr	r3, [pc, #388]	; (8002be8 <UART_SetConfig+0x2d4>)
 8002a62:	fba3 2302 	umull	r2, r3, r3, r2
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	011c      	lsls	r4, r3, #4
 8002a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	464b      	mov	r3, r9
 8002a80:	1891      	adds	r1, r2, r2
 8002a82:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a84:	415b      	adcs	r3, r3
 8002a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a92:	4649      	mov	r1, r9
 8002a94:	eb43 0b01 	adc.w	fp, r3, r1
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002aa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aac:	4692      	mov	sl, r2
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4643      	mov	r3, r8
 8002ab2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002aba:	464b      	mov	r3, r9
 8002abc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ad0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ad4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	18db      	adds	r3, r3, r3
 8002adc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ade:	4613      	mov	r3, r2
 8002ae0:	eb42 0303 	adc.w	r3, r2, r3
 8002ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002aea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002aee:	f7fd fd9b 	bl	8000628 <__aeabi_uldivmod>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <UART_SetConfig+0x2d4>)
 8002afa:	fba3 2301 	umull	r2, r3, r3, r1
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2264      	movs	r2, #100	; 0x64
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	1acb      	subs	r3, r1, r3
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b0e:	4b36      	ldr	r3, [pc, #216]	; (8002be8 <UART_SetConfig+0x2d4>)
 8002b10:	fba3 2302 	umull	r2, r3, r3, r2
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b1c:	441c      	add	r4, r3
 8002b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b30:	4642      	mov	r2, r8
 8002b32:	464b      	mov	r3, r9
 8002b34:	1891      	adds	r1, r2, r2
 8002b36:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b38:	415b      	adcs	r3, r3
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b40:	4641      	mov	r1, r8
 8002b42:	1851      	adds	r1, r2, r1
 8002b44:	6339      	str	r1, [r7, #48]	; 0x30
 8002b46:	4649      	mov	r1, r9
 8002b48:	414b      	adcs	r3, r1
 8002b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b58:	4659      	mov	r1, fp
 8002b5a:	00cb      	lsls	r3, r1, #3
 8002b5c:	4651      	mov	r1, sl
 8002b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b62:	4651      	mov	r1, sl
 8002b64:	00ca      	lsls	r2, r1, #3
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	189b      	adds	r3, r3, r2
 8002b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b74:	464b      	mov	r3, r9
 8002b76:	460a      	mov	r2, r1
 8002b78:	eb42 0303 	adc.w	r3, r2, r3
 8002b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b94:	460b      	mov	r3, r1
 8002b96:	18db      	adds	r3, r3, r3
 8002b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ba6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002baa:	f7fd fd3d 	bl	8000628 <__aeabi_uldivmod>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <UART_SetConfig+0x2d4>)
 8002bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	2164      	movs	r1, #100	; 0x64
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	3332      	adds	r3, #50	; 0x32
 8002bc6:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <UART_SetConfig+0x2d4>)
 8002bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	f003 0207 	and.w	r2, r3, #7
 8002bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4422      	add	r2, r4
 8002bda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bdc:	e105      	b.n	8002dea <UART_SetConfig+0x4d6>
 8002bde:	bf00      	nop
 8002be0:	40011000 	.word	0x40011000
 8002be4:	40011400 	.word	0x40011400
 8002be8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bfe:	4642      	mov	r2, r8
 8002c00:	464b      	mov	r3, r9
 8002c02:	1891      	adds	r1, r2, r2
 8002c04:	6239      	str	r1, [r7, #32]
 8002c06:	415b      	adcs	r3, r3
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c0e:	4641      	mov	r1, r8
 8002c10:	1854      	adds	r4, r2, r1
 8002c12:	4649      	mov	r1, r9
 8002c14:	eb43 0501 	adc.w	r5, r3, r1
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	00eb      	lsls	r3, r5, #3
 8002c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c26:	00e2      	lsls	r2, r4, #3
 8002c28:	4614      	mov	r4, r2
 8002c2a:	461d      	mov	r5, r3
 8002c2c:	4643      	mov	r3, r8
 8002c2e:	18e3      	adds	r3, r4, r3
 8002c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c34:	464b      	mov	r3, r9
 8002c36:	eb45 0303 	adc.w	r3, r5, r3
 8002c3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	008b      	lsls	r3, r1, #2
 8002c5e:	4621      	mov	r1, r4
 8002c60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c64:	4621      	mov	r1, r4
 8002c66:	008a      	lsls	r2, r1, #2
 8002c68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c6c:	f7fd fcdc 	bl	8000628 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4b60      	ldr	r3, [pc, #384]	; (8002df8 <UART_SetConfig+0x4e4>)
 8002c76:	fba3 2302 	umull	r2, r3, r3, r2
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	011c      	lsls	r4, r3, #4
 8002c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c90:	4642      	mov	r2, r8
 8002c92:	464b      	mov	r3, r9
 8002c94:	1891      	adds	r1, r2, r2
 8002c96:	61b9      	str	r1, [r7, #24]
 8002c98:	415b      	adcs	r3, r3
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	1851      	adds	r1, r2, r1
 8002ca4:	6139      	str	r1, [r7, #16]
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	414b      	adcs	r3, r1
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb8:	4659      	mov	r1, fp
 8002cba:	00cb      	lsls	r3, r1, #3
 8002cbc:	4651      	mov	r1, sl
 8002cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	00ca      	lsls	r2, r1, #3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4642      	mov	r2, r8
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cd4:	464b      	mov	r3, r9
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	eb42 0303 	adc.w	r3, r2, r3
 8002cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	008b      	lsls	r3, r1, #2
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d02:	4641      	mov	r1, r8
 8002d04:	008a      	lsls	r2, r1, #2
 8002d06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d0a:	f7fd fc8d 	bl	8000628 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <UART_SetConfig+0x4e4>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	3332      	adds	r3, #50	; 0x32
 8002d26:	4a34      	ldr	r2, [pc, #208]	; (8002df8 <UART_SetConfig+0x4e4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d32:	441c      	add	r4, r3
 8002d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d38:	2200      	movs	r2, #0
 8002d3a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d3c:	677a      	str	r2, [r7, #116]	; 0x74
 8002d3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d42:	4642      	mov	r2, r8
 8002d44:	464b      	mov	r3, r9
 8002d46:	1891      	adds	r1, r2, r2
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	415b      	adcs	r3, r3
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d52:	4641      	mov	r1, r8
 8002d54:	1851      	adds	r1, r2, r1
 8002d56:	6039      	str	r1, [r7, #0]
 8002d58:	4649      	mov	r1, r9
 8002d5a:	414b      	adcs	r3, r1
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d6a:	4659      	mov	r1, fp
 8002d6c:	00cb      	lsls	r3, r1, #3
 8002d6e:	4651      	mov	r1, sl
 8002d70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d74:	4651      	mov	r1, sl
 8002d76:	00ca      	lsls	r2, r1, #3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4642      	mov	r2, r8
 8002d80:	189b      	adds	r3, r3, r2
 8002d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d84:	464b      	mov	r3, r9
 8002d86:	460a      	mov	r2, r1
 8002d88:	eb42 0303 	adc.w	r3, r2, r3
 8002d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	663b      	str	r3, [r7, #96]	; 0x60
 8002d98:	667a      	str	r2, [r7, #100]	; 0x64
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002da6:	4649      	mov	r1, r9
 8002da8:	008b      	lsls	r3, r1, #2
 8002daa:	4641      	mov	r1, r8
 8002dac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002db0:	4641      	mov	r1, r8
 8002db2:	008a      	lsls	r2, r1, #2
 8002db4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002db8:	f7fd fc36 	bl	8000628 <__aeabi_uldivmod>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <UART_SetConfig+0x4e4>)
 8002dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2164      	movs	r1, #100	; 0x64
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	3332      	adds	r3, #50	; 0x32
 8002dd4:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <UART_SetConfig+0x4e4>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4422      	add	r2, r4
 8002de8:	609a      	str	r2, [r3, #8]
}
 8002dea:	bf00      	nop
 8002dec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002df0:	46bd      	mov	sp, r7
 8002df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df6:	bf00      	nop
 8002df8:	51eb851f 	.word	0x51eb851f

08002dfc <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	4820      	ldr	r0, [pc, #128]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e0c:	f000 fa50 	bl	80032b0 <ai_platform_get_activations_map>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d02f      	beq.n	8002e76 <sine_model_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    serving_default_L1_input0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <sine_model_configure_activations+0x94>)
 8002e1c:	6093      	str	r3, [r2, #8]
    serving_default_L1_input0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <sine_model_configure_activations+0x94>)
 8002e24:	60d3      	str	r3, [r2, #12]
    
    dense_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 24);
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3318      	adds	r3, #24
 8002e2c:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <sine_model_configure_activations+0x98>)
 8002e2e:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 24);
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3318      	adds	r3, #24
 8002e36:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <sine_model_configure_activations+0x98>)
 8002e38:	60d3      	str	r3, [r2, #12]
    
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 24);
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3318      	adds	r3, #24
 8002e40:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <sine_model_configure_activations+0x9c>)
 8002e42:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 24);
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3318      	adds	r3, #24
 8002e4a:	4a13      	ldr	r2, [pc, #76]	; (8002e98 <sine_model_configure_activations+0x9c>)
 8002e4c:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <sine_model_configure_activations+0xa0>)
 8002e54:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <sine_model_configure_activations+0xa0>)
 8002e5c:	60d3      	str	r3, [r2, #12]
    
    nl_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 4);
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <sine_model_configure_activations+0xa4>)
 8002e66:	6093      	str	r3, [r2, #8]
    nl_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 4);
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <sine_model_configure_activations+0x90>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <sine_model_configure_activations+0xa4>)
 8002e70:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e005      	b.n	8002e82 <sine_model_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8002e76:	2213      	movs	r2, #19
 8002e78:	2130      	movs	r1, #48	; 0x30
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fa6c 	bl	8003358 <ai_platform_network_set_error>
  return false;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2000067c 	.word	0x2000067c
 8002e90:	2000008c 	.word	0x2000008c
 8002e94:	2000000c 	.word	0x2000000c
 8002e98:	2000001c 	.word	0x2000001c
 8002e9c:	2000002c 	.word	0x2000002c
 8002ea0:	2000003c 	.word	0x2000003c

08002ea4 <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	482b      	ldr	r0, [pc, #172]	; (8002f60 <sine_model_configure_weights+0xbc>)
 8002eb4:	f000 f9a8 	bl	8003208 <ai_platform_get_weights_map>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d045      	beq.n	8002f4a <sine_model_configure_weights+0xa6>
    /* Updating weights (byte) offsets */
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8002ebe:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <sine_model_configure_weights+0xc0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ec6:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <sine_model_configure_weights+0xc0>)
 8002ec8:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 8002eca:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <sine_model_configure_weights+0xbc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a25      	ldr	r2, [pc, #148]	; (8002f64 <sine_model_configure_weights+0xc0>)
 8002ed0:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 8002ed2:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <sine_model_configure_weights+0xbc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <sine_model_configure_weights+0xc0>)
 8002ed8:	60d3      	str	r3, [r2, #12]
    
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8002eda:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <sine_model_configure_weights+0xc4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ee2:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <sine_model_configure_weights+0xc4>)
 8002ee4:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 9600);
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <sine_model_configure_weights+0xbc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 8002eee:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <sine_model_configure_weights+0xc4>)
 8002ef0:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 9600);
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <sine_model_configure_weights+0xbc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 8002efa:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <sine_model_configure_weights+0xc4>)
 8002efc:	60d3      	str	r3, [r2, #12]
    
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <sine_model_configure_weights+0xc8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f06:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <sine_model_configure_weights+0xc8>)
 8002f08:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 11200);
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <sine_model_configure_weights+0xbc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f503 532f 	add.w	r3, r3, #11200	; 0x2bc0
 8002f12:	4a16      	ldr	r2, [pc, #88]	; (8002f6c <sine_model_configure_weights+0xc8>)
 8002f14:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 11200);
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <sine_model_configure_weights+0xbc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f503 532f 	add.w	r3, r3, #11200	; 0x2bc0
 8002f1e:	4a13      	ldr	r2, [pc, #76]	; (8002f6c <sine_model_configure_weights+0xc8>)
 8002f20:	60d3      	str	r3, [r2, #12]
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <sine_model_configure_weights+0xcc>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f2a:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <sine_model_configure_weights+0xcc>)
 8002f2c:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 12800);
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <sine_model_configure_weights+0xbc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8002f36:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <sine_model_configure_weights+0xcc>)
 8002f38:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 12800);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <sine_model_configure_weights+0xbc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8002f42:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <sine_model_configure_weights+0xcc>)
 8002f44:	60d3      	str	r3, [r2, #12]
    
    return true;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e005      	b.n	8002f56 <sine_model_configure_weights+0xb2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8002f4a:	2212      	movs	r2, #18
 8002f4c:	2130      	movs	r1, #48	; 0x30
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa02 	bl	8003358 <ai_platform_network_set_error>
  return false;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000680 	.word	0x20000680
 8002f64:	2000004c 	.word	0x2000004c
 8002f68:	2000005c 	.word	0x2000005c
 8002f6c:	2000006c 	.word	0x2000006c
 8002f70:	2000007c 	.word	0x2000007c

08002f74 <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8002f7e:	2300      	movs	r3, #0
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2305      	movs	r3, #5
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2301      	movs	r3, #1
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <ai_sine_model_create+0x28>)
 8002f8a:	6839      	ldr	r1, [r7, #0]
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fb8f 	bl	80036b0 <ai_platform_network_create>
 8002f92:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200004b0 	.word	0x200004b0

08002fa0 <ai_sine_model_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_sine_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d104      	bne.n	8002fba <ai_sine_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <ai_sine_model_inputs_get+0x2c>)
 8002fb2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a06      	ldr	r2, [pc, #24]	; (8002fd0 <ai_sine_model_inputs_get+0x30>)
 8002fb8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8002fba:	6839      	ldr	r1, [r7, #0]
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f9d1 	bl	8003364 <ai_platform_inputs_get>
 8002fc2:	4603      	mov	r3, r0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	200004b0 	.word	0x200004b0
 8002fd0:	a1c00100 	.word	0xa1c00100

08002fd4 <ai_sine_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_sine_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d104      	bne.n	8002fee <ai_sine_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <ai_sine_model_outputs_get+0x2c>)
 8002fe6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a06      	ldr	r2, [pc, #24]	; (8003004 <ai_sine_model_outputs_get+0x30>)
 8002fec:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fa8d 	bl	8003510 <ai_platform_outputs_get>
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	200004b0 	.word	0x200004b0
 8003004:	a1c00100 	.word	0xa1c00100

08003008 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003012:	6839      	ldr	r1, [r7, #0]
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fc21 	bl	800385c <ai_platform_network_init>
 800301a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <ai_sine_model_init+0x1e>
 8003022:	2300      	movs	r3, #0
 8003024:	e028      	b.n	8003078 <ai_sine_model_init+0x70>

  ai_bool ok = true;
 8003026:	2301      	movs	r3, #1
 8003028:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, params);
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff ff39 	bl	8002ea4 <sine_model_configure_weights>
 8003032:	4603      	mov	r3, r0
 8003034:	461a      	mov	r2, r3
 8003036:	7afb      	ldrb	r3, [r7, #11]
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff fed8 	bl	8002dfc <sine_model_configure_activations>
 800304c:	4603      	mov	r3, r0
 800304e:	461a      	mov	r2, r3
 8003050:	7afb      	ldrb	r3, [r7, #11]
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fcea 	bl	8003a38 <ai_platform_network_post_init>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	7afb      	ldrb	r3, [r7, #11]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	72fb      	strb	r3, [r7, #11]

  return ok;
 8003076:	7afb      	ldrb	r3, [r7, #11]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fd59 	bl	8003b48 <ai_platform_network_process>
 8003096:	4603      	mov	r3, r0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <ai_sine_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_activations_buffer_get(const ai_handle ptr)
{
 80030a0:	b4b0      	push	{r4, r5, r7}
 80030a2:	b08f      	sub	sp, #60	; 0x3c
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <ai_sine_model_data_activations_buffer_get+0x60>)
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	623b      	str	r3, [r7, #32]
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	2300      	movs	r3, #0
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ba:	f44f 63cb 	mov.w	r3, #1624	; 0x658
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	2204      	movs	r2, #4
 80030ca:	f362 231f 	bfi	r3, r2, #8, #24
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <ai_sine_model_data_activations_buffer_get+0x64>)
 80030d2:	f107 040c 	add.w	r4, r7, #12
 80030d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	461d      	mov	r5, r3
 80030e6:	f107 041c 	add.w	r4, r7, #28
 80030ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80030f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	373c      	adds	r7, #60	; 0x3c
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bcb0      	pop	{r4, r5, r7}
 80030fe:	4770      	bx	lr
 8003100:	00040440 	.word	0x00040440
 8003104:	08005a2c 	.word	0x08005a2c

08003108 <ai_sine_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_weights_buffer_get(const ai_handle ptr)
{
 8003108:	b4b0      	push	{r4, r5, r7}
 800310a:	b08f      	sub	sp, #60	; 0x3c
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <ai_sine_model_data_weights_buffer_get+0x60>)
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	2300      	movs	r3, #0
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
 8003122:	f243 2304 	movw	r3, #12804	; 0x3204
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003128:	2301      	movs	r3, #1
 800312a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2204      	movs	r2, #4
 8003132:	f362 231f 	bfi	r3, r2, #8, #24
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <ai_sine_model_data_weights_buffer_get+0x64>)
 800313a:	f107 040c 	add.w	r4, r7, #12
 800313e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	461d      	mov	r5, r3
 800314e:	f107 041c 	add.w	r4, r7, #28
 8003152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003156:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800315a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	373c      	adds	r7, #60	; 0x3c
 8003162:	46bd      	mov	sp, r7
 8003164:	bcb0      	pop	{r4, r5, r7}
 8003166:	4770      	bx	lr
 8003168:	40040440 	.word	0x40040440
 800316c:	08005a3c 	.word	0x08005a3c

08003170 <ai_sine_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_sine_model_weights_table);
 8003174:	4b02      	ldr	r3, [pc, #8]	; (8003180 <ai_sine_model_data_weights_get+0x10>)

}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	20000554 	.word	0x20000554

08003184 <ai_buffer_get_size>:
 8003184:	b378      	cbz	r0, 80031e6 <ai_buffer_get_size+0x62>
 8003186:	b410      	push	{r4}
 8003188:	6803      	ldr	r3, [r0, #0]
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <ai_buffer_get_size+0x64>)
 800318c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003190:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003194:	4293      	cmp	r3, r2
 8003196:	d01e      	beq.n	80031d6 <ai_buffer_get_size+0x52>
 8003198:	6984      	ldr	r4, [r0, #24]
 800319a:	6862      	ldr	r2, [r4, #4]
 800319c:	7d03      	ldrb	r3, [r0, #20]
 800319e:	6941      	ldr	r1, [r0, #20]
 80031a0:	f1a3 0301 	sub.w	r3, r3, #1
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80031ae:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80031b2:	da0b      	bge.n	80031cc <ai_buffer_get_size+0x48>
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d102      	bne.n	80031be <ai_buffer_get_size+0x3a>
 80031b8:	2802      	cmp	r0, #2
 80031ba:	d007      	beq.n	80031cc <ai_buffer_get_size+0x48>
 80031bc:	2302      	movs	r3, #2
 80031be:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80031c2:	3301      	adds	r3, #1
 80031c4:	4298      	cmp	r0, r3
 80031c6:	fb01 f202 	mul.w	r2, r1, r2
 80031ca:	d1f3      	bne.n	80031b4 <ai_buffer_get_size+0x30>
 80031cc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80031d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	2900      	cmp	r1, #0
 80031d8:	d0de      	beq.n	8003198 <ai_buffer_get_size+0x14>
 80031da:	6984      	ldr	r4, [r0, #24]
 80031dc:	6863      	ldr	r3, [r4, #4]
 80031de:	331f      	adds	r3, #31
 80031e0:	f023 021f 	bic.w	r2, r3, #31
 80031e4:	e7da      	b.n	800319c <ai_buffer_get_size+0x18>
 80031e6:	4770      	bx	lr
 80031e8:	000400c0 	.word	0x000400c0

080031ec <ai_buffer_array_sane>:
 80031ec:	b138      	cbz	r0, 80031fe <ai_buffer_array_sane+0x12>
 80031ee:	6843      	ldr	r3, [r0, #4]
 80031f0:	b123      	cbz	r3, 80031fc <ai_buffer_array_sane+0x10>
 80031f2:	8840      	ldrh	r0, [r0, #2]
 80031f4:	3800      	subs	r0, #0
 80031f6:	bf18      	it	ne
 80031f8:	2001      	movne	r0, #1
 80031fa:	4770      	bx	lr
 80031fc:	4618      	mov	r0, r3
 80031fe:	4770      	bx	lr

08003200 <_ai_platform_acquire_crc>:
 8003200:	2001      	movs	r0, #1
 8003202:	4770      	bx	lr

08003204 <_ai_platform_release_crc>:
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop

08003208 <ai_platform_get_weights_map>:
 8003208:	2a00      	cmp	r2, #0
 800320a:	d037      	beq.n	800327c <ai_platform_get_weights_map+0x74>
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	4604      	mov	r4, r0
 8003210:	b1a0      	cbz	r0, 800323c <ai_platform_get_weights_map+0x34>
 8003212:	460f      	mov	r7, r1
 8003214:	b191      	cbz	r1, 800323c <ai_platform_get_weights_map+0x34>
 8003216:	4b25      	ldr	r3, [pc, #148]	; (80032ac <ai_platform_get_weights_map+0xa4>)
 8003218:	6810      	ldr	r0, [r2, #0]
 800321a:	4298      	cmp	r0, r3
 800321c:	4615      	mov	r5, r2
 800321e:	d00f      	beq.n	8003240 <ai_platform_get_weights_map+0x38>
 8003220:	6855      	ldr	r5, [r2, #4]
 8003222:	b15d      	cbz	r5, 800323c <ai_platform_get_weights_map+0x34>
 8003224:	682e      	ldr	r6, [r5, #0]
 8003226:	429e      	cmp	r6, r3
 8003228:	d02a      	beq.n	8003280 <ai_platform_get_weights_map+0x78>
 800322a:	f1a1 0001 	sub.w	r0, r1, #1
 800322e:	6025      	str	r5, [r4, #0]
 8003230:	fab0 f080 	clz	r0, r0
 8003234:	0940      	lsrs	r0, r0, #5
 8003236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003238:	42a7      	cmp	r7, r4
 800323a:	d034      	beq.n	80032a6 <ai_platform_get_weights_map+0x9e>
 800323c:	2000      	movs	r0, #0
 800323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003240:	1d10      	adds	r0, r2, #4
 8003242:	f7ff ffd3 	bl	80031ec <ai_buffer_array_sane>
 8003246:	2800      	cmp	r0, #0
 8003248:	d0f8      	beq.n	800323c <ai_platform_get_weights_map+0x34>
 800324a:	88eb      	ldrh	r3, [r5, #6]
 800324c:	429f      	cmp	r7, r3
 800324e:	d1f5      	bne.n	800323c <ai_platform_get_weights_map+0x34>
 8003250:	f04f 0e00 	mov.w	lr, #0
 8003254:	1f23      	subs	r3, r4, #4
 8003256:	4670      	mov	r0, lr
 8003258:	68aa      	ldr	r2, [r5, #8]
 800325a:	eb02 0c0e 	add.w	ip, r2, lr
 800325e:	f10e 0e1c 	add.w	lr, lr, #28
 8003262:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003266:	b124      	cbz	r4, 8003272 <ai_platform_get_weights_map+0x6a>
 8003268:	3001      	adds	r0, #1
 800326a:	4287      	cmp	r7, r0
 800326c:	f843 4f04 	str.w	r4, [r3, #4]!
 8003270:	d1f2      	bne.n	8003258 <ai_platform_get_weights_map+0x50>
 8003272:	1a38      	subs	r0, r7, r0
 8003274:	fab0 f080 	clz	r0, r0
 8003278:	0940      	lsrs	r0, r0, #5
 800327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800327c:	2000      	movs	r0, #0
 800327e:	4770      	bx	lr
 8003280:	1f23      	subs	r3, r4, #4
 8003282:	4628      	mov	r0, r5
 8003284:	2400      	movs	r4, #0
 8003286:	e000      	b.n	800328a <ai_platform_get_weights_map+0x82>
 8003288:	4614      	mov	r4, r2
 800328a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800328e:	42b2      	cmp	r2, r6
 8003290:	d0d2      	beq.n	8003238 <ai_platform_get_weights_map+0x30>
 8003292:	f843 2f04 	str.w	r2, [r3, #4]!
 8003296:	1c62      	adds	r2, r4, #1
 8003298:	4297      	cmp	r7, r2
 800329a:	d1f5      	bne.n	8003288 <ai_platform_get_weights_map+0x80>
 800329c:	3402      	adds	r4, #2
 800329e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80032a2:	42b3      	cmp	r3, r6
 80032a4:	d1ca      	bne.n	800323c <ai_platform_get_weights_map+0x34>
 80032a6:	2001      	movs	r0, #1
 80032a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032aa:	bf00      	nop
 80032ac:	a1facade 	.word	0xa1facade

080032b0 <ai_platform_get_activations_map>:
 80032b0:	2a00      	cmp	r2, #0
 80032b2:	d038      	beq.n	8003326 <ai_platform_get_activations_map+0x76>
 80032b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b6:	4604      	mov	r4, r0
 80032b8:	b1a0      	cbz	r0, 80032e4 <ai_platform_get_activations_map+0x34>
 80032ba:	460f      	mov	r7, r1
 80032bc:	b191      	cbz	r1, 80032e4 <ai_platform_get_activations_map+0x34>
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <ai_platform_get_activations_map+0xa4>)
 80032c0:	6810      	ldr	r0, [r2, #0]
 80032c2:	4298      	cmp	r0, r3
 80032c4:	4615      	mov	r5, r2
 80032c6:	d00f      	beq.n	80032e8 <ai_platform_get_activations_map+0x38>
 80032c8:	6a15      	ldr	r5, [r2, #32]
 80032ca:	b15d      	cbz	r5, 80032e4 <ai_platform_get_activations_map+0x34>
 80032cc:	682e      	ldr	r6, [r5, #0]
 80032ce:	429e      	cmp	r6, r3
 80032d0:	d02b      	beq.n	800332a <ai_platform_get_activations_map+0x7a>
 80032d2:	f1a1 0001 	sub.w	r0, r1, #1
 80032d6:	6025      	str	r5, [r4, #0]
 80032d8:	fab0 f080 	clz	r0, r0
 80032dc:	0940      	lsrs	r0, r0, #5
 80032de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e0:	42a7      	cmp	r7, r4
 80032e2:	d035      	beq.n	8003350 <ai_platform_get_activations_map+0xa0>
 80032e4:	2000      	movs	r0, #0
 80032e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032e8:	f102 000c 	add.w	r0, r2, #12
 80032ec:	f7ff ff7e 	bl	80031ec <ai_buffer_array_sane>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d0f7      	beq.n	80032e4 <ai_platform_get_activations_map+0x34>
 80032f4:	89eb      	ldrh	r3, [r5, #14]
 80032f6:	429f      	cmp	r7, r3
 80032f8:	d1f4      	bne.n	80032e4 <ai_platform_get_activations_map+0x34>
 80032fa:	f04f 0e00 	mov.w	lr, #0
 80032fe:	1f23      	subs	r3, r4, #4
 8003300:	4670      	mov	r0, lr
 8003302:	692a      	ldr	r2, [r5, #16]
 8003304:	eb02 0c0e 	add.w	ip, r2, lr
 8003308:	f10e 0e1c 	add.w	lr, lr, #28
 800330c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003310:	b124      	cbz	r4, 800331c <ai_platform_get_activations_map+0x6c>
 8003312:	3001      	adds	r0, #1
 8003314:	4287      	cmp	r7, r0
 8003316:	f843 4f04 	str.w	r4, [r3, #4]!
 800331a:	d1f2      	bne.n	8003302 <ai_platform_get_activations_map+0x52>
 800331c:	1a38      	subs	r0, r7, r0
 800331e:	fab0 f080 	clz	r0, r0
 8003322:	0940      	lsrs	r0, r0, #5
 8003324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003326:	2000      	movs	r0, #0
 8003328:	4770      	bx	lr
 800332a:	1f23      	subs	r3, r4, #4
 800332c:	4628      	mov	r0, r5
 800332e:	2400      	movs	r4, #0
 8003330:	e000      	b.n	8003334 <ai_platform_get_activations_map+0x84>
 8003332:	4614      	mov	r4, r2
 8003334:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003338:	42b2      	cmp	r2, r6
 800333a:	d0d1      	beq.n	80032e0 <ai_platform_get_activations_map+0x30>
 800333c:	f843 2f04 	str.w	r2, [r3, #4]!
 8003340:	1c62      	adds	r2, r4, #1
 8003342:	4297      	cmp	r7, r2
 8003344:	d1f5      	bne.n	8003332 <ai_platform_get_activations_map+0x82>
 8003346:	3402      	adds	r4, #2
 8003348:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800334c:	42b3      	cmp	r3, r6
 800334e:	d1c9      	bne.n	80032e4 <ai_platform_get_activations_map+0x34>
 8003350:	2001      	movs	r0, #1
 8003352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003354:	a1facade 	.word	0xa1facade

08003358 <ai_platform_network_set_error>:
 8003358:	b110      	cbz	r0, 8003360 <ai_platform_network_set_error+0x8>
 800335a:	3010      	adds	r0, #16
 800335c:	f000 be7c 	b.w	8004058 <core_set_error>
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <ai_platform_inputs_get>:
 8003364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003368:	b085      	sub	sp, #20
 800336a:	9102      	str	r1, [sp, #8]
 800336c:	b1f0      	cbz	r0, 80033ac <ai_platform_inputs_get+0x48>
 800336e:	4b62      	ldr	r3, [pc, #392]	; (80034f8 <ai_platform_inputs_get+0x194>)
 8003370:	6802      	ldr	r2, [r0, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	4607      	mov	r7, r0
 8003376:	d119      	bne.n	80033ac <ai_platform_inputs_get+0x48>
 8003378:	f7ff ff42 	bl	8003200 <_ai_platform_acquire_crc>
 800337c:	4b5f      	ldr	r3, [pc, #380]	; (80034fc <ai_platform_inputs_get+0x198>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003388:	d03d      	beq.n	8003406 <ai_platform_inputs_get+0xa2>
 800338a:	4a5d      	ldr	r2, [pc, #372]	; (8003500 <ai_platform_inputs_get+0x19c>)
 800338c:	2301      	movs	r3, #1
 800338e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003392:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1fb      	bne.n	8003392 <ai_platform_inputs_get+0x2e>
 800339a:	4b5a      	ldr	r3, [pc, #360]	; (8003504 <ai_platform_inputs_get+0x1a0>)
 800339c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80033a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80033a4:	4b58      	ldr	r3, [pc, #352]	; (8003508 <ai_platform_inputs_get+0x1a4>)
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d039      	beq.n	800341e <ai_platform_inputs_get+0xba>
 80033aa:	e7fe      	b.n	80033aa <ai_platform_inputs_get+0x46>
 80033ac:	f7ff ff28 	bl	8003200 <_ai_platform_acquire_crc>
 80033b0:	4b52      	ldr	r3, [pc, #328]	; (80034fc <ai_platform_inputs_get+0x198>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033bc:	d010      	beq.n	80033e0 <ai_platform_inputs_get+0x7c>
 80033be:	4a50      	ldr	r2, [pc, #320]	; (8003500 <ai_platform_inputs_get+0x19c>)
 80033c0:	2301      	movs	r3, #1
 80033c2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80033c6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1fb      	bne.n	80033c6 <ai_platform_inputs_get+0x62>
 80033ce:	4b4d      	ldr	r3, [pc, #308]	; (8003504 <ai_platform_inputs_get+0x1a0>)
 80033d0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80033d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80033d8:	4b4b      	ldr	r3, [pc, #300]	; (8003508 <ai_platform_inputs_get+0x1a4>)
 80033da:	429a      	cmp	r2, r3
 80033dc:	d00d      	beq.n	80033fa <ai_platform_inputs_get+0x96>
 80033de:	e7fe      	b.n	80033de <ai_platform_inputs_get+0x7a>
 80033e0:	4a4a      	ldr	r2, [pc, #296]	; (800350c <ai_platform_inputs_get+0x1a8>)
 80033e2:	2301      	movs	r3, #1
 80033e4:	6093      	str	r3, [r2, #8]
 80033e6:	6893      	ldr	r3, [r2, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1fc      	bne.n	80033e6 <ai_platform_inputs_get+0x82>
 80033ec:	4b45      	ldr	r3, [pc, #276]	; (8003504 <ai_platform_inputs_get+0x1a0>)
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	4b45      	ldr	r3, [pc, #276]	; (8003508 <ai_platform_inputs_get+0x1a4>)
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d000      	beq.n	80033fa <ai_platform_inputs_get+0x96>
 80033f8:	e7fe      	b.n	80033f8 <ai_platform_inputs_get+0x94>
 80033fa:	f7ff ff03 	bl	8003204 <_ai_platform_release_crc>
 80033fe:	2000      	movs	r0, #0
 8003400:	b005      	add	sp, #20
 8003402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003406:	4a41      	ldr	r2, [pc, #260]	; (800350c <ai_platform_inputs_get+0x1a8>)
 8003408:	2301      	movs	r3, #1
 800340a:	6093      	str	r3, [r2, #8]
 800340c:	6893      	ldr	r3, [r2, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1fc      	bne.n	800340c <ai_platform_inputs_get+0xa8>
 8003412:	4b3c      	ldr	r3, [pc, #240]	; (8003504 <ai_platform_inputs_get+0x1a0>)
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <ai_platform_inputs_get+0x1a4>)
 800341a:	429a      	cmp	r2, r3
 800341c:	d155      	bne.n	80034ca <ai_platform_inputs_get+0x166>
 800341e:	f7ff fef1 	bl	8003204 <_ai_platform_release_crc>
 8003422:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d051      	beq.n	80034cc <ai_platform_inputs_get+0x168>
 8003428:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800342c:	f1ba 0f00 	cmp.w	sl, #0
 8003430:	d04c      	beq.n	80034cc <ai_platform_inputs_get+0x168>
 8003432:	f04f 0b00 	mov.w	fp, #0
 8003436:	465d      	mov	r5, fp
 8003438:	9703      	str	r7, [sp, #12]
 800343a:	e016      	b.n	800346a <ai_platform_inputs_get+0x106>
 800343c:	9901      	ldr	r1, [sp, #4]
 800343e:	2301      	movs	r3, #1
 8003440:	507b      	str	r3, [r7, r1]
 8003442:	69b1      	ldr	r1, [r6, #24]
 8003444:	6849      	ldr	r1, [r1, #4]
 8003446:	6121      	str	r1, [r4, #16]
 8003448:	f04f 0301 	mov.w	r3, #1
 800344c:	7523      	strb	r3, [r4, #20]
 800344e:	e9c4 c200 	strd	ip, r2, [r4]
 8003452:	6962      	ldr	r2, [r4, #20]
 8003454:	60a0      	str	r0, [r4, #8]
 8003456:	2300      	movs	r3, #0
 8003458:	f369 221f 	bfi	r2, r9, #8, #24
 800345c:	f8c4 8018 	str.w	r8, [r4, #24]
 8003460:	60e3      	str	r3, [r4, #12]
 8003462:	3501      	adds	r5, #1
 8003464:	f10b 0b1c 	add.w	fp, fp, #28
 8003468:	6162      	str	r2, [r4, #20]
 800346a:	f8ba 3000 	ldrh.w	r3, [sl]
 800346e:	42ab      	cmp	r3, r5
 8003470:	b2aa      	uxth	r2, r5
 8003472:	d93a      	bls.n	80034ea <ai_platform_inputs_get+0x186>
 8003474:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003478:	00e9      	lsls	r1, r5, #3
 800347a:	9101      	str	r1, [sp, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d034      	beq.n	80034ea <ai_platform_inputs_get+0x186>
 8003480:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003484:	2e00      	cmp	r6, #0
 8003486:	d030      	beq.n	80034ea <ai_platform_inputs_get+0x186>
 8003488:	f8da 3008 	ldr.w	r3, [sl, #8]
 800348c:	69b2      	ldr	r2, [r6, #24]
 800348e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003492:	6810      	ldr	r0, [r2, #0]
 8003494:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003498:	68b3      	ldr	r3, [r6, #8]
 800349a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800349e:	f001 fbe3 	bl	8004c68 <ai_array_to_buffer_fmt>
 80034a2:	69b1      	ldr	r1, [r6, #24]
 80034a4:	4684      	mov	ip, r0
 80034a6:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80034aa:	688a      	ldr	r2, [r1, #8]
 80034ac:	445c      	add	r4, fp
 80034ae:	2800      	cmp	r0, #0
 80034b0:	d0c8      	beq.n	8003444 <ai_platform_inputs_get+0xe0>
 80034b2:	2100      	movs	r1, #0
 80034b4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80034b8:	6831      	ldr	r1, [r6, #0]
 80034ba:	6041      	str	r1, [r0, #4]
 80034bc:	b111      	cbz	r1, 80034c4 <ai_platform_inputs_get+0x160>
 80034be:	8849      	ldrh	r1, [r1, #2]
 80034c0:	2900      	cmp	r1, #0
 80034c2:	d1bb      	bne.n	800343c <ai_platform_inputs_get+0xd8>
 80034c4:	69b1      	ldr	r1, [r6, #24]
 80034c6:	2000      	movs	r0, #0
 80034c8:	e7bc      	b.n	8003444 <ai_platform_inputs_get+0xe0>
 80034ca:	e7fe      	b.n	80034ca <ai_platform_inputs_get+0x166>
 80034cc:	2218      	movs	r2, #24
 80034ce:	2111      	movs	r1, #17
 80034d0:	f107 0010 	add.w	r0, r7, #16
 80034d4:	f000 fdc0 	bl	8004058 <core_set_error>
 80034d8:	2200      	movs	r2, #0
 80034da:	4610      	mov	r0, r2
 80034dc:	9b02      	ldr	r3, [sp, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d08e      	beq.n	8003400 <ai_platform_inputs_get+0x9c>
 80034e2:	801a      	strh	r2, [r3, #0]
 80034e4:	b005      	add	sp, #20
 80034e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ea:	9f03      	ldr	r7, [sp, #12]
 80034ec:	2a00      	cmp	r2, #0
 80034ee:	d0ed      	beq.n	80034cc <ai_platform_inputs_get+0x168>
 80034f0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80034f4:	6858      	ldr	r0, [r3, #4]
 80034f6:	e7f1      	b.n	80034dc <ai_platform_inputs_get+0x178>
 80034f8:	a1c00100 	.word	0xa1c00100
 80034fc:	e0042000 	.word	0xe0042000
 8003500:	58024000 	.word	0x58024000
 8003504:	f407a5c2 	.word	0xf407a5c2
 8003508:	b5e8b5cd 	.word	0xb5e8b5cd
 800350c:	40023000 	.word	0x40023000

08003510 <ai_platform_outputs_get>:
 8003510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003514:	b085      	sub	sp, #20
 8003516:	9102      	str	r1, [sp, #8]
 8003518:	b1f0      	cbz	r0, 8003558 <ai_platform_outputs_get+0x48>
 800351a:	4b5f      	ldr	r3, [pc, #380]	; (8003698 <ai_platform_outputs_get+0x188>)
 800351c:	6802      	ldr	r2, [r0, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	4607      	mov	r7, r0
 8003522:	d119      	bne.n	8003558 <ai_platform_outputs_get+0x48>
 8003524:	f7ff fe6c 	bl	8003200 <_ai_platform_acquire_crc>
 8003528:	4b5c      	ldr	r3, [pc, #368]	; (800369c <ai_platform_outputs_get+0x18c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003534:	d03d      	beq.n	80035b2 <ai_platform_outputs_get+0xa2>
 8003536:	4a5a      	ldr	r2, [pc, #360]	; (80036a0 <ai_platform_outputs_get+0x190>)
 8003538:	2301      	movs	r3, #1
 800353a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800353e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1fb      	bne.n	800353e <ai_platform_outputs_get+0x2e>
 8003546:	4b57      	ldr	r3, [pc, #348]	; (80036a4 <ai_platform_outputs_get+0x194>)
 8003548:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800354c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003550:	4b55      	ldr	r3, [pc, #340]	; (80036a8 <ai_platform_outputs_get+0x198>)
 8003552:	429a      	cmp	r2, r3
 8003554:	d039      	beq.n	80035ca <ai_platform_outputs_get+0xba>
 8003556:	e7fe      	b.n	8003556 <ai_platform_outputs_get+0x46>
 8003558:	f7ff fe52 	bl	8003200 <_ai_platform_acquire_crc>
 800355c:	4b4f      	ldr	r3, [pc, #316]	; (800369c <ai_platform_outputs_get+0x18c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003568:	d010      	beq.n	800358c <ai_platform_outputs_get+0x7c>
 800356a:	4a4d      	ldr	r2, [pc, #308]	; (80036a0 <ai_platform_outputs_get+0x190>)
 800356c:	2301      	movs	r3, #1
 800356e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003572:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1fb      	bne.n	8003572 <ai_platform_outputs_get+0x62>
 800357a:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <ai_platform_outputs_get+0x194>)
 800357c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003580:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003584:	4b48      	ldr	r3, [pc, #288]	; (80036a8 <ai_platform_outputs_get+0x198>)
 8003586:	429a      	cmp	r2, r3
 8003588:	d00d      	beq.n	80035a6 <ai_platform_outputs_get+0x96>
 800358a:	e7fe      	b.n	800358a <ai_platform_outputs_get+0x7a>
 800358c:	4a47      	ldr	r2, [pc, #284]	; (80036ac <ai_platform_outputs_get+0x19c>)
 800358e:	2301      	movs	r3, #1
 8003590:	6093      	str	r3, [r2, #8]
 8003592:	6893      	ldr	r3, [r2, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1fc      	bne.n	8003592 <ai_platform_outputs_get+0x82>
 8003598:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <ai_platform_outputs_get+0x194>)
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	4b42      	ldr	r3, [pc, #264]	; (80036a8 <ai_platform_outputs_get+0x198>)
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d000      	beq.n	80035a6 <ai_platform_outputs_get+0x96>
 80035a4:	e7fe      	b.n	80035a4 <ai_platform_outputs_get+0x94>
 80035a6:	f7ff fe2d 	bl	8003204 <_ai_platform_release_crc>
 80035aa:	2000      	movs	r0, #0
 80035ac:	b005      	add	sp, #20
 80035ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b2:	4a3e      	ldr	r2, [pc, #248]	; (80036ac <ai_platform_outputs_get+0x19c>)
 80035b4:	2301      	movs	r3, #1
 80035b6:	6093      	str	r3, [r2, #8]
 80035b8:	6893      	ldr	r3, [r2, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1fc      	bne.n	80035b8 <ai_platform_outputs_get+0xa8>
 80035be:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <ai_platform_outputs_get+0x194>)
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <ai_platform_outputs_get+0x198>)
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d150      	bne.n	800366c <ai_platform_outputs_get+0x15c>
 80035ca:	f7ff fe1b 	bl	8003204 <_ai_platform_release_crc>
 80035ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d958      	bls.n	8003686 <ai_platform_outputs_get+0x176>
 80035d4:	f04f 0b00 	mov.w	fp, #0
 80035d8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80035dc:	9703      	str	r7, [sp, #12]
 80035de:	465d      	mov	r5, fp
 80035e0:	e016      	b.n	8003610 <ai_platform_outputs_get+0x100>
 80035e2:	9901      	ldr	r1, [sp, #4]
 80035e4:	2301      	movs	r3, #1
 80035e6:	507b      	str	r3, [r7, r1]
 80035e8:	69b1      	ldr	r1, [r6, #24]
 80035ea:	6849      	ldr	r1, [r1, #4]
 80035ec:	6121      	str	r1, [r4, #16]
 80035ee:	f04f 0301 	mov.w	r3, #1
 80035f2:	7523      	strb	r3, [r4, #20]
 80035f4:	e9c4 c200 	strd	ip, r2, [r4]
 80035f8:	6962      	ldr	r2, [r4, #20]
 80035fa:	60a0      	str	r0, [r4, #8]
 80035fc:	2300      	movs	r3, #0
 80035fe:	f369 221f 	bfi	r2, r9, #8, #24
 8003602:	f8c4 8018 	str.w	r8, [r4, #24]
 8003606:	60e3      	str	r3, [r4, #12]
 8003608:	3501      	adds	r5, #1
 800360a:	f10b 0b1c 	add.w	fp, fp, #28
 800360e:	6162      	str	r2, [r4, #20]
 8003610:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003614:	42ab      	cmp	r3, r5
 8003616:	b2aa      	uxth	r2, r5
 8003618:	d929      	bls.n	800366e <ai_platform_outputs_get+0x15e>
 800361a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800361e:	00e9      	lsls	r1, r5, #3
 8003620:	9101      	str	r1, [sp, #4]
 8003622:	b323      	cbz	r3, 800366e <ai_platform_outputs_get+0x15e>
 8003624:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8003628:	b30e      	cbz	r6, 800366e <ai_platform_outputs_get+0x15e>
 800362a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800362e:	69b2      	ldr	r2, [r6, #24]
 8003630:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003634:	6810      	ldr	r0, [r2, #0]
 8003636:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800363a:	68b3      	ldr	r3, [r6, #8]
 800363c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003640:	f001 fb12 	bl	8004c68 <ai_array_to_buffer_fmt>
 8003644:	69b1      	ldr	r1, [r6, #24]
 8003646:	4684      	mov	ip, r0
 8003648:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800364c:	688a      	ldr	r2, [r1, #8]
 800364e:	445c      	add	r4, fp
 8003650:	2800      	cmp	r0, #0
 8003652:	d0ca      	beq.n	80035ea <ai_platform_outputs_get+0xda>
 8003654:	2100      	movs	r1, #0
 8003656:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800365a:	6831      	ldr	r1, [r6, #0]
 800365c:	6041      	str	r1, [r0, #4]
 800365e:	b111      	cbz	r1, 8003666 <ai_platform_outputs_get+0x156>
 8003660:	8849      	ldrh	r1, [r1, #2]
 8003662:	2900      	cmp	r1, #0
 8003664:	d1bd      	bne.n	80035e2 <ai_platform_outputs_get+0xd2>
 8003666:	69b1      	ldr	r1, [r6, #24]
 8003668:	2000      	movs	r0, #0
 800366a:	e7be      	b.n	80035ea <ai_platform_outputs_get+0xda>
 800366c:	e7fe      	b.n	800366c <ai_platform_outputs_get+0x15c>
 800366e:	9f03      	ldr	r7, [sp, #12]
 8003670:	b14a      	cbz	r2, 8003686 <ai_platform_outputs_get+0x176>
 8003672:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003676:	6858      	ldr	r0, [r3, #4]
 8003678:	9b02      	ldr	r3, [sp, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d096      	beq.n	80035ac <ai_platform_outputs_get+0x9c>
 800367e:	801a      	strh	r2, [r3, #0]
 8003680:	b005      	add	sp, #20
 8003682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003686:	2218      	movs	r2, #24
 8003688:	2111      	movs	r1, #17
 800368a:	f107 0010 	add.w	r0, r7, #16
 800368e:	f000 fce3 	bl	8004058 <core_set_error>
 8003692:	2200      	movs	r2, #0
 8003694:	4610      	mov	r0, r2
 8003696:	e7ef      	b.n	8003678 <ai_platform_outputs_get+0x168>
 8003698:	a1c00100 	.word	0xa1c00100
 800369c:	e0042000 	.word	0xe0042000
 80036a0:	58024000 	.word	0x58024000
 80036a4:	f407a5c2 	.word	0xf407a5c2
 80036a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80036ac:	40023000 	.word	0x40023000

080036b0 <ai_platform_network_create>:
 80036b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036b4:	b083      	sub	sp, #12
 80036b6:	4606      	mov	r6, r0
 80036b8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80036bc:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80036c0:	4615      	mov	r5, r2
 80036c2:	461f      	mov	r7, r3
 80036c4:	f7ff fd9c 	bl	8003200 <_ai_platform_acquire_crc>
 80036c8:	b188      	cbz	r0, 80036ee <ai_platform_network_create+0x3e>
 80036ca:	4a5d      	ldr	r2, [pc, #372]	; (8003840 <ai_platform_network_create+0x190>)
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80036d2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80036d6:	4603      	mov	r3, r0
 80036d8:	d00e      	beq.n	80036f8 <ai_platform_network_create+0x48>
 80036da:	4a5a      	ldr	r2, [pc, #360]	; (8003844 <ai_platform_network_create+0x194>)
 80036dc:	2118      	movs	r1, #24
 80036de:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80036e2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80036e6:	2918      	cmp	r1, #24
 80036e8:	d018      	beq.n	800371c <ai_platform_network_create+0x6c>
 80036ea:	f7ff fd8b 	bl	8003204 <_ai_platform_release_crc>
 80036ee:	f244 1033 	movw	r0, #16691	; 0x4133
 80036f2:	b003      	add	sp, #12
 80036f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036f8:	4a53      	ldr	r2, [pc, #332]	; (8003848 <ai_platform_network_create+0x198>)
 80036fa:	2101      	movs	r1, #1
 80036fc:	6091      	str	r1, [r2, #8]
 80036fe:	2114      	movs	r1, #20
 8003700:	e001      	b.n	8003706 <ai_platform_network_create+0x56>
 8003702:	3901      	subs	r1, #1
 8003704:	d002      	beq.n	800370c <ai_platform_network_create+0x5c>
 8003706:	6894      	ldr	r4, [r2, #8]
 8003708:	2c00      	cmp	r4, #0
 800370a:	d1fa      	bne.n	8003702 <ai_platform_network_create+0x52>
 800370c:	4a4e      	ldr	r2, [pc, #312]	; (8003848 <ai_platform_network_create+0x198>)
 800370e:	6891      	ldr	r1, [r2, #8]
 8003710:	b911      	cbnz	r1, 8003718 <ai_platform_network_create+0x68>
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	3201      	adds	r2, #1
 8003716:	d008      	beq.n	800372a <ai_platform_network_create+0x7a>
 8003718:	4618      	mov	r0, r3
 800371a:	e7e6      	b.n	80036ea <ai_platform_network_create+0x3a>
 800371c:	2101      	movs	r1, #1
 800371e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8003722:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8003726:	2900      	cmp	r1, #0
 8003728:	d1fb      	bne.n	8003722 <ai_platform_network_create+0x72>
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fd6a 	bl	8003204 <_ai_platform_release_crc>
 8003730:	f7ff fd66 	bl	8003200 <_ai_platform_acquire_crc>
 8003734:	4b42      	ldr	r3, [pc, #264]	; (8003840 <ai_platform_network_create+0x190>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800373c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003740:	d010      	beq.n	8003764 <ai_platform_network_create+0xb4>
 8003742:	4b40      	ldr	r3, [pc, #256]	; (8003844 <ai_platform_network_create+0x194>)
 8003744:	2201      	movs	r2, #1
 8003746:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800374a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800374e:	2900      	cmp	r1, #0
 8003750:	d1fb      	bne.n	800374a <ai_platform_network_create+0x9a>
 8003752:	4a3e      	ldr	r2, [pc, #248]	; (800384c <ai_platform_network_create+0x19c>)
 8003754:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8003758:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800375c:	4b3c      	ldr	r3, [pc, #240]	; (8003850 <ai_platform_network_create+0x1a0>)
 800375e:	429a      	cmp	r2, r3
 8003760:	d00c      	beq.n	800377c <ai_platform_network_create+0xcc>
 8003762:	e7fe      	b.n	8003762 <ai_platform_network_create+0xb2>
 8003764:	4a38      	ldr	r2, [pc, #224]	; (8003848 <ai_platform_network_create+0x198>)
 8003766:	2301      	movs	r3, #1
 8003768:	6093      	str	r3, [r2, #8]
 800376a:	6893      	ldr	r3, [r2, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1fc      	bne.n	800376a <ai_platform_network_create+0xba>
 8003770:	4b36      	ldr	r3, [pc, #216]	; (800384c <ai_platform_network_create+0x19c>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	4b36      	ldr	r3, [pc, #216]	; (8003850 <ai_platform_network_create+0x1a0>)
 8003778:	429a      	cmp	r2, r3
 800377a:	d122      	bne.n	80037c2 <ai_platform_network_create+0x112>
 800377c:	f7ff fd42 	bl	8003204 <_ai_platform_release_crc>
 8003780:	b38e      	cbz	r6, 80037e6 <ai_platform_network_create+0x136>
 8003782:	4b34      	ldr	r3, [pc, #208]	; (8003854 <ai_platform_network_create+0x1a4>)
 8003784:	602b      	str	r3, [r5, #0]
 8003786:	6035      	str	r5, [r6, #0]
 8003788:	f000 fc64 	bl	8004054 <core_init>
 800378c:	b1d0      	cbz	r0, 80037c4 <ai_platform_network_create+0x114>
 800378e:	f7ff fd37 	bl	8003200 <_ai_platform_acquire_crc>
 8003792:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <ai_platform_network_create+0x190>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379e:	d025      	beq.n	80037ec <ai_platform_network_create+0x13c>
 80037a0:	4a28      	ldr	r2, [pc, #160]	; (8003844 <ai_platform_network_create+0x194>)
 80037a2:	2301      	movs	r3, #1
 80037a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80037a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1fb      	bne.n	80037a8 <ai_platform_network_create+0xf8>
 80037b0:	4b26      	ldr	r3, [pc, #152]	; (800384c <ai_platform_network_create+0x19c>)
 80037b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80037b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80037ba:	4b25      	ldr	r3, [pc, #148]	; (8003850 <ai_platform_network_create+0x1a0>)
 80037bc:	429a      	cmp	r2, r3
 80037be:	d022      	beq.n	8003806 <ai_platform_network_create+0x156>
 80037c0:	e7fe      	b.n	80037c0 <ai_platform_network_create+0x110>
 80037c2:	e7fe      	b.n	80037c2 <ai_platform_network_create+0x112>
 80037c4:	2430      	movs	r4, #48	; 0x30
 80037c6:	2300      	movs	r3, #0
 80037c8:	6033      	str	r3, [r6, #0]
 80037ca:	2610      	movs	r6, #16
 80037cc:	464a      	mov	r2, r9
 80037ce:	4641      	mov	r1, r8
 80037d0:	4638      	mov	r0, r7
 80037d2:	f001 fa2b 	bl	8004c2c <ai_version_get>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2000      	movs	r0, #0
 80037da:	f364 0007 	bfi	r0, r4, #0, #8
 80037de:	64ab      	str	r3, [r5, #72]	; 0x48
 80037e0:	f366 201f 	bfi	r0, r6, #8, #24
 80037e4:	e785      	b.n	80036f2 <ai_platform_network_create+0x42>
 80037e6:	f241 0010 	movw	r0, #4112	; 0x1010
 80037ea:	e782      	b.n	80036f2 <ai_platform_network_create+0x42>
 80037ec:	4a16      	ldr	r2, [pc, #88]	; (8003848 <ai_platform_network_create+0x198>)
 80037ee:	2301      	movs	r3, #1
 80037f0:	6093      	str	r3, [r2, #8]
 80037f2:	6893      	ldr	r3, [r2, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1fc      	bne.n	80037f2 <ai_platform_network_create+0x142>
 80037f8:	4b14      	ldr	r3, [pc, #80]	; (800384c <ai_platform_network_create+0x19c>)
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	4b14      	ldr	r3, [pc, #80]	; (8003850 <ai_platform_network_create+0x1a0>)
 8003800:	429a      	cmp	r2, r3
 8003802:	d000      	beq.n	8003806 <ai_platform_network_create+0x156>
 8003804:	e7fe      	b.n	8003804 <ai_platform_network_create+0x154>
 8003806:	f7ff fcfd 	bl	8003204 <_ai_platform_release_crc>
 800380a:	2200      	movs	r2, #0
 800380c:	4641      	mov	r1, r8
 800380e:	4638      	mov	r0, r7
 8003810:	f001 fa0c 	bl	8004c2c <ai_version_get>
 8003814:	2200      	movs	r2, #0
 8003816:	4604      	mov	r4, r0
 8003818:	2105      	movs	r1, #5
 800381a:	2001      	movs	r0, #1
 800381c:	f001 fa06 	bl	8004c2c <ai_version_get>
 8003820:	4284      	cmp	r4, r0
 8003822:	d001      	beq.n	8003828 <ai_platform_network_create+0x178>
 8003824:	2401      	movs	r4, #1
 8003826:	e7ce      	b.n	80037c6 <ai_platform_network_create+0x116>
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <ai_platform_network_create+0x1a8>)
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	a801      	add	r0, sp, #4
 800382e:	f001 f843 	bl	80048b8 <ai_check_custom_types>
 8003832:	b110      	cbz	r0, 800383a <ai_platform_network_create+0x18a>
 8003834:	2600      	movs	r6, #0
 8003836:	4634      	mov	r4, r6
 8003838:	e7c8      	b.n	80037cc <ai_platform_network_create+0x11c>
 800383a:	2402      	movs	r4, #2
 800383c:	e7c3      	b.n	80037c6 <ai_platform_network_create+0x116>
 800383e:	bf00      	nop
 8003840:	e0042000 	.word	0xe0042000
 8003844:	58024000 	.word	0x58024000
 8003848:	40023000 	.word	0x40023000
 800384c:	f407a5c2 	.word	0xf407a5c2
 8003850:	b5e8b5cd 	.word	0xb5e8b5cd
 8003854:	a1c00100 	.word	0xa1c00100
 8003858:	84048403 	.word	0x84048403

0800385c <ai_platform_network_init>:
 800385c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003860:	b1f8      	cbz	r0, 80038a2 <ai_platform_network_init+0x46>
 8003862:	4b6e      	ldr	r3, [pc, #440]	; (8003a1c <ai_platform_network_init+0x1c0>)
 8003864:	6802      	ldr	r2, [r0, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	4604      	mov	r4, r0
 800386a:	d11a      	bne.n	80038a2 <ai_platform_network_init+0x46>
 800386c:	460e      	mov	r6, r1
 800386e:	f7ff fcc7 	bl	8003200 <_ai_platform_acquire_crc>
 8003872:	4b6b      	ldr	r3, [pc, #428]	; (8003a20 <ai_platform_network_init+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387e:	d03d      	beq.n	80038fc <ai_platform_network_init+0xa0>
 8003880:	4a68      	ldr	r2, [pc, #416]	; (8003a24 <ai_platform_network_init+0x1c8>)
 8003882:	2301      	movs	r3, #1
 8003884:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003888:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1fb      	bne.n	8003888 <ai_platform_network_init+0x2c>
 8003890:	4b65      	ldr	r3, [pc, #404]	; (8003a28 <ai_platform_network_init+0x1cc>)
 8003892:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003896:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800389a:	4b64      	ldr	r3, [pc, #400]	; (8003a2c <ai_platform_network_init+0x1d0>)
 800389c:	429a      	cmp	r2, r3
 800389e:	d039      	beq.n	8003914 <ai_platform_network_init+0xb8>
 80038a0:	e7fe      	b.n	80038a0 <ai_platform_network_init+0x44>
 80038a2:	f7ff fcad 	bl	8003200 <_ai_platform_acquire_crc>
 80038a6:	4b5e      	ldr	r3, [pc, #376]	; (8003a20 <ai_platform_network_init+0x1c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b2:	d010      	beq.n	80038d6 <ai_platform_network_init+0x7a>
 80038b4:	4a5b      	ldr	r2, [pc, #364]	; (8003a24 <ai_platform_network_init+0x1c8>)
 80038b6:	2301      	movs	r3, #1
 80038b8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80038bc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1fb      	bne.n	80038bc <ai_platform_network_init+0x60>
 80038c4:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <ai_platform_network_init+0x1cc>)
 80038c6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80038ca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80038ce:	4b57      	ldr	r3, [pc, #348]	; (8003a2c <ai_platform_network_init+0x1d0>)
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d00d      	beq.n	80038f0 <ai_platform_network_init+0x94>
 80038d4:	e7fe      	b.n	80038d4 <ai_platform_network_init+0x78>
 80038d6:	4a56      	ldr	r2, [pc, #344]	; (8003a30 <ai_platform_network_init+0x1d4>)
 80038d8:	2301      	movs	r3, #1
 80038da:	6093      	str	r3, [r2, #8]
 80038dc:	6893      	ldr	r3, [r2, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1fc      	bne.n	80038dc <ai_platform_network_init+0x80>
 80038e2:	4b51      	ldr	r3, [pc, #324]	; (8003a28 <ai_platform_network_init+0x1cc>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <ai_platform_network_init+0x1d0>)
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d000      	beq.n	80038f0 <ai_platform_network_init+0x94>
 80038ee:	e7fe      	b.n	80038ee <ai_platform_network_init+0x92>
 80038f0:	f7ff fc88 	bl	8003204 <_ai_platform_release_crc>
 80038f4:	2600      	movs	r6, #0
 80038f6:	4630      	mov	r0, r6
 80038f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038fc:	4a4c      	ldr	r2, [pc, #304]	; (8003a30 <ai_platform_network_init+0x1d4>)
 80038fe:	2301      	movs	r3, #1
 8003900:	6093      	str	r3, [r2, #8]
 8003902:	6893      	ldr	r3, [r2, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1fc      	bne.n	8003902 <ai_platform_network_init+0xa6>
 8003908:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <ai_platform_network_init+0x1cc>)
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <ai_platform_network_init+0x1d0>)
 8003910:	429a      	cmp	r2, r3
 8003912:	d11c      	bne.n	800394e <ai_platform_network_init+0xf2>
 8003914:	f7ff fc76 	bl	8003204 <_ai_platform_release_crc>
 8003918:	2e00      	cmp	r6, #0
 800391a:	d06f      	beq.n	80039fc <ai_platform_network_init+0x1a0>
 800391c:	4b45      	ldr	r3, [pc, #276]	; (8003a34 <ai_platform_network_init+0x1d8>)
 800391e:	6832      	ldr	r2, [r6, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d115      	bne.n	8003950 <ai_platform_network_init+0xf4>
 8003924:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8003928:	6933      	ldr	r3, [r6, #16]
 800392a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800392e:	89f7      	ldrh	r7, [r6, #14]
 8003930:	62a3      	str	r3, [r4, #40]	; 0x28
 8003932:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8003936:	2303      	movs	r3, #3
 8003938:	84e7      	strh	r7, [r4, #38]	; 0x26
 800393a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800393e:	60e3      	str	r3, [r4, #12]
 8003940:	4620      	mov	r0, r4
 8003942:	4626      	mov	r6, r4
 8003944:	f000 ffe2 	bl	800490c <ai_layers_init_all>
 8003948:	4630      	mov	r0, r6
 800394a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800394e:	e7fe      	b.n	800394e <ai_platform_network_init+0xf2>
 8003950:	2101      	movs	r1, #1
 8003952:	4630      	mov	r0, r6
 8003954:	4635      	mov	r5, r6
 8003956:	6876      	ldr	r6, [r6, #4]
 8003958:	f7ff fc14 	bl	8003184 <ai_buffer_get_size>
 800395c:	f105 081c 	add.w	r8, r5, #28
 8003960:	4681      	mov	r9, r0
 8003962:	2101      	movs	r1, #1
 8003964:	4640      	mov	r0, r8
 8003966:	6a2f      	ldr	r7, [r5, #32]
 8003968:	f7ff fc0c 	bl	8003184 <ai_buffer_get_size>
 800396c:	f1b9 0f00 	cmp.w	r9, #0
 8003970:	d025      	beq.n	80039be <ai_platform_network_init+0x162>
 8003972:	2201      	movs	r2, #1
 8003974:	4696      	mov	lr, r2
 8003976:	bb30      	cbnz	r0, 80039c6 <ai_platform_network_init+0x16a>
 8003978:	4680      	mov	r8, r0
 800397a:	4607      	mov	r7, r0
 800397c:	b376      	cbz	r6, 80039dc <ai_platform_network_init+0x180>
 800397e:	8be3      	ldrh	r3, [r4, #30]
 8003980:	4573      	cmp	r3, lr
 8003982:	d323      	bcc.n	80039cc <ai_platform_network_init+0x170>
 8003984:	b142      	cbz	r2, 8003998 <ai_platform_network_init+0x13c>
 8003986:	46ac      	mov	ip, r5
 8003988:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800398c:	6a25      	ldr	r5, [r4, #32]
 800398e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003990:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003994:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003998:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800399a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800399e:	2600      	movs	r6, #0
 80039a0:	42bb      	cmp	r3, r7
 80039a2:	83a6      	strh	r6, [r4, #28]
 80039a4:	d323      	bcc.n	80039ee <ai_platform_network_init+0x192>
 80039a6:	b37f      	cbz	r7, 8003a08 <ai_platform_network_init+0x1ac>
 80039a8:	46c4      	mov	ip, r8
 80039aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80039ae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80039b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039b2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80039b6:	46b6      	mov	lr, r6
 80039b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80039bc:	e7bb      	b.n	8003936 <ai_platform_network_init+0xda>
 80039be:	464a      	mov	r2, r9
 80039c0:	46ce      	mov	lr, r9
 80039c2:	464d      	mov	r5, r9
 80039c4:	e7d7      	b.n	8003976 <ai_platform_network_init+0x11a>
 80039c6:	b30f      	cbz	r7, 8003a0c <ai_platform_network_init+0x1b0>
 80039c8:	2701      	movs	r7, #1
 80039ca:	e7d7      	b.n	800397c <ai_platform_network_init+0x120>
 80039cc:	2212      	movs	r2, #18
 80039ce:	2116      	movs	r1, #22
 80039d0:	f104 0010 	add.w	r0, r4, #16
 80039d4:	f000 fb40 	bl	8004058 <core_set_error>
 80039d8:	2600      	movs	r6, #0
 80039da:	e78c      	b.n	80038f6 <ai_platform_network_init+0x9a>
 80039dc:	f1b9 0f00 	cmp.w	r9, #0
 80039e0:	d0cd      	beq.n	800397e <ai_platform_network_init+0x122>
 80039e2:	2110      	movs	r1, #16
 80039e4:	2212      	movs	r2, #18
 80039e6:	1860      	adds	r0, r4, r1
 80039e8:	f000 fb36 	bl	8004058 <core_set_error>
 80039ec:	e783      	b.n	80038f6 <ai_platform_network_init+0x9a>
 80039ee:	2213      	movs	r2, #19
 80039f0:	2116      	movs	r1, #22
 80039f2:	f104 0010 	add.w	r0, r4, #16
 80039f6:	f000 fb2f 	bl	8004058 <core_set_error>
 80039fa:	e77c      	b.n	80038f6 <ai_platform_network_init+0x9a>
 80039fc:	2110      	movs	r1, #16
 80039fe:	2211      	movs	r2, #17
 8003a00:	1860      	adds	r0, r4, r1
 8003a02:	f000 fb29 	bl	8004058 <core_set_error>
 8003a06:	e776      	b.n	80038f6 <ai_platform_network_init+0x9a>
 8003a08:	46be      	mov	lr, r7
 8003a0a:	e794      	b.n	8003936 <ai_platform_network_init+0xda>
 8003a0c:	2110      	movs	r1, #16
 8003a0e:	2213      	movs	r2, #19
 8003a10:	1860      	adds	r0, r4, r1
 8003a12:	f000 fb21 	bl	8004058 <core_set_error>
 8003a16:	463e      	mov	r6, r7
 8003a18:	e76d      	b.n	80038f6 <ai_platform_network_init+0x9a>
 8003a1a:	bf00      	nop
 8003a1c:	a1c00100 	.word	0xa1c00100
 8003a20:	e0042000 	.word	0xe0042000
 8003a24:	58024000 	.word	0x58024000
 8003a28:	f407a5c2 	.word	0xf407a5c2
 8003a2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003a30:	40023000 	.word	0x40023000
 8003a34:	a1facade 	.word	0xa1facade

08003a38 <ai_platform_network_post_init>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	b1f0      	cbz	r0, 8003a7a <ai_platform_network_post_init+0x42>
 8003a3c:	4b3c      	ldr	r3, [pc, #240]	; (8003b30 <ai_platform_network_post_init+0xf8>)
 8003a3e:	6802      	ldr	r2, [r0, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	4604      	mov	r4, r0
 8003a44:	d119      	bne.n	8003a7a <ai_platform_network_post_init+0x42>
 8003a46:	f7ff fbdb 	bl	8003200 <_ai_platform_acquire_crc>
 8003a4a:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <ai_platform_network_post_init+0xfc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a56:	d03b      	beq.n	8003ad0 <ai_platform_network_post_init+0x98>
 8003a58:	4a37      	ldr	r2, [pc, #220]	; (8003b38 <ai_platform_network_post_init+0x100>)
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a60:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1fb      	bne.n	8003a60 <ai_platform_network_post_init+0x28>
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <ai_platform_network_post_init+0x104>)
 8003a6a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003a6e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003a72:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <ai_platform_network_post_init+0x108>)
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d037      	beq.n	8003ae8 <ai_platform_network_post_init+0xb0>
 8003a78:	e7fe      	b.n	8003a78 <ai_platform_network_post_init+0x40>
 8003a7a:	f7ff fbc1 	bl	8003200 <_ai_platform_acquire_crc>
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <ai_platform_network_post_init+0xfc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8a:	d010      	beq.n	8003aae <ai_platform_network_post_init+0x76>
 8003a8c:	4a2a      	ldr	r2, [pc, #168]	; (8003b38 <ai_platform_network_post_init+0x100>)
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003a94:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1fb      	bne.n	8003a94 <ai_platform_network_post_init+0x5c>
 8003a9c:	4b27      	ldr	r3, [pc, #156]	; (8003b3c <ai_platform_network_post_init+0x104>)
 8003a9e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003aa2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <ai_platform_network_post_init+0x108>)
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d00d      	beq.n	8003ac8 <ai_platform_network_post_init+0x90>
 8003aac:	e7fe      	b.n	8003aac <ai_platform_network_post_init+0x74>
 8003aae:	4a25      	ldr	r2, [pc, #148]	; (8003b44 <ai_platform_network_post_init+0x10c>)
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	6093      	str	r3, [r2, #8]
 8003ab4:	6893      	ldr	r3, [r2, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1fc      	bne.n	8003ab4 <ai_platform_network_post_init+0x7c>
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <ai_platform_network_post_init+0x104>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <ai_platform_network_post_init+0x108>)
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d000      	beq.n	8003ac8 <ai_platform_network_post_init+0x90>
 8003ac6:	e7fe      	b.n	8003ac6 <ai_platform_network_post_init+0x8e>
 8003ac8:	f7ff fb9c 	bl	8003204 <_ai_platform_release_crc>
 8003acc:	2000      	movs	r0, #0
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <ai_platform_network_post_init+0x10c>)
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	6093      	str	r3, [r2, #8]
 8003ad6:	6893      	ldr	r3, [r2, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1fc      	bne.n	8003ad6 <ai_platform_network_post_init+0x9e>
 8003adc:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <ai_platform_network_post_init+0x104>)
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <ai_platform_network_post_init+0x108>)
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d11a      	bne.n	8003b1e <ai_platform_network_post_init+0xe6>
 8003ae8:	f7ff fb8c 	bl	8003204 <_ai_platform_release_crc>
 8003aec:	68e3      	ldr	r3, [r4, #12]
 8003aee:	f013 0502 	ands.w	r5, r3, #2
 8003af2:	d015      	beq.n	8003b20 <ai_platform_network_post_init+0xe8>
 8003af4:	4620      	mov	r0, r4
 8003af6:	f000 ff17 	bl	8004928 <ai_layers_post_init_all>
 8003afa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003afc:	b16b      	cbz	r3, 8003b1a <ai_platform_network_post_init+0xe2>
 8003afe:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003b00:	e007      	b.n	8003b12 <ai_platform_network_post_init+0xda>
 8003b02:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8003b06:	4798      	blx	r3
 8003b08:	692b      	ldr	r3, [r5, #16]
 8003b0a:	42ab      	cmp	r3, r5
 8003b0c:	d005      	beq.n	8003b1a <ai_platform_network_post_init+0xe2>
 8003b0e:	b123      	cbz	r3, 8003b1a <ai_platform_network_post_init+0xe2>
 8003b10:	461d      	mov	r5, r3
 8003b12:	4629      	mov	r1, r5
 8003b14:	2000      	movs	r0, #0
 8003b16:	2d00      	cmp	r5, #0
 8003b18:	d1f3      	bne.n	8003b02 <ai_platform_network_post_init+0xca>
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	bd38      	pop	{r3, r4, r5, pc}
 8003b1e:	e7fe      	b.n	8003b1e <ai_platform_network_post_init+0xe6>
 8003b20:	2210      	movs	r2, #16
 8003b22:	2111      	movs	r1, #17
 8003b24:	18a0      	adds	r0, r4, r2
 8003b26:	f000 fa97 	bl	8004058 <core_set_error>
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	bd38      	pop	{r3, r4, r5, pc}
 8003b2e:	bf00      	nop
 8003b30:	a1c00100 	.word	0xa1c00100
 8003b34:	e0042000 	.word	0xe0042000
 8003b38:	58024000 	.word	0x58024000
 8003b3c:	f407a5c2 	.word	0xf407a5c2
 8003b40:	b5e8b5cd 	.word	0xb5e8b5cd
 8003b44:	40023000 	.word	0x40023000

08003b48 <ai_platform_network_process>:
 8003b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	460e      	mov	r6, r1
 8003b4e:	b085      	sub	sp, #20
 8003b50:	4693      	mov	fp, r2
 8003b52:	4605      	mov	r5, r0
 8003b54:	b120      	cbz	r0, 8003b60 <ai_platform_network_process+0x18>
 8003b56:	4bb8      	ldr	r3, [pc, #736]	; (8003e38 <ai_platform_network_process+0x2f0>)
 8003b58:	6802      	ldr	r2, [r0, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	bf18      	it	ne
 8003b5e:	2500      	movne	r5, #0
 8003b60:	f7ff fb4e 	bl	8003200 <_ai_platform_acquire_crc>
 8003b64:	4bb5      	ldr	r3, [pc, #724]	; (8003e3c <ai_platform_network_process+0x2f4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b70:	d010      	beq.n	8003b94 <ai_platform_network_process+0x4c>
 8003b72:	4ab3      	ldr	r2, [pc, #716]	; (8003e40 <ai_platform_network_process+0x2f8>)
 8003b74:	2301      	movs	r3, #1
 8003b76:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b7a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1fb      	bne.n	8003b7a <ai_platform_network_process+0x32>
 8003b82:	4bb0      	ldr	r3, [pc, #704]	; (8003e44 <ai_platform_network_process+0x2fc>)
 8003b84:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003b88:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b8c:	4bae      	ldr	r3, [pc, #696]	; (8003e48 <ai_platform_network_process+0x300>)
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d00d      	beq.n	8003bae <ai_platform_network_process+0x66>
 8003b92:	e7fe      	b.n	8003b92 <ai_platform_network_process+0x4a>
 8003b94:	4aad      	ldr	r2, [pc, #692]	; (8003e4c <ai_platform_network_process+0x304>)
 8003b96:	2301      	movs	r3, #1
 8003b98:	6093      	str	r3, [r2, #8]
 8003b9a:	6893      	ldr	r3, [r2, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1fc      	bne.n	8003b9a <ai_platform_network_process+0x52>
 8003ba0:	4ba8      	ldr	r3, [pc, #672]	; (8003e44 <ai_platform_network_process+0x2fc>)
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	4ba8      	ldr	r3, [pc, #672]	; (8003e48 <ai_platform_network_process+0x300>)
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	f040 812c 	bne.w	8003e06 <ai_platform_network_process+0x2be>
 8003bae:	f7ff fb29 	bl	8003204 <_ai_platform_release_crc>
 8003bb2:	2d00      	cmp	r5, #0
 8003bb4:	f000 8154 	beq.w	8003e60 <ai_platform_network_process+0x318>
 8003bb8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8124 	beq.w	8003e08 <ai_platform_network_process+0x2c0>
 8003bc0:	68eb      	ldr	r3, [r5, #12]
 8003bc2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2700      	movs	r7, #0
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	616f      	str	r7, [r5, #20]
 8003bd0:	f040 813e 	bne.w	8003e50 <ai_platform_network_process+0x308>
 8003bd4:	2e00      	cmp	r6, #0
 8003bd6:	f000 811d 	beq.w	8003e14 <ai_platform_network_process+0x2cc>
 8003bda:	f1ba 0f00 	cmp.w	sl, #0
 8003bde:	f000 8119 	beq.w	8003e14 <ai_platform_network_process+0x2cc>
 8003be2:	f8ba 3000 	ldrh.w	r3, [sl]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8114 	beq.w	8003e14 <ai_platform_network_process+0x2cc>
 8003bec:	69b3      	ldr	r3, [r6, #24]
 8003bee:	f8cd b00c 	str.w	fp, [sp, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8003bf8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d072      	beq.n	8003ce6 <ai_platform_network_process+0x19e>
 8003c00:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003c04:	2c00      	cmp	r4, #0
 8003c06:	d06e      	beq.n	8003ce6 <ai_platform_network_process+0x19e>
 8003c08:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003c0c:	f8d3 9000 	ldr.w	r9, [r3]
 8003c10:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8003c14:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003c18:	f000 81e0 	beq.w	8003fdc <ai_platform_network_process+0x494>
 8003c1c:	69a3      	ldr	r3, [r4, #24]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	4630      	mov	r0, r6
 8003c22:	685d      	ldr	r5, [r3, #4]
 8003c24:	f7ff faae 	bl	8003184 <ai_buffer_get_size>
 8003c28:	4285      	cmp	r5, r0
 8003c2a:	f0c0 811b 	bcc.w	8003e64 <ai_platform_network_process+0x31c>
 8003c2e:	68e0      	ldr	r0, [r4, #12]
 8003c30:	69b1      	ldr	r1, [r6, #24]
 8003c32:	68c2      	ldr	r2, [r0, #12]
 8003c34:	68cb      	ldr	r3, [r1, #12]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	f040 8114 	bne.w	8003e64 <ai_platform_network_process+0x31c>
 8003c3c:	6882      	ldr	r2, [r0, #8]
 8003c3e:	688b      	ldr	r3, [r1, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f040 810f 	bne.w	8003e64 <ai_platform_network_process+0x31c>
 8003c46:	6842      	ldr	r2, [r0, #4]
 8003c48:	684b      	ldr	r3, [r1, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	f040 810a 	bne.w	8003e64 <ai_platform_network_process+0x31c>
 8003c50:	69a3      	ldr	r3, [r4, #24]
 8003c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c56:	f001 f89b 	bl	8004d90 <ai_array_get_data_byte_size>
 8003c5a:	4605      	mov	r5, r0
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f000 ffeb 	bl	8004c38 <get_tensor_byte_size>
 8003c62:	4285      	cmp	r5, r0
 8003c64:	f0c0 80fe 	bcc.w	8003e64 <ai_platform_network_process+0x31c>
 8003c68:	69a3      	ldr	r3, [r4, #24]
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	f000 fffc 	bl	8004c68 <ai_array_to_buffer_fmt>
 8003c70:	6833      	ldr	r3, [r6, #0]
 8003c72:	4058      	eors	r0, r3
 8003c74:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003c78:	f040 81bb 	bne.w	8003ff2 <ai_platform_network_process+0x4aa>
 8003c7c:	6873      	ldr	r3, [r6, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 81ae 	beq.w	8003fe0 <ai_platform_network_process+0x498>
 8003c84:	69b3      	ldr	r3, [r6, #24]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 819e 	beq.w	8003fca <ai_platform_network_process+0x482>
 8003c8e:	9a01      	ldr	r2, [sp, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	bf38      	it	cc
 8003c94:	461a      	movcc	r2, r3
 8003c96:	4620      	mov	r0, r4
 8003c98:	9201      	str	r2, [sp, #4]
 8003c9a:	f000 ffcd 	bl	8004c38 <get_tensor_byte_size>
 8003c9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ca2:	69b3      	ldr	r3, [r6, #24]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	fb00 f303 	mul.w	r3, r0, r3
 8003caa:	f8c8 300c 	str.w	r3, [r8, #12]
 8003cae:	6871      	ldr	r1, [r6, #4]
 8003cb0:	f8c8 1004 	str.w	r1, [r8, #4]
 8003cb4:	440b      	add	r3, r1
 8003cb6:	f849 300b 	str.w	r3, [r9, fp]
 8003cba:	69a0      	ldr	r0, [r4, #24]
 8003cbc:	6803      	ldr	r3, [r0, #0]
 8003cbe:	009a      	lsls	r2, r3, #2
 8003cc0:	f107 0701 	add.w	r7, r7, #1
 8003cc4:	f106 061c 	add.w	r6, r6, #28
 8003cc8:	f100 80af 	bmi.w	8003e2a <ai_platform_network_process+0x2e2>
 8003ccc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	4419      	add	r1, r3
 8003cd4:	6081      	str	r1, [r0, #8]
 8003cd6:	69a3      	ldr	r3, [r4, #24]
 8003cd8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	f8ba 3000 	ldrh.w	r3, [sl]
 8003ce2:	42bb      	cmp	r3, r7
 8003ce4:	d888      	bhi.n	8003bf8 <ai_platform_network_process+0xb0>
 8003ce6:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8003cea:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8003cec:	f1bb 0f00 	cmp.w	fp, #0
 8003cf0:	f000 8188 	beq.w	8004004 <ai_platform_network_process+0x4bc>
 8003cf4:	2a01      	cmp	r2, #1
 8003cf6:	f240 8160 	bls.w	8003fba <ai_platform_network_process+0x472>
 8003cfa:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8003cfe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8159 	beq.w	8003fba <ai_platform_network_process+0x472>
 8003d08:	465e      	mov	r6, fp
 8003d0a:	2700      	movs	r7, #0
 8003d0c:	462c      	mov	r4, r5
 8003d0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80b4 	beq.w	8003e80 <ai_platform_network_process+0x338>
 8003d18:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8003d1c:	2d00      	cmp	r5, #0
 8003d1e:	f000 80af 	beq.w	8003e80 <ai_platform_network_process+0x338>
 8003d22:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003d26:	f8d3 8000 	ldr.w	r8, [r3]
 8003d2a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8003d2e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003d32:	f000 8173 	beq.w	800401c <ai_platform_network_process+0x4d4>
 8003d36:	69ab      	ldr	r3, [r5, #24]
 8003d38:	2101      	movs	r1, #1
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	9302      	str	r3, [sp, #8]
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff fa20 	bl	8003184 <ai_buffer_get_size>
 8003d44:	9b02      	ldr	r3, [sp, #8]
 8003d46:	4283      	cmp	r3, r0
 8003d48:	f0c0 8136 	bcc.w	8003fb8 <ai_platform_network_process+0x470>
 8003d4c:	68e8      	ldr	r0, [r5, #12]
 8003d4e:	69b1      	ldr	r1, [r6, #24]
 8003d50:	68c2      	ldr	r2, [r0, #12]
 8003d52:	68cb      	ldr	r3, [r1, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	f040 812f 	bne.w	8003fb8 <ai_platform_network_process+0x470>
 8003d5a:	6882      	ldr	r2, [r0, #8]
 8003d5c:	688b      	ldr	r3, [r1, #8]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	f040 812a 	bne.w	8003fb8 <ai_platform_network_process+0x470>
 8003d64:	6842      	ldr	r2, [r0, #4]
 8003d66:	684b      	ldr	r3, [r1, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	f040 8125 	bne.w	8003fb8 <ai_platform_network_process+0x470>
 8003d6e:	69ab      	ldr	r3, [r5, #24]
 8003d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d74:	f001 f80c 	bl	8004d90 <ai_array_get_data_byte_size>
 8003d78:	9002      	str	r0, [sp, #8]
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	f000 ff5c 	bl	8004c38 <get_tensor_byte_size>
 8003d80:	9b02      	ldr	r3, [sp, #8]
 8003d82:	4283      	cmp	r3, r0
 8003d84:	f0c0 8118 	bcc.w	8003fb8 <ai_platform_network_process+0x470>
 8003d88:	69ab      	ldr	r3, [r5, #24]
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	f000 ff6c 	bl	8004c68 <ai_array_to_buffer_fmt>
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	4058      	eors	r0, r3
 8003d94:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003d98:	f040 8138 	bne.w	800400c <ai_platform_network_process+0x4c4>
 8003d9c:	6873      	ldr	r3, [r6, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 814f 	beq.w	8004042 <ai_platform_network_process+0x4fa>
 8003da4:	69b3      	ldr	r3, [r6, #24]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 8141 	beq.w	8004030 <ai_platform_network_process+0x4e8>
 8003dae:	9a01      	ldr	r2, [sp, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	bf38      	it	cc
 8003db4:	461a      	movcc	r2, r3
 8003db6:	4628      	mov	r0, r5
 8003db8:	9201      	str	r2, [sp, #4]
 8003dba:	f000 ff3d 	bl	8004c38 <get_tensor_byte_size>
 8003dbe:	f8ca 0008 	str.w	r0, [sl, #8]
 8003dc2:	69b3      	ldr	r3, [r6, #24]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	fb00 f303 	mul.w	r3, r0, r3
 8003dca:	f8ca 300c 	str.w	r3, [sl, #12]
 8003dce:	6871      	ldr	r1, [r6, #4]
 8003dd0:	f8ca 1004 	str.w	r1, [sl, #4]
 8003dd4:	440b      	add	r3, r1
 8003dd6:	f848 300b 	str.w	r3, [r8, fp]
 8003dda:	69a8      	ldr	r0, [r5, #24]
 8003ddc:	6803      	ldr	r3, [r0, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	f107 0701 	add.w	r7, r7, #1
 8003de4:	f106 061c 	add.w	r6, r6, #28
 8003de8:	d445      	bmi.n	8003e76 <ai_platform_network_process+0x32e>
 8003dea:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	4419      	add	r1, r3
 8003df2:	6081      	str	r1, [r0, #8]
 8003df4:	69ab      	ldr	r3, [r5, #24]
 8003df6:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
 8003dfc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003e00:	429f      	cmp	r7, r3
 8003e02:	d384      	bcc.n	8003d0e <ai_platform_network_process+0x1c6>
 8003e04:	e03c      	b.n	8003e80 <ai_platform_network_process+0x338>
 8003e06:	e7fe      	b.n	8003e06 <ai_platform_network_process+0x2be>
 8003e08:	68ea      	ldr	r2, [r5, #12]
 8003e0a:	616b      	str	r3, [r5, #20]
 8003e0c:	f002 0203 	and.w	r2, r2, #3
 8003e10:	2a03      	cmp	r2, #3
 8003e12:	d11d      	bne.n	8003e50 <ai_platform_network_process+0x308>
 8003e14:	2217      	movs	r2, #23
 8003e16:	2112      	movs	r1, #18
 8003e18:	f105 0010 	add.w	r0, r5, #16
 8003e1c:	f000 f91c 	bl	8004058 <core_set_error>
 8003e20:	2400      	movs	r4, #0
 8003e22:	4620      	mov	r0, r4
 8003e24:	b005      	add	sp, #20
 8003e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e2a:	f8ba 3000 	ldrh.w	r3, [sl]
 8003e2e:	429f      	cmp	r7, r3
 8003e30:	f4ff aee2 	bcc.w	8003bf8 <ai_platform_network_process+0xb0>
 8003e34:	e757      	b.n	8003ce6 <ai_platform_network_process+0x19e>
 8003e36:	bf00      	nop
 8003e38:	a1c00100 	.word	0xa1c00100
 8003e3c:	e0042000 	.word	0xe0042000
 8003e40:	58024000 	.word	0x58024000
 8003e44:	f407a5c2 	.word	0xf407a5c2
 8003e48:	b5e8b5cd 	.word	0xb5e8b5cd
 8003e4c:	40023000 	.word	0x40023000
 8003e50:	2230      	movs	r2, #48	; 0x30
 8003e52:	2111      	movs	r1, #17
 8003e54:	f105 0010 	add.w	r0, r5, #16
 8003e58:	f000 f8fe 	bl	8004058 <core_set_error>
 8003e5c:	2400      	movs	r4, #0
 8003e5e:	e7e0      	b.n	8003e22 <ai_platform_network_process+0x2da>
 8003e60:	462c      	mov	r4, r5
 8003e62:	e7de      	b.n	8003e22 <ai_platform_network_process+0x2da>
 8003e64:	9d02      	ldr	r5, [sp, #8]
 8003e66:	2218      	movs	r2, #24
 8003e68:	2112      	movs	r1, #18
 8003e6a:	f105 0010 	add.w	r0, r5, #16
 8003e6e:	f000 f8f3 	bl	8004058 <core_set_error>
 8003e72:	2400      	movs	r4, #0
 8003e74:	e7d5      	b.n	8003e22 <ai_platform_network_process+0x2da>
 8003e76:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003e7a:	429f      	cmp	r7, r3
 8003e7c:	f4ff af47 	bcc.w	8003d0e <ai_platform_network_process+0x1c6>
 8003e80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003e84:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003e86:	82a3      	strh	r3, [r4, #20]
 8003e88:	4625      	mov	r5, r4
 8003e8a:	2a00      	cmp	r2, #0
 8003e8c:	f040 808e 	bne.w	8003fac <ai_platform_network_process+0x464>
 8003e90:	4616      	mov	r6, r2
 8003e92:	4617      	mov	r7, r2
 8003e94:	8aec      	ldrh	r4, [r5, #22]
 8003e96:	429c      	cmp	r4, r3
 8003e98:	bf38      	it	cc
 8003e9a:	46ab      	movcc	fp, r5
 8003e9c:	d2c1      	bcs.n	8003e22 <ai_platform_network_process+0x2da>
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	d030      	beq.n	8003f04 <ai_platform_network_process+0x3bc>
 8003ea2:	f04f 0800 	mov.w	r8, #0
 8003ea6:	e014      	b.n	8003ed2 <ai_platform_network_process+0x38a>
 8003ea8:	6882      	ldr	r2, [r0, #8]
 8003eaa:	68c5      	ldr	r5, [r0, #12]
 8003eac:	6863      	ldr	r3, [r4, #4]
 8003eae:	1b52      	subs	r2, r2, r5
 8003eb0:	4413      	add	r3, r2
 8003eb2:	6083      	str	r3, [r0, #8]
 8003eb4:	698b      	ldr	r3, [r1, #24]
 8003eb6:	6862      	ldr	r2, [r4, #4]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8003ebe:	f859 200a 	ldr.w	r2, [r9, sl]
 8003ec2:	440b      	add	r3, r1
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	bf24      	itt	cs
 8003ec8:	68e3      	ldrcs	r3, [r4, #12]
 8003eca:	1ad3      	subcs	r3, r2, r3
 8003ecc:	6063      	str	r3, [r4, #4]
 8003ece:	f108 0801 	add.w	r8, r8, #1
 8003ed2:	8833      	ldrh	r3, [r6, #0]
 8003ed4:	4543      	cmp	r3, r8
 8003ed6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003eda:	d913      	bls.n	8003f04 <ai_platform_network_process+0x3bc>
 8003edc:	6873      	ldr	r3, [r6, #4]
 8003ede:	b18b      	cbz	r3, 8003f04 <ai_platform_network_process+0x3bc>
 8003ee0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003ee4:	b171      	cbz	r1, 8003f04 <ai_platform_network_process+0x3bc>
 8003ee6:	6988      	ldr	r0, [r1, #24]
 8003ee8:	68b2      	ldr	r2, [r6, #8]
 8003eea:	6803      	ldr	r3, [r0, #0]
 8003eec:	f8d2 9000 	ldr.w	r9, [r2]
 8003ef0:	009d      	lsls	r5, r3, #2
 8003ef2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8003ef6:	d5d7      	bpl.n	8003ea8 <ai_platform_network_process+0x360>
 8003ef8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8003efc:	6880      	ldr	r0, [r0, #8]
 8003efe:	f000 ff83 	bl	8004e08 <memcpy>
 8003f02:	e7da      	b.n	8003eba <ai_platform_network_process+0x372>
 8003f04:	4658      	mov	r0, fp
 8003f06:	f000 fd23 	bl	8004950 <ai_layers_forward_all>
 8003f0a:	2f00      	cmp	r7, #0
 8003f0c:	d03f      	beq.n	8003f8e <ai_platform_network_process+0x446>
 8003f0e:	2400      	movs	r4, #0
 8003f10:	e016      	b.n	8003f40 <ai_platform_network_process+0x3f8>
 8003f12:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8003f16:	f859 100a 	ldr.w	r1, [r9, sl]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	428b      	cmp	r3, r1
 8003f1e:	bf24      	itt	cs
 8003f20:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003f24:	1acb      	subcs	r3, r1, r3
 8003f26:	f8c8 3004 	str.w	r3, [r8, #4]
 8003f2a:	6981      	ldr	r1, [r0, #24]
 8003f2c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003f30:	1b52      	subs	r2, r2, r5
 8003f32:	4413      	add	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
 8003f36:	6983      	ldr	r3, [r0, #24]
 8003f38:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	3401      	adds	r4, #1
 8003f40:	883b      	ldrh	r3, [r7, #0]
 8003f42:	42a3      	cmp	r3, r4
 8003f44:	d923      	bls.n	8003f8e <ai_platform_network_process+0x446>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	b30b      	cbz	r3, 8003f8e <ai_platform_network_process+0x446>
 8003f4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f4e:	b1f0      	cbz	r0, 8003f8e <ai_platform_network_process+0x446>
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	6983      	ldr	r3, [r0, #24]
 8003f54:	f8d2 9000 	ldr.w	r9, [r2]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	0092      	lsls	r2, r2, #2
 8003f5c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8003f60:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8003f64:	d5d5      	bpl.n	8003f12 <ai_platform_network_process+0x3ca>
 8003f66:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8003f6a:	6899      	ldr	r1, [r3, #8]
 8003f6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003f70:	f000 ff4a 	bl	8004e08 <memcpy>
 8003f74:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8003f78:	f859 200a 	ldr.w	r2, [r9, sl]
 8003f7c:	440b      	add	r3, r1
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	bf24      	itt	cs
 8003f82:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003f86:	1ad3      	subcs	r3, r2, r3
 8003f88:	f8c8 3004 	str.w	r3, [r8, #4]
 8003f8c:	e7d7      	b.n	8003f3e <ai_platform_network_process+0x3f6>
 8003f8e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8003f92:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8003f96:	3401      	adds	r4, #1
 8003f98:	b2a4      	uxth	r4, r4
 8003f9a:	42a3      	cmp	r3, r4
 8003f9c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8003fa0:	f63f af7d 	bhi.w	8003e9e <ai_platform_network_process+0x356>
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	b005      	add	sp, #20
 8003fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fac:	2a01      	cmp	r2, #1
 8003fae:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8003fb0:	d03c      	beq.n	800402c <ai_platform_network_process+0x4e4>
 8003fb2:	f106 070c 	add.w	r7, r6, #12
 8003fb6:	e76d      	b.n	8003e94 <ai_platform_network_process+0x34c>
 8003fb8:	4625      	mov	r5, r4
 8003fba:	2218      	movs	r2, #24
 8003fbc:	2113      	movs	r1, #19
 8003fbe:	f105 0010 	add.w	r0, r5, #16
 8003fc2:	f000 f849 	bl	8004058 <core_set_error>
 8003fc6:	2400      	movs	r4, #0
 8003fc8:	e72b      	b.n	8003e22 <ai_platform_network_process+0x2da>
 8003fca:	9d02      	ldr	r5, [sp, #8]
 8003fcc:	4604      	mov	r4, r0
 8003fce:	2221      	movs	r2, #33	; 0x21
 8003fd0:	2112      	movs	r1, #18
 8003fd2:	f105 0010 	add.w	r0, r5, #16
 8003fd6:	f000 f83f 	bl	8004058 <core_set_error>
 8003fda:	e722      	b.n	8003e22 <ai_platform_network_process+0x2da>
 8003fdc:	9d02      	ldr	r5, [sp, #8]
 8003fde:	e719      	b.n	8003e14 <ai_platform_network_process+0x2cc>
 8003fe0:	9d02      	ldr	r5, [sp, #8]
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	2217      	movs	r2, #23
 8003fe6:	2112      	movs	r1, #18
 8003fe8:	f105 0010 	add.w	r0, r5, #16
 8003fec:	f000 f834 	bl	8004058 <core_set_error>
 8003ff0:	e717      	b.n	8003e22 <ai_platform_network_process+0x2da>
 8003ff2:	9d02      	ldr	r5, [sp, #8]
 8003ff4:	2219      	movs	r2, #25
 8003ff6:	2112      	movs	r1, #18
 8003ff8:	f105 0010 	add.w	r0, r5, #16
 8003ffc:	f000 f82c 	bl	8004058 <core_set_error>
 8004000:	2400      	movs	r4, #0
 8004002:	e70e      	b.n	8003e22 <ai_platform_network_process+0x2da>
 8004004:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004008:	82ab      	strh	r3, [r5, #20]
 800400a:	e73e      	b.n	8003e8a <ai_platform_network_process+0x342>
 800400c:	f104 0010 	add.w	r0, r4, #16
 8004010:	2219      	movs	r2, #25
 8004012:	2113      	movs	r1, #19
 8004014:	f000 f820 	bl	8004058 <core_set_error>
 8004018:	2400      	movs	r4, #0
 800401a:	e702      	b.n	8003e22 <ai_platform_network_process+0x2da>
 800401c:	f104 0010 	add.w	r0, r4, #16
 8004020:	2217      	movs	r2, #23
 8004022:	2113      	movs	r1, #19
 8004024:	f000 f818 	bl	8004058 <core_set_error>
 8004028:	4654      	mov	r4, sl
 800402a:	e6fa      	b.n	8003e22 <ai_platform_network_process+0x2da>
 800402c:	2700      	movs	r7, #0
 800402e:	e731      	b.n	8003e94 <ai_platform_network_process+0x34c>
 8004030:	4625      	mov	r5, r4
 8004032:	2221      	movs	r2, #33	; 0x21
 8004034:	4604      	mov	r4, r0
 8004036:	2113      	movs	r1, #19
 8004038:	f105 0010 	add.w	r0, r5, #16
 800403c:	f000 f80c 	bl	8004058 <core_set_error>
 8004040:	e6ef      	b.n	8003e22 <ai_platform_network_process+0x2da>
 8004042:	4625      	mov	r5, r4
 8004044:	2217      	movs	r2, #23
 8004046:	4604      	mov	r4, r0
 8004048:	2113      	movs	r1, #19
 800404a:	f105 0010 	add.w	r0, r5, #16
 800404e:	f000 f803 	bl	8004058 <core_set_error>
 8004052:	e6e6      	b.n	8003e22 <ai_platform_network_process+0x2da>

08004054 <core_init>:
 8004054:	2001      	movs	r0, #1
 8004056:	4770      	bx	lr

08004058 <core_set_error>:
 8004058:	4603      	mov	r3, r0
 800405a:	7800      	ldrb	r0, [r0, #0]
 800405c:	b108      	cbz	r0, 8004062 <core_set_error+0xa>
 800405e:	2000      	movs	r0, #0
 8004060:	4770      	bx	lr
 8004062:	7019      	strb	r1, [r3, #0]
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	f362 211f 	bfi	r1, r2, #8, #24
 800406a:	2001      	movs	r0, #1
 800406c:	6019      	str	r1, [r3, #0]
 800406e:	4770      	bx	lr

08004070 <forward_dense>:
 8004070:	6983      	ldr	r3, [r0, #24]
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	2a00      	cmp	r2, #0
 8004076:	f000 8181 	beq.w	800437c <forward_dense+0x30c>
 800407a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800407e:	ed2d 8b02 	vpush	{d8}
 8004082:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8004086:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800408a:	b095      	sub	sp, #84	; 0x54
 800408c:	b105      	cbz	r5, 8004090 <forward_dense+0x20>
 800408e:	682d      	ldr	r5, [r5, #0]
 8004090:	2a01      	cmp	r2, #1
 8004092:	f000 828f 	beq.w	80045b4 <forward_dense+0x544>
 8004096:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800409a:	b106      	cbz	r6, 800409e <forward_dense+0x2e>
 800409c:	6836      	ldr	r6, [r6, #0]
 800409e:	2a02      	cmp	r2, #2
 80040a0:	f000 816e 	beq.w	8004380 <forward_dense+0x310>
 80040a4:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80040a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8274 	beq.w	8004598 <forward_dense+0x528>
 80040b0:	4619      	mov	r1, r3
 80040b2:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80040b6:	6809      	ldr	r1, [r1, #0]
 80040b8:	910d      	str	r1, [sp, #52]	; 0x34
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	f240 826e 	bls.w	800459c <forward_dense+0x52c>
 80040c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c6:	460b      	mov	r3, r1
 80040c8:	68e8      	ldr	r0, [r5, #12]
 80040ca:	68f7      	ldr	r7, [r6, #12]
 80040cc:	6840      	ldr	r0, [r0, #4]
 80040ce:	6999      	ldr	r1, [r3, #24]
 80040d0:	9013      	str	r0, [sp, #76]	; 0x4c
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	680b      	ldr	r3, [r1, #0]
 80040d6:	9012      	str	r0, [sp, #72]	; 0x48
 80040d8:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80040dc:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80040e0:	fb00 f404 	mul.w	r4, r0, r4
 80040e4:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80040e8:	fa4e f000 	asr.w	r0, lr, r0
 80040ec:	2a03      	cmp	r2, #3
 80040ee:	9010      	str	r0, [sp, #64]	; 0x40
 80040f0:	f000 825d 	beq.w	80045ae <forward_dense+0x53e>
 80040f4:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80040f8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80040fc:	2a00      	cmp	r2, #0
 80040fe:	f000 8246 	beq.w	800458e <forward_dense+0x51e>
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	2a00      	cmp	r2, #0
 8004106:	f000 8242 	beq.w	800458e <forward_dense+0x51e>
 800410a:	2b04      	cmp	r3, #4
 800410c:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8004110:	f000 822c 	beq.w	800456c <forward_dense+0x4fc>
 8004114:	2b08      	cmp	r3, #8
 8004116:	f000 8229 	beq.w	800456c <forward_dense+0x4fc>
 800411a:	f04f 0b00 	mov.w	fp, #0
 800411e:	69b2      	ldr	r2, [r6, #24]
 8004120:	69ab      	ldr	r3, [r5, #24]
 8004122:	6891      	ldr	r1, [r2, #8]
 8004124:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	6952      	ldr	r2, [r2, #20]
 800412a:	9106      	str	r1, [sp, #24]
 800412c:	fb07 f404 	mul.w	r4, r7, r4
 8004130:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8004134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004136:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800413a:	4281      	cmp	r1, r0
 800413c:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8004140:	900e      	str	r0, [sp, #56]	; 0x38
 8004142:	940c      	str	r4, [sp, #48]	; 0x30
 8004144:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8004148:	f080 8113 	bcs.w	8004372 <forward_dense+0x302>
 800414c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800414e:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800439c <forward_dense+0x32c>
 8004152:	f021 0201 	bic.w	r2, r1, #1
 8004156:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800415a:	9204      	str	r2, [sp, #16]
 800415c:	f001 0201 	and.w	r2, r1, #1
 8004160:	08c8      	lsrs	r0, r1, #3
 8004162:	9208      	str	r2, [sp, #32]
 8004164:	008a      	lsls	r2, r1, #2
 8004166:	f001 0a07 	and.w	sl, r1, #7
 800416a:	920f      	str	r2, [sp, #60]	; 0x3c
 800416c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8004170:	3320      	adds	r3, #32
 8004172:	465c      	mov	r4, fp
 8004174:	9007      	str	r0, [sp, #28]
 8004176:	46cb      	mov	fp, r9
 8004178:	9205      	str	r2, [sp, #20]
 800417a:	9302      	str	r3, [sp, #8]
 800417c:	46c1      	mov	r9, r8
 800417e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8004182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	9b02      	ldr	r3, [sp, #8]
 800418a:	3b20      	subs	r3, #32
 800418c:	930a      	str	r3, [sp, #40]	; 0x28
 800418e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004190:	b10b      	cbz	r3, 8004196 <forward_dense+0x126>
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2c00      	cmp	r4, #0
 8004198:	f000 81da 	beq.w	8004550 <forward_dense+0x4e0>
 800419c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800419e:	2904      	cmp	r1, #4
 80041a0:	9906      	ldr	r1, [sp, #24]
 80041a2:	f000 80fd 	beq.w	80043a0 <forward_dense+0x330>
 80041a6:	4549      	cmp	r1, r9
 80041a8:	f080 80d2 	bcs.w	8004350 <forward_dense+0x2e0>
 80041ac:	460f      	mov	r7, r1
 80041ae:	9907      	ldr	r1, [sp, #28]
 80041b0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80041b4:	f8dd a014 	ldr.w	sl, [sp, #20]
 80041b8:	1c4e      	adds	r6, r1, #1
 80041ba:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80041be:	4694      	mov	ip, r2
 80041c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80041c2:	468e      	mov	lr, r1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80de 	beq.w	8004386 <forward_dense+0x316>
 80041ca:	ecf3 2a01 	vldmia	r3!, {s5}
 80041ce:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800439c <forward_dense+0x32c>
 80041d2:	f1be 0f00 	cmp.w	lr, #0
 80041d6:	f000 80de 	beq.w	8004396 <forward_dense+0x326>
 80041da:	f10c 0108 	add.w	r1, ip, #8
 80041de:	4640      	mov	r0, r8
 80041e0:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80041e4:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80041e8:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80041ec:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80041f0:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80041f4:	ed10 5a04 	vldr	s10, [r0, #-16]
 80041f8:	ed50 5a03 	vldr	s11, [r0, #-12]
 80041fc:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004200:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004204:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004208:	edd5 7a00 	vldr	s15, [r5]
 800420c:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8004210:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004214:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004218:	ed95 3a00 	vldr	s6, [r5]
 800421c:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8004220:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004224:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004228:	3108      	adds	r1, #8
 800422a:	edd5 3a00 	vldr	s7, [r5]
 800422e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8004232:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004236:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800423a:	3020      	adds	r0, #32
 800423c:	ed95 4a00 	vldr	s8, [r5]
 8004240:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8004244:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004248:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800424c:	edd5 4a00 	vldr	s9, [r5]
 8004250:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8004254:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004258:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800425c:	ed95 5a00 	vldr	s10, [r5]
 8004260:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8004264:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004268:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800426c:	edd5 5a00 	vldr	s11, [r5]
 8004270:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8004274:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004278:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800427c:	428e      	cmp	r6, r1
 800427e:	ed95 6a00 	vldr	s12, [r5]
 8004282:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004286:	ee37 7a27 	vadd.f32	s14, s14, s15
 800428a:	d1a9      	bne.n	80041e0 <forward_dense+0x170>
 800428c:	f1a6 0108 	sub.w	r1, r6, #8
 8004290:	4650      	mov	r0, sl
 8004292:	2a00      	cmp	r2, #0
 8004294:	d04a      	beq.n	800432c <forward_dense+0x2bc>
 8004296:	780d      	ldrb	r5, [r1, #0]
 8004298:	edd0 6a00 	vldr	s13, [r0]
 800429c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042a0:	edd5 7a00 	vldr	s15, [r5]
 80042a4:	2a01      	cmp	r2, #1
 80042a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80042aa:	d03f      	beq.n	800432c <forward_dense+0x2bc>
 80042ac:	784d      	ldrb	r5, [r1, #1]
 80042ae:	edd0 6a01 	vldr	s13, [r0, #4]
 80042b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042b6:	edd5 7a00 	vldr	s15, [r5]
 80042ba:	2a02      	cmp	r2, #2
 80042bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80042c0:	d034      	beq.n	800432c <forward_dense+0x2bc>
 80042c2:	788d      	ldrb	r5, [r1, #2]
 80042c4:	edd0 6a02 	vldr	s13, [r0, #8]
 80042c8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042cc:	edd5 7a00 	vldr	s15, [r5]
 80042d0:	2a03      	cmp	r2, #3
 80042d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80042d6:	d029      	beq.n	800432c <forward_dense+0x2bc>
 80042d8:	78cd      	ldrb	r5, [r1, #3]
 80042da:	edd0 6a03 	vldr	s13, [r0, #12]
 80042de:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042e2:	edd5 7a00 	vldr	s15, [r5]
 80042e6:	2a04      	cmp	r2, #4
 80042e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80042ec:	d01e      	beq.n	800432c <forward_dense+0x2bc>
 80042ee:	790d      	ldrb	r5, [r1, #4]
 80042f0:	edd0 6a04 	vldr	s13, [r0, #16]
 80042f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042f8:	edd5 7a00 	vldr	s15, [r5]
 80042fc:	2a05      	cmp	r2, #5
 80042fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004302:	d013      	beq.n	800432c <forward_dense+0x2bc>
 8004304:	794d      	ldrb	r5, [r1, #5]
 8004306:	edd0 6a05 	vldr	s13, [r0, #20]
 800430a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800430e:	edd5 7a00 	vldr	s15, [r5]
 8004312:	2a06      	cmp	r2, #6
 8004314:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004318:	d008      	beq.n	800432c <forward_dense+0x2bc>
 800431a:	7989      	ldrb	r1, [r1, #6]
 800431c:	edd0 7a06 	vldr	s15, [r0, #24]
 8004320:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004324:	edd1 6a00 	vldr	s13, [r1]
 8004328:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800432c:	44dc      	add	ip, fp
 800432e:	445e      	add	r6, fp
 8004330:	ee32 7a87 	vadd.f32	s14, s5, s14
 8004334:	eca7 7a01 	vstmia	r7!, {s14}
 8004338:	454f      	cmp	r7, r9
 800433a:	f4ff af43 	bcc.w	80041c4 <forward_dense+0x154>
 800433e:	9a06      	ldr	r2, [sp, #24]
 8004340:	eba9 0302 	sub.w	r3, r9, r2
 8004344:	3b01      	subs	r3, #1
 8004346:	f023 0303 	bic.w	r3, r3, #3
 800434a:	3304      	adds	r3, #4
 800434c:	18d3      	adds	r3, r2, r3
 800434e:	9306      	str	r3, [sp, #24]
 8004350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004352:	9a05      	ldr	r2, [sp, #20]
 8004354:	4499      	add	r9, r3
 8004356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004358:	441a      	add	r2, r3
 800435a:	9205      	str	r2, [sp, #20]
 800435c:	9a02      	ldr	r2, [sp, #8]
 800435e:	441a      	add	r2, r3
 8004360:	9202      	str	r2, [sp, #8]
 8004362:	9a04      	ldr	r2, [sp, #16]
 8004364:	441a      	add	r2, r3
 8004366:	9204      	str	r2, [sp, #16]
 8004368:	9b06      	ldr	r3, [sp, #24]
 800436a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800436c:	4293      	cmp	r3, r2
 800436e:	f4ff af08 	bcc.w	8004182 <forward_dense+0x112>
 8004372:	b015      	add	sp, #84	; 0x54
 8004374:	ecbd 8b02 	vpop	{d8}
 8004378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800437c:	6853      	ldr	r3, [r2, #4]
 800437e:	deff      	udf	#255	; 0xff
 8004380:	2300      	movs	r3, #0
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	deff      	udf	#255	; 0xff
 8004386:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800439c <forward_dense+0x32c>
 800438a:	eef0 2a48 	vmov.f32	s5, s16
 800438e:	f1be 0f00 	cmp.w	lr, #0
 8004392:	f47f af22 	bne.w	80041da <forward_dense+0x16a>
 8004396:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004398:	4661      	mov	r1, ip
 800439a:	e77a      	b.n	8004292 <forward_dense+0x222>
 800439c:	00000000 	.word	0x00000000
 80043a0:	4549      	cmp	r1, r9
 80043a2:	d2d5      	bcs.n	8004350 <forward_dense+0x2e0>
 80043a4:	9807      	ldr	r0, [sp, #28]
 80043a6:	9103      	str	r1, [sp, #12]
 80043a8:	9904      	ldr	r1, [sp, #16]
 80043aa:	f100 0c01 	add.w	ip, r0, #1
 80043ae:	3901      	subs	r1, #1
 80043b0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80043b4:	9109      	str	r1, [sp, #36]	; 0x24
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80b2 	beq.w	8004520 <forward_dense+0x4b0>
 80043bc:	9907      	ldr	r1, [sp, #28]
 80043be:	ecf3 2a01 	vldmia	r3!, {s5}
 80043c2:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800439c <forward_dense+0x32c>
 80043c6:	2900      	cmp	r1, #0
 80043c8:	f000 80b2 	beq.w	8004530 <forward_dense+0x4c0>
 80043cc:	9902      	ldr	r1, [sp, #8]
 80043ce:	1d10      	adds	r0, r2, #4
 80043d0:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80043d4:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80043d8:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80043dc:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80043e0:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80043e4:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80043e8:	ed11 5a04 	vldr	s10, [r1, #-16]
 80043ec:	ed51 5a03 	vldr	s11, [r1, #-12]
 80043f0:	ed11 6a02 	vldr	s12, [r1, #-8]
 80043f4:	ed51 6a01 	vldr	s13, [r1, #-4]
 80043f8:	f006 070f 	and.w	r7, r6, #15
 80043fc:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004400:	edd7 7a00 	vldr	s15, [r7]
 8004404:	0936      	lsrs	r6, r6, #4
 8004406:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800440a:	ed96 3a00 	vldr	s6, [r6]
 800440e:	ee67 7a82 	vmul.f32	s15, s15, s4
 8004412:	092e      	lsrs	r6, r5, #4
 8004414:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004418:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800441c:	f005 050f 	and.w	r5, r5, #15
 8004420:	edd6 3a00 	vldr	s7, [r6]
 8004424:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8004428:	eee3 7a84 	vfma.f32	s15, s7, s8
 800442c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004430:	0937      	lsrs	r7, r6, #4
 8004432:	ed95 4a00 	vldr	s8, [r5]
 8004436:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800443a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800443e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004442:	f006 060f 	and.w	r6, r6, #15
 8004446:	edd7 4a00 	vldr	s9, [r7]
 800444a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800444e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004452:	3004      	adds	r0, #4
 8004454:	ed96 5a00 	vldr	s10, [r6]
 8004458:	092e      	lsrs	r6, r5, #4
 800445a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800445e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8004462:	f005 050f 	and.w	r5, r5, #15
 8004466:	edd6 5a00 	vldr	s11, [r6]
 800446a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800446e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004472:	4584      	cmp	ip, r0
 8004474:	ed95 6a00 	vldr	s12, [r5]
 8004478:	eee6 7a26 	vfma.f32	s15, s12, s13
 800447c:	f101 0120 	add.w	r1, r1, #32
 8004480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004484:	d1a4      	bne.n	80043d0 <forward_dense+0x360>
 8004486:	f8dd e014 	ldr.w	lr, [sp, #20]
 800448a:	f1ac 0804 	sub.w	r8, ip, #4
 800448e:	9904      	ldr	r1, [sp, #16]
 8004490:	458e      	cmp	lr, r1
 8004492:	d22a      	bcs.n	80044ea <forward_dense+0x47a>
 8004494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004496:	eba1 070e 	sub.w	r7, r1, lr
 800449a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800449e:	f10e 0008 	add.w	r0, lr, #8
 80044a2:	f108 36ff 	add.w	r6, r8, #4294967295
 80044a6:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 80044aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044ae:	ed50 5a01 	vldr	s11, [r0, #-4]
 80044b2:	ed50 6a02 	vldr	s13, [r0, #-8]
 80044b6:	f001 050f 	and.w	r5, r1, #15
 80044ba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80044be:	edd5 7a00 	vldr	s15, [r5]
 80044c2:	0909      	lsrs	r1, r1, #4
 80044c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80044c8:	ed91 6a00 	vldr	s12, [r1]
 80044cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80044d0:	42b7      	cmp	r7, r6
 80044d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80044d6:	f100 0008 	add.w	r0, r0, #8
 80044da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044de:	d1e4      	bne.n	80044aa <forward_dense+0x43a>
 80044e0:	f10a 0a01 	add.w	sl, sl, #1
 80044e4:	44d0      	add	r8, sl
 80044e6:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80044ea:	9908      	ldr	r1, [sp, #32]
 80044ec:	b321      	cbz	r1, 8004538 <forward_dense+0x4c8>
 80044ee:	f898 1000 	ldrb.w	r1, [r8]
 80044f2:	edde 7a00 	vldr	s15, [lr]
 80044f6:	0909      	lsrs	r1, r1, #4
 80044f8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80044fc:	edd1 6a00 	vldr	s13, [r1]
 8004500:	9903      	ldr	r1, [sp, #12]
 8004502:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004506:	445a      	add	r2, fp
 8004508:	44dc      	add	ip, fp
 800450a:	ee72 2a87 	vadd.f32	s5, s5, s14
 800450e:	ece1 2a01 	vstmia	r1!, {s5}
 8004512:	4589      	cmp	r9, r1
 8004514:	9103      	str	r1, [sp, #12]
 8004516:	f67f af12 	bls.w	800433e <forward_dense+0x2ce>
 800451a:	2b00      	cmp	r3, #0
 800451c:	f47f af4e 	bne.w	80043bc <forward_dense+0x34c>
 8004520:	9907      	ldr	r1, [sp, #28]
 8004522:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800439c <forward_dense+0x32c>
 8004526:	eef0 2a48 	vmov.f32	s5, s16
 800452a:	2900      	cmp	r1, #0
 800452c:	f47f af4e 	bne.w	80043cc <forward_dense+0x35c>
 8004530:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8004534:	4690      	mov	r8, r2
 8004536:	e7aa      	b.n	800448e <forward_dense+0x41e>
 8004538:	9903      	ldr	r1, [sp, #12]
 800453a:	ee32 7a87 	vadd.f32	s14, s5, s14
 800453e:	445a      	add	r2, fp
 8004540:	eca1 7a01 	vstmia	r1!, {s14}
 8004544:	4549      	cmp	r1, r9
 8004546:	9103      	str	r1, [sp, #12]
 8004548:	44dc      	add	ip, fp
 800454a:	f4ff af34 	bcc.w	80043b6 <forward_dense+0x346>
 800454e:	e6f6      	b.n	800433e <forward_dense+0x2ce>
 8004550:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004552:	9d06      	ldr	r5, [sp, #24]
 8004554:	9101      	str	r1, [sp, #4]
 8004556:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004558:	9100      	str	r1, [sp, #0]
 800455a:	4628      	mov	r0, r5
 800455c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800455e:	f000 fa41 	bl	80049e4 <lite_dense_if32of32wf32>
 8004562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004564:	462b      	mov	r3, r5
 8004566:	4413      	add	r3, r2
 8004568:	9306      	str	r3, [sp, #24]
 800456a:	e6f1      	b.n	8004350 <forward_dense+0x2e0>
 800456c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8004570:	f1b9 0f00 	cmp.w	r9, #0
 8004574:	d016      	beq.n	80045a4 <forward_dense+0x534>
 8004576:	e9d9 0100 	ldrd	r0, r1, [r9]
 800457a:	f000 fbe1 	bl	8004d40 <ai_array_get_byte_size>
 800457e:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8004582:	4602      	mov	r2, r0
 8004584:	4641      	mov	r1, r8
 8004586:	4658      	mov	r0, fp
 8004588:	f000 fc3e 	bl	8004e08 <memcpy>
 800458c:	e5c7      	b.n	800411e <forward_dense+0xae>
 800458e:	2b04      	cmp	r3, #4
 8004590:	d00a      	beq.n	80045a8 <forward_dense+0x538>
 8004592:	f04f 0900 	mov.w	r9, #0
 8004596:	e5bd      	b.n	8004114 <forward_dense+0xa4>
 8004598:	930d      	str	r3, [sp, #52]	; 0x34
 800459a:	e595      	b.n	80040c8 <forward_dense+0x58>
 800459c:	2300      	movs	r3, #0
 800459e:	930b      	str	r3, [sp, #44]	; 0x2c
 80045a0:	460b      	mov	r3, r1
 80045a2:	e591      	b.n	80040c8 <forward_dense+0x58>
 80045a4:	46c3      	mov	fp, r8
 80045a6:	e5ba      	b.n	800411e <forward_dense+0xae>
 80045a8:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80045ac:	e5b7      	b.n	800411e <forward_dense+0xae>
 80045ae:	2300      	movs	r3, #0
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	deff      	udf	#255	; 0xff
 80045b4:	2300      	movs	r3, #0
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	deff      	udf	#255	; 0xff
 80045ba:	bf00      	nop

080045bc <forward_sigmoid>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	ed2d 8b02 	vpush	{d8}
 80045c2:	6982      	ldr	r2, [r0, #24]
 80045c4:	8813      	ldrh	r3, [r2, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d03b      	beq.n	8004642 <forward_sigmoid+0x86>
 80045ca:	6852      	ldr	r2, [r2, #4]
 80045cc:	6854      	ldr	r4, [r2, #4]
 80045ce:	b104      	cbz	r4, 80045d2 <forward_sigmoid+0x16>
 80045d0:	6824      	ldr	r4, [r4, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d034      	beq.n	8004640 <forward_sigmoid+0x84>
 80045d6:	6915      	ldr	r5, [r2, #16]
 80045d8:	b105      	cbz	r5, 80045dc <forward_sigmoid+0x20>
 80045da:	682d      	ldr	r5, [r5, #0]
 80045dc:	68a3      	ldr	r3, [r4, #8]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	d031      	beq.n	8004646 <forward_sigmoid+0x8a>
 80045e2:	68e0      	ldr	r0, [r4, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80045ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80045ee:	4298      	cmp	r0, r3
 80045f0:	fb01 f202 	mul.w	r2, r1, r2
 80045f4:	d1f9      	bne.n	80045ea <forward_sigmoid+0x2e>
 80045f6:	69a7      	ldr	r7, [r4, #24]
 80045f8:	69a9      	ldr	r1, [r5, #24]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	688e      	ldr	r6, [r1, #8]
 80045fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004602:	3a01      	subs	r2, #1
 8004604:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8004608:	42ab      	cmp	r3, r5
 800460a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800460e:	d814      	bhi.n	800463a <forward_sigmoid+0x7e>
 8004610:	3504      	adds	r5, #4
 8004612:	3604      	adds	r6, #4
 8004614:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004618:	462c      	mov	r4, r5
 800461a:	ed35 0a01 	vldmdb	r5!, {s0}
 800461e:	eeb1 0a40 	vneg.f32	s0, s0
 8004622:	f001 f865 	bl	80056f0 <expf>
 8004626:	ee30 0a08 	vadd.f32	s0, s0, s16
 800462a:	3c08      	subs	r4, #8
 800462c:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8004630:	ed66 7a01 	vstmdb	r6!, {s15}
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	42a3      	cmp	r3, r4
 8004638:	d9ee      	bls.n	8004618 <forward_sigmoid+0x5c>
 800463a:	ecbd 8b02 	vpop	{d8}
 800463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004640:	2300      	movs	r3, #0
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	deff      	udf	#255	; 0xff
 8004646:	69ab      	ldr	r3, [r5, #24]
 8004648:	69a7      	ldr	r7, [r4, #24]
 800464a:	689e      	ldr	r6, [r3, #8]
 800464c:	68bd      	ldr	r5, [r7, #8]
 800464e:	e7df      	b.n	8004610 <forward_sigmoid+0x54>

08004650 <forward_relu>:
 8004650:	6982      	ldr	r2, [r0, #24]
 8004652:	8813      	ldrh	r3, [r2, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d05b      	beq.n	8004710 <forward_relu+0xc0>
 8004658:	6851      	ldr	r1, [r2, #4]
 800465a:	684a      	ldr	r2, [r1, #4]
 800465c:	b102      	cbz	r2, 8004660 <forward_relu+0x10>
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	2b01      	cmp	r3, #1
 8004662:	f000 8123 	beq.w	80048ac <forward_relu+0x25c>
 8004666:	b470      	push	{r4, r5, r6}
 8004668:	6909      	ldr	r1, [r1, #16]
 800466a:	b101      	cbz	r1, 800466e <forward_relu+0x1e>
 800466c:	6809      	ldr	r1, [r1, #0]
 800466e:	69c6      	ldr	r6, [r0, #28]
 8004670:	2e00      	cmp	r6, #0
 8004672:	f000 8097 	beq.w	80047a4 <forward_relu+0x154>
 8004676:	6873      	ldr	r3, [r6, #4]
 8004678:	6988      	ldr	r0, [r1, #24]
 800467a:	6991      	ldr	r1, [r2, #24]
 800467c:	2b01      	cmp	r3, #1
 800467e:	f000 80c1 	beq.w	8004804 <forward_relu+0x1b4>
 8004682:	6893      	ldr	r3, [r2, #8]
 8004684:	6880      	ldr	r0, [r0, #8]
 8004686:	688c      	ldr	r4, [r1, #8]
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	f000 80f2 	beq.w	8004872 <forward_relu+0x222>
 800468e:	68d5      	ldr	r5, [r2, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004696:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800469a:	42ab      	cmp	r3, r5
 800469c:	fb01 f202 	mul.w	r2, r1, r2
 80046a0:	d1f9      	bne.n	8004696 <forward_relu+0x46>
 80046a2:	68b3      	ldr	r3, [r6, #8]
 80046a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80046a8:	edd3 6a00 	vldr	s13, [r3]
 80046ac:	ed93 6a01 	vldr	s12, [r3, #4]
 80046b0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80046b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80046b8:	3a01      	subs	r2, #1
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80046c2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80046c6:	d425      	bmi.n	8004714 <forward_relu+0xc4>
 80046c8:	429c      	cmp	r4, r3
 80046ca:	d81f      	bhi.n	800470c <forward_relu+0xbc>
 80046cc:	1d1a      	adds	r2, r3, #4
 80046ce:	1d01      	adds	r1, r0, #4
 80046d0:	e00d      	b.n	80046ee <forward_relu+0x9e>
 80046d2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80046d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046da:	db03      	blt.n	80046e4 <forward_relu+0x94>
 80046dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80046e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80046e4:	3b08      	subs	r3, #8
 80046e6:	429c      	cmp	r4, r3
 80046e8:	ed61 7a01 	vstmdb	r1!, {s15}
 80046ec:	d80e      	bhi.n	800470c <forward_relu+0xbc>
 80046ee:	4613      	mov	r3, r2
 80046f0:	ed72 7a01 	vldmdb	r2!, {s15}
 80046f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fc:	d9e9      	bls.n	80046d2 <forward_relu+0x82>
 80046fe:	3b08      	subs	r3, #8
 8004700:	eef0 7a47 	vmov.f32	s15, s14
 8004704:	429c      	cmp	r4, r3
 8004706:	ed61 7a01 	vstmdb	r1!, {s15}
 800470a:	d9f0      	bls.n	80046ee <forward_relu+0x9e>
 800470c:	bc70      	pop	{r4, r5, r6}
 800470e:	4770      	bx	lr
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	deff      	udf	#255	; 0xff
 8004714:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471c:	d11f      	bne.n	800475e <forward_relu+0x10e>
 800471e:	429c      	cmp	r4, r3
 8004720:	d8f4      	bhi.n	800470c <forward_relu+0xbc>
 8004722:	1b1c      	subs	r4, r3, r4
 8004724:	f024 0403 	bic.w	r4, r4, #3
 8004728:	1d1a      	adds	r2, r3, #4
 800472a:	2500      	movs	r5, #0
 800472c:	1b1b      	subs	r3, r3, r4
 800472e:	1d01      	adds	r1, r0, #4
 8004730:	ed72 7a01 	vldmdb	r2!, {s15}
 8004734:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473c:	dc0a      	bgt.n	8004754 <forward_relu+0x104>
 800473e:	429a      	cmp	r2, r3
 8004740:	f841 5d04 	str.w	r5, [r1, #-4]!
 8004744:	d0e2      	beq.n	800470c <forward_relu+0xbc>
 8004746:	ed72 7a01 	vldmdb	r2!, {s15}
 800474a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	ddf4      	ble.n	800473e <forward_relu+0xee>
 8004754:	429a      	cmp	r2, r3
 8004756:	ed61 7a01 	vstmdb	r1!, {s15}
 800475a:	d1e9      	bne.n	8004730 <forward_relu+0xe0>
 800475c:	e7d6      	b.n	800470c <forward_relu+0xbc>
 800475e:	429c      	cmp	r4, r3
 8004760:	d8d4      	bhi.n	800470c <forward_relu+0xbc>
 8004762:	1b1c      	subs	r4, r3, r4
 8004764:	f024 0403 	bic.w	r4, r4, #3
 8004768:	1d1a      	adds	r2, r3, #4
 800476a:	1d01      	adds	r1, r0, #4
 800476c:	1b1b      	subs	r3, r3, r4
 800476e:	ed72 7a01 	vldmdb	r2!, {s15}
 8004772:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	db0e      	blt.n	800479a <forward_relu+0x14a>
 800477c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004780:	4293      	cmp	r3, r2
 8004782:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004786:	ed61 7a01 	vstmdb	r1!, {s15}
 800478a:	d0bf      	beq.n	800470c <forward_relu+0xbc>
 800478c:	ed72 7a01 	vldmdb	r2!, {s15}
 8004790:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004798:	daf0      	bge.n	800477c <forward_relu+0x12c>
 800479a:	4293      	cmp	r3, r2
 800479c:	ed61 7a01 	vstmdb	r1!, {s15}
 80047a0:	d1e5      	bne.n	800476e <forward_relu+0x11e>
 80047a2:	e7b3      	b.n	800470c <forward_relu+0xbc>
 80047a4:	6893      	ldr	r3, [r2, #8]
 80047a6:	6989      	ldr	r1, [r1, #24]
 80047a8:	6990      	ldr	r0, [r2, #24]
 80047aa:	6889      	ldr	r1, [r1, #8]
 80047ac:	6884      	ldr	r4, [r0, #8]
 80047ae:	0a1b      	lsrs	r3, r3, #8
 80047b0:	d075      	beq.n	800489e <forward_relu+0x24e>
 80047b2:	68d5      	ldr	r5, [r2, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80047ba:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80047be:	429d      	cmp	r5, r3
 80047c0:	fb00 f202 	mul.w	r2, r0, r2
 80047c4:	d1f9      	bne.n	80047ba <forward_relu+0x16a>
 80047c6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80047ca:	3b01      	subs	r3, #1
 80047cc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80047d0:	4294      	cmp	r4, r2
 80047d2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80047d6:	d899      	bhi.n	800470c <forward_relu+0xbc>
 80047d8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80048b4 <forward_relu+0x264>
 80047dc:	3204      	adds	r2, #4
 80047de:	3104      	adds	r1, #4
 80047e0:	4613      	mov	r3, r2
 80047e2:	ed72 7a01 	vldmdb	r2!, {s15}
 80047e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ee:	f1a3 0308 	sub.w	r3, r3, #8
 80047f2:	bfb8      	it	lt
 80047f4:	eef0 7a47 	vmovlt.f32	s15, s14
 80047f8:	429c      	cmp	r4, r3
 80047fa:	ed61 7a01 	vstmdb	r1!, {s15}
 80047fe:	d9ef      	bls.n	80047e0 <forward_relu+0x190>
 8004800:	bc70      	pop	{r4, r5, r6}
 8004802:	4770      	bx	lr
 8004804:	688c      	ldr	r4, [r1, #8]
 8004806:	6891      	ldr	r1, [r2, #8]
 8004808:	6880      	ldr	r0, [r0, #8]
 800480a:	0a09      	lsrs	r1, r1, #8
 800480c:	d049      	beq.n	80048a2 <forward_relu+0x252>
 800480e:	68d5      	ldr	r5, [r2, #12]
 8004810:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8004814:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004818:	42aa      	cmp	r2, r5
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	d1f9      	bne.n	8004814 <forward_relu+0x1c4>
 8004820:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004824:	3a01      	subs	r2, #1
 8004826:	68b1      	ldr	r1, [r6, #8]
 8004828:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800482c:	429c      	cmp	r4, r3
 800482e:	ed91 7a00 	vldr	s14, [r1]
 8004832:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8004836:	f63f af69 	bhi.w	800470c <forward_relu+0xbc>
 800483a:	2500      	movs	r5, #0
 800483c:	3304      	adds	r3, #4
 800483e:	1d02      	adds	r2, r0, #4
 8004840:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484c:	f1a3 0104 	sub.w	r1, r3, #4
 8004850:	f1a3 0308 	sub.w	r3, r3, #8
 8004854:	d406      	bmi.n	8004864 <forward_relu+0x214>
 8004856:	429c      	cmp	r4, r3
 8004858:	f842 5d04 	str.w	r5, [r2, #-4]!
 800485c:	f63f af56 	bhi.w	800470c <forward_relu+0xbc>
 8004860:	460b      	mov	r3, r1
 8004862:	e7ed      	b.n	8004840 <forward_relu+0x1f0>
 8004864:	429c      	cmp	r4, r3
 8004866:	ed62 7a01 	vstmdb	r2!, {s15}
 800486a:	f63f af4f 	bhi.w	800470c <forward_relu+0xbc>
 800486e:	460b      	mov	r3, r1
 8004870:	e7e6      	b.n	8004840 <forward_relu+0x1f0>
 8004872:	68b3      	ldr	r3, [r6, #8]
 8004874:	ed93 7a02 	vldr	s14, [r3, #8]
 8004878:	edd3 6a00 	vldr	s13, [r3]
 800487c:	ed93 6a01 	vldr	s12, [r3, #4]
 8004880:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004888:	d401      	bmi.n	800488e <forward_relu+0x23e>
 800488a:	4623      	mov	r3, r4
 800488c:	e71e      	b.n	80046cc <forward_relu+0x7c>
 800488e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004896:	4623      	mov	r3, r4
 8004898:	f47f af63 	bne.w	8004762 <forward_relu+0x112>
 800489c:	e741      	b.n	8004722 <forward_relu+0xd2>
 800489e:	4622      	mov	r2, r4
 80048a0:	e79a      	b.n	80047d8 <forward_relu+0x188>
 80048a2:	68b2      	ldr	r2, [r6, #8]
 80048a4:	4623      	mov	r3, r4
 80048a6:	ed92 7a00 	vldr	s14, [r2]
 80048aa:	e7c6      	b.n	800483a <forward_relu+0x1ea>
 80048ac:	2300      	movs	r3, #0
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	deff      	udf	#255	; 0xff
 80048b2:	bf00      	nop
 80048b4:	00000000 	.word	0x00000000

080048b8 <ai_check_custom_types>:
 80048b8:	b082      	sub	sp, #8
 80048ba:	4b13      	ldr	r3, [pc, #76]	; (8004908 <ai_check_custom_types+0x50>)
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	b118      	cbz	r0, 80048c8 <ai_check_custom_types+0x10>
 80048c0:	7803      	ldrb	r3, [r0, #0]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d002      	beq.n	80048cc <ai_check_custom_types+0x14>
 80048c6:	2000      	movs	r0, #0
 80048c8:	b002      	add	sp, #8
 80048ca:	4770      	bx	lr
 80048cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <ai_check_custom_types+0x26>
 80048d4:	2001      	movs	r0, #1
 80048d6:	f080 0001 	eor.w	r0, r0, #1
 80048da:	b002      	add	sp, #8
 80048dc:	4770      	bx	lr
 80048de:	7842      	ldrb	r2, [r0, #1]
 80048e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	f100 0001 	add.w	r0, r0, #1
 80048ea:	d1f3      	bne.n	80048d4 <ai_check_custom_types+0x1c>
 80048ec:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80048f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d1ed      	bne.n	80048d4 <ai_check_custom_types+0x1c>
 80048f8:	7842      	ldrb	r2, [r0, #1]
 80048fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d1e8      	bne.n	80048d4 <ai_check_custom_types+0x1c>
 8004902:	2000      	movs	r0, #0
 8004904:	e7e7      	b.n	80048d6 <ai_check_custom_types+0x1e>
 8004906:	bf00      	nop
 8004908:	84048403 	.word	0x84048403

0800490c <ai_layers_init_all>:
 800490c:	4601      	mov	r1, r0
 800490e:	2000      	movs	r0, #0
 8004910:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8004912:	b143      	cbz	r3, 8004926 <ai_layers_init_all+0x1a>
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	60d9      	str	r1, [r3, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	f100 0001 	add.w	r0, r0, #1
 800491e:	d002      	beq.n	8004926 <ai_layers_init_all+0x1a>
 8004920:	b10a      	cbz	r2, 8004926 <ai_layers_init_all+0x1a>
 8004922:	4613      	mov	r3, r2
 8004924:	e7f5      	b.n	8004912 <ai_layers_init_all+0x6>
 8004926:	4770      	bx	lr

08004928 <ai_layers_post_init_all>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800492c:	2500      	movs	r5, #0
 800492e:	b16c      	cbz	r4, 800494c <ai_layers_post_init_all+0x24>
 8004930:	6863      	ldr	r3, [r4, #4]
 8004932:	07db      	lsls	r3, r3, #31
 8004934:	d504      	bpl.n	8004940 <ai_layers_post_init_all+0x18>
 8004936:	6a23      	ldr	r3, [r4, #32]
 8004938:	4620      	mov	r0, r4
 800493a:	b10b      	cbz	r3, 8004940 <ai_layers_post_init_all+0x18>
 800493c:	4798      	blx	r3
 800493e:	3501      	adds	r5, #1
 8004940:	6923      	ldr	r3, [r4, #16]
 8004942:	42a3      	cmp	r3, r4
 8004944:	d002      	beq.n	800494c <ai_layers_post_init_all+0x24>
 8004946:	b10b      	cbz	r3, 800494c <ai_layers_post_init_all+0x24>
 8004948:	461c      	mov	r4, r3
 800494a:	e7f0      	b.n	800492e <ai_layers_post_init_all+0x6>
 800494c:	4628      	mov	r0, r5
 800494e:	bd38      	pop	{r3, r4, r5, pc}

08004950 <ai_layers_forward_all>:
 8004950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004954:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8004958:	4604      	mov	r4, r0
 800495a:	f1b8 0f00 	cmp.w	r8, #0
 800495e:	d02b      	beq.n	80049b8 <ai_layers_forward_all+0x68>
 8004960:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004962:	6381      	str	r1, [r0, #56]	; 0x38
 8004964:	b321      	cbz	r1, 80049b0 <ai_layers_forward_all+0x60>
 8004966:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004968:	2001      	movs	r0, #1
 800496a:	47c0      	blx	r8
 800496c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800496e:	b1fe      	cbz	r6, 80049b0 <ai_layers_forward_all+0x60>
 8004970:	2700      	movs	r7, #0
 8004972:	4631      	mov	r1, r6
 8004974:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004976:	2002      	movs	r0, #2
 8004978:	47c0      	blx	r8
 800497a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800497c:	4628      	mov	r0, r5
 800497e:	696b      	ldr	r3, [r5, #20]
 8004980:	4798      	blx	r3
 8004982:	692e      	ldr	r6, [r5, #16]
 8004984:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004986:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004988:	42b5      	cmp	r5, r6
 800498a:	f04f 0003 	mov.w	r0, #3
 800498e:	d007      	beq.n	80049a0 <ai_layers_forward_all+0x50>
 8004990:	47c0      	blx	r8
 8004992:	3701      	adds	r7, #1
 8004994:	63a6      	str	r6, [r4, #56]	; 0x38
 8004996:	2e00      	cmp	r6, #0
 8004998:	d1eb      	bne.n	8004972 <ai_layers_forward_all+0x22>
 800499a:	4638      	mov	r0, r7
 800499c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a0:	2003      	movs	r0, #3
 80049a2:	47c0      	blx	r8
 80049a4:	2300      	movs	r3, #0
 80049a6:	3701      	adds	r7, #1
 80049a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80049aa:	4638      	mov	r0, r7
 80049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b0:	2700      	movs	r7, #0
 80049b2:	4638      	mov	r0, r7
 80049b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b8:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80049ba:	6385      	str	r5, [r0, #56]	; 0x38
 80049bc:	2d00      	cmp	r5, #0
 80049be:	d0f7      	beq.n	80049b0 <ai_layers_forward_all+0x60>
 80049c0:	4647      	mov	r7, r8
 80049c2:	696b      	ldr	r3, [r5, #20]
 80049c4:	4628      	mov	r0, r5
 80049c6:	4798      	blx	r3
 80049c8:	462b      	mov	r3, r5
 80049ca:	692d      	ldr	r5, [r5, #16]
 80049cc:	429d      	cmp	r5, r3
 80049ce:	d004      	beq.n	80049da <ai_layers_forward_all+0x8a>
 80049d0:	63a5      	str	r5, [r4, #56]	; 0x38
 80049d2:	3701      	adds	r7, #1
 80049d4:	2d00      	cmp	r5, #0
 80049d6:	d1f4      	bne.n	80049c2 <ai_layers_forward_all+0x72>
 80049d8:	e7df      	b.n	800499a <ai_layers_forward_all+0x4a>
 80049da:	2300      	movs	r3, #0
 80049dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80049de:	3701      	adds	r7, #1
 80049e0:	e7db      	b.n	800499a <ai_layers_forward_all+0x4a>
 80049e2:	bf00      	nop

080049e4 <lite_dense_if32of32wf32>:
 80049e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e8:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 80049ec:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80049f0:	4287      	cmp	r7, r0
 80049f2:	f240 8106 	bls.w	8004c02 <lite_dense_if32of32wf32+0x21e>
 80049f6:	f1a6 0810 	sub.w	r8, r6, #16
 80049fa:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80049fe:	f108 0801 	add.w	r8, r8, #1
 8004a02:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8004a06:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8004a0a:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8004a0e:	4605      	mov	r5, r0
 8004a10:	f006 0a0f 	and.w	sl, r6, #15
 8004a14:	2e0f      	cmp	r6, #15
 8004a16:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004c28 <lite_dense_if32of32wf32+0x244>
 8004a1a:	f240 8101 	bls.w	8004c20 <lite_dense_if32of32wf32+0x23c>
 8004a1e:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8004a22:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8004a26:	46b6      	mov	lr, r6
 8004a28:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8004a2c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8004a30:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8004a34:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8004a38:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8004a3c:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8004a40:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8004a44:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8004a48:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8004a4c:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8004a50:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8004a54:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8004a58:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8004a5c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004a60:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8004a64:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004a68:	f1ae 0e10 	sub.w	lr, lr, #16
 8004a6c:	f1be 0f0f 	cmp.w	lr, #15
 8004a70:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8004a74:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8004a78:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004a7c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8004a80:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8004a84:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8004a88:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8004a8c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8004a90:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8004a94:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8004a98:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004a9c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8004aa0:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8004aa4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004aa8:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8004aac:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8004ab0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004ab4:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8004ab8:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8004abc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004ac0:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8004ac4:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8004ac8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004acc:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8004ad0:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8004ad4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004ad8:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8004adc:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8004ae0:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004ae4:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004ae8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004aec:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004af0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004af4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004afc:	d894      	bhi.n	8004a28 <lite_dense_if32of32wf32+0x44>
 8004afe:	eb02 0e0b 	add.w	lr, r2, fp
 8004b02:	4654      	mov	r4, sl
 8004b04:	46c4      	mov	ip, r8
 8004b06:	2c00      	cmp	r4, #0
 8004b08:	d075      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004b0a:	eddc 6a00 	vldr	s13, [ip]
 8004b0e:	edde 7a00 	vldr	s15, [lr]
 8004b12:	2c01      	cmp	r4, #1
 8004b14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b18:	d06d      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004b1a:	eddc 6a01 	vldr	s13, [ip, #4]
 8004b1e:	edde 7a01 	vldr	s15, [lr, #4]
 8004b22:	2c02      	cmp	r4, #2
 8004b24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b28:	d065      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004b2a:	eddc 6a02 	vldr	s13, [ip, #8]
 8004b2e:	edde 7a02 	vldr	s15, [lr, #8]
 8004b32:	2c03      	cmp	r4, #3
 8004b34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b38:	d05d      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004b3a:	eddc 6a03 	vldr	s13, [ip, #12]
 8004b3e:	edde 7a03 	vldr	s15, [lr, #12]
 8004b42:	2c04      	cmp	r4, #4
 8004b44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b48:	d055      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004b4a:	eddc 6a04 	vldr	s13, [ip, #16]
 8004b4e:	edde 7a04 	vldr	s15, [lr, #16]
 8004b52:	2c05      	cmp	r4, #5
 8004b54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b58:	d04d      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004b5a:	eddc 6a05 	vldr	s13, [ip, #20]
 8004b5e:	edde 7a05 	vldr	s15, [lr, #20]
 8004b62:	2c06      	cmp	r4, #6
 8004b64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b68:	d045      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004b6a:	eddc 6a06 	vldr	s13, [ip, #24]
 8004b6e:	edde 7a06 	vldr	s15, [lr, #24]
 8004b72:	2c07      	cmp	r4, #7
 8004b74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b78:	d03d      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004b7a:	eddc 6a07 	vldr	s13, [ip, #28]
 8004b7e:	edde 7a07 	vldr	s15, [lr, #28]
 8004b82:	2c08      	cmp	r4, #8
 8004b84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b88:	d035      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004b8a:	eddc 6a08 	vldr	s13, [ip, #32]
 8004b8e:	edde 7a08 	vldr	s15, [lr, #32]
 8004b92:	2c09      	cmp	r4, #9
 8004b94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b98:	d02d      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004b9a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8004b9e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8004ba2:	2c0a      	cmp	r4, #10
 8004ba4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004ba8:	d025      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004baa:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8004bae:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8004bb2:	2c0b      	cmp	r4, #11
 8004bb4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004bb8:	d01d      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004bba:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8004bbe:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8004bc2:	2c0c      	cmp	r4, #12
 8004bc4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004bc8:	d015      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004bca:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8004bce:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8004bd2:	3c0d      	subs	r4, #13
 8004bd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004bd8:	d00d      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004bda:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8004bde:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8004be2:	2c01      	cmp	r4, #1
 8004be4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004be8:	d005      	beq.n	8004bf6 <lite_dense_if32of32wf32+0x212>
 8004bea:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8004bee:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8004bf2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004bf6:	444a      	add	r2, r9
 8004bf8:	eca5 7a01 	vstmia	r5!, {s14}
 8004bfc:	42af      	cmp	r7, r5
 8004bfe:	f63f af09 	bhi.w	8004a14 <lite_dense_if32of32wf32+0x30>
 8004c02:	b15b      	cbz	r3, 8004c1c <lite_dense_if32of32wf32+0x238>
 8004c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c06:	b14a      	cbz	r2, 8004c1c <lite_dense_if32of32wf32+0x238>
 8004c08:	edd0 7a00 	vldr	s15, [r0]
 8004c0c:	ecb3 7a01 	vldmia	r3!, {s14}
 8004c10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c14:	ece0 7a01 	vstmia	r0!, {s15}
 8004c18:	4287      	cmp	r7, r0
 8004c1a:	d1f5      	bne.n	8004c08 <lite_dense_if32of32wf32+0x224>
 8004c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c20:	4634      	mov	r4, r6
 8004c22:	4696      	mov	lr, r2
 8004c24:	468c      	mov	ip, r1
 8004c26:	e76e      	b.n	8004b06 <lite_dense_if32of32wf32+0x122>
 8004c28:	00000000 	.word	0x00000000

08004c2c <ai_version_get>:
 8004c2c:	0212      	lsls	r2, r2, #8
 8004c2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004c32:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8004c36:	4770      	bx	lr

08004c38 <get_tensor_byte_size>:
 8004c38:	b410      	push	{r4}
 8004c3a:	6983      	ldr	r3, [r0, #24]
 8004c3c:	68c4      	ldr	r4, [r0, #12]
 8004c3e:	6941      	ldr	r1, [r0, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68e0      	ldr	r0, [r4, #12]
 8004c44:	4a07      	ldr	r2, [pc, #28]	; (8004c64 <get_tensor_byte_size+0x2c>)
 8004c46:	68c9      	ldr	r1, [r1, #12]
 8004c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c4c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004c50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c54:	fb01 f000 	mul.w	r0, r1, r0
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	bf04      	itt	eq
 8004c5c:	3007      	addeq	r0, #7
 8004c5e:	08c0      	lsreq	r0, r0, #3
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	000400c0 	.word	0x000400c0

08004c68 <ai_array_to_buffer_fmt>:
 8004c68:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d050      	beq.n	8004d12 <ai_array_to_buffer_fmt+0xaa>
 8004c70:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <ai_array_to_buffer_fmt+0xb4>)
 8004c72:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d00b      	beq.n	8004c92 <ai_array_to_buffer_fmt+0x2a>
 8004c7a:	dc1c      	bgt.n	8004cb6 <ai_array_to_buffer_fmt+0x4e>
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <ai_array_to_buffer_fmt+0xb8>)
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d007      	beq.n	8004c92 <ai_array_to_buffer_fmt+0x2a>
 8004c82:	dd0b      	ble.n	8004c9c <ai_array_to_buffer_fmt+0x34>
 8004c84:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <ai_array_to_buffer_fmt+0xbc>)
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d003      	beq.n	8004c92 <ai_array_to_buffer_fmt+0x2a>
 8004c8a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d131      	bne.n	8004cf6 <ai_array_to_buffer_fmt+0x8e>
 8004c92:	4613      	mov	r3, r2
 8004c94:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004c98:	4318      	orrs	r0, r3
 8004c9a:	4770      	bx	lr
 8004c9c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d0f6      	beq.n	8004c92 <ai_array_to_buffer_fmt+0x2a>
 8004ca4:	dd2c      	ble.n	8004d00 <ai_array_to_buffer_fmt+0x98>
 8004ca6:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <ai_array_to_buffer_fmt+0xc0>)
 8004ca8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004cac:	429a      	cmp	r2, r3
 8004cae:	bf18      	it	ne
 8004cb0:	2340      	movne	r3, #64	; 0x40
 8004cb2:	4318      	orrs	r0, r3
 8004cb4:	4770      	bx	lr
 8004cb6:	4b1d      	ldr	r3, [pc, #116]	; (8004d2c <ai_array_to_buffer_fmt+0xc4>)
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d0ea      	beq.n	8004c92 <ai_array_to_buffer_fmt+0x2a>
 8004cbc:	dd0e      	ble.n	8004cdc <ai_array_to_buffer_fmt+0x74>
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <ai_array_to_buffer_fmt+0xc8>)
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d0e6      	beq.n	8004c92 <ai_array_to_buffer_fmt+0x2a>
 8004cc4:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d0e2      	beq.n	8004c92 <ai_array_to_buffer_fmt+0x2a>
 8004ccc:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <ai_array_to_buffer_fmt+0xcc>)
 8004cce:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	bf18      	it	ne
 8004cd6:	2340      	movne	r3, #64	; 0x40
 8004cd8:	4318      	orrs	r0, r3
 8004cda:	4770      	bx	lr
 8004cdc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d0d6      	beq.n	8004c92 <ai_array_to_buffer_fmt+0x2a>
 8004ce4:	3307      	adds	r3, #7
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d0d3      	beq.n	8004c92 <ai_array_to_buffer_fmt+0x2a>
 8004cea:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	bf18      	it	ne
 8004cf2:	2340      	movne	r3, #64	; 0x40
 8004cf4:	e7ce      	b.n	8004c94 <ai_array_to_buffer_fmt+0x2c>
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <ai_array_to_buffer_fmt+0xd0>)
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	bf18      	it	ne
 8004cfc:	2340      	movne	r3, #64	; 0x40
 8004cfe:	e7c9      	b.n	8004c94 <ai_array_to_buffer_fmt+0x2c>
 8004d00:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d0c4      	beq.n	8004c92 <ai_array_to_buffer_fmt+0x2a>
 8004d08:	3380      	adds	r3, #128	; 0x80
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	bf18      	it	ne
 8004d0e:	2340      	movne	r3, #64	; 0x40
 8004d10:	e7c0      	b.n	8004c94 <ai_array_to_buffer_fmt+0x2c>
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <ai_array_to_buffer_fmt+0xd4>)
 8004d14:	4003      	ands	r3, r0
 8004d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d1a:	e7bb      	b.n	8004c94 <ai_array_to_buffer_fmt+0x2c>
 8004d1c:	00840040 	.word	0x00840040
 8004d20:	00040840 	.word	0x00040840
 8004d24:	00041040 	.word	0x00041040
 8004d28:	00040447 	.word	0x00040447
 8004d2c:	00840840 	.word	0x00840840
 8004d30:	00841040 	.word	0x00841040
 8004d34:	0084084f 	.word	0x0084084f
 8004d38:	0004084f 	.word	0x0004084f
 8004d3c:	00803fff 	.word	0x00803fff

08004d40 <ai_array_get_byte_size>:
 8004d40:	b319      	cbz	r1, 8004d8a <ai_array_get_byte_size+0x4a>
 8004d42:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004d46:	fb03 f101 	mul.w	r1, r3, r1
 8004d4a:	3107      	adds	r1, #7
 8004d4c:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8004d50:	f021 0307 	bic.w	r3, r1, #7
 8004d54:	2a04      	cmp	r2, #4
 8004d56:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8004d5a:	fa23 f101 	lsr.w	r1, r3, r1
 8004d5e:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8004d62:	d00b      	beq.n	8004d7c <ai_array_get_byte_size+0x3c>
 8004d64:	2a08      	cmp	r2, #8
 8004d66:	d002      	beq.n	8004d6e <ai_array_get_byte_size+0x2e>
 8004d68:	3107      	adds	r1, #7
 8004d6a:	08c8      	lsrs	r0, r1, #3
 8004d6c:	4770      	bx	lr
 8004d6e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004d72:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8004d76:	3107      	adds	r1, #7
 8004d78:	08c8      	lsrs	r0, r1, #3
 8004d7a:	4770      	bx	lr
 8004d7c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004d80:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8004d84:	3107      	adds	r1, #7
 8004d86:	08c8      	lsrs	r0, r1, #3
 8004d88:	4770      	bx	lr
 8004d8a:	4608      	mov	r0, r1
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop

08004d90 <ai_array_get_data_byte_size>:
 8004d90:	b169      	cbz	r1, 8004dae <ai_array_get_data_byte_size+0x1e>
 8004d92:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8004d96:	fb02 f101 	mul.w	r1, r2, r1
 8004d9a:	1dcb      	adds	r3, r1, #7
 8004d9c:	f023 0307 	bic.w	r3, r3, #7
 8004da0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8004da4:	fa23 f000 	lsr.w	r0, r3, r0
 8004da8:	3007      	adds	r0, #7
 8004daa:	08c0      	lsrs	r0, r0, #3
 8004dac:	4770      	bx	lr
 8004dae:	4608      	mov	r0, r1
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop

08004db4 <__errno>:
 8004db4:	4b01      	ldr	r3, [pc, #4]	; (8004dbc <__errno+0x8>)
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000560 	.word	0x20000560

08004dc0 <__libc_init_array>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4d0d      	ldr	r5, [pc, #52]	; (8004df8 <__libc_init_array+0x38>)
 8004dc4:	4c0d      	ldr	r4, [pc, #52]	; (8004dfc <__libc_init_array+0x3c>)
 8004dc6:	1b64      	subs	r4, r4, r5
 8004dc8:	10a4      	asrs	r4, r4, #2
 8004dca:	2600      	movs	r6, #0
 8004dcc:	42a6      	cmp	r6, r4
 8004dce:	d109      	bne.n	8004de4 <__libc_init_array+0x24>
 8004dd0:	4d0b      	ldr	r5, [pc, #44]	; (8004e00 <__libc_init_array+0x40>)
 8004dd2:	4c0c      	ldr	r4, [pc, #48]	; (8004e04 <__libc_init_array+0x44>)
 8004dd4:	f000 fdc0 	bl	8005958 <_init>
 8004dd8:	1b64      	subs	r4, r4, r5
 8004dda:	10a4      	asrs	r4, r4, #2
 8004ddc:	2600      	movs	r6, #0
 8004dde:	42a6      	cmp	r6, r4
 8004de0:	d105      	bne.n	8004dee <__libc_init_array+0x2e>
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de8:	4798      	blx	r3
 8004dea:	3601      	adds	r6, #1
 8004dec:	e7ee      	b.n	8004dcc <__libc_init_array+0xc>
 8004dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df2:	4798      	blx	r3
 8004df4:	3601      	adds	r6, #1
 8004df6:	e7f2      	b.n	8004dde <__libc_init_array+0x1e>
 8004df8:	08008cfc 	.word	0x08008cfc
 8004dfc:	08008cfc 	.word	0x08008cfc
 8004e00:	08008cfc 	.word	0x08008cfc
 8004e04:	08008d00 	.word	0x08008d00

08004e08 <memcpy>:
 8004e08:	440a      	add	r2, r1
 8004e0a:	4291      	cmp	r1, r2
 8004e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e10:	d100      	bne.n	8004e14 <memcpy+0xc>
 8004e12:	4770      	bx	lr
 8004e14:	b510      	push	{r4, lr}
 8004e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e1e:	4291      	cmp	r1, r2
 8004e20:	d1f9      	bne.n	8004e16 <memcpy+0xe>
 8004e22:	bd10      	pop	{r4, pc}

08004e24 <memset>:
 8004e24:	4402      	add	r2, r0
 8004e26:	4603      	mov	r3, r0
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d100      	bne.n	8004e2e <memset+0xa>
 8004e2c:	4770      	bx	lr
 8004e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e32:	e7f9      	b.n	8004e28 <memset+0x4>

08004e34 <_free_r>:
 8004e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e36:	2900      	cmp	r1, #0
 8004e38:	d044      	beq.n	8004ec4 <_free_r+0x90>
 8004e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e3e:	9001      	str	r0, [sp, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f1a1 0404 	sub.w	r4, r1, #4
 8004e46:	bfb8      	it	lt
 8004e48:	18e4      	addlt	r4, r4, r3
 8004e4a:	f000 f903 	bl	8005054 <__malloc_lock>
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <_free_r+0x94>)
 8004e50:	9801      	ldr	r0, [sp, #4]
 8004e52:	6813      	ldr	r3, [r2, #0]
 8004e54:	b933      	cbnz	r3, 8004e64 <_free_r+0x30>
 8004e56:	6063      	str	r3, [r4, #4]
 8004e58:	6014      	str	r4, [r2, #0]
 8004e5a:	b003      	add	sp, #12
 8004e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e60:	f000 b8fe 	b.w	8005060 <__malloc_unlock>
 8004e64:	42a3      	cmp	r3, r4
 8004e66:	d908      	bls.n	8004e7a <_free_r+0x46>
 8004e68:	6825      	ldr	r5, [r4, #0]
 8004e6a:	1961      	adds	r1, r4, r5
 8004e6c:	428b      	cmp	r3, r1
 8004e6e:	bf01      	itttt	eq
 8004e70:	6819      	ldreq	r1, [r3, #0]
 8004e72:	685b      	ldreq	r3, [r3, #4]
 8004e74:	1949      	addeq	r1, r1, r5
 8004e76:	6021      	streq	r1, [r4, #0]
 8004e78:	e7ed      	b.n	8004e56 <_free_r+0x22>
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	b10b      	cbz	r3, 8004e84 <_free_r+0x50>
 8004e80:	42a3      	cmp	r3, r4
 8004e82:	d9fa      	bls.n	8004e7a <_free_r+0x46>
 8004e84:	6811      	ldr	r1, [r2, #0]
 8004e86:	1855      	adds	r5, r2, r1
 8004e88:	42a5      	cmp	r5, r4
 8004e8a:	d10b      	bne.n	8004ea4 <_free_r+0x70>
 8004e8c:	6824      	ldr	r4, [r4, #0]
 8004e8e:	4421      	add	r1, r4
 8004e90:	1854      	adds	r4, r2, r1
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	6011      	str	r1, [r2, #0]
 8004e96:	d1e0      	bne.n	8004e5a <_free_r+0x26>
 8004e98:	681c      	ldr	r4, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	6053      	str	r3, [r2, #4]
 8004e9e:	4421      	add	r1, r4
 8004ea0:	6011      	str	r1, [r2, #0]
 8004ea2:	e7da      	b.n	8004e5a <_free_r+0x26>
 8004ea4:	d902      	bls.n	8004eac <_free_r+0x78>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	6003      	str	r3, [r0, #0]
 8004eaa:	e7d6      	b.n	8004e5a <_free_r+0x26>
 8004eac:	6825      	ldr	r5, [r4, #0]
 8004eae:	1961      	adds	r1, r4, r5
 8004eb0:	428b      	cmp	r3, r1
 8004eb2:	bf04      	itt	eq
 8004eb4:	6819      	ldreq	r1, [r3, #0]
 8004eb6:	685b      	ldreq	r3, [r3, #4]
 8004eb8:	6063      	str	r3, [r4, #4]
 8004eba:	bf04      	itt	eq
 8004ebc:	1949      	addeq	r1, r1, r5
 8004ebe:	6021      	streq	r1, [r4, #0]
 8004ec0:	6054      	str	r4, [r2, #4]
 8004ec2:	e7ca      	b.n	8004e5a <_free_r+0x26>
 8004ec4:	b003      	add	sp, #12
 8004ec6:	bd30      	pop	{r4, r5, pc}
 8004ec8:	20000704 	.word	0x20000704

08004ecc <sbrk_aligned>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4e0e      	ldr	r6, [pc, #56]	; (8004f08 <sbrk_aligned+0x3c>)
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	6831      	ldr	r1, [r6, #0]
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	b911      	cbnz	r1, 8004ede <sbrk_aligned+0x12>
 8004ed8:	f000 f88c 	bl	8004ff4 <_sbrk_r>
 8004edc:	6030      	str	r0, [r6, #0]
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f000 f887 	bl	8004ff4 <_sbrk_r>
 8004ee6:	1c43      	adds	r3, r0, #1
 8004ee8:	d00a      	beq.n	8004f00 <sbrk_aligned+0x34>
 8004eea:	1cc4      	adds	r4, r0, #3
 8004eec:	f024 0403 	bic.w	r4, r4, #3
 8004ef0:	42a0      	cmp	r0, r4
 8004ef2:	d007      	beq.n	8004f04 <sbrk_aligned+0x38>
 8004ef4:	1a21      	subs	r1, r4, r0
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 f87c 	bl	8004ff4 <_sbrk_r>
 8004efc:	3001      	adds	r0, #1
 8004efe:	d101      	bne.n	8004f04 <sbrk_aligned+0x38>
 8004f00:	f04f 34ff 	mov.w	r4, #4294967295
 8004f04:	4620      	mov	r0, r4
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
 8004f08:	20000708 	.word	0x20000708

08004f0c <_malloc_r>:
 8004f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f10:	1ccd      	adds	r5, r1, #3
 8004f12:	f025 0503 	bic.w	r5, r5, #3
 8004f16:	3508      	adds	r5, #8
 8004f18:	2d0c      	cmp	r5, #12
 8004f1a:	bf38      	it	cc
 8004f1c:	250c      	movcc	r5, #12
 8004f1e:	2d00      	cmp	r5, #0
 8004f20:	4607      	mov	r7, r0
 8004f22:	db01      	blt.n	8004f28 <_malloc_r+0x1c>
 8004f24:	42a9      	cmp	r1, r5
 8004f26:	d905      	bls.n	8004f34 <_malloc_r+0x28>
 8004f28:	230c      	movs	r3, #12
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	2600      	movs	r6, #0
 8004f2e:	4630      	mov	r0, r6
 8004f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f34:	4e2e      	ldr	r6, [pc, #184]	; (8004ff0 <_malloc_r+0xe4>)
 8004f36:	f000 f88d 	bl	8005054 <__malloc_lock>
 8004f3a:	6833      	ldr	r3, [r6, #0]
 8004f3c:	461c      	mov	r4, r3
 8004f3e:	bb34      	cbnz	r4, 8004f8e <_malloc_r+0x82>
 8004f40:	4629      	mov	r1, r5
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7ff ffc2 	bl	8004ecc <sbrk_aligned>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	d14d      	bne.n	8004fea <_malloc_r+0xde>
 8004f4e:	6834      	ldr	r4, [r6, #0]
 8004f50:	4626      	mov	r6, r4
 8004f52:	2e00      	cmp	r6, #0
 8004f54:	d140      	bne.n	8004fd8 <_malloc_r+0xcc>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	4631      	mov	r1, r6
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	eb04 0803 	add.w	r8, r4, r3
 8004f60:	f000 f848 	bl	8004ff4 <_sbrk_r>
 8004f64:	4580      	cmp	r8, r0
 8004f66:	d13a      	bne.n	8004fde <_malloc_r+0xd2>
 8004f68:	6821      	ldr	r1, [r4, #0]
 8004f6a:	3503      	adds	r5, #3
 8004f6c:	1a6d      	subs	r5, r5, r1
 8004f6e:	f025 0503 	bic.w	r5, r5, #3
 8004f72:	3508      	adds	r5, #8
 8004f74:	2d0c      	cmp	r5, #12
 8004f76:	bf38      	it	cc
 8004f78:	250c      	movcc	r5, #12
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f7ff ffa5 	bl	8004ecc <sbrk_aligned>
 8004f82:	3001      	adds	r0, #1
 8004f84:	d02b      	beq.n	8004fde <_malloc_r+0xd2>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	442b      	add	r3, r5
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	e00e      	b.n	8004fac <_malloc_r+0xa0>
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	1b52      	subs	r2, r2, r5
 8004f92:	d41e      	bmi.n	8004fd2 <_malloc_r+0xc6>
 8004f94:	2a0b      	cmp	r2, #11
 8004f96:	d916      	bls.n	8004fc6 <_malloc_r+0xba>
 8004f98:	1961      	adds	r1, r4, r5
 8004f9a:	42a3      	cmp	r3, r4
 8004f9c:	6025      	str	r5, [r4, #0]
 8004f9e:	bf18      	it	ne
 8004fa0:	6059      	strne	r1, [r3, #4]
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	bf08      	it	eq
 8004fa6:	6031      	streq	r1, [r6, #0]
 8004fa8:	5162      	str	r2, [r4, r5]
 8004faa:	604b      	str	r3, [r1, #4]
 8004fac:	4638      	mov	r0, r7
 8004fae:	f104 060b 	add.w	r6, r4, #11
 8004fb2:	f000 f855 	bl	8005060 <__malloc_unlock>
 8004fb6:	f026 0607 	bic.w	r6, r6, #7
 8004fba:	1d23      	adds	r3, r4, #4
 8004fbc:	1af2      	subs	r2, r6, r3
 8004fbe:	d0b6      	beq.n	8004f2e <_malloc_r+0x22>
 8004fc0:	1b9b      	subs	r3, r3, r6
 8004fc2:	50a3      	str	r3, [r4, r2]
 8004fc4:	e7b3      	b.n	8004f2e <_malloc_r+0x22>
 8004fc6:	6862      	ldr	r2, [r4, #4]
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	bf0c      	ite	eq
 8004fcc:	6032      	streq	r2, [r6, #0]
 8004fce:	605a      	strne	r2, [r3, #4]
 8004fd0:	e7ec      	b.n	8004fac <_malloc_r+0xa0>
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	6864      	ldr	r4, [r4, #4]
 8004fd6:	e7b2      	b.n	8004f3e <_malloc_r+0x32>
 8004fd8:	4634      	mov	r4, r6
 8004fda:	6876      	ldr	r6, [r6, #4]
 8004fdc:	e7b9      	b.n	8004f52 <_malloc_r+0x46>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	f000 f83c 	bl	8005060 <__malloc_unlock>
 8004fe8:	e7a1      	b.n	8004f2e <_malloc_r+0x22>
 8004fea:	6025      	str	r5, [r4, #0]
 8004fec:	e7de      	b.n	8004fac <_malloc_r+0xa0>
 8004fee:	bf00      	nop
 8004ff0:	20000704 	.word	0x20000704

08004ff4 <_sbrk_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4d06      	ldr	r5, [pc, #24]	; (8005010 <_sbrk_r+0x1c>)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	602b      	str	r3, [r5, #0]
 8005000:	f7fb ff3a 	bl	8000e78 <_sbrk>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_sbrk_r+0x1a>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	b103      	cbz	r3, 800500e <_sbrk_r+0x1a>
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	2000070c 	.word	0x2000070c

08005014 <siprintf>:
 8005014:	b40e      	push	{r1, r2, r3}
 8005016:	b500      	push	{lr}
 8005018:	b09c      	sub	sp, #112	; 0x70
 800501a:	ab1d      	add	r3, sp, #116	; 0x74
 800501c:	9002      	str	r0, [sp, #8]
 800501e:	9006      	str	r0, [sp, #24]
 8005020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005024:	4809      	ldr	r0, [pc, #36]	; (800504c <siprintf+0x38>)
 8005026:	9107      	str	r1, [sp, #28]
 8005028:	9104      	str	r1, [sp, #16]
 800502a:	4909      	ldr	r1, [pc, #36]	; (8005050 <siprintf+0x3c>)
 800502c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005030:	9105      	str	r1, [sp, #20]
 8005032:	6800      	ldr	r0, [r0, #0]
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	a902      	add	r1, sp, #8
 8005038:	f000 f8a2 	bl	8005180 <_svfiprintf_r>
 800503c:	9b02      	ldr	r3, [sp, #8]
 800503e:	2200      	movs	r2, #0
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	b01c      	add	sp, #112	; 0x70
 8005044:	f85d eb04 	ldr.w	lr, [sp], #4
 8005048:	b003      	add	sp, #12
 800504a:	4770      	bx	lr
 800504c:	20000560 	.word	0x20000560
 8005050:	ffff0208 	.word	0xffff0208

08005054 <__malloc_lock>:
 8005054:	4801      	ldr	r0, [pc, #4]	; (800505c <__malloc_lock+0x8>)
 8005056:	f000 bb27 	b.w	80056a8 <__retarget_lock_acquire_recursive>
 800505a:	bf00      	nop
 800505c:	20000710 	.word	0x20000710

08005060 <__malloc_unlock>:
 8005060:	4801      	ldr	r0, [pc, #4]	; (8005068 <__malloc_unlock+0x8>)
 8005062:	f000 bb22 	b.w	80056aa <__retarget_lock_release_recursive>
 8005066:	bf00      	nop
 8005068:	20000710 	.word	0x20000710

0800506c <_realloc_r>:
 800506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005070:	4680      	mov	r8, r0
 8005072:	4614      	mov	r4, r2
 8005074:	460e      	mov	r6, r1
 8005076:	b921      	cbnz	r1, 8005082 <_realloc_r+0x16>
 8005078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800507c:	4611      	mov	r1, r2
 800507e:	f7ff bf45 	b.w	8004f0c <_malloc_r>
 8005082:	b92a      	cbnz	r2, 8005090 <_realloc_r+0x24>
 8005084:	f7ff fed6 	bl	8004e34 <_free_r>
 8005088:	4625      	mov	r5, r4
 800508a:	4628      	mov	r0, r5
 800508c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005090:	f000 fb26 	bl	80056e0 <_malloc_usable_size_r>
 8005094:	4284      	cmp	r4, r0
 8005096:	4607      	mov	r7, r0
 8005098:	d802      	bhi.n	80050a0 <_realloc_r+0x34>
 800509a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800509e:	d812      	bhi.n	80050c6 <_realloc_r+0x5a>
 80050a0:	4621      	mov	r1, r4
 80050a2:	4640      	mov	r0, r8
 80050a4:	f7ff ff32 	bl	8004f0c <_malloc_r>
 80050a8:	4605      	mov	r5, r0
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d0ed      	beq.n	800508a <_realloc_r+0x1e>
 80050ae:	42bc      	cmp	r4, r7
 80050b0:	4622      	mov	r2, r4
 80050b2:	4631      	mov	r1, r6
 80050b4:	bf28      	it	cs
 80050b6:	463a      	movcs	r2, r7
 80050b8:	f7ff fea6 	bl	8004e08 <memcpy>
 80050bc:	4631      	mov	r1, r6
 80050be:	4640      	mov	r0, r8
 80050c0:	f7ff feb8 	bl	8004e34 <_free_r>
 80050c4:	e7e1      	b.n	800508a <_realloc_r+0x1e>
 80050c6:	4635      	mov	r5, r6
 80050c8:	e7df      	b.n	800508a <_realloc_r+0x1e>

080050ca <__ssputs_r>:
 80050ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ce:	688e      	ldr	r6, [r1, #8]
 80050d0:	429e      	cmp	r6, r3
 80050d2:	4682      	mov	sl, r0
 80050d4:	460c      	mov	r4, r1
 80050d6:	4690      	mov	r8, r2
 80050d8:	461f      	mov	r7, r3
 80050da:	d838      	bhi.n	800514e <__ssputs_r+0x84>
 80050dc:	898a      	ldrh	r2, [r1, #12]
 80050de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050e2:	d032      	beq.n	800514a <__ssputs_r+0x80>
 80050e4:	6825      	ldr	r5, [r4, #0]
 80050e6:	6909      	ldr	r1, [r1, #16]
 80050e8:	eba5 0901 	sub.w	r9, r5, r1
 80050ec:	6965      	ldr	r5, [r4, #20]
 80050ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050f6:	3301      	adds	r3, #1
 80050f8:	444b      	add	r3, r9
 80050fa:	106d      	asrs	r5, r5, #1
 80050fc:	429d      	cmp	r5, r3
 80050fe:	bf38      	it	cc
 8005100:	461d      	movcc	r5, r3
 8005102:	0553      	lsls	r3, r2, #21
 8005104:	d531      	bpl.n	800516a <__ssputs_r+0xa0>
 8005106:	4629      	mov	r1, r5
 8005108:	f7ff ff00 	bl	8004f0c <_malloc_r>
 800510c:	4606      	mov	r6, r0
 800510e:	b950      	cbnz	r0, 8005126 <__ssputs_r+0x5c>
 8005110:	230c      	movs	r3, #12
 8005112:	f8ca 3000 	str.w	r3, [sl]
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	f04f 30ff 	mov.w	r0, #4294967295
 8005122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005126:	6921      	ldr	r1, [r4, #16]
 8005128:	464a      	mov	r2, r9
 800512a:	f7ff fe6d 	bl	8004e08 <memcpy>
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	6126      	str	r6, [r4, #16]
 800513c:	6165      	str	r5, [r4, #20]
 800513e:	444e      	add	r6, r9
 8005140:	eba5 0509 	sub.w	r5, r5, r9
 8005144:	6026      	str	r6, [r4, #0]
 8005146:	60a5      	str	r5, [r4, #8]
 8005148:	463e      	mov	r6, r7
 800514a:	42be      	cmp	r6, r7
 800514c:	d900      	bls.n	8005150 <__ssputs_r+0x86>
 800514e:	463e      	mov	r6, r7
 8005150:	6820      	ldr	r0, [r4, #0]
 8005152:	4632      	mov	r2, r6
 8005154:	4641      	mov	r1, r8
 8005156:	f000 faa9 	bl	80056ac <memmove>
 800515a:	68a3      	ldr	r3, [r4, #8]
 800515c:	1b9b      	subs	r3, r3, r6
 800515e:	60a3      	str	r3, [r4, #8]
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	4433      	add	r3, r6
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	2000      	movs	r0, #0
 8005168:	e7db      	b.n	8005122 <__ssputs_r+0x58>
 800516a:	462a      	mov	r2, r5
 800516c:	f7ff ff7e 	bl	800506c <_realloc_r>
 8005170:	4606      	mov	r6, r0
 8005172:	2800      	cmp	r0, #0
 8005174:	d1e1      	bne.n	800513a <__ssputs_r+0x70>
 8005176:	6921      	ldr	r1, [r4, #16]
 8005178:	4650      	mov	r0, sl
 800517a:	f7ff fe5b 	bl	8004e34 <_free_r>
 800517e:	e7c7      	b.n	8005110 <__ssputs_r+0x46>

08005180 <_svfiprintf_r>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	4698      	mov	r8, r3
 8005186:	898b      	ldrh	r3, [r1, #12]
 8005188:	061b      	lsls	r3, r3, #24
 800518a:	b09d      	sub	sp, #116	; 0x74
 800518c:	4607      	mov	r7, r0
 800518e:	460d      	mov	r5, r1
 8005190:	4614      	mov	r4, r2
 8005192:	d50e      	bpl.n	80051b2 <_svfiprintf_r+0x32>
 8005194:	690b      	ldr	r3, [r1, #16]
 8005196:	b963      	cbnz	r3, 80051b2 <_svfiprintf_r+0x32>
 8005198:	2140      	movs	r1, #64	; 0x40
 800519a:	f7ff feb7 	bl	8004f0c <_malloc_r>
 800519e:	6028      	str	r0, [r5, #0]
 80051a0:	6128      	str	r0, [r5, #16]
 80051a2:	b920      	cbnz	r0, 80051ae <_svfiprintf_r+0x2e>
 80051a4:	230c      	movs	r3, #12
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	e0d1      	b.n	8005352 <_svfiprintf_r+0x1d2>
 80051ae:	2340      	movs	r3, #64	; 0x40
 80051b0:	616b      	str	r3, [r5, #20]
 80051b2:	2300      	movs	r3, #0
 80051b4:	9309      	str	r3, [sp, #36]	; 0x24
 80051b6:	2320      	movs	r3, #32
 80051b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c0:	2330      	movs	r3, #48	; 0x30
 80051c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800536c <_svfiprintf_r+0x1ec>
 80051c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051ca:	f04f 0901 	mov.w	r9, #1
 80051ce:	4623      	mov	r3, r4
 80051d0:	469a      	mov	sl, r3
 80051d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051d6:	b10a      	cbz	r2, 80051dc <_svfiprintf_r+0x5c>
 80051d8:	2a25      	cmp	r2, #37	; 0x25
 80051da:	d1f9      	bne.n	80051d0 <_svfiprintf_r+0x50>
 80051dc:	ebba 0b04 	subs.w	fp, sl, r4
 80051e0:	d00b      	beq.n	80051fa <_svfiprintf_r+0x7a>
 80051e2:	465b      	mov	r3, fp
 80051e4:	4622      	mov	r2, r4
 80051e6:	4629      	mov	r1, r5
 80051e8:	4638      	mov	r0, r7
 80051ea:	f7ff ff6e 	bl	80050ca <__ssputs_r>
 80051ee:	3001      	adds	r0, #1
 80051f0:	f000 80aa 	beq.w	8005348 <_svfiprintf_r+0x1c8>
 80051f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051f6:	445a      	add	r2, fp
 80051f8:	9209      	str	r2, [sp, #36]	; 0x24
 80051fa:	f89a 3000 	ldrb.w	r3, [sl]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80a2 	beq.w	8005348 <_svfiprintf_r+0x1c8>
 8005204:	2300      	movs	r3, #0
 8005206:	f04f 32ff 	mov.w	r2, #4294967295
 800520a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800520e:	f10a 0a01 	add.w	sl, sl, #1
 8005212:	9304      	str	r3, [sp, #16]
 8005214:	9307      	str	r3, [sp, #28]
 8005216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800521a:	931a      	str	r3, [sp, #104]	; 0x68
 800521c:	4654      	mov	r4, sl
 800521e:	2205      	movs	r2, #5
 8005220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005224:	4851      	ldr	r0, [pc, #324]	; (800536c <_svfiprintf_r+0x1ec>)
 8005226:	f7fa fff3 	bl	8000210 <memchr>
 800522a:	9a04      	ldr	r2, [sp, #16]
 800522c:	b9d8      	cbnz	r0, 8005266 <_svfiprintf_r+0xe6>
 800522e:	06d0      	lsls	r0, r2, #27
 8005230:	bf44      	itt	mi
 8005232:	2320      	movmi	r3, #32
 8005234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005238:	0711      	lsls	r1, r2, #28
 800523a:	bf44      	itt	mi
 800523c:	232b      	movmi	r3, #43	; 0x2b
 800523e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005242:	f89a 3000 	ldrb.w	r3, [sl]
 8005246:	2b2a      	cmp	r3, #42	; 0x2a
 8005248:	d015      	beq.n	8005276 <_svfiprintf_r+0xf6>
 800524a:	9a07      	ldr	r2, [sp, #28]
 800524c:	4654      	mov	r4, sl
 800524e:	2000      	movs	r0, #0
 8005250:	f04f 0c0a 	mov.w	ip, #10
 8005254:	4621      	mov	r1, r4
 8005256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800525a:	3b30      	subs	r3, #48	; 0x30
 800525c:	2b09      	cmp	r3, #9
 800525e:	d94e      	bls.n	80052fe <_svfiprintf_r+0x17e>
 8005260:	b1b0      	cbz	r0, 8005290 <_svfiprintf_r+0x110>
 8005262:	9207      	str	r2, [sp, #28]
 8005264:	e014      	b.n	8005290 <_svfiprintf_r+0x110>
 8005266:	eba0 0308 	sub.w	r3, r0, r8
 800526a:	fa09 f303 	lsl.w	r3, r9, r3
 800526e:	4313      	orrs	r3, r2
 8005270:	9304      	str	r3, [sp, #16]
 8005272:	46a2      	mov	sl, r4
 8005274:	e7d2      	b.n	800521c <_svfiprintf_r+0x9c>
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	1d19      	adds	r1, r3, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	9103      	str	r1, [sp, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	bfbb      	ittet	lt
 8005282:	425b      	neglt	r3, r3
 8005284:	f042 0202 	orrlt.w	r2, r2, #2
 8005288:	9307      	strge	r3, [sp, #28]
 800528a:	9307      	strlt	r3, [sp, #28]
 800528c:	bfb8      	it	lt
 800528e:	9204      	strlt	r2, [sp, #16]
 8005290:	7823      	ldrb	r3, [r4, #0]
 8005292:	2b2e      	cmp	r3, #46	; 0x2e
 8005294:	d10c      	bne.n	80052b0 <_svfiprintf_r+0x130>
 8005296:	7863      	ldrb	r3, [r4, #1]
 8005298:	2b2a      	cmp	r3, #42	; 0x2a
 800529a:	d135      	bne.n	8005308 <_svfiprintf_r+0x188>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	1d1a      	adds	r2, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	9203      	str	r2, [sp, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bfb8      	it	lt
 80052a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80052ac:	3402      	adds	r4, #2
 80052ae:	9305      	str	r3, [sp, #20]
 80052b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800537c <_svfiprintf_r+0x1fc>
 80052b4:	7821      	ldrb	r1, [r4, #0]
 80052b6:	2203      	movs	r2, #3
 80052b8:	4650      	mov	r0, sl
 80052ba:	f7fa ffa9 	bl	8000210 <memchr>
 80052be:	b140      	cbz	r0, 80052d2 <_svfiprintf_r+0x152>
 80052c0:	2340      	movs	r3, #64	; 0x40
 80052c2:	eba0 000a 	sub.w	r0, r0, sl
 80052c6:	fa03 f000 	lsl.w	r0, r3, r0
 80052ca:	9b04      	ldr	r3, [sp, #16]
 80052cc:	4303      	orrs	r3, r0
 80052ce:	3401      	adds	r4, #1
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d6:	4826      	ldr	r0, [pc, #152]	; (8005370 <_svfiprintf_r+0x1f0>)
 80052d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052dc:	2206      	movs	r2, #6
 80052de:	f7fa ff97 	bl	8000210 <memchr>
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d038      	beq.n	8005358 <_svfiprintf_r+0x1d8>
 80052e6:	4b23      	ldr	r3, [pc, #140]	; (8005374 <_svfiprintf_r+0x1f4>)
 80052e8:	bb1b      	cbnz	r3, 8005332 <_svfiprintf_r+0x1b2>
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	3307      	adds	r3, #7
 80052ee:	f023 0307 	bic.w	r3, r3, #7
 80052f2:	3308      	adds	r3, #8
 80052f4:	9303      	str	r3, [sp, #12]
 80052f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f8:	4433      	add	r3, r6
 80052fa:	9309      	str	r3, [sp, #36]	; 0x24
 80052fc:	e767      	b.n	80051ce <_svfiprintf_r+0x4e>
 80052fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005302:	460c      	mov	r4, r1
 8005304:	2001      	movs	r0, #1
 8005306:	e7a5      	b.n	8005254 <_svfiprintf_r+0xd4>
 8005308:	2300      	movs	r3, #0
 800530a:	3401      	adds	r4, #1
 800530c:	9305      	str	r3, [sp, #20]
 800530e:	4619      	mov	r1, r3
 8005310:	f04f 0c0a 	mov.w	ip, #10
 8005314:	4620      	mov	r0, r4
 8005316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800531a:	3a30      	subs	r2, #48	; 0x30
 800531c:	2a09      	cmp	r2, #9
 800531e:	d903      	bls.n	8005328 <_svfiprintf_r+0x1a8>
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0c5      	beq.n	80052b0 <_svfiprintf_r+0x130>
 8005324:	9105      	str	r1, [sp, #20]
 8005326:	e7c3      	b.n	80052b0 <_svfiprintf_r+0x130>
 8005328:	fb0c 2101 	mla	r1, ip, r1, r2
 800532c:	4604      	mov	r4, r0
 800532e:	2301      	movs	r3, #1
 8005330:	e7f0      	b.n	8005314 <_svfiprintf_r+0x194>
 8005332:	ab03      	add	r3, sp, #12
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	462a      	mov	r2, r5
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <_svfiprintf_r+0x1f8>)
 800533a:	a904      	add	r1, sp, #16
 800533c:	4638      	mov	r0, r7
 800533e:	f3af 8000 	nop.w
 8005342:	1c42      	adds	r2, r0, #1
 8005344:	4606      	mov	r6, r0
 8005346:	d1d6      	bne.n	80052f6 <_svfiprintf_r+0x176>
 8005348:	89ab      	ldrh	r3, [r5, #12]
 800534a:	065b      	lsls	r3, r3, #25
 800534c:	f53f af2c 	bmi.w	80051a8 <_svfiprintf_r+0x28>
 8005350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005352:	b01d      	add	sp, #116	; 0x74
 8005354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005358:	ab03      	add	r3, sp, #12
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	462a      	mov	r2, r5
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <_svfiprintf_r+0x1f8>)
 8005360:	a904      	add	r1, sp, #16
 8005362:	4638      	mov	r0, r7
 8005364:	f000 f87a 	bl	800545c <_printf_i>
 8005368:	e7eb      	b.n	8005342 <_svfiprintf_r+0x1c2>
 800536a:	bf00      	nop
 800536c:	08008ca8 	.word	0x08008ca8
 8005370:	08008cb2 	.word	0x08008cb2
 8005374:	00000000 	.word	0x00000000
 8005378:	080050cb 	.word	0x080050cb
 800537c:	08008cae 	.word	0x08008cae

08005380 <_printf_common>:
 8005380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	4616      	mov	r6, r2
 8005386:	4699      	mov	r9, r3
 8005388:	688a      	ldr	r2, [r1, #8]
 800538a:	690b      	ldr	r3, [r1, #16]
 800538c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005390:	4293      	cmp	r3, r2
 8005392:	bfb8      	it	lt
 8005394:	4613      	movlt	r3, r2
 8005396:	6033      	str	r3, [r6, #0]
 8005398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800539c:	4607      	mov	r7, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	b10a      	cbz	r2, 80053a6 <_printf_common+0x26>
 80053a2:	3301      	adds	r3, #1
 80053a4:	6033      	str	r3, [r6, #0]
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	0699      	lsls	r1, r3, #26
 80053aa:	bf42      	ittt	mi
 80053ac:	6833      	ldrmi	r3, [r6, #0]
 80053ae:	3302      	addmi	r3, #2
 80053b0:	6033      	strmi	r3, [r6, #0]
 80053b2:	6825      	ldr	r5, [r4, #0]
 80053b4:	f015 0506 	ands.w	r5, r5, #6
 80053b8:	d106      	bne.n	80053c8 <_printf_common+0x48>
 80053ba:	f104 0a19 	add.w	sl, r4, #25
 80053be:	68e3      	ldr	r3, [r4, #12]
 80053c0:	6832      	ldr	r2, [r6, #0]
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	42ab      	cmp	r3, r5
 80053c6:	dc26      	bgt.n	8005416 <_printf_common+0x96>
 80053c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053cc:	1e13      	subs	r3, r2, #0
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	bf18      	it	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	0692      	lsls	r2, r2, #26
 80053d6:	d42b      	bmi.n	8005430 <_printf_common+0xb0>
 80053d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053dc:	4649      	mov	r1, r9
 80053de:	4638      	mov	r0, r7
 80053e0:	47c0      	blx	r8
 80053e2:	3001      	adds	r0, #1
 80053e4:	d01e      	beq.n	8005424 <_printf_common+0xa4>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	68e5      	ldr	r5, [r4, #12]
 80053ea:	6832      	ldr	r2, [r6, #0]
 80053ec:	f003 0306 	and.w	r3, r3, #6
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	bf08      	it	eq
 80053f4:	1aad      	subeq	r5, r5, r2
 80053f6:	68a3      	ldr	r3, [r4, #8]
 80053f8:	6922      	ldr	r2, [r4, #16]
 80053fa:	bf0c      	ite	eq
 80053fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005400:	2500      	movne	r5, #0
 8005402:	4293      	cmp	r3, r2
 8005404:	bfc4      	itt	gt
 8005406:	1a9b      	subgt	r3, r3, r2
 8005408:	18ed      	addgt	r5, r5, r3
 800540a:	2600      	movs	r6, #0
 800540c:	341a      	adds	r4, #26
 800540e:	42b5      	cmp	r5, r6
 8005410:	d11a      	bne.n	8005448 <_printf_common+0xc8>
 8005412:	2000      	movs	r0, #0
 8005414:	e008      	b.n	8005428 <_printf_common+0xa8>
 8005416:	2301      	movs	r3, #1
 8005418:	4652      	mov	r2, sl
 800541a:	4649      	mov	r1, r9
 800541c:	4638      	mov	r0, r7
 800541e:	47c0      	blx	r8
 8005420:	3001      	adds	r0, #1
 8005422:	d103      	bne.n	800542c <_printf_common+0xac>
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542c:	3501      	adds	r5, #1
 800542e:	e7c6      	b.n	80053be <_printf_common+0x3e>
 8005430:	18e1      	adds	r1, r4, r3
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	2030      	movs	r0, #48	; 0x30
 8005436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800543a:	4422      	add	r2, r4
 800543c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005444:	3302      	adds	r3, #2
 8005446:	e7c7      	b.n	80053d8 <_printf_common+0x58>
 8005448:	2301      	movs	r3, #1
 800544a:	4622      	mov	r2, r4
 800544c:	4649      	mov	r1, r9
 800544e:	4638      	mov	r0, r7
 8005450:	47c0      	blx	r8
 8005452:	3001      	adds	r0, #1
 8005454:	d0e6      	beq.n	8005424 <_printf_common+0xa4>
 8005456:	3601      	adds	r6, #1
 8005458:	e7d9      	b.n	800540e <_printf_common+0x8e>
	...

0800545c <_printf_i>:
 800545c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005460:	7e0f      	ldrb	r7, [r1, #24]
 8005462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005464:	2f78      	cmp	r7, #120	; 0x78
 8005466:	4691      	mov	r9, r2
 8005468:	4680      	mov	r8, r0
 800546a:	460c      	mov	r4, r1
 800546c:	469a      	mov	sl, r3
 800546e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005472:	d807      	bhi.n	8005484 <_printf_i+0x28>
 8005474:	2f62      	cmp	r7, #98	; 0x62
 8005476:	d80a      	bhi.n	800548e <_printf_i+0x32>
 8005478:	2f00      	cmp	r7, #0
 800547a:	f000 80d8 	beq.w	800562e <_printf_i+0x1d2>
 800547e:	2f58      	cmp	r7, #88	; 0x58
 8005480:	f000 80a3 	beq.w	80055ca <_printf_i+0x16e>
 8005484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800548c:	e03a      	b.n	8005504 <_printf_i+0xa8>
 800548e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005492:	2b15      	cmp	r3, #21
 8005494:	d8f6      	bhi.n	8005484 <_printf_i+0x28>
 8005496:	a101      	add	r1, pc, #4	; (adr r1, 800549c <_printf_i+0x40>)
 8005498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800549c:	080054f5 	.word	0x080054f5
 80054a0:	08005509 	.word	0x08005509
 80054a4:	08005485 	.word	0x08005485
 80054a8:	08005485 	.word	0x08005485
 80054ac:	08005485 	.word	0x08005485
 80054b0:	08005485 	.word	0x08005485
 80054b4:	08005509 	.word	0x08005509
 80054b8:	08005485 	.word	0x08005485
 80054bc:	08005485 	.word	0x08005485
 80054c0:	08005485 	.word	0x08005485
 80054c4:	08005485 	.word	0x08005485
 80054c8:	08005615 	.word	0x08005615
 80054cc:	08005539 	.word	0x08005539
 80054d0:	080055f7 	.word	0x080055f7
 80054d4:	08005485 	.word	0x08005485
 80054d8:	08005485 	.word	0x08005485
 80054dc:	08005637 	.word	0x08005637
 80054e0:	08005485 	.word	0x08005485
 80054e4:	08005539 	.word	0x08005539
 80054e8:	08005485 	.word	0x08005485
 80054ec:	08005485 	.word	0x08005485
 80054f0:	080055ff 	.word	0x080055ff
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	602a      	str	r2, [r5, #0]
 80054fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005504:	2301      	movs	r3, #1
 8005506:	e0a3      	b.n	8005650 <_printf_i+0x1f4>
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	6829      	ldr	r1, [r5, #0]
 800550c:	0606      	lsls	r6, r0, #24
 800550e:	f101 0304 	add.w	r3, r1, #4
 8005512:	d50a      	bpl.n	800552a <_printf_i+0xce>
 8005514:	680e      	ldr	r6, [r1, #0]
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	2e00      	cmp	r6, #0
 800551a:	da03      	bge.n	8005524 <_printf_i+0xc8>
 800551c:	232d      	movs	r3, #45	; 0x2d
 800551e:	4276      	negs	r6, r6
 8005520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005524:	485e      	ldr	r0, [pc, #376]	; (80056a0 <_printf_i+0x244>)
 8005526:	230a      	movs	r3, #10
 8005528:	e019      	b.n	800555e <_printf_i+0x102>
 800552a:	680e      	ldr	r6, [r1, #0]
 800552c:	602b      	str	r3, [r5, #0]
 800552e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005532:	bf18      	it	ne
 8005534:	b236      	sxthne	r6, r6
 8005536:	e7ef      	b.n	8005518 <_printf_i+0xbc>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	6820      	ldr	r0, [r4, #0]
 800553c:	1d19      	adds	r1, r3, #4
 800553e:	6029      	str	r1, [r5, #0]
 8005540:	0601      	lsls	r1, r0, #24
 8005542:	d501      	bpl.n	8005548 <_printf_i+0xec>
 8005544:	681e      	ldr	r6, [r3, #0]
 8005546:	e002      	b.n	800554e <_printf_i+0xf2>
 8005548:	0646      	lsls	r6, r0, #25
 800554a:	d5fb      	bpl.n	8005544 <_printf_i+0xe8>
 800554c:	881e      	ldrh	r6, [r3, #0]
 800554e:	4854      	ldr	r0, [pc, #336]	; (80056a0 <_printf_i+0x244>)
 8005550:	2f6f      	cmp	r7, #111	; 0x6f
 8005552:	bf0c      	ite	eq
 8005554:	2308      	moveq	r3, #8
 8005556:	230a      	movne	r3, #10
 8005558:	2100      	movs	r1, #0
 800555a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800555e:	6865      	ldr	r5, [r4, #4]
 8005560:	60a5      	str	r5, [r4, #8]
 8005562:	2d00      	cmp	r5, #0
 8005564:	bfa2      	ittt	ge
 8005566:	6821      	ldrge	r1, [r4, #0]
 8005568:	f021 0104 	bicge.w	r1, r1, #4
 800556c:	6021      	strge	r1, [r4, #0]
 800556e:	b90e      	cbnz	r6, 8005574 <_printf_i+0x118>
 8005570:	2d00      	cmp	r5, #0
 8005572:	d04d      	beq.n	8005610 <_printf_i+0x1b4>
 8005574:	4615      	mov	r5, r2
 8005576:	fbb6 f1f3 	udiv	r1, r6, r3
 800557a:	fb03 6711 	mls	r7, r3, r1, r6
 800557e:	5dc7      	ldrb	r7, [r0, r7]
 8005580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005584:	4637      	mov	r7, r6
 8005586:	42bb      	cmp	r3, r7
 8005588:	460e      	mov	r6, r1
 800558a:	d9f4      	bls.n	8005576 <_printf_i+0x11a>
 800558c:	2b08      	cmp	r3, #8
 800558e:	d10b      	bne.n	80055a8 <_printf_i+0x14c>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	07de      	lsls	r6, r3, #31
 8005594:	d508      	bpl.n	80055a8 <_printf_i+0x14c>
 8005596:	6923      	ldr	r3, [r4, #16]
 8005598:	6861      	ldr	r1, [r4, #4]
 800559a:	4299      	cmp	r1, r3
 800559c:	bfde      	ittt	le
 800559e:	2330      	movle	r3, #48	; 0x30
 80055a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055a8:	1b52      	subs	r2, r2, r5
 80055aa:	6122      	str	r2, [r4, #16]
 80055ac:	f8cd a000 	str.w	sl, [sp]
 80055b0:	464b      	mov	r3, r9
 80055b2:	aa03      	add	r2, sp, #12
 80055b4:	4621      	mov	r1, r4
 80055b6:	4640      	mov	r0, r8
 80055b8:	f7ff fee2 	bl	8005380 <_printf_common>
 80055bc:	3001      	adds	r0, #1
 80055be:	d14c      	bne.n	800565a <_printf_i+0x1fe>
 80055c0:	f04f 30ff 	mov.w	r0, #4294967295
 80055c4:	b004      	add	sp, #16
 80055c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ca:	4835      	ldr	r0, [pc, #212]	; (80056a0 <_printf_i+0x244>)
 80055cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055d0:	6829      	ldr	r1, [r5, #0]
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80055d8:	6029      	str	r1, [r5, #0]
 80055da:	061d      	lsls	r5, r3, #24
 80055dc:	d514      	bpl.n	8005608 <_printf_i+0x1ac>
 80055de:	07df      	lsls	r7, r3, #31
 80055e0:	bf44      	itt	mi
 80055e2:	f043 0320 	orrmi.w	r3, r3, #32
 80055e6:	6023      	strmi	r3, [r4, #0]
 80055e8:	b91e      	cbnz	r6, 80055f2 <_printf_i+0x196>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	f023 0320 	bic.w	r3, r3, #32
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	2310      	movs	r3, #16
 80055f4:	e7b0      	b.n	8005558 <_printf_i+0xfc>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	f043 0320 	orr.w	r3, r3, #32
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	2378      	movs	r3, #120	; 0x78
 8005600:	4828      	ldr	r0, [pc, #160]	; (80056a4 <_printf_i+0x248>)
 8005602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005606:	e7e3      	b.n	80055d0 <_printf_i+0x174>
 8005608:	0659      	lsls	r1, r3, #25
 800560a:	bf48      	it	mi
 800560c:	b2b6      	uxthmi	r6, r6
 800560e:	e7e6      	b.n	80055de <_printf_i+0x182>
 8005610:	4615      	mov	r5, r2
 8005612:	e7bb      	b.n	800558c <_printf_i+0x130>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	6826      	ldr	r6, [r4, #0]
 8005618:	6961      	ldr	r1, [r4, #20]
 800561a:	1d18      	adds	r0, r3, #4
 800561c:	6028      	str	r0, [r5, #0]
 800561e:	0635      	lsls	r5, r6, #24
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	d501      	bpl.n	8005628 <_printf_i+0x1cc>
 8005624:	6019      	str	r1, [r3, #0]
 8005626:	e002      	b.n	800562e <_printf_i+0x1d2>
 8005628:	0670      	lsls	r0, r6, #25
 800562a:	d5fb      	bpl.n	8005624 <_printf_i+0x1c8>
 800562c:	8019      	strh	r1, [r3, #0]
 800562e:	2300      	movs	r3, #0
 8005630:	6123      	str	r3, [r4, #16]
 8005632:	4615      	mov	r5, r2
 8005634:	e7ba      	b.n	80055ac <_printf_i+0x150>
 8005636:	682b      	ldr	r3, [r5, #0]
 8005638:	1d1a      	adds	r2, r3, #4
 800563a:	602a      	str	r2, [r5, #0]
 800563c:	681d      	ldr	r5, [r3, #0]
 800563e:	6862      	ldr	r2, [r4, #4]
 8005640:	2100      	movs	r1, #0
 8005642:	4628      	mov	r0, r5
 8005644:	f7fa fde4 	bl	8000210 <memchr>
 8005648:	b108      	cbz	r0, 800564e <_printf_i+0x1f2>
 800564a:	1b40      	subs	r0, r0, r5
 800564c:	6060      	str	r0, [r4, #4]
 800564e:	6863      	ldr	r3, [r4, #4]
 8005650:	6123      	str	r3, [r4, #16]
 8005652:	2300      	movs	r3, #0
 8005654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005658:	e7a8      	b.n	80055ac <_printf_i+0x150>
 800565a:	6923      	ldr	r3, [r4, #16]
 800565c:	462a      	mov	r2, r5
 800565e:	4649      	mov	r1, r9
 8005660:	4640      	mov	r0, r8
 8005662:	47d0      	blx	sl
 8005664:	3001      	adds	r0, #1
 8005666:	d0ab      	beq.n	80055c0 <_printf_i+0x164>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	079b      	lsls	r3, r3, #30
 800566c:	d413      	bmi.n	8005696 <_printf_i+0x23a>
 800566e:	68e0      	ldr	r0, [r4, #12]
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	4298      	cmp	r0, r3
 8005674:	bfb8      	it	lt
 8005676:	4618      	movlt	r0, r3
 8005678:	e7a4      	b.n	80055c4 <_printf_i+0x168>
 800567a:	2301      	movs	r3, #1
 800567c:	4632      	mov	r2, r6
 800567e:	4649      	mov	r1, r9
 8005680:	4640      	mov	r0, r8
 8005682:	47d0      	blx	sl
 8005684:	3001      	adds	r0, #1
 8005686:	d09b      	beq.n	80055c0 <_printf_i+0x164>
 8005688:	3501      	adds	r5, #1
 800568a:	68e3      	ldr	r3, [r4, #12]
 800568c:	9903      	ldr	r1, [sp, #12]
 800568e:	1a5b      	subs	r3, r3, r1
 8005690:	42ab      	cmp	r3, r5
 8005692:	dcf2      	bgt.n	800567a <_printf_i+0x21e>
 8005694:	e7eb      	b.n	800566e <_printf_i+0x212>
 8005696:	2500      	movs	r5, #0
 8005698:	f104 0619 	add.w	r6, r4, #25
 800569c:	e7f5      	b.n	800568a <_printf_i+0x22e>
 800569e:	bf00      	nop
 80056a0:	08008cb9 	.word	0x08008cb9
 80056a4:	08008cca 	.word	0x08008cca

080056a8 <__retarget_lock_acquire_recursive>:
 80056a8:	4770      	bx	lr

080056aa <__retarget_lock_release_recursive>:
 80056aa:	4770      	bx	lr

080056ac <memmove>:
 80056ac:	4288      	cmp	r0, r1
 80056ae:	b510      	push	{r4, lr}
 80056b0:	eb01 0402 	add.w	r4, r1, r2
 80056b4:	d902      	bls.n	80056bc <memmove+0x10>
 80056b6:	4284      	cmp	r4, r0
 80056b8:	4623      	mov	r3, r4
 80056ba:	d807      	bhi.n	80056cc <memmove+0x20>
 80056bc:	1e43      	subs	r3, r0, #1
 80056be:	42a1      	cmp	r1, r4
 80056c0:	d008      	beq.n	80056d4 <memmove+0x28>
 80056c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ca:	e7f8      	b.n	80056be <memmove+0x12>
 80056cc:	4402      	add	r2, r0
 80056ce:	4601      	mov	r1, r0
 80056d0:	428a      	cmp	r2, r1
 80056d2:	d100      	bne.n	80056d6 <memmove+0x2a>
 80056d4:	bd10      	pop	{r4, pc}
 80056d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056de:	e7f7      	b.n	80056d0 <memmove+0x24>

080056e0 <_malloc_usable_size_r>:
 80056e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e4:	1f18      	subs	r0, r3, #4
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bfbc      	itt	lt
 80056ea:	580b      	ldrlt	r3, [r1, r0]
 80056ec:	18c0      	addlt	r0, r0, r3
 80056ee:	4770      	bx	lr

080056f0 <expf>:
 80056f0:	b508      	push	{r3, lr}
 80056f2:	ed2d 8b02 	vpush	{d8}
 80056f6:	eef0 8a40 	vmov.f32	s17, s0
 80056fa:	f000 f82f 	bl	800575c <__ieee754_expf>
 80056fe:	eeb0 8a40 	vmov.f32	s16, s0
 8005702:	eeb0 0a68 	vmov.f32	s0, s17
 8005706:	f000 f919 	bl	800593c <finitef>
 800570a:	b160      	cbz	r0, 8005726 <expf+0x36>
 800570c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800574c <expf+0x5c>
 8005710:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005718:	dd0a      	ble.n	8005730 <expf+0x40>
 800571a:	f7ff fb4b 	bl	8004db4 <__errno>
 800571e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8005750 <expf+0x60>
 8005722:	2322      	movs	r3, #34	; 0x22
 8005724:	6003      	str	r3, [r0, #0]
 8005726:	eeb0 0a48 	vmov.f32	s0, s16
 800572a:	ecbd 8b02 	vpop	{d8}
 800572e:	bd08      	pop	{r3, pc}
 8005730:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005754 <expf+0x64>
 8005734:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	d5f3      	bpl.n	8005726 <expf+0x36>
 800573e:	f7ff fb39 	bl	8004db4 <__errno>
 8005742:	2322      	movs	r3, #34	; 0x22
 8005744:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8005758 <expf+0x68>
 8005748:	6003      	str	r3, [r0, #0]
 800574a:	e7ec      	b.n	8005726 <expf+0x36>
 800574c:	42b17180 	.word	0x42b17180
 8005750:	7f800000 	.word	0x7f800000
 8005754:	c2cff1b5 	.word	0xc2cff1b5
 8005758:	00000000 	.word	0x00000000

0800575c <__ieee754_expf>:
 800575c:	ee10 2a10 	vmov	r2, s0
 8005760:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8005764:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005768:	d902      	bls.n	8005770 <__ieee754_expf+0x14>
 800576a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800576e:	4770      	bx	lr
 8005770:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8005774:	d106      	bne.n	8005784 <__ieee754_expf+0x28>
 8005776:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80058b0 <__ieee754_expf+0x154>
 800577a:	2b00      	cmp	r3, #0
 800577c:	bf18      	it	ne
 800577e:	eeb0 0a67 	vmovne.f32	s0, s15
 8005782:	4770      	bx	lr
 8005784:	484b      	ldr	r0, [pc, #300]	; (80058b4 <__ieee754_expf+0x158>)
 8005786:	4282      	cmp	r2, r0
 8005788:	dd02      	ble.n	8005790 <__ieee754_expf+0x34>
 800578a:	2000      	movs	r0, #0
 800578c:	f000 b8d0 	b.w	8005930 <__math_oflowf>
 8005790:	2a00      	cmp	r2, #0
 8005792:	da05      	bge.n	80057a0 <__ieee754_expf+0x44>
 8005794:	4a48      	ldr	r2, [pc, #288]	; (80058b8 <__ieee754_expf+0x15c>)
 8005796:	4291      	cmp	r1, r2
 8005798:	d902      	bls.n	80057a0 <__ieee754_expf+0x44>
 800579a:	2000      	movs	r0, #0
 800579c:	f000 b8c2 	b.w	8005924 <__math_uflowf>
 80057a0:	4a46      	ldr	r2, [pc, #280]	; (80058bc <__ieee754_expf+0x160>)
 80057a2:	4291      	cmp	r1, r2
 80057a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80057a8:	d952      	bls.n	8005850 <__ieee754_expf+0xf4>
 80057aa:	4a45      	ldr	r2, [pc, #276]	; (80058c0 <__ieee754_expf+0x164>)
 80057ac:	4291      	cmp	r1, r2
 80057ae:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80057b2:	d834      	bhi.n	800581e <__ieee754_expf+0xc2>
 80057b4:	4943      	ldr	r1, [pc, #268]	; (80058c4 <__ieee754_expf+0x168>)
 80057b6:	4411      	add	r1, r2
 80057b8:	ed91 7a00 	vldr	s14, [r1]
 80057bc:	4942      	ldr	r1, [pc, #264]	; (80058c8 <__ieee754_expf+0x16c>)
 80057be:	440a      	add	r2, r1
 80057c0:	edd2 7a00 	vldr	s15, [r2]
 80057c4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80057c8:	f1c3 0201 	rsb	r2, r3, #1
 80057cc:	1ad2      	subs	r2, r2, r3
 80057ce:	ee37 0a67 	vsub.f32	s0, s14, s15
 80057d2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80057d6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80058cc <__ieee754_expf+0x170>
 80057da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058d0 <__ieee754_expf+0x174>
 80057de:	eee6 6a05 	vfma.f32	s13, s12, s10
 80057e2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80058d4 <__ieee754_expf+0x178>
 80057e6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80057ea:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80058d8 <__ieee754_expf+0x17c>
 80057ee:	eee5 6a06 	vfma.f32	s13, s10, s12
 80057f2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80058dc <__ieee754_expf+0x180>
 80057f6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80057fa:	eef0 6a40 	vmov.f32	s13, s0
 80057fe:	eee5 6a46 	vfms.f32	s13, s10, s12
 8005802:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005806:	ee20 5a26 	vmul.f32	s10, s0, s13
 800580a:	bb92      	cbnz	r2, 8005872 <__ieee754_expf+0x116>
 800580c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8005810:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8005814:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005818:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800581c:	4770      	bx	lr
 800581e:	4b30      	ldr	r3, [pc, #192]	; (80058e0 <__ieee754_expf+0x184>)
 8005820:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80058e4 <__ieee754_expf+0x188>
 8005824:	eddf 6a30 	vldr	s13, [pc, #192]	; 80058e8 <__ieee754_expf+0x18c>
 8005828:	4413      	add	r3, r2
 800582a:	edd3 7a00 	vldr	s15, [r3]
 800582e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005832:	eeb0 7a40 	vmov.f32	s14, s0
 8005836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800583a:	ee17 2a90 	vmov	r2, s15
 800583e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005842:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005846:	eddf 6a29 	vldr	s13, [pc, #164]	; 80058ec <__ieee754_expf+0x190>
 800584a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800584e:	e7be      	b.n	80057ce <__ieee754_expf+0x72>
 8005850:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8005854:	d20b      	bcs.n	800586e <__ieee754_expf+0x112>
 8005856:	eddf 6a26 	vldr	s13, [pc, #152]	; 80058f0 <__ieee754_expf+0x194>
 800585a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800585e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8005862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005866:	dd02      	ble.n	800586e <__ieee754_expf+0x112>
 8005868:	ee30 0a25 	vadd.f32	s0, s0, s11
 800586c:	4770      	bx	lr
 800586e:	2200      	movs	r2, #0
 8005870:	e7af      	b.n	80057d2 <__ieee754_expf+0x76>
 8005872:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005876:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800587a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800587e:	bfb8      	it	lt
 8005880:	3264      	addlt	r2, #100	; 0x64
 8005882:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005886:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800588a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800588e:	ee17 3a90 	vmov	r3, s15
 8005892:	bfab      	itete	ge
 8005894:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8005898:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800589c:	ee00 3a10 	vmovge	s0, r3
 80058a0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80058f4 <__ieee754_expf+0x198>
 80058a4:	bfbc      	itt	lt
 80058a6:	ee00 3a10 	vmovlt	s0, r3
 80058aa:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80058ae:	4770      	bx	lr
 80058b0:	00000000 	.word	0x00000000
 80058b4:	42b17217 	.word	0x42b17217
 80058b8:	42cff1b5 	.word	0x42cff1b5
 80058bc:	3eb17218 	.word	0x3eb17218
 80058c0:	3f851591 	.word	0x3f851591
 80058c4:	08008ce4 	.word	0x08008ce4
 80058c8:	08008cec 	.word	0x08008cec
 80058cc:	3331bb4c 	.word	0x3331bb4c
 80058d0:	b5ddea0e 	.word	0xb5ddea0e
 80058d4:	388ab355 	.word	0x388ab355
 80058d8:	bb360b61 	.word	0xbb360b61
 80058dc:	3e2aaaab 	.word	0x3e2aaaab
 80058e0:	08008cdc 	.word	0x08008cdc
 80058e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80058e8:	3f317180 	.word	0x3f317180
 80058ec:	3717f7d1 	.word	0x3717f7d1
 80058f0:	7149f2ca 	.word	0x7149f2ca
 80058f4:	0d800000 	.word	0x0d800000

080058f8 <with_errnof>:
 80058f8:	b513      	push	{r0, r1, r4, lr}
 80058fa:	4604      	mov	r4, r0
 80058fc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005900:	f7ff fa58 	bl	8004db4 <__errno>
 8005904:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005908:	6004      	str	r4, [r0, #0]
 800590a:	b002      	add	sp, #8
 800590c:	bd10      	pop	{r4, pc}

0800590e <xflowf>:
 800590e:	b130      	cbz	r0, 800591e <xflowf+0x10>
 8005910:	eef1 7a40 	vneg.f32	s15, s0
 8005914:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005918:	2022      	movs	r0, #34	; 0x22
 800591a:	f7ff bfed 	b.w	80058f8 <with_errnof>
 800591e:	eef0 7a40 	vmov.f32	s15, s0
 8005922:	e7f7      	b.n	8005914 <xflowf+0x6>

08005924 <__math_uflowf>:
 8005924:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800592c <__math_uflowf+0x8>
 8005928:	f7ff bff1 	b.w	800590e <xflowf>
 800592c:	10000000 	.word	0x10000000

08005930 <__math_oflowf>:
 8005930:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005938 <__math_oflowf+0x8>
 8005934:	f7ff bfeb 	b.w	800590e <xflowf>
 8005938:	70000000 	.word	0x70000000

0800593c <finitef>:
 800593c:	b082      	sub	sp, #8
 800593e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005942:	9801      	ldr	r0, [sp, #4]
 8005944:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005948:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800594c:	bfac      	ite	ge
 800594e:	2000      	movge	r0, #0
 8005950:	2001      	movlt	r0, #1
 8005952:	b002      	add	sp, #8
 8005954:	4770      	bx	lr
	...

08005958 <_init>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr

08005964 <_fini>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr
